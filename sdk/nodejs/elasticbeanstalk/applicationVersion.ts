// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {Bucket} from "../s3/bucket";
import {Application} from "./application";

export class ApplicationVersion extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationVersionState, opts?: pulumi.CustomResourceOptions): ApplicationVersion {
        return new ApplicationVersion(name, <any>state, { ...opts, id: id });
    }

    public readonly application: pulumi.Output<Application>;
    public readonly bucket: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly forceDelete: pulumi.Output<boolean | undefined>;
    public readonly key: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;

    /**
     * Create a ApplicationVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationVersionArgs | ApplicationVersionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ApplicationVersionState = argsOrState as ApplicationVersionState | undefined;
            inputs["application"] = state ? state.application : undefined;
            inputs["bucket"] = state ? state.bucket : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["forceDelete"] = state ? state.forceDelete : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ApplicationVersionArgs | undefined;
            if (!args || args.application === undefined) {
                throw new Error("Missing required property 'application'");
            }
            if (!args || args.bucket === undefined) {
                throw new Error("Missing required property 'bucket'");
            }
            if (!args || args.key === undefined) {
                throw new Error("Missing required property 'key'");
            }
            inputs["application"] = args ? args.application : undefined;
            inputs["bucket"] = args ? args.bucket : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["forceDelete"] = args ? args.forceDelete : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        super("aws:elasticbeanstalk/applicationVersion:ApplicationVersion", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationVersion resources.
 */
export interface ApplicationVersionState {
    readonly application?: pulumi.Input<Application>;
    readonly bucket?: pulumi.Input<string | Bucket>;
    readonly description?: pulumi.Input<string>;
    readonly forceDelete?: pulumi.Input<boolean>;
    readonly key?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationVersion resource.
 */
export interface ApplicationVersionArgs {
    readonly application: pulumi.Input<Application>;
    readonly bucket: pulumi.Input<string | Bucket>;
    readonly description?: pulumi.Input<string>;
    readonly forceDelete?: pulumi.Input<boolean>;
    readonly key: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
}
