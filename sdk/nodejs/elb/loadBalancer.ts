// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elb/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    public readonly accessLogs!: pulumi.Output<outputs.elb.LoadBalancerAccessLogs | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly availabilityZones!: pulumi.Output<string[]>;
    public readonly connectionDraining!: pulumi.Output<boolean | undefined>;
    public readonly connectionDrainingTimeout!: pulumi.Output<number | undefined>;
    public readonly crossZoneLoadBalancing!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly healthCheck!: pulumi.Output<outputs.elb.LoadBalancerHealthCheck>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly instances!: pulumi.Output<string[]>;
    public readonly internal!: pulumi.Output<boolean>;
    public readonly listeners!: pulumi.Output<outputs.elb.LoadBalancerListener[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly sourceSecurityGroup!: pulumi.Output<string>;
    public /*out*/ readonly sourceSecurityGroupId!: pulumi.Output<string>;
    public readonly subnets!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            inputs["accessLogs"] = state ? state.accessLogs : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["connectionDraining"] = state ? state.connectionDraining : undefined;
            inputs["connectionDrainingTimeout"] = state ? state.connectionDrainingTimeout : undefined;
            inputs["crossZoneLoadBalancing"] = state ? state.crossZoneLoadBalancing : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["internal"] = state ? state.internal : undefined;
            inputs["listeners"] = state ? state.listeners : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["sourceSecurityGroup"] = state ? state.sourceSecurityGroup : undefined;
            inputs["sourceSecurityGroupId"] = state ? state.sourceSecurityGroupId : undefined;
            inputs["subnets"] = state ? state.subnets : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if (!args || args.listeners === undefined) {
                throw new Error("Missing required property 'listeners'");
            }
            inputs["accessLogs"] = args ? args.accessLogs : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["connectionDraining"] = args ? args.connectionDraining : undefined;
            inputs["connectionDrainingTimeout"] = args ? args.connectionDrainingTimeout : undefined;
            inputs["crossZoneLoadBalancing"] = args ? args.crossZoneLoadBalancing : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            inputs["instances"] = args ? args.instances : undefined;
            inputs["internal"] = args ? args.internal : undefined;
            inputs["listeners"] = args ? args.listeners : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["sourceSecurityGroup"] = args ? args.sourceSecurityGroup : undefined;
            inputs["subnets"] = args ? args.subnets : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["sourceSecurityGroupId"] = undefined /*out*/;
            inputs["zoneId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "aws:elasticloadbalancing/loadBalancer:LoadBalancer" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(LoadBalancer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    readonly accessLogs?: pulumi.Input<inputs.elb.LoadBalancerAccessLogs>;
    readonly arn?: pulumi.Input<string>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly connectionDraining?: pulumi.Input<boolean>;
    readonly connectionDrainingTimeout?: pulumi.Input<number>;
    readonly crossZoneLoadBalancing?: pulumi.Input<boolean>;
    readonly dnsName?: pulumi.Input<string>;
    readonly healthCheck?: pulumi.Input<inputs.elb.LoadBalancerHealthCheck>;
    readonly idleTimeout?: pulumi.Input<number>;
    readonly instances?: pulumi.Input<pulumi.Input<string>[]>;
    readonly internal?: pulumi.Input<boolean>;
    readonly listeners?: pulumi.Input<pulumi.Input<inputs.elb.LoadBalancerListener>[]>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly sourceSecurityGroup?: pulumi.Input<string>;
    readonly sourceSecurityGroupId?: pulumi.Input<string>;
    readonly subnets?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    readonly accessLogs?: pulumi.Input<inputs.elb.LoadBalancerAccessLogs>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly connectionDraining?: pulumi.Input<boolean>;
    readonly connectionDrainingTimeout?: pulumi.Input<number>;
    readonly crossZoneLoadBalancing?: pulumi.Input<boolean>;
    readonly healthCheck?: pulumi.Input<inputs.elb.LoadBalancerHealthCheck>;
    readonly idleTimeout?: pulumi.Input<number>;
    readonly instances?: pulumi.Input<pulumi.Input<string>[]>;
    readonly internal?: pulumi.Input<boolean>;
    readonly listeners: pulumi.Input<pulumi.Input<inputs.elb.LoadBalancerListener>[]>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly sourceSecurityGroup?: pulumi.Input<string>;
    readonly subnets?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
