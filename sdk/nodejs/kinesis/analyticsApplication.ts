// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {ARN} from "../index";

export class AnalyticsApplication extends pulumi.CustomResource {
    /**
     * Get an existing AnalyticsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnalyticsApplicationState, opts?: pulumi.CustomResourceOptions): AnalyticsApplication {
        return new AnalyticsApplication(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<ARN>;
    public readonly cloudwatchLoggingOptions: pulumi.Output<{ id: string, logStreamArn: string, roleArn: string } | undefined>;
    public readonly code: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTimestamp: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly inputs: pulumi.Output<{ id: string, kinesisFirehose?: { resourceArn: string, roleArn: string }, kinesisStream?: { resourceArn: string, roleArn: string }, namePrefix: string, parallelism?: { count: number }, processingConfiguration?: { lambda: { resourceArn: string, roleArn: string } }, schema: { recordColumns: { mapping?: string, name: string, sqlType: string }[], recordEncoding?: string, recordFormat: { mappingParameters?: { csv?: { recordColumnDelimiter: string, recordRowDelimiter: string }, json?: { recordRowPath: string } }, recordFormatType: string } }, startingPositionConfigurations: { startingPosition: string }[], streamNames: string[] } | undefined>;
    public /*out*/ readonly lastUpdateTimestamp: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly outputs: pulumi.Output<{ id: string, kinesisFirehose?: { resourceArn: string, roleArn: string }, kinesisStream?: { resourceArn: string, roleArn: string }, lambda?: { resourceArn: string, roleArn: string }, name: string, schema: { recordFormatType?: string } }[] | undefined>;
    public readonly referenceDataSources: pulumi.Output<{ id: string, s3: { bucketArn: string, fileKey: string, roleArn: string }, schema: { recordColumns: { mapping?: string, name: string, sqlType: string }[], recordEncoding?: string, recordFormat: { mappingParameters?: { csv?: { recordColumnDelimiter: string, recordRowDelimiter: string }, json?: { recordRowPath: string } }, recordFormatType: string } }, tableName: string } | undefined>;
    public /*out*/ readonly status: pulumi.Output<string>;
    public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a AnalyticsApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AnalyticsApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnalyticsApplicationArgs | AnalyticsApplicationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AnalyticsApplicationState = argsOrState as AnalyticsApplicationState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudwatchLoggingOptions"] = state ? state.cloudwatchLoggingOptions : undefined;
            inputs["code"] = state ? state.code : undefined;
            inputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["inputs"] = state ? state.inputs : undefined;
            inputs["lastUpdateTimestamp"] = state ? state.lastUpdateTimestamp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["outputs"] = state ? state.outputs : undefined;
            inputs["referenceDataSources"] = state ? state.referenceDataSources : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AnalyticsApplicationArgs | undefined;
            inputs["cloudwatchLoggingOptions"] = args ? args.cloudwatchLoggingOptions : undefined;
            inputs["code"] = args ? args.code : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["inputs"] = args ? args.inputs : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["outputs"] = args ? args.outputs : undefined;
            inputs["referenceDataSources"] = args ? args.referenceDataSources : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createTimestamp"] = undefined /*out*/;
            inputs["lastUpdateTimestamp"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        super("aws:kinesis/analyticsApplication:AnalyticsApplication", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AnalyticsApplication resources.
 */
export interface AnalyticsApplicationState {
    readonly arn?: pulumi.Input<ARN>;
    readonly cloudwatchLoggingOptions?: pulumi.Input<{ id?: pulumi.Input<string>, logStreamArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>;
    readonly code?: pulumi.Input<string>;
    readonly createTimestamp?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly inputs?: pulumi.Input<{ id?: pulumi.Input<string>, kinesisFirehose?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, kinesisStream?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, namePrefix: pulumi.Input<string>, parallelism?: pulumi.Input<{ count: pulumi.Input<number> }>, processingConfiguration?: pulumi.Input<{ lambda: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }> }>, schema: pulumi.Input<{ recordColumns: pulumi.Input<pulumi.Input<{ mapping?: pulumi.Input<string>, name: pulumi.Input<string>, sqlType: pulumi.Input<string> }>[]>, recordEncoding?: pulumi.Input<string>, recordFormat: pulumi.Input<{ mappingParameters?: pulumi.Input<{ csv?: pulumi.Input<{ recordColumnDelimiter: pulumi.Input<string>, recordRowDelimiter: pulumi.Input<string> }>, json?: pulumi.Input<{ recordRowPath: pulumi.Input<string> }> }>, recordFormatType?: pulumi.Input<string> }> }>, startingPositionConfigurations?: pulumi.Input<pulumi.Input<{ startingPosition?: pulumi.Input<string> }>[]>, streamNames?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly lastUpdateTimestamp?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly outputs?: pulumi.Input<pulumi.Input<{ id?: pulumi.Input<string>, kinesisFirehose?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, kinesisStream?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, lambda?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, name: pulumi.Input<string>, schema: pulumi.Input<{ recordFormatType?: pulumi.Input<string> }> }>[]>;
    readonly referenceDataSources?: pulumi.Input<{ id?: pulumi.Input<string>, s3: pulumi.Input<{ bucketArn: pulumi.Input<string>, fileKey: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, schema: pulumi.Input<{ recordColumns: pulumi.Input<pulumi.Input<{ mapping?: pulumi.Input<string>, name: pulumi.Input<string>, sqlType: pulumi.Input<string> }>[]>, recordEncoding?: pulumi.Input<string>, recordFormat: pulumi.Input<{ mappingParameters?: pulumi.Input<{ csv?: pulumi.Input<{ recordColumnDelimiter: pulumi.Input<string>, recordRowDelimiter: pulumi.Input<string> }>, json?: pulumi.Input<{ recordRowPath: pulumi.Input<string> }> }>, recordFormatType?: pulumi.Input<string> }> }>, tableName: pulumi.Input<string> }>;
    readonly status?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AnalyticsApplication resource.
 */
export interface AnalyticsApplicationArgs {
    readonly cloudwatchLoggingOptions?: pulumi.Input<{ id?: pulumi.Input<string>, logStreamArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>;
    readonly code?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly inputs?: pulumi.Input<{ id?: pulumi.Input<string>, kinesisFirehose?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, kinesisStream?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, namePrefix: pulumi.Input<string>, parallelism?: pulumi.Input<{ count: pulumi.Input<number> }>, processingConfiguration?: pulumi.Input<{ lambda: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }> }>, schema: pulumi.Input<{ recordColumns: pulumi.Input<pulumi.Input<{ mapping?: pulumi.Input<string>, name: pulumi.Input<string>, sqlType: pulumi.Input<string> }>[]>, recordEncoding?: pulumi.Input<string>, recordFormat: pulumi.Input<{ mappingParameters?: pulumi.Input<{ csv?: pulumi.Input<{ recordColumnDelimiter: pulumi.Input<string>, recordRowDelimiter: pulumi.Input<string> }>, json?: pulumi.Input<{ recordRowPath: pulumi.Input<string> }> }>, recordFormatType?: pulumi.Input<string> }> }>, startingPositionConfigurations?: pulumi.Input<pulumi.Input<{ startingPosition?: pulumi.Input<string> }>[]>, streamNames?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly name?: pulumi.Input<string>;
    readonly outputs?: pulumi.Input<pulumi.Input<{ id?: pulumi.Input<string>, kinesisFirehose?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, kinesisStream?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, lambda?: pulumi.Input<{ resourceArn: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, name: pulumi.Input<string>, schema: pulumi.Input<{ recordFormatType?: pulumi.Input<string> }> }>[]>;
    readonly referenceDataSources?: pulumi.Input<{ id?: pulumi.Input<string>, s3: pulumi.Input<{ bucketArn: pulumi.Input<string>, fileKey: pulumi.Input<string>, roleArn: pulumi.Input<string> }>, schema: pulumi.Input<{ recordColumns: pulumi.Input<pulumi.Input<{ mapping?: pulumi.Input<string>, name: pulumi.Input<string>, sqlType: pulumi.Input<string> }>[]>, recordEncoding?: pulumi.Input<string>, recordFormat: pulumi.Input<{ mappingParameters?: pulumi.Input<{ csv?: pulumi.Input<{ recordColumnDelimiter: pulumi.Input<string>, recordRowDelimiter: pulumi.Input<string> }>, json?: pulumi.Input<{ recordRowPath: pulumi.Input<string> }> }>, recordFormatType?: pulumi.Input<string> }> }>, tableName: pulumi.Input<string> }>;
}
