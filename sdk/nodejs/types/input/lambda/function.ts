// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

import {ARN} from "../../../index";

export interface FunctionDeadLetterConfig {
    /**
     * The ARN of an SNS topic or SQS queue to notify when an invocation fails. If this
     * option is used, the function's IAM role must be granted suitable access to write to the target object,
     * which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on
     * which service is targeted.
     */
    targetArn: pulumi.Input<string>;
}

export interface FunctionEnvironment {
    /**
     * A map that defines environment variables for the Lambda function.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FunctionTracingConfig {
    /**
     * Can be either `PassThrough` or `Active`. If PassThrough, Lambda will only trace
     * the request from an upstream service if it contains a tracing header with
     * "sampled=1". If Active, Lambda will respect any tracing header it receives
     * from an upstream service. If no tracing header is received, Lambda will call
     * X-Ray for a tracing decision.
     */
    mode: pulumi.Input<string>;
}

export interface FunctionVpcConfig {
    /**
     * A list of security group IDs associated with the Lambda function.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs associated with the Lambda function.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    vpcId?: pulumi.Input<string>;
}
