// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface DeploymentGroupAlarmConfiguration {
    /**
     * A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
     */
    alarms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
     * * `true`: The deployment will proceed even if alarm status information can't be retrieved.
     * * `false`: The deployment will stop if alarm status information can't be retrieved.
     */
    ignorePollAlarmFailure?: pulumi.Input<boolean>;
}

export interface DeploymentGroupAutoRollbackConfiguration {
    /**
     * Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentGroupBlueGreenDeploymentConfig {
    /**
     * Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
     */
    deploymentReadyOption?: pulumi.Input<inputApi.codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption>;
    /**
     * Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
     */
    greenFleetProvisioningOption?: pulumi.Input<inputApi.codedeploy.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption>;
    /**
     * Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
     */
    terminateBlueInstancesOnDeploymentSuccess?: pulumi.Input<inputApi.codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess>;
}

export interface DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption {
    /**
     * When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
     * * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
     * * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
     */
    actionOnTimeout?: pulumi.Input<string>;
    /**
     * The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `actionOnTimeout`.
     */
    waitTimeInMinutes?: pulumi.Input<number>;
}

export interface DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption {
    /**
     * The action to take on instances in the original environment after a successful blue/green deployment.
     * * `TERMINATE`: Instances are terminated after a specified wait time.
     * * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
     */
    action?: pulumi.Input<string>;
}

export interface DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess {
    /**
     * The action to take on instances in the original environment after a successful blue/green deployment.
     * * `TERMINATE`: Instances are terminated after a specified wait time.
     * * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
     */
    action?: pulumi.Input<string>;
    /**
     * The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
     */
    terminationWaitTimeInMinutes?: pulumi.Input<number>;
}

export interface DeploymentGroupDeploymentStyle {
    /**
     * Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`.
     */
    deploymentOption?: pulumi.Input<string>;
    /**
     * Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`.
     */
    deploymentType?: pulumi.Input<string>;
}

export interface DeploymentGroupEc2TagFilter {
    /**
     * The key of the tag filter.
     */
    key?: pulumi.Input<string>;
    /**
     * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the tag filter.
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentGroupEc2TagSet {
    /**
     * Tag filters associated with the deployment group. See the AWS docs for details.
     */
    ec2TagFilters?: pulumi.Input<pulumi.Input<inputApi.codedeploy.DeploymentGroupEc2TagSetEc2TagFilter>[]>;
}

export interface DeploymentGroupEc2TagSetEc2TagFilter {
    /**
     * The key of the tag filter.
     */
    key?: pulumi.Input<string>;
    /**
     * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the tag filter.
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentGroupEcsService {
    /**
     * The name of the ECS cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the ECS service.
     */
    serviceName: pulumi.Input<string>;
}

export interface DeploymentGroupLoadBalancerInfo {
    /**
     * The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
     */
    elbInfos?: pulumi.Input<pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoElbInfo>[]>;
    /**
     * The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
     */
    targetGroupInfos?: pulumi.Input<pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupInfo>[]>;
    /**
     * The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
     */
    targetGroupPairInfo?: pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo>;
}

export interface DeploymentGroupLoadBalancerInfoElbInfo {
    /**
     * Name of the target group.
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentGroupLoadBalancerInfoTargetGroupInfo {
    /**
     * Name of the target group.
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfo {
    /**
     * Configuration block for the production traffic route (documented below).
     */
    prodTrafficRoute: pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute>;
    /**
     * Configuration blocks for a target group within a target group pair (documented below).
     */
    targetGroups: pulumi.Input<pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup>[]>;
    /**
     * Configuration block for the test traffic route (documented below).
     */
    testTrafficRoute?: pulumi.Input<inputApi.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute>;
}

export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
    /**
     * List of Amazon Resource Names (ARNs) of the load balancer listeners.
     */
    listenerArns: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup {
    /**
     * Name of the target group.
     */
    name: pulumi.Input<string>;
}

export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
    /**
     * List of Amazon Resource Names (ARNs) of the load balancer listeners.
     */
    listenerArns: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentGroupOnPremisesInstanceTagFilter {
    /**
     * The key of the tag filter.
     */
    key?: pulumi.Input<string>;
    /**
     * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the tag filter.
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentGroupTriggerConfiguration {
    /**
     * The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation][1] for all possible values.
     */
    triggerEvents: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the notification trigger.
     */
    triggerName: pulumi.Input<string>;
    /**
     * The ARN of the SNS topic through which notifications are sent.
     */
    triggerTargetArn: pulumi.Input<string>;
}
