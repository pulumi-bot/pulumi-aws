// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface VirtualNodeSpec {
    /**
     * The backends to which the virtual node is expected to send outbound traffic.
     */
    backends?: pulumi.Input<pulumi.Input<inputApi.appmesh.VirtualNodeSpecBackend>[]>;
    /**
     * The listeners from which the virtual node is expected to receive inbound traffic.
     */
    listener?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecListener>;
    /**
     * The inbound and outbound access logging information for the virtual node.
     */
    logging?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecLogging>;
    /**
     * The service discovery information for the virtual node.
     */
    serviceDiscovery?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecServiceDiscovery>;
}

export interface VirtualNodeSpecBackend {
    /**
     * Specifies a virtual service to use as a backend for a virtual node.
     */
    virtualService?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecBackendVirtualService>;
}

export interface VirtualNodeSpecBackendVirtualService {
    /**
     * The name of the virtual service that is acting as a virtual node backend.
     */
    virtualServiceName: pulumi.Input<string>;
}

export interface VirtualNodeSpecListener {
    /**
     * The health check information for the listener.
     */
    healthCheck?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecListenerHealthCheck>;
    /**
     * The port mapping information for the listener.
     */
    portMapping: pulumi.Input<inputApi.appmesh.VirtualNodeSpecListenerPortMapping>;
}

export interface VirtualNodeSpecListenerHealthCheck {
    /**
     * The number of consecutive successful health checks that must occur before declaring listener healthy.
     * * `intervalMillis`- (Required) The time period in milliseconds between each health check execution.
     */
    healthyThreshold: pulumi.Input<number>;
    intervalMillis: pulumi.Input<number>;
    /**
     * The destination path for the health check request. This is only required if the specified protocol is `http`.
     */
    path?: pulumi.Input<string>;
    /**
     * The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol for the health check request. Valid values are `http` and `tcp`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The amount of time to wait when receiving a response from the health check, in milliseconds.
     */
    timeoutMillis: pulumi.Input<number>;
    /**
     * The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
     */
    unhealthyThreshold: pulumi.Input<number>;
}

export interface VirtualNodeSpecListenerPortMapping {
    /**
     * The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol for the health check request. Valid values are `http` and `tcp`.
     */
    protocol: pulumi.Input<string>;
}

export interface VirtualNodeSpecLogging {
    /**
     * The access log configuration for a virtual node.
     */
    accessLog?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecLoggingAccessLog>;
}

export interface VirtualNodeSpecLoggingAccessLog {
    /**
     * The file object to send virtual node access logs to.
     */
    file?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecLoggingAccessLogFile>;
}

export interface VirtualNodeSpecLoggingAccessLogFile {
    /**
     * The destination path for the health check request. This is only required if the specified protocol is `http`.
     */
    path: pulumi.Input<string>;
}

export interface VirtualNodeSpecServiceDiscovery {
    /**
     * Specifies any AWS Cloud Map information for the virtual node.
     */
    awsCloudMap?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecServiceDiscoveryAwsCloudMap>;
    /**
     * Specifies the DNS service name for the virtual node.
     */
    dns?: pulumi.Input<inputApi.appmesh.VirtualNodeSpecServiceDiscoveryDns>;
}

export interface VirtualNodeSpecServiceDiscoveryAwsCloudMap {
    /**
     * A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the AWS Cloud Map namespace to use.
     * Use the [`aws.servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * The name of the AWS Cloud Map service to use. Use the [`aws.servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
     */
    serviceName: pulumi.Input<string>;
}

export interface VirtualNodeSpecServiceDiscoveryDns {
    /**
     * The DNS host name for your virtual node.
     */
    hostname: pulumi.Input<string>;
}
