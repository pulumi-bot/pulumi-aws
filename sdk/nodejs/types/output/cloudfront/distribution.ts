// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface DistributionCustomErrorResponse {
    /**
     * The minimum amount of time you want
     * HTTP error codes to stay in CloudFront caches before CloudFront queries your
     * origin to see whether the object has been updated.
     */
    errorCachingMinTtl?: number;
    /**
     * The 4xx or 5xx HTTP status code that you want to
     * customize.
     */
    errorCode: number;
    /**
     * The HTTP status code that you want CloudFront
     * to return with the custom error page to the viewer.
     */
    responseCode?: number;
    /**
     * The path of the custom error page (for
     * example, `/custom_404.html`).
     */
    responsePagePath?: string;
}

export interface DistributionDefaultCacheBehavior {
    /**
     * Controls which HTTP methods CloudFront
     * processes and forwards to your Amazon S3 bucket or your custom origin.
     */
    allowedMethods: string[];
    /**
     * Controls whether CloudFront caches the
     * response to requests using the specified HTTP methods.
     */
    cachedMethods: string[];
    /**
     * Whether you want CloudFront to automatically
     * compress content for web requests that include `Accept-Encoding: gzip` in
     * the request header (default: `false`).
     */
    compress?: boolean;
    /**
     * The default amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
     * 1 day.
     */
    defaultTtl?: number;
    /**
     * Field level encryption configuration ID
     */
    fieldLevelEncryptionId?: string;
    /**
     * The forwarded values configuration that specifies how CloudFront
     * handles query strings, cookies and headers (maximum one).
     */
    forwardedValues: outputApi.cloudfront.DistributionDefaultCacheBehaviorForwardedValues;
    /**
     * A config block that triggers a lambda function with
     * specific actions. Defined below, maximum 4.
     */
    lambdaFunctionAssociations?: outputApi.cloudfront.DistributionDefaultCacheBehaviorLambdaFunctionAssociation[];
    /**
     * The maximum amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * to your origin to determine whether the object has been updated. Only
     * effective in the presence of `Cache-Control max-age`, `Cache-Control
     * s-maxage`, and `Expires` headers. Defaults to 365 days.
     */
    maxTtl?: number;
    /**
     * The minimum amount of time that you want objects to
     * stay in CloudFront caches before CloudFront queries your origin to see
     * whether the object has been updated. Defaults to 0 seconds.
     */
    minTtl?: number;
    /**
     * Indicates whether you want to distribute
     * media files in Microsoft Smooth Streaming format using the origin that is
     * associated with this cache behavior.
     */
    smoothStreaming?: boolean;
    /**
     * The value of ID for the origin that you want
     * CloudFront to route requests to when a request matches the path pattern
     * either for a cache behavior or for the default cache behavior.
     */
    targetOriginId: string;
    /**
     * The AWS accounts, if any, that you want to
     * allow to create signed URLs for private content.
     */
    trustedSigners?: string[];
    /**
     * Use this element to specify the
     * protocol that users can use to access the files in the origin specified by
     * TargetOriginId when a request matches the path pattern in PathPattern. One
     * of `allow-all`, `https-only`, or `redirect-to-https`.
     */
    viewerProtocolPolicy: string;
}

export interface DistributionDefaultCacheBehaviorForwardedValues {
    /**
     * The forwarded values cookies
     * that specifies how CloudFront handles cookies (maximum one).
     */
    cookies: outputApi.cloudfront.DistributionDefaultCacheBehaviorForwardedValuesCookies;
    /**
     * Specifies the Headers, if any, that you want
     * CloudFront to vary upon for this cache behavior. Specify `*` to include all
     * headers.
     */
    headers?: string[];
    /**
     * Indicates whether you want CloudFront to forward
     * query strings to the origin that is associated with this cache behavior.
     */
    queryString: boolean;
    /**
     * When specified, along with a value of
     * `true` for `queryString`, all query strings are forwarded, however only the
     * query string keys listed in this argument are cached. When omitted with a
     * value of `true` for `queryString`, all query string keys are cached.
     */
    queryStringCacheKeys?: string[];
}

export interface DistributionDefaultCacheBehaviorForwardedValuesCookies {
    /**
     * Specifies whether you want CloudFront to forward
     * cookies to the origin that is associated with this cache behavior. You can
     * specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
     * subsequent `whitelistedNames`
     */
    forward: string;
    /**
     * If you have specified `whitelist` to
     * `forward`, the whitelisted cookies that you want CloudFront to forward to
     * your origin.
     */
    whitelistedNames?: string[];
}

export interface DistributionDefaultCacheBehaviorLambdaFunctionAssociation {
    /**
     * The specific event to trigger this function.
     * Valid values: `viewer-request`, `origin-request`, `viewer-response`,
     * `origin-response`
     */
    eventType: string;
    /**
     * When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
     */
    includeBody?: boolean;
    /**
     * ARN of the Lambda function.
     */
    lambdaArn: string;
}

export interface DistributionLoggingConfig {
    /**
     * The Amazon S3 bucket to store the access logs in, for
     * example, `myawslogbucket.s3.amazonaws.com`.
     */
    bucket: string;
    /**
     * Specifies whether you want CloudFront to
     * include cookies in access logs (default: `false`).
     */
    includeCookies?: boolean;
    /**
     * An optional string that you want CloudFront to prefix
     * to the access log filenames for this distribution, for example, `myprefix/`.
     */
    prefix?: string;
}

export interface DistributionOrderedCacheBehavior {
    /**
     * Controls which HTTP methods CloudFront
     * processes and forwards to your Amazon S3 bucket or your custom origin.
     */
    allowedMethods: string[];
    /**
     * Controls whether CloudFront caches the
     * response to requests using the specified HTTP methods.
     */
    cachedMethods: string[];
    /**
     * Whether you want CloudFront to automatically
     * compress content for web requests that include `Accept-Encoding: gzip` in
     * the request header (default: `false`).
     */
    compress?: boolean;
    /**
     * The default amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
     * 1 day.
     */
    defaultTtl?: number;
    /**
     * Field level encryption configuration ID
     */
    fieldLevelEncryptionId?: string;
    /**
     * The forwarded values configuration that specifies how CloudFront
     * handles query strings, cookies and headers (maximum one).
     */
    forwardedValues: outputApi.cloudfront.DistributionOrderedCacheBehaviorForwardedValues;
    /**
     * A config block that triggers a lambda function with
     * specific actions. Defined below, maximum 4.
     */
    lambdaFunctionAssociations?: outputApi.cloudfront.DistributionOrderedCacheBehaviorLambdaFunctionAssociation[];
    /**
     * The maximum amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * to your origin to determine whether the object has been updated. Only
     * effective in the presence of `Cache-Control max-age`, `Cache-Control
     * s-maxage`, and `Expires` headers. Defaults to 365 days.
     */
    maxTtl?: number;
    /**
     * The minimum amount of time that you want objects to
     * stay in CloudFront caches before CloudFront queries your origin to see
     * whether the object has been updated. Defaults to 0 seconds.
     */
    minTtl?: number;
    /**
     * The pattern (for example, `images/*.jpg)` that
     * specifies which requests you want this cache behavior to apply to.
     */
    pathPattern: string;
    /**
     * Indicates whether you want to distribute
     * media files in Microsoft Smooth Streaming format using the origin that is
     * associated with this cache behavior.
     */
    smoothStreaming?: boolean;
    /**
     * The value of ID for the origin that you want
     * CloudFront to route requests to when a request matches the path pattern
     * either for a cache behavior or for the default cache behavior.
     */
    targetOriginId: string;
    /**
     * The AWS accounts, if any, that you want to
     * allow to create signed URLs for private content.
     */
    trustedSigners?: string[];
    /**
     * Use this element to specify the
     * protocol that users can use to access the files in the origin specified by
     * TargetOriginId when a request matches the path pattern in PathPattern. One
     * of `allow-all`, `https-only`, or `redirect-to-https`.
     */
    viewerProtocolPolicy: string;
}

export interface DistributionOrderedCacheBehaviorForwardedValues {
    /**
     * The forwarded values cookies
     * that specifies how CloudFront handles cookies (maximum one).
     */
    cookies: outputApi.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookies;
    /**
     * Specifies the Headers, if any, that you want
     * CloudFront to vary upon for this cache behavior. Specify `*` to include all
     * headers.
     */
    headers?: string[];
    /**
     * Indicates whether you want CloudFront to forward
     * query strings to the origin that is associated with this cache behavior.
     */
    queryString: boolean;
    /**
     * When specified, along with a value of
     * `true` for `queryString`, all query strings are forwarded, however only the
     * query string keys listed in this argument are cached. When omitted with a
     * value of `true` for `queryString`, all query string keys are cached.
     */
    queryStringCacheKeys?: string[];
}

export interface DistributionOrderedCacheBehaviorForwardedValuesCookies {
    /**
     * Specifies whether you want CloudFront to forward
     * cookies to the origin that is associated with this cache behavior. You can
     * specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
     * subsequent `whitelistedNames`
     */
    forward: string;
    /**
     * If you have specified `whitelist` to
     * `forward`, the whitelisted cookies that you want CloudFront to forward to
     * your origin.
     */
    whitelistedNames?: string[];
}

export interface DistributionOrderedCacheBehaviorLambdaFunctionAssociation {
    /**
     * The specific event to trigger this function.
     * Valid values: `viewer-request`, `origin-request`, `viewer-response`,
     * `origin-response`
     */
    eventType: string;
    /**
     * When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
     */
    includeBody?: boolean;
    /**
     * ARN of the Lambda function.
     */
    lambdaArn: string;
}

export interface DistributionOrigin {
    /**
     * One or more sub-resources with `name` and
     * `value` parameters that specify header data that will be sent to the origin
     * (multiples allowed).
     */
    customHeaders?: outputApi.cloudfront.DistributionOriginCustomHeader[];
    /**
     * The CloudFront custom
     * origin configuration information. If an S3
     * origin is required, use `s3OriginConfig` instead.
     */
    customOriginConfig?: outputApi.cloudfront.DistributionOriginCustomOriginConfig;
    /**
     * The DNS domain name of either the S3 bucket, or
     * web site of your custom origin.
     */
    domainName: string;
    /**
     * The unique identifier of the member origin
     */
    originId: string;
    /**
     * An optional element that causes CloudFront to
     * request your content from a directory in your Amazon S3 bucket or your
     * custom origin.
     */
    originPath?: string;
    /**
     * The CloudFront S3 origin
     * configuration information. If a custom origin is required, use
     * `customOriginConfig` instead.
     */
    s3OriginConfig?: outputApi.cloudfront.DistributionOriginS3OriginConfig;
}

export interface DistributionOriginCustomHeader {
    name: string;
    value: string;
}

export interface DistributionOriginCustomOriginConfig {
    /**
     * The HTTP port the custom origin listens on.
     */
    httpPort: number;
    /**
     * The HTTPS port the custom origin listens on.
     */
    httpsPort: number;
    /**
     * The Custom KeepAlive timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
     */
    originKeepaliveTimeout?: number;
    /**
     * The origin protocol policy to apply to
     * your origin. One of `http-only`, `https-only`, or `match-viewer`.
     */
    originProtocolPolicy: string;
    /**
     * The Custom Read timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
     */
    originReadTimeout?: number;
    /**
     * The SSL/TLS protocols that you want
     * CloudFront to use when communicating with your origin over HTTPS. A list of
     * one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
     */
    originSslProtocols: string[];
}

export interface DistributionOriginGroup {
    /**
     * The failover criteria for when to failover to the secondary origin
     */
    failoverCriteria: outputApi.cloudfront.DistributionOriginGroupFailoverCriteria;
    /**
     * Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. Minimum 2.
     */
    members: outputApi.cloudfront.DistributionOriginGroupMember[];
    /**
     * The unique identifier of the member origin
     */
    originId: string;
}

export interface DistributionOriginGroupFailoverCriteria {
    /**
     * A list of HTTP status codes for the origin group
     */
    statusCodes: number[];
}

export interface DistributionOriginGroupMember {
    /**
     * The unique identifier of the member origin
     */
    originId: string;
}

export interface DistributionOriginS3OriginConfig {
    /**
     * The [CloudFront origin access
     * identity][5] to associate with the origin.
     */
    originAccessIdentity: string;
}

export interface DistributionRestrictions {
    geoRestriction: outputApi.cloudfront.DistributionRestrictionsGeoRestriction;
}

export interface DistributionRestrictionsGeoRestriction {
    /**
     * The [ISO 3166-1-alpha-2 codes][4] for which you
     * want CloudFront either to distribute your content (`whitelist`) or not
     * distribute your content (`blacklist`).
     */
    locations?: string[];
    /**
     * The method that you want to use to restrict
     * distribution of your content by country: `none`, `whitelist`, or
     * `blacklist`.
     */
    restrictionType: string;
}

export interface DistributionViewerCertificate {
    /**
     * The ARN of the [AWS Certificate Manager][6]
     * certificate that you wish to use with this distribution. Specify this,
     * `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
     * certificate must be in  US-EAST-1.
     */
    acmCertificateArn?: string;
    /**
     * `true` if you want viewers to use HTTPS
     * to request your objects and you're using the CloudFront domain name for your
     * distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
     */
    cloudfrontDefaultCertificate?: boolean;
    /**
     * The IAM certificate identifier of the custom viewer
     * certificate for this distribution if you are using a custom domain. Specify
     * this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
     */
    iamCertificateId?: string;
    /**
     * The minimum version of the SSL protocol that
     * you want CloudFront to use for HTTPS connections. One of `SSLv3`, `TLSv1`,
     * `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
     * If you are using a custom certificate (specified with `acmCertificateArn`
     * or `iamCertificateId`), and have specified `sni-only` in
     * `sslSupportMethod`, `TLSv1` or later must be specified. If you have
     * specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
     * specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
     * must be specified.
     */
    minimumProtocolVersion?: string;
    sslSupportMethod?: string;
}
