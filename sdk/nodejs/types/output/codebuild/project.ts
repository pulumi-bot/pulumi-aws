// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface ProjectArtifacts {
    /**
     * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
     */
    encryptionDisabled?: boolean;
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     */
    name?: string;
    /**
     * The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
     */
    namespaceType?: string;
    /**
     * If set to true, a name specified in the build spec file overrides the artifact name.
     */
    overrideArtifactName?: boolean;
    /**
     * The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
     */
    packaging?: string;
    /**
     * If `type` is set to `S3`, this is the path to the output artifact
     */
    path?: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectCache {
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
     */
    modes?: string[];
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type?: string;
}

export interface ProjectEnvironment {
    /**
     * The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
     */
    certificate?: string;
    /**
     * Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM` or `BUILD_GENERAL1_LARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`
     */
    computeType: string;
    /**
     * A set of environment variables to make available to builds for this build project.
     */
    environmentVariables: outputApi.codebuild.ProjectEnvironmentEnvironmentVariable[];
    /**
     * The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
     */
    image: string;
    /**
     * The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
     */
    imagePullCredentialsType?: string;
    /**
     * If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
     */
    privilegedMode?: boolean;
    /**
     * Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
     */
    registryCredential?: outputApi.codebuild.ProjectEnvironmentRegistryCredential;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectEnvironmentEnvironmentVariable {
    /**
     * The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     */
    name: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type?: string;
    /**
     * The environment variable's value.
     */
    value: string;
}

export interface ProjectEnvironmentRegistryCredential {
    /**
     * The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
     */
    credential: string;
    /**
     * The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
     */
    credentialProvider: string;
}

export interface ProjectLogsConfig {
    /**
     * Configuration for the builds to store logs to CloudWatch
     */
    cloudwatchLogs?: outputApi.codebuild.ProjectLogsConfigCloudwatchLogs;
    /**
     * Configuration for the builds to store logs to S3.
     */
    s3Logs?: outputApi.codebuild.ProjectLogsConfigS3Logs;
}

export interface ProjectLogsConfigCloudwatchLogs {
    /**
     * The group name of the logs in CloudWatch Logs.
     */
    groupName?: string;
    /**
     * Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
     */
    status?: string;
    /**
     * The stream name of the logs in CloudWatch Logs.
     */
    streamName?: string;
}

export interface ProjectLogsConfigS3Logs {
    /**
     * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
     */
    encryptionDisabled?: boolean;
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
     */
    status?: string;
}

export interface ProjectSecondaryArtifact {
    /**
     * The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
     */
    artifactIdentifier: string;
    /**
     * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
     */
    encryptionDisabled?: boolean;
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     */
    name?: string;
    /**
     * The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
     */
    namespaceType?: string;
    /**
     * If set to true, a name specified in the build spec file overrides the artifact name.
     */
    overrideArtifactName?: boolean;
    /**
     * The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
     */
    packaging?: string;
    /**
     * If `type` is set to `S3`, this is the path to the output artifact
     */
    path?: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectSecondarySource {
    /**
     * Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
     */
    auths?: outputApi.codebuild.ProjectSecondarySourceAuth[];
    /**
     * The build spec declaration to use for this build project's related builds.
     */
    buildspec?: string;
    /**
     * Truncate git history to this many commits.
     */
    gitCloneDepth?: number;
    /**
     * Ignore SSL warnings when connecting to source control.
     */
    insecureSsl?: boolean;
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
     */
    reportBuildStatus?: boolean;
    /**
     * The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
     */
    sourceIdentifier: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectSecondarySourceAuth {
    /**
     * The resource value that applies to the specified authorization type.
     */
    resource?: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectSource {
    /**
     * Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
     */
    auths?: outputApi.codebuild.ProjectSourceAuth[];
    /**
     * The build spec declaration to use for this build project's related builds.
     */
    buildspec?: string;
    /**
     * Truncate git history to this many commits.
     */
    gitCloneDepth?: number;
    /**
     * Ignore SSL warnings when connecting to source control.
     */
    insecureSsl?: boolean;
    /**
     * The location of the source code from git or s3.
     */
    location?: string;
    /**
     * Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
     */
    reportBuildStatus?: boolean;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectSourceAuth {
    /**
     * The resource value that applies to the specified authorization type.
     */
    resource?: string;
    /**
     * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
     */
    type: string;
}

export interface ProjectVpcConfig {
    /**
     * The security group IDs to assign to running builds.
     */
    securityGroupIds: string[];
    /**
     * The subnet IDs within which to run builds.
     */
    subnets: string[];
    /**
     * The ID of the VPC within which to run builds.
     */
    vpcId: string;
}
