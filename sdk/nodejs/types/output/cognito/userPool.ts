// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface UserPoolAdminCreateUserConfig {
    /**
     * Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
     */
    allowAdminCreateUserOnly?: boolean;
    /**
     * The invite message template structure.
     */
    inviteMessageTemplate?: outputApi.cognito.UserPoolAdminCreateUserConfigInviteMessageTemplate;
    /**
     * The user account expiration limit, in days, after which the account is no longer usable.
     */
    unusedAccountValidityDays?: number;
}

export interface UserPoolAdminCreateUserConfigInviteMessageTemplate {
    /**
     * The email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
     */
    emailMessage?: string;
    /**
     * The subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
     */
    emailSubject?: string;
    /**
     * The SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
     */
    smsMessage?: string;
}

export interface UserPoolDeviceConfiguration {
    /**
     * Indicates whether a challenge is required on a new device. Only applicable to a new device.
     */
    challengeRequiredOnNewDevice?: boolean;
    /**
     * If true, a device is only remembered on user prompt.
     */
    deviceOnlyRememberedOnUserPrompt?: boolean;
}

export interface UserPoolEmailConfiguration {
    /**
     * Instruct Cognito to either use its built-in functional or Amazon SES to send out emails.
     */
    emailSendingAccount?: string;
    /**
     * The REPLY-TO email address.
     */
    replyToEmailAddress?: string;
    /**
     * The ARN of the email source.
     */
    sourceArn?: string;
}

export interface UserPoolLambdaConfig {
    /**
     * The ARN of the lambda creating an authentication challenge.
     */
    createAuthChallenge?: string;
    /**
     * A custom Message AWS Lambda trigger.
     */
    customMessage?: string;
    /**
     * Defines the authentication challenge.
     */
    defineAuthChallenge?: string;
    /**
     * A post-authentication AWS Lambda trigger.
     */
    postAuthentication?: string;
    /**
     * A post-confirmation AWS Lambda trigger.
     */
    postConfirmation?: string;
    /**
     * A pre-authentication AWS Lambda trigger.
     */
    preAuthentication?: string;
    /**
     * A pre-registration AWS Lambda trigger.
     */
    preSignUp?: string;
    /**
     * Allow to customize identity token claims before token generation.
     */
    preTokenGeneration?: string;
    /**
     * The user migration Lambda config type.
     */
    userMigration?: string;
    /**
     * Verifies the authentication challenge response.
     */
    verifyAuthChallengeResponse?: string;
}

export interface UserPoolPasswordPolicy {
    /**
     * The minimum length of the password policy that you have set.
     */
    minimumLength?: number;
    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     */
    requireLowercase?: boolean;
    /**
     * Whether you have required users to use at least one number in their password.
     */
    requireNumbers?: boolean;
    /**
     * Whether you have required users to use at least one symbol in their password.
     */
    requireSymbols?: boolean;
    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     */
    requireUppercase?: boolean;
}

export interface UserPoolSchema {
    /**
     * The attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
     */
    attributeDataType: string;
    /**
     * Specifies whether the attribute type is developer only.
     */
    developerOnlyAttribute?: boolean;
    /**
     * Specifies whether the attribute can be changed once it has been created.
     */
    mutable?: boolean;
    /**
     * The name of the attribute.
     */
    name: string;
    /**
     * Specifies the constraints for an attribute of the number type.
     */
    numberAttributeConstraints?: outputApi.cognito.UserPoolSchemaNumberAttributeConstraints;
    /**
     * Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
     */
    required?: boolean;
    /**
     * -Specifies the constraints for an attribute of the string type.
     */
    stringAttributeConstraints?: outputApi.cognito.UserPoolSchemaStringAttributeConstraints;
}

export interface UserPoolSchemaNumberAttributeConstraints {
    /**
     * The maximum value of an attribute that is of the number data type.
     */
    maxValue?: string;
    /**
     * The minimum value of an attribute that is of the number data type.
     */
    minValue?: string;
}

export interface UserPoolSchemaStringAttributeConstraints {
    /**
     * The maximum length of an attribute value of the string type.
     */
    maxLength?: string;
    /**
     * The minimum length of an attribute value of the string type.
     */
    minLength?: string;
}

export interface UserPoolSmsConfiguration {
    /**
     * The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
     */
    externalId: string;
    /**
     * The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
     */
    snsCallerArn: string;
}

export interface UserPoolUserPoolAddOns {
    /**
     * The mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
     */
    advancedSecurityMode: string;
}

export interface UserPoolVerificationMessageTemplate {
    /**
     * The default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
     */
    defaultEmailOption?: string;
    /**
     * The email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
     */
    emailMessage: string;
    /**
     * The email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
     */
    emailMessageByLink: string;
    /**
     * The subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
     */
    emailSubject: string;
    /**
     * The subject line for the email message template for sending a confirmation link to the user.
     */
    emailSubjectByLink: string;
    /**
     * The SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
     */
    smsMessage: string;
}
