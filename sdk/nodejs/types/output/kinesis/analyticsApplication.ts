// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

import {ARN} from "../../../index";

export interface AnalyticsApplicationCloudwatchLoggingOptions {
    /**
     * The ARN of the Kinesis Analytics Application.
     */
    id: string;
    logStreamArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationInputs {
    /**
     * The ARN of the Kinesis Analytics Application.
     */
    id: string;
    kinesisFirehose?: outputApi.kinesis.AnalyticsApplicationInputsKinesisFirehose;
    kinesisStream?: outputApi.kinesis.AnalyticsApplicationInputsKinesisStream;
    namePrefix: string;
    parallelism?: outputApi.kinesis.AnalyticsApplicationInputsParallelism;
    processingConfiguration?: outputApi.kinesis.AnalyticsApplicationInputsProcessingConfiguration;
    schema: outputApi.kinesis.AnalyticsApplicationInputsSchema;
    startingPositionConfigurations: outputApi.kinesis.AnalyticsApplicationInputsStartingPositionConfiguration[];
    streamNames: string[];
}

export interface AnalyticsApplicationInputsKinesisFirehose {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationInputsKinesisStream {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationInputsParallelism {
    count: number;
}

export interface AnalyticsApplicationInputsProcessingConfiguration {
    lambda: outputApi.kinesis.AnalyticsApplicationInputsProcessingConfigurationLambda;
}

export interface AnalyticsApplicationInputsProcessingConfigurationLambda {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationInputsSchema {
    recordColumns: outputApi.kinesis.AnalyticsApplicationInputsSchemaRecordColumn[];
    recordEncoding?: string;
    recordFormat: outputApi.kinesis.AnalyticsApplicationInputsSchemaRecordFormat;
}

export interface AnalyticsApplicationInputsSchemaRecordColumn {
    mapping?: string;
    /**
     * Name of the Kinesis Analytics Application.
     */
    name: string;
    sqlType: string;
}

export interface AnalyticsApplicationInputsSchemaRecordFormat {
    mappingParameters?: outputApi.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParameters;
    recordFormatType: string;
}

export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParameters {
    csv?: outputApi.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv;
    json?: outputApi.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson;
}

export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv {
    recordColumnDelimiter: string;
    recordRowDelimiter: string;
}

export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson {
    recordRowPath: string;
}

export interface AnalyticsApplicationInputsStartingPositionConfiguration {
    startingPosition: string;
}

export interface AnalyticsApplicationOutput {
    /**
     * The ARN of the Kinesis Analytics Application.
     */
    id: string;
    kinesisFirehose?: outputApi.kinesis.AnalyticsApplicationOutputKinesisFirehose;
    kinesisStream?: outputApi.kinesis.AnalyticsApplicationOutputKinesisStream;
    lambda?: outputApi.kinesis.AnalyticsApplicationOutputLambda;
    /**
     * Name of the Kinesis Analytics Application.
     */
    name: string;
    schema: outputApi.kinesis.AnalyticsApplicationOutputSchema;
}

export interface AnalyticsApplicationOutputKinesisFirehose {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationOutputKinesisStream {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationOutputLambda {
    resourceArn: string;
    roleArn: string;
}

export interface AnalyticsApplicationOutputSchema {
    recordFormatType?: string;
}

export interface AnalyticsApplicationReferenceDataSources {
    /**
     * The ARN of the Kinesis Analytics Application.
     */
    id: string;
    s3: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesS3;
    schema: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchema;
    tableName: string;
}

export interface AnalyticsApplicationReferenceDataSourcesS3 {
    bucketArn: string;
    fileKey: string;
    roleArn: string;
}

export interface AnalyticsApplicationReferenceDataSourcesSchema {
    recordColumns: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn[];
    recordEncoding?: string;
    recordFormat: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat;
}

export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn {
    mapping?: string;
    /**
     * Name of the Kinesis Analytics Application.
     */
    name: string;
    sqlType: string;
}

export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat {
    mappingParameters?: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters;
    recordFormatType: string;
}

export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters {
    csv?: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv;
    json?: outputApi.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson;
}

export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
    recordColumnDelimiter: string;
    recordRowDelimiter: string;
}

export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
    recordRowPath: string;
}
