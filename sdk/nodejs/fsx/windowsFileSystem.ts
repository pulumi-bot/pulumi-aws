// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class WindowsFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing WindowsFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsFileSystemState, opts?: pulumi.CustomResourceOptions): WindowsFileSystem {
        return new WindowsFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:fsx/windowsFileSystem:WindowsFileSystem';

    /**
     * Returns true if the given object is an instance of WindowsFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsFileSystem.__pulumiType;
    }

    public readonly activeDirectoryId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly automaticBackupRetentionDays!: pulumi.Output<number | undefined>;
    public readonly copyTagsToBackups!: pulumi.Output<boolean | undefined>;
    public readonly dailyAutomaticBackupStartTime!: pulumi.Output<string>;
    public readonly deploymentType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public /*out*/ readonly preferredFileServerIp!: pulumi.Output<string>;
    public readonly preferredSubnetId!: pulumi.Output<string>;
    public /*out*/ readonly remoteAdministrationEndpoint!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly selfManagedActiveDirectory!: pulumi.Output<outputs.fsx.WindowsFileSystemSelfManagedActiveDirectory | undefined>;
    public readonly skipFinalBackup!: pulumi.Output<boolean | undefined>;
    public readonly storageCapacity!: pulumi.Output<number>;
    public readonly storageType!: pulumi.Output<string | undefined>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throughputCapacity!: pulumi.Output<number>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly weeklyMaintenanceStartTime!: pulumi.Output<string>;

    /**
     * Create a WindowsFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsFileSystemArgs | WindowsFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as WindowsFileSystemState | undefined;
            inputs["activeDirectoryId"] = state ? state.activeDirectoryId : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["automaticBackupRetentionDays"] = state ? state.automaticBackupRetentionDays : undefined;
            inputs["copyTagsToBackups"] = state ? state.copyTagsToBackups : undefined;
            inputs["dailyAutomaticBackupStartTime"] = state ? state.dailyAutomaticBackupStartTime : undefined;
            inputs["deploymentType"] = state ? state.deploymentType : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["preferredFileServerIp"] = state ? state.preferredFileServerIp : undefined;
            inputs["preferredSubnetId"] = state ? state.preferredSubnetId : undefined;
            inputs["remoteAdministrationEndpoint"] = state ? state.remoteAdministrationEndpoint : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["selfManagedActiveDirectory"] = state ? state.selfManagedActiveDirectory : undefined;
            inputs["skipFinalBackup"] = state ? state.skipFinalBackup : undefined;
            inputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["throughputCapacity"] = state ? state.throughputCapacity : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["weeklyMaintenanceStartTime"] = state ? state.weeklyMaintenanceStartTime : undefined;
        } else {
            const args = argsOrState as WindowsFileSystemArgs | undefined;
            if (!args || args.storageCapacity === undefined) {
                throw new Error("Missing required property 'storageCapacity'");
            }
            if (!args || args.subnetIds === undefined) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if (!args || args.throughputCapacity === undefined) {
                throw new Error("Missing required property 'throughputCapacity'");
            }
            inputs["activeDirectoryId"] = args ? args.activeDirectoryId : undefined;
            inputs["automaticBackupRetentionDays"] = args ? args.automaticBackupRetentionDays : undefined;
            inputs["copyTagsToBackups"] = args ? args.copyTagsToBackups : undefined;
            inputs["dailyAutomaticBackupStartTime"] = args ? args.dailyAutomaticBackupStartTime : undefined;
            inputs["deploymentType"] = args ? args.deploymentType : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["preferredSubnetId"] = args ? args.preferredSubnetId : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["selfManagedActiveDirectory"] = args ? args.selfManagedActiveDirectory : undefined;
            inputs["skipFinalBackup"] = args ? args.skipFinalBackup : undefined;
            inputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["throughputCapacity"] = args ? args.throughputCapacity : undefined;
            inputs["weeklyMaintenanceStartTime"] = args ? args.weeklyMaintenanceStartTime : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["networkInterfaceIds"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["preferredFileServerIp"] = undefined /*out*/;
            inputs["remoteAdministrationEndpoint"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(WindowsFileSystem.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WindowsFileSystem resources.
 */
export interface WindowsFileSystemState {
    readonly activeDirectoryId?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly automaticBackupRetentionDays?: pulumi.Input<number>;
    readonly copyTagsToBackups?: pulumi.Input<boolean>;
    readonly dailyAutomaticBackupStartTime?: pulumi.Input<string>;
    readonly deploymentType?: pulumi.Input<string>;
    readonly dnsName?: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly ownerId?: pulumi.Input<string>;
    readonly preferredFileServerIp?: pulumi.Input<string>;
    readonly preferredSubnetId?: pulumi.Input<string>;
    readonly remoteAdministrationEndpoint?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly selfManagedActiveDirectory?: pulumi.Input<inputs.fsx.WindowsFileSystemSelfManagedActiveDirectory>;
    readonly skipFinalBackup?: pulumi.Input<boolean>;
    readonly storageCapacity?: pulumi.Input<number>;
    readonly storageType?: pulumi.Input<string>;
    readonly subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly throughputCapacity?: pulumi.Input<number>;
    readonly vpcId?: pulumi.Input<string>;
    readonly weeklyMaintenanceStartTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WindowsFileSystem resource.
 */
export interface WindowsFileSystemArgs {
    readonly activeDirectoryId?: pulumi.Input<string>;
    readonly automaticBackupRetentionDays?: pulumi.Input<number>;
    readonly copyTagsToBackups?: pulumi.Input<boolean>;
    readonly dailyAutomaticBackupStartTime?: pulumi.Input<string>;
    readonly deploymentType?: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly preferredSubnetId?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly selfManagedActiveDirectory?: pulumi.Input<inputs.fsx.WindowsFileSystemSelfManagedActiveDirectory>;
    readonly skipFinalBackup?: pulumi.Input<boolean>;
    readonly storageCapacity: pulumi.Input<number>;
    readonly storageType?: pulumi.Input<string>;
    readonly subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly throughputCapacity: pulumi.Input<number>;
    readonly weeklyMaintenanceStartTime?: pulumi.Input<string>;
}
