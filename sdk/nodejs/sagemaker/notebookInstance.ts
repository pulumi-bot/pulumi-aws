// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NotebookInstance extends pulumi.CustomResource {
    /**
     * Get an existing NotebookInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotebookInstanceState, opts?: pulumi.CustomResourceOptions): NotebookInstance {
        return new NotebookInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sagemaker/notebookInstance:NotebookInstance';

    /**
     * Returns true if the given object is an instance of NotebookInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotebookInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotebookInstance.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly directInternetAccess!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly lifecycleConfigName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a NotebookInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotebookInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotebookInstanceArgs | NotebookInstanceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NotebookInstanceState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["directInternetAccess"] = state ? state.directInternetAccess : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["lifecycleConfigName"] = state ? state.lifecycleConfigName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NotebookInstanceArgs | undefined;
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["directInternetAccess"] = args ? args.directInternetAccess : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["lifecycleConfigName"] = args ? args.lifecycleConfigName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NotebookInstance.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotebookInstance resources.
 */
export interface NotebookInstanceState {
    readonly arn?: pulumi.Input<string>;
    readonly directInternetAccess?: pulumi.Input<string>;
    readonly instanceType?: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly lifecycleConfigName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly roleArn?: pulumi.Input<string>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subnetId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NotebookInstance resource.
 */
export interface NotebookInstanceArgs {
    readonly directInternetAccess?: pulumi.Input<string>;
    readonly instanceType: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly lifecycleConfigName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly roleArn: pulumi.Input<string>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subnetId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
