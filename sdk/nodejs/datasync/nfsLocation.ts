// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class NfsLocation extends pulumi.CustomResource {
    /**
     * Get an existing NfsLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NfsLocationState, opts?: pulumi.CustomResourceOptions): NfsLocation {
        return new NfsLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:datasync/nfsLocation:NfsLocation';

    /**
     * Returns true if the given object is an instance of NfsLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NfsLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NfsLocation.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly onPremConfig!: pulumi.Output<outputs.datasync.NfsLocationOnPremConfig>;
    public readonly serverHostname!: pulumi.Output<string>;
    public readonly subdirectory!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a NfsLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NfsLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NfsLocationArgs | NfsLocationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NfsLocationState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["onPremConfig"] = state ? state.onPremConfig : undefined;
            inputs["serverHostname"] = state ? state.serverHostname : undefined;
            inputs["subdirectory"] = state ? state.subdirectory : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as NfsLocationArgs | undefined;
            if (!args || args.onPremConfig === undefined) {
                throw new Error("Missing required property 'onPremConfig'");
            }
            if (!args || args.serverHostname === undefined) {
                throw new Error("Missing required property 'serverHostname'");
            }
            if (!args || args.subdirectory === undefined) {
                throw new Error("Missing required property 'subdirectory'");
            }
            inputs["onPremConfig"] = args ? args.onPremConfig : undefined;
            inputs["serverHostname"] = args ? args.serverHostname : undefined;
            inputs["subdirectory"] = args ? args.subdirectory : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["uri"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NfsLocation.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NfsLocation resources.
 */
export interface NfsLocationState {
    readonly arn?: pulumi.Input<string>;
    readonly onPremConfig?: pulumi.Input<inputs.datasync.NfsLocationOnPremConfig>;
    readonly serverHostname?: pulumi.Input<string>;
    readonly subdirectory?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NfsLocation resource.
 */
export interface NfsLocationArgs {
    readonly onPremConfig: pulumi.Input<inputs.datasync.NfsLocationOnPremConfig>;
    readonly serverHostname: pulumi.Input<string>;
    readonly subdirectory: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
