// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## ---
 * 
 * layout: "aws"
 * page_title: "AWS: aws_pinpoint_event_stream"
 * sidebar_current: "docs-aws-resource-pinpoint-event-stream"
 * description: |-
 *   Provides a Pinpoint Event Stream resource.
 * ---
 * 
 * # aws_pinpoint_event_stream
 * 
 * Provides a Pinpoint Event Stream resource.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const aws_iam_role_test_role = new aws.iam.Role("test_role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "pinpoint.us-east-1.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const aws_kinesis_stream_test_stream = new aws.kinesis.Stream("test_stream", {
 *     name: "pinpoint-kinesis-test",
 *     shardCount: 1,
 * });
 * const aws_pinpoint_app_app = new aws.pinpoint.App("app", {});
 * const aws_iam_role_policy_test_role_policy = new aws.iam.RolePolicy("test_role_policy", {
 *     name: "test_policy",
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": {
 *     "Action": [
 *       "kinesis:PutRecords",
 *       "kinesis:DescribeStream"
 *     ],
 *     "Effect": "Allow",
 *     "Resource": [
 *       "arn:aws:kinesis:us-east-1:*:*&#47;*"
 *     ]
 *   }
 * }
 * `,
 *     role: aws_iam_role_test_role.id,
 * });
 * const aws_pinpoint_event_stream_stream = new aws.pinpoint.EventStream("stream", {
 *     applicationId: aws_pinpoint_app_app.applicationId,
 *     destinationStreamArn: aws_kinesis_stream_test_stream.arn,
 *     roleArn: aws_iam_role_test_role.arn,
 * });
 * ```
 * 
 * 
 * ## Argument Reference
 * 
 * The following arguments are supported:
 * 
 * * `application_id` - (Required) The application ID.
 * * `destination_stream_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
 * * `role_arn` - (Required) The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
 */
export class EventStream extends pulumi.CustomResource {
    /**
     * Get an existing EventStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventStreamState, opts?: pulumi.CustomResourceOptions): EventStream {
        return new EventStream(name, <any>state, { ...opts, id: id });
    }

    public readonly applicationId: pulumi.Output<string>;
    public readonly destinationStreamArn: pulumi.Output<string>;
    public readonly roleArn: pulumi.Output<string>;

    /**
     * Create a EventStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventStreamArgs | EventStreamState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: EventStreamState = argsOrState as EventStreamState | undefined;
            inputs["applicationId"] = state ? state.applicationId : undefined;
            inputs["destinationStreamArn"] = state ? state.destinationStreamArn : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as EventStreamArgs | undefined;
            if (!args || args.applicationId === undefined) {
                throw new Error("Missing required property 'applicationId'");
            }
            if (!args || args.destinationStreamArn === undefined) {
                throw new Error("Missing required property 'destinationStreamArn'");
            }
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["applicationId"] = args ? args.applicationId : undefined;
            inputs["destinationStreamArn"] = args ? args.destinationStreamArn : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
        }
        super("aws:pinpoint/eventStream:EventStream", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventStream resources.
 */
export interface EventStreamState {
    readonly applicationId?: pulumi.Input<string>;
    readonly destinationStreamArn?: pulumi.Input<string>;
    readonly roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventStream resource.
 */
export interface EventStreamArgs {
    readonly applicationId: pulumi.Input<string>;
    readonly destinationStreamArn: pulumi.Input<string>;
    readonly roleArn: pulumi.Input<string>;
}
