// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Recorder extends pulumi.CustomResource {
    /**
     * Get an existing Recorder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecorderState, opts?: pulumi.CustomResourceOptions): Recorder {
        return new Recorder(name, <any>state, { ...opts, id: id });
    }

    public readonly name: pulumi.Output<string>;
    public readonly recordingGroup: pulumi.Output<{ allSupported?: boolean, includeGlobalResourceTypes?: boolean, resourceTypes?: string[] }>;
    public readonly roleArn: pulumi.Output<string>;

    /**
     * Create a Recorder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecorderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecorderArgs | RecorderState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: RecorderState = argsOrState as RecorderState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["recordingGroup"] = state ? state.recordingGroup : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as RecorderArgs | undefined;
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["recordingGroup"] = args ? args.recordingGroup : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
        }
        super("aws:cfg/recorder:Recorder", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Recorder resources.
 */
export interface RecorderState {
    readonly name?: pulumi.Input<string>;
    readonly recordingGroup?: pulumi.Input<{ allSupported?: pulumi.Input<boolean>, includeGlobalResourceTypes?: pulumi.Input<boolean>, resourceTypes?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Recorder resource.
 */
export interface RecorderArgs {
    readonly name?: pulumi.Input<string>;
    readonly recordingGroup?: pulumi.Input<{ allSupported?: pulumi.Input<boolean>, includeGlobalResourceTypes?: pulumi.Input<boolean>, resourceTypes?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly roleArn: pulumi.Input<string>;
}
