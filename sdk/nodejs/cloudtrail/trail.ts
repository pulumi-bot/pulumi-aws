// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Trail extends pulumi.CustomResource {
    /**
     * Get an existing Trail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrailState, opts?: pulumi.CustomResourceOptions): Trail {
        return new Trail(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly cloudWatchLogsGroupArn: pulumi.Output<string | undefined>;
    public readonly cloudWatchLogsRoleArn: pulumi.Output<string | undefined>;
    public readonly enableLogFileValidation: pulumi.Output<boolean | undefined>;
    public readonly enableLogging: pulumi.Output<boolean | undefined>;
    public readonly eventSelectors: pulumi.Output<{ dataResources?: { type: string, values: string[] }[], includeManagementEvents?: boolean, readWriteType?: string }[] | undefined>;
    public /*out*/ readonly homeRegion: pulumi.Output<string>;
    public readonly includeGlobalServiceEvents: pulumi.Output<boolean | undefined>;
    public readonly isMultiRegionTrail: pulumi.Output<boolean | undefined>;
    public readonly isOrganizationTrail: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyId: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly s3BucketName: pulumi.Output<string>;
    public readonly s3KeyPrefix: pulumi.Output<string | undefined>;
    public readonly snsTopicName: pulumi.Output<string | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Trail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrailArgs | TrailState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TrailState = argsOrState as TrailState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudWatchLogsGroupArn"] = state ? state.cloudWatchLogsGroupArn : undefined;
            inputs["cloudWatchLogsRoleArn"] = state ? state.cloudWatchLogsRoleArn : undefined;
            inputs["enableLogFileValidation"] = state ? state.enableLogFileValidation : undefined;
            inputs["enableLogging"] = state ? state.enableLogging : undefined;
            inputs["eventSelectors"] = state ? state.eventSelectors : undefined;
            inputs["homeRegion"] = state ? state.homeRegion : undefined;
            inputs["includeGlobalServiceEvents"] = state ? state.includeGlobalServiceEvents : undefined;
            inputs["isMultiRegionTrail"] = state ? state.isMultiRegionTrail : undefined;
            inputs["isOrganizationTrail"] = state ? state.isOrganizationTrail : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            inputs["s3KeyPrefix"] = state ? state.s3KeyPrefix : undefined;
            inputs["snsTopicName"] = state ? state.snsTopicName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as TrailArgs | undefined;
            if (!args || args.s3BucketName === undefined) {
                throw new Error("Missing required property 's3BucketName'");
            }
            inputs["cloudWatchLogsGroupArn"] = args ? args.cloudWatchLogsGroupArn : undefined;
            inputs["cloudWatchLogsRoleArn"] = args ? args.cloudWatchLogsRoleArn : undefined;
            inputs["enableLogFileValidation"] = args ? args.enableLogFileValidation : undefined;
            inputs["enableLogging"] = args ? args.enableLogging : undefined;
            inputs["eventSelectors"] = args ? args.eventSelectors : undefined;
            inputs["includeGlobalServiceEvents"] = args ? args.includeGlobalServiceEvents : undefined;
            inputs["isMultiRegionTrail"] = args ? args.isMultiRegionTrail : undefined;
            inputs["isOrganizationTrail"] = args ? args.isOrganizationTrail : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            inputs["s3KeyPrefix"] = args ? args.s3KeyPrefix : undefined;
            inputs["snsTopicName"] = args ? args.snsTopicName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["homeRegion"] = undefined /*out*/;
        }
        super("aws:cloudtrail/trail:Trail", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Trail resources.
 */
export interface TrailState {
    readonly arn?: pulumi.Input<string>;
    readonly cloudWatchLogsGroupArn?: pulumi.Input<string>;
    readonly cloudWatchLogsRoleArn?: pulumi.Input<string>;
    readonly enableLogFileValidation?: pulumi.Input<boolean>;
    readonly enableLogging?: pulumi.Input<boolean>;
    readonly eventSelectors?: pulumi.Input<pulumi.Input<{ dataResources?: pulumi.Input<pulumi.Input<{ type: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>, includeManagementEvents?: pulumi.Input<boolean>, readWriteType?: pulumi.Input<string> }>[]>;
    readonly homeRegion?: pulumi.Input<string>;
    readonly includeGlobalServiceEvents?: pulumi.Input<boolean>;
    readonly isMultiRegionTrail?: pulumi.Input<boolean>;
    readonly isOrganizationTrail?: pulumi.Input<boolean>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly s3BucketName?: pulumi.Input<string>;
    readonly s3KeyPrefix?: pulumi.Input<string>;
    readonly snsTopicName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Trail resource.
 */
export interface TrailArgs {
    readonly cloudWatchLogsGroupArn?: pulumi.Input<string>;
    readonly cloudWatchLogsRoleArn?: pulumi.Input<string>;
    readonly enableLogFileValidation?: pulumi.Input<boolean>;
    readonly enableLogging?: pulumi.Input<boolean>;
    readonly eventSelectors?: pulumi.Input<pulumi.Input<{ dataResources?: pulumi.Input<pulumi.Input<{ type: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>, includeManagementEvents?: pulumi.Input<boolean>, readWriteType?: pulumi.Input<string> }>[]>;
    readonly includeGlobalServiceEvents?: pulumi.Input<boolean>;
    readonly isMultiRegionTrail?: pulumi.Input<boolean>;
    readonly isOrganizationTrail?: pulumi.Input<boolean>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly s3BucketName: pulumi.Input<string>;
    readonly s3KeyPrefix?: pulumi.Input<string>;
    readonly snsTopicName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
