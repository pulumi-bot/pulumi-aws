// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PatchBaseline extends pulumi.CustomResource {
    /**
     * Get an existing PatchBaseline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PatchBaselineState, opts?: pulumi.CustomResourceOptions): PatchBaseline {
        return new PatchBaseline(name, <any>state, { ...opts, id: id });
    }

    public readonly approvalRules: pulumi.Output<{ approveAfterDays: number, complianceLevel?: string, enableNonSecurity?: boolean, patchFilters: { key: string, values: string[] }[] }[] | undefined>;
    public readonly approvedPatches: pulumi.Output<string[] | undefined>;
    public readonly approvedPatchesComplianceLevel: pulumi.Output<string | undefined>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly globalFilters: pulumi.Output<{ key: string, values: string[] }[] | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly operatingSystem: pulumi.Output<string | undefined>;
    public readonly rejectedPatches: pulumi.Output<string[] | undefined>;

    /**
     * Create a PatchBaseline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PatchBaselineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PatchBaselineArgs | PatchBaselineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: PatchBaselineState = argsOrState as PatchBaselineState | undefined;
            inputs["approvalRules"] = state ? state.approvalRules : undefined;
            inputs["approvedPatches"] = state ? state.approvedPatches : undefined;
            inputs["approvedPatchesComplianceLevel"] = state ? state.approvedPatchesComplianceLevel : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["globalFilters"] = state ? state.globalFilters : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            inputs["rejectedPatches"] = state ? state.rejectedPatches : undefined;
        } else {
            const args = argsOrState as PatchBaselineArgs | undefined;
            inputs["approvalRules"] = args ? args.approvalRules : undefined;
            inputs["approvedPatches"] = args ? args.approvedPatches : undefined;
            inputs["approvedPatchesComplianceLevel"] = args ? args.approvedPatchesComplianceLevel : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["globalFilters"] = args ? args.globalFilters : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            inputs["rejectedPatches"] = args ? args.rejectedPatches : undefined;
        }
        super("aws:ssm/patchBaseline:PatchBaseline", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PatchBaseline resources.
 */
export interface PatchBaselineState {
    readonly approvalRules?: pulumi.Input<pulumi.Input<{ approveAfterDays: pulumi.Input<number>, complianceLevel?: pulumi.Input<string>, enableNonSecurity?: pulumi.Input<boolean>, patchFilters: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]> }>[]>;
    readonly approvedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    readonly approvedPatchesComplianceLevel?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly globalFilters?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly name?: pulumi.Input<string>;
    readonly operatingSystem?: pulumi.Input<string>;
    readonly rejectedPatches?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PatchBaseline resource.
 */
export interface PatchBaselineArgs {
    readonly approvalRules?: pulumi.Input<pulumi.Input<{ approveAfterDays: pulumi.Input<number>, complianceLevel?: pulumi.Input<string>, enableNonSecurity?: pulumi.Input<boolean>, patchFilters: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]> }>[]>;
    readonly approvedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    readonly approvedPatchesComplianceLevel?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly globalFilters?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly name?: pulumi.Input<string>;
    readonly operatingSystem?: pulumi.Input<string>;
    readonly rejectedPatches?: pulumi.Input<pulumi.Input<string>[]>;
}
