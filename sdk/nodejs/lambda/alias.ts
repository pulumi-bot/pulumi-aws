// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Alias extends pulumi.CustomResource {
    /**
     * Get an existing Alias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AliasState, opts?: pulumi.CustomResourceOptions): Alias {
        return new Alias(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly functionName: pulumi.Output<string>;
    public readonly functionVersion: pulumi.Output<string>;
    public /*out*/ readonly invokeArn: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly routingConfig: pulumi.Output<{ additionalVersionWeights?: {[key: string]: number} } | undefined>;

    /**
     * Create a Alias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AliasArgs | AliasState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AliasState = argsOrState as AliasState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["functionName"] = state ? state.functionName : undefined;
            inputs["functionVersion"] = state ? state.functionVersion : undefined;
            inputs["invokeArn"] = state ? state.invokeArn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["routingConfig"] = state ? state.routingConfig : undefined;
        } else {
            const args = argsOrState as AliasArgs | undefined;
            if (!args || args.functionName === undefined) {
                throw new Error("Missing required property 'functionName'");
            }
            if (!args || args.functionVersion === undefined) {
                throw new Error("Missing required property 'functionVersion'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["functionVersion"] = args ? args.functionVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["routingConfig"] = args ? args.routingConfig : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["invokeArn"] = undefined /*out*/;
        }
        super("aws:lambda/alias:Alias", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alias resources.
 */
export interface AliasState {
    readonly arn?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly functionName?: pulumi.Input<string>;
    readonly functionVersion?: pulumi.Input<string>;
    readonly invokeArn?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly routingConfig?: pulumi.Input<{ additionalVersionWeights?: pulumi.Input<{[key: string]: pulumi.Input<number>}> }>;
}

/**
 * The set of arguments for constructing a Alias resource.
 */
export interface AliasArgs {
    readonly description?: pulumi.Input<string>;
    readonly functionName: pulumi.Input<string>;
    readonly functionVersion: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly routingConfig?: pulumi.Input<{ additionalVersionWeights?: pulumi.Input<{[key: string]: pulumi.Input<number>}> }>;
}
