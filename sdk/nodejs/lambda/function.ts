// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

import {ARN} from "..";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly code!: pulumi.Output<pulumi.asset.Archive | undefined>;
    public readonly deadLetterConfig!: pulumi.Output<outputs.lambda.FunctionDeadLetterConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environment!: pulumi.Output<outputs.lambda.FunctionEnvironment | undefined>;
    public readonly fileSystemConfig!: pulumi.Output<outputs.lambda.FunctionFileSystemConfig | undefined>;
    public readonly handler!: pulumi.Output<string>;
    public /*out*/ readonly invokeArn!: pulumi.Output<string>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly layers!: pulumi.Output<string[] | undefined>;
    public readonly memorySize!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly publish!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly qualifiedArn!: pulumi.Output<string>;
    public readonly reservedConcurrentExecutions!: pulumi.Output<number | undefined>;
    public readonly role!: pulumi.Output<ARN>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly s3Bucket!: pulumi.Output<string | undefined>;
    public readonly s3Key!: pulumi.Output<string | undefined>;
    public readonly s3ObjectVersion!: pulumi.Output<string | undefined>;
    public readonly sourceCodeHash!: pulumi.Output<string>;
    public /*out*/ readonly sourceCodeSize!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly tracingConfig!: pulumi.Output<outputs.lambda.FunctionTracingConfig>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly vpcConfig!: pulumi.Output<outputs.lambda.FunctionVpcConfig | undefined>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as FunctionState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["code"] = state ? state.code : undefined;
            inputs["deadLetterConfig"] = state ? state.deadLetterConfig : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["fileSystemConfig"] = state ? state.fileSystemConfig : undefined;
            inputs["handler"] = state ? state.handler : undefined;
            inputs["invokeArn"] = state ? state.invokeArn : undefined;
            inputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            inputs["lastModified"] = state ? state.lastModified : undefined;
            inputs["layers"] = state ? state.layers : undefined;
            inputs["memorySize"] = state ? state.memorySize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publish"] = state ? state.publish : undefined;
            inputs["qualifiedArn"] = state ? state.qualifiedArn : undefined;
            inputs["reservedConcurrentExecutions"] = state ? state.reservedConcurrentExecutions : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["runtime"] = state ? state.runtime : undefined;
            inputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            inputs["s3Key"] = state ? state.s3Key : undefined;
            inputs["s3ObjectVersion"] = state ? state.s3ObjectVersion : undefined;
            inputs["sourceCodeHash"] = state ? state.sourceCodeHash : undefined;
            inputs["sourceCodeSize"] = state ? state.sourceCodeSize : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["tracingConfig"] = state ? state.tracingConfig : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if (!args || args.handler === undefined) {
                throw new Error("Missing required property 'handler'");
            }
            if (!args || args.role === undefined) {
                throw new Error("Missing required property 'role'");
            }
            if (!args || args.runtime === undefined) {
                throw new Error("Missing required property 'runtime'");
            }
            inputs["code"] = args ? args.code : undefined;
            inputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["fileSystemConfig"] = args ? args.fileSystemConfig : undefined;
            inputs["handler"] = args ? args.handler : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["layers"] = args ? args.layers : undefined;
            inputs["memorySize"] = args ? args.memorySize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["publish"] = args ? args.publish : undefined;
            inputs["reservedConcurrentExecutions"] = args ? args.reservedConcurrentExecutions : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["runtime"] = args ? args.runtime : undefined;
            inputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            inputs["s3Key"] = args ? args.s3Key : undefined;
            inputs["s3ObjectVersion"] = args ? args.s3ObjectVersion : undefined;
            inputs["sourceCodeHash"] = args ? args.sourceCodeHash : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["tracingConfig"] = args ? args.tracingConfig : undefined;
            inputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["invokeArn"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["qualifiedArn"] = undefined /*out*/;
            inputs["sourceCodeSize"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Function.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    readonly arn?: pulumi.Input<string>;
    readonly code?: pulumi.Input<pulumi.asset.Archive>;
    readonly deadLetterConfig?: pulumi.Input<inputs.lambda.FunctionDeadLetterConfig>;
    readonly description?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<inputs.lambda.FunctionEnvironment>;
    readonly fileSystemConfig?: pulumi.Input<inputs.lambda.FunctionFileSystemConfig>;
    readonly handler?: pulumi.Input<string>;
    readonly invokeArn?: pulumi.Input<string>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly lastModified?: pulumi.Input<string>;
    readonly layers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly memorySize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly publish?: pulumi.Input<boolean>;
    readonly qualifiedArn?: pulumi.Input<string>;
    readonly reservedConcurrentExecutions?: pulumi.Input<number>;
    readonly role?: pulumi.Input<ARN>;
    readonly runtime?: pulumi.Input<string>;
    readonly s3Bucket?: pulumi.Input<string>;
    readonly s3Key?: pulumi.Input<string>;
    readonly s3ObjectVersion?: pulumi.Input<string>;
    readonly sourceCodeHash?: pulumi.Input<string>;
    readonly sourceCodeSize?: pulumi.Input<number>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timeout?: pulumi.Input<number>;
    readonly tracingConfig?: pulumi.Input<inputs.lambda.FunctionTracingConfig>;
    readonly version?: pulumi.Input<string>;
    readonly vpcConfig?: pulumi.Input<inputs.lambda.FunctionVpcConfig>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    readonly code?: pulumi.Input<pulumi.asset.Archive>;
    readonly deadLetterConfig?: pulumi.Input<inputs.lambda.FunctionDeadLetterConfig>;
    readonly description?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<inputs.lambda.FunctionEnvironment>;
    readonly fileSystemConfig?: pulumi.Input<inputs.lambda.FunctionFileSystemConfig>;
    readonly handler: pulumi.Input<string>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly layers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly memorySize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly publish?: pulumi.Input<boolean>;
    readonly reservedConcurrentExecutions?: pulumi.Input<number>;
    readonly role: pulumi.Input<ARN>;
    readonly runtime: pulumi.Input<string>;
    readonly s3Bucket?: pulumi.Input<string>;
    readonly s3Key?: pulumi.Input<string>;
    readonly s3ObjectVersion?: pulumi.Input<string>;
    readonly sourceCodeHash?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timeout?: pulumi.Input<number>;
    readonly tracingConfig?: pulumi.Input<inputs.lambda.FunctionTracingConfig>;
    readonly vpcConfig?: pulumi.Input<inputs.lambda.FunctionVpcConfig>;
}
