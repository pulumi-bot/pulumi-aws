// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

import {InstanceProfile} from "../iam";

export class LaunchConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LaunchConfigurationState, opts?: pulumi.CustomResourceOptions): LaunchConfiguration {
        return new LaunchConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/launchConfiguration:LaunchConfiguration';

    /**
     * Returns true if the given object is an instance of LaunchConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LaunchConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchConfiguration.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    public readonly ebsBlockDevices!: pulumi.Output<outputs.ec2.LaunchConfigurationEbsBlockDevice[]>;
    public readonly ebsOptimized!: pulumi.Output<boolean>;
    public readonly enableMonitoring!: pulumi.Output<boolean | undefined>;
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.ec2.LaunchConfigurationEphemeralBlockDevice[] | undefined>;
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly keyName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly placementTenancy!: pulumi.Output<string | undefined>;
    public readonly rootBlockDevice!: pulumi.Output<outputs.ec2.LaunchConfigurationRootBlockDevice>;
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    public readonly spotPrice!: pulumi.Output<string | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly userDataBase64!: pulumi.Output<string | undefined>;
    public readonly vpcClassicLinkId!: pulumi.Output<string | undefined>;
    public readonly vpcClassicLinkSecurityGroups!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LaunchConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LaunchConfigurationArgs | LaunchConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LaunchConfigurationState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            inputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            inputs["enableMonitoring"] = state ? state.enableMonitoring : undefined;
            inputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            inputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["placementTenancy"] = state ? state.placementTenancy : undefined;
            inputs["rootBlockDevice"] = state ? state.rootBlockDevice : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["spotPrice"] = state ? state.spotPrice : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["userDataBase64"] = state ? state.userDataBase64 : undefined;
            inputs["vpcClassicLinkId"] = state ? state.vpcClassicLinkId : undefined;
            inputs["vpcClassicLinkSecurityGroups"] = state ? state.vpcClassicLinkSecurityGroups : undefined;
        } else {
            const args = argsOrState as LaunchConfigurationArgs | undefined;
            if (!args || args.imageId === undefined) {
                throw new Error("Missing required property 'imageId'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            inputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            inputs["enableMonitoring"] = args ? args.enableMonitoring : undefined;
            inputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            inputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["placementTenancy"] = args ? args.placementTenancy : undefined;
            inputs["rootBlockDevice"] = args ? args.rootBlockDevice : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["spotPrice"] = args ? args.spotPrice : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["userDataBase64"] = args ? args.userDataBase64 : undefined;
            inputs["vpcClassicLinkId"] = args ? args.vpcClassicLinkId : undefined;
            inputs["vpcClassicLinkSecurityGroups"] = args ? args.vpcClassicLinkSecurityGroups : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LaunchConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LaunchConfiguration resources.
 */
export interface LaunchConfigurationState {
    readonly arn?: pulumi.Input<string>;
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEbsBlockDevice>[]>;
    readonly ebsOptimized?: pulumi.Input<boolean>;
    readonly enableMonitoring?: pulumi.Input<boolean>;
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEphemeralBlockDevice>[]>;
    readonly iamInstanceProfile?: pulumi.Input<string | InstanceProfile>;
    readonly imageId?: pulumi.Input<string>;
    readonly instanceType?: pulumi.Input<string>;
    readonly keyName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly placementTenancy?: pulumi.Input<string>;
    readonly rootBlockDevice?: pulumi.Input<inputs.ec2.LaunchConfigurationRootBlockDevice>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly spotPrice?: pulumi.Input<string>;
    readonly userData?: pulumi.Input<string>;
    readonly userDataBase64?: pulumi.Input<string>;
    readonly vpcClassicLinkId?: pulumi.Input<string>;
    readonly vpcClassicLinkSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LaunchConfiguration resource.
 */
export interface LaunchConfigurationArgs {
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEbsBlockDevice>[]>;
    readonly ebsOptimized?: pulumi.Input<boolean>;
    readonly enableMonitoring?: pulumi.Input<boolean>;
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEphemeralBlockDevice>[]>;
    readonly iamInstanceProfile?: pulumi.Input<string | InstanceProfile>;
    readonly imageId: pulumi.Input<string>;
    readonly instanceType: pulumi.Input<string>;
    readonly keyName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly placementTenancy?: pulumi.Input<string>;
    readonly rootBlockDevice?: pulumi.Input<inputs.ec2.LaunchConfigurationRootBlockDevice>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly spotPrice?: pulumi.Input<string>;
    readonly userData?: pulumi.Input<string>;
    readonly userDataBase64?: pulumi.Input<string>;
    readonly vpcClassicLinkId?: pulumi.Input<string>;
    readonly vpcClassicLinkSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}
