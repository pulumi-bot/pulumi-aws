// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class TrafficMirrorFilterRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorFilterRuleState, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilterRule {
        return new TrafficMirrorFilterRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilterRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    public readonly destinationPortRange!: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleDestinationPortRange | undefined>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly ruleAction!: pulumi.Output<string>;
    public readonly ruleNumber!: pulumi.Output<number>;
    public readonly sourceCidrBlock!: pulumi.Output<string>;
    public readonly sourcePortRange!: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleSourcePortRange | undefined>;
    public readonly trafficDirection!: pulumi.Output<string>;
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;

    /**
     * Create a TrafficMirrorFilterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorFilterRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorFilterRuleArgs | TrafficMirrorFilterRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TrafficMirrorFilterRuleState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            inputs["destinationPortRange"] = state ? state.destinationPortRange : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["ruleAction"] = state ? state.ruleAction : undefined;
            inputs["ruleNumber"] = state ? state.ruleNumber : undefined;
            inputs["sourceCidrBlock"] = state ? state.sourceCidrBlock : undefined;
            inputs["sourcePortRange"] = state ? state.sourcePortRange : undefined;
            inputs["trafficDirection"] = state ? state.trafficDirection : undefined;
            inputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
        } else {
            const args = argsOrState as TrafficMirrorFilterRuleArgs | undefined;
            if (!args || args.destinationCidrBlock === undefined) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if (!args || args.ruleAction === undefined) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if (!args || args.ruleNumber === undefined) {
                throw new Error("Missing required property 'ruleNumber'");
            }
            if (!args || args.sourceCidrBlock === undefined) {
                throw new Error("Missing required property 'sourceCidrBlock'");
            }
            if (!args || args.trafficDirection === undefined) {
                throw new Error("Missing required property 'trafficDirection'");
            }
            if (!args || args.trafficMirrorFilterId === undefined) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            inputs["destinationPortRange"] = args ? args.destinationPortRange : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["ruleAction"] = args ? args.ruleAction : undefined;
            inputs["ruleNumber"] = args ? args.ruleNumber : undefined;
            inputs["sourceCidrBlock"] = args ? args.sourceCidrBlock : undefined;
            inputs["sourcePortRange"] = args ? args.sourcePortRange : undefined;
            inputs["trafficDirection"] = args ? args.trafficDirection : undefined;
            inputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TrafficMirrorFilterRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
 */
export interface TrafficMirrorFilterRuleState {
    readonly description?: pulumi.Input<string>;
    readonly destinationCidrBlock?: pulumi.Input<string>;
    readonly destinationPortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleDestinationPortRange>;
    readonly protocol?: pulumi.Input<number>;
    readonly ruleAction?: pulumi.Input<string>;
    readonly ruleNumber?: pulumi.Input<number>;
    readonly sourceCidrBlock?: pulumi.Input<string>;
    readonly sourcePortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleSourcePortRange>;
    readonly trafficDirection?: pulumi.Input<string>;
    readonly trafficMirrorFilterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficMirrorFilterRule resource.
 */
export interface TrafficMirrorFilterRuleArgs {
    readonly description?: pulumi.Input<string>;
    readonly destinationCidrBlock: pulumi.Input<string>;
    readonly destinationPortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleDestinationPortRange>;
    readonly protocol?: pulumi.Input<number>;
    readonly ruleAction: pulumi.Input<string>;
    readonly ruleNumber: pulumi.Input<number>;
    readonly sourceCidrBlock: pulumi.Input<string>;
    readonly sourcePortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleSourcePortRange>;
    readonly trafficDirection: pulumi.Input<string>;
    readonly trafficMirrorFilterId: pulumi.Input<string>;
}
