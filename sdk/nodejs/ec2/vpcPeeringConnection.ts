// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VpcPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions): VpcPeeringConnection {
        return new VpcPeeringConnection(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly acceptStatus: pulumi.Output<string>;
    public readonly accepter: pulumi.Output<{ allowClassicLinkToRemoteVpc?: boolean, allowRemoteVpcDnsResolution?: boolean, allowVpcToRemoteClassicLink?: boolean }>;
    public readonly autoAccept: pulumi.Output<boolean | undefined>;
    public readonly peerOwnerId: pulumi.Output<string>;
    public readonly peerRegion: pulumi.Output<string>;
    public readonly peerVpcId: pulumi.Output<string>;
    public readonly requester: pulumi.Output<{ allowClassicLinkToRemoteVpc?: boolean, allowRemoteVpcDnsResolution?: boolean, allowVpcToRemoteClassicLink?: boolean }>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a VpcPeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeeringConnectionArgs | VpcPeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VpcPeeringConnectionState = argsOrState as VpcPeeringConnectionState | undefined;
            inputs["acceptStatus"] = state ? state.acceptStatus : undefined;
            inputs["accepter"] = state ? state.accepter : undefined;
            inputs["autoAccept"] = state ? state.autoAccept : undefined;
            inputs["peerOwnerId"] = state ? state.peerOwnerId : undefined;
            inputs["peerRegion"] = state ? state.peerRegion : undefined;
            inputs["peerVpcId"] = state ? state.peerVpcId : undefined;
            inputs["requester"] = state ? state.requester : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcPeeringConnectionArgs | undefined;
            if (!args || args.peerVpcId === undefined) {
                throw new Error("Missing required property 'peerVpcId'");
            }
            if (!args || args.vpcId === undefined) {
                throw new Error("Missing required property 'vpcId'");
            }
            inputs["accepter"] = args ? args.accepter : undefined;
            inputs["autoAccept"] = args ? args.autoAccept : undefined;
            inputs["peerOwnerId"] = args ? args.peerOwnerId : undefined;
            inputs["peerRegion"] = args ? args.peerRegion : undefined;
            inputs["peerVpcId"] = args ? args.peerVpcId : undefined;
            inputs["requester"] = args ? args.requester : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["acceptStatus"] = undefined /*out*/;
        }
        super("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcPeeringConnection resources.
 */
export interface VpcPeeringConnectionState {
    readonly acceptStatus?: pulumi.Input<string>;
    readonly accepter?: pulumi.Input<{ allowClassicLinkToRemoteVpc?: pulumi.Input<boolean>, allowRemoteVpcDnsResolution?: pulumi.Input<boolean>, allowVpcToRemoteClassicLink?: pulumi.Input<boolean> }>;
    readonly autoAccept?: pulumi.Input<boolean>;
    readonly peerOwnerId?: pulumi.Input<string>;
    readonly peerRegion?: pulumi.Input<string>;
    readonly peerVpcId?: pulumi.Input<string>;
    readonly requester?: pulumi.Input<{ allowClassicLinkToRemoteVpc?: pulumi.Input<boolean>, allowRemoteVpcDnsResolution?: pulumi.Input<boolean>, allowVpcToRemoteClassicLink?: pulumi.Input<boolean> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcPeeringConnection resource.
 */
export interface VpcPeeringConnectionArgs {
    readonly accepter?: pulumi.Input<{ allowClassicLinkToRemoteVpc?: pulumi.Input<boolean>, allowRemoteVpcDnsResolution?: pulumi.Input<boolean>, allowVpcToRemoteClassicLink?: pulumi.Input<boolean> }>;
    readonly autoAccept?: pulumi.Input<boolean>;
    readonly peerOwnerId?: pulumi.Input<string>;
    readonly peerRegion?: pulumi.Input<string>;
    readonly peerVpcId: pulumi.Input<string>;
    readonly requester?: pulumi.Input<{ allowClassicLinkToRemoteVpc?: pulumi.Input<boolean>, allowRemoteVpcDnsResolution?: pulumi.Input<boolean>, allowVpcToRemoteClassicLink?: pulumi.Input<boolean> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly vpcId: pulumi.Input<string>;
}
