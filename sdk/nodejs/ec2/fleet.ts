// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetState, opts?: pulumi.CustomResourceOptions): Fleet {
        return new Fleet(name, <any>state, { ...opts, id: id });
    }

    public readonly excessCapacityTerminationPolicy: pulumi.Output<string | undefined>;
    public readonly launchTemplateConfig: pulumi.Output<{ launchTemplateSpecification: { launchTemplateId?: string, launchTemplateName?: string, version: string }, overrides?: { availabilityZone?: string, instanceType?: string, maxPrice?: string, priority?: number, subnetId?: string, weightedCapacity?: number }[] }>;
    public readonly onDemandOptions: pulumi.Output<{ allocationStrategy?: string } | undefined>;
    public readonly replaceUnhealthyInstances: pulumi.Output<boolean | undefined>;
    public readonly spotOptions: pulumi.Output<{ allocationStrategy?: string, instanceInterruptionBehavior?: string, instancePoolsToUseCount?: number } | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targetCapacitySpecification: pulumi.Output<{ defaultTargetCapacityType: string, onDemandTargetCapacity?: number, spotTargetCapacity?: number, totalTargetCapacity: number }>;
    public readonly terminateInstances: pulumi.Output<boolean | undefined>;
    public readonly terminateInstancesWithExpiration: pulumi.Output<boolean | undefined>;
    public readonly type: pulumi.Output<string | undefined>;

    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetArgs | FleetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: FleetState = argsOrState as FleetState | undefined;
            inputs["excessCapacityTerminationPolicy"] = state ? state.excessCapacityTerminationPolicy : undefined;
            inputs["launchTemplateConfig"] = state ? state.launchTemplateConfig : undefined;
            inputs["onDemandOptions"] = state ? state.onDemandOptions : undefined;
            inputs["replaceUnhealthyInstances"] = state ? state.replaceUnhealthyInstances : undefined;
            inputs["spotOptions"] = state ? state.spotOptions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetCapacitySpecification"] = state ? state.targetCapacitySpecification : undefined;
            inputs["terminateInstances"] = state ? state.terminateInstances : undefined;
            inputs["terminateInstancesWithExpiration"] = state ? state.terminateInstancesWithExpiration : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FleetArgs | undefined;
            if (!args || args.launchTemplateConfig === undefined) {
                throw new Error("Missing required property 'launchTemplateConfig'");
            }
            if (!args || args.targetCapacitySpecification === undefined) {
                throw new Error("Missing required property 'targetCapacitySpecification'");
            }
            inputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            inputs["launchTemplateConfig"] = args ? args.launchTemplateConfig : undefined;
            inputs["onDemandOptions"] = args ? args.onDemandOptions : undefined;
            inputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            inputs["spotOptions"] = args ? args.spotOptions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetCapacitySpecification"] = args ? args.targetCapacitySpecification : undefined;
            inputs["terminateInstances"] = args ? args.terminateInstances : undefined;
            inputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        super("aws:ec2/fleet:Fleet", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fleet resources.
 */
export interface FleetState {
    readonly excessCapacityTerminationPolicy?: pulumi.Input<string>;
    readonly launchTemplateConfig?: pulumi.Input<{ launchTemplateSpecification: pulumi.Input<{ launchTemplateId?: pulumi.Input<string>, launchTemplateName?: pulumi.Input<string>, version: pulumi.Input<string> }>, overrides?: pulumi.Input<pulumi.Input<{ availabilityZone?: pulumi.Input<string>, instanceType?: pulumi.Input<string>, maxPrice?: pulumi.Input<string>, priority?: pulumi.Input<number>, subnetId?: pulumi.Input<string>, weightedCapacity?: pulumi.Input<number> }>[]> }>;
    readonly onDemandOptions?: pulumi.Input<{ allocationStrategy?: pulumi.Input<string> }>;
    readonly replaceUnhealthyInstances?: pulumi.Input<boolean>;
    readonly spotOptions?: pulumi.Input<{ allocationStrategy?: pulumi.Input<string>, instanceInterruptionBehavior?: pulumi.Input<string>, instancePoolsToUseCount?: pulumi.Input<number> }>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly targetCapacitySpecification?: pulumi.Input<{ defaultTargetCapacityType: pulumi.Input<string>, onDemandTargetCapacity?: pulumi.Input<number>, spotTargetCapacity?: pulumi.Input<number>, totalTargetCapacity: pulumi.Input<number> }>;
    readonly terminateInstances?: pulumi.Input<boolean>;
    readonly terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    readonly excessCapacityTerminationPolicy?: pulumi.Input<string>;
    readonly launchTemplateConfig: pulumi.Input<{ launchTemplateSpecification: pulumi.Input<{ launchTemplateId?: pulumi.Input<string>, launchTemplateName?: pulumi.Input<string>, version: pulumi.Input<string> }>, overrides?: pulumi.Input<pulumi.Input<{ availabilityZone?: pulumi.Input<string>, instanceType?: pulumi.Input<string>, maxPrice?: pulumi.Input<string>, priority?: pulumi.Input<number>, subnetId?: pulumi.Input<string>, weightedCapacity?: pulumi.Input<number> }>[]> }>;
    readonly onDemandOptions?: pulumi.Input<{ allocationStrategy?: pulumi.Input<string> }>;
    readonly replaceUnhealthyInstances?: pulumi.Input<boolean>;
    readonly spotOptions?: pulumi.Input<{ allocationStrategy?: pulumi.Input<string>, instanceInterruptionBehavior?: pulumi.Input<string>, instancePoolsToUseCount?: pulumi.Input<number> }>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly targetCapacitySpecification: pulumi.Input<{ defaultTargetCapacityType: pulumi.Input<string>, onDemandTargetCapacity?: pulumi.Input<number>, spotTargetCapacity?: pulumi.Input<number>, totalTargetCapacity: pulumi.Input<number> }>;
    readonly terminateInstances?: pulumi.Input<boolean>;
    readonly terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    readonly type?: pulumi.Input<string>;
}
