// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Ami extends pulumi.CustomResource {
    /**
     * Get an existing Ami resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AmiState, opts?: pulumi.CustomResourceOptions): Ami {
        return new Ami(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/ami:Ami';

    /**
     * Returns true if the given object is an instance of Ami.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ami {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ami.__pulumiType;
    }

    public readonly architecture!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ebsBlockDevices!: pulumi.Output<outputs.ec2.AmiEbsBlockDevice[]>;
    public readonly enaSupport!: pulumi.Output<boolean | undefined>;
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.ec2.AmiEphemeralBlockDevice[]>;
    public readonly imageLocation!: pulumi.Output<string>;
    public readonly kernelId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly manageEbsSnapshots!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly ramdiskId!: pulumi.Output<string | undefined>;
    public readonly rootDeviceName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly rootSnapshotId!: pulumi.Output<string>;
    public readonly sriovNetSupport!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly virtualizationType!: pulumi.Output<string | undefined>;

    /**
     * Create a Ami resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AmiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AmiArgs | AmiState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AmiState | undefined;
            inputs["architecture"] = state ? state.architecture : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            inputs["enaSupport"] = state ? state.enaSupport : undefined;
            inputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            inputs["imageLocation"] = state ? state.imageLocation : undefined;
            inputs["kernelId"] = state ? state.kernelId : undefined;
            inputs["manageEbsSnapshots"] = state ? state.manageEbsSnapshots : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ramdiskId"] = state ? state.ramdiskId : undefined;
            inputs["rootDeviceName"] = state ? state.rootDeviceName : undefined;
            inputs["rootSnapshotId"] = state ? state.rootSnapshotId : undefined;
            inputs["sriovNetSupport"] = state ? state.sriovNetSupport : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        } else {
            const args = argsOrState as AmiArgs | undefined;
            inputs["architecture"] = args ? args.architecture : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            inputs["enaSupport"] = args ? args.enaSupport : undefined;
            inputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            inputs["imageLocation"] = args ? args.imageLocation : undefined;
            inputs["kernelId"] = args ? args.kernelId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ramdiskId"] = args ? args.ramdiskId : undefined;
            inputs["rootDeviceName"] = args ? args.rootDeviceName : undefined;
            inputs["sriovNetSupport"] = args ? args.sriovNetSupport : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["virtualizationType"] = args ? args.virtualizationType : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["manageEbsSnapshots"] = undefined /*out*/;
            inputs["rootSnapshotId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Ami.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ami resources.
 */
export interface AmiState {
    readonly architecture?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiEbsBlockDevice>[]>;
    readonly enaSupport?: pulumi.Input<boolean>;
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiEphemeralBlockDevice>[]>;
    readonly imageLocation?: pulumi.Input<string>;
    readonly kernelId?: pulumi.Input<string>;
    readonly manageEbsSnapshots?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly ramdiskId?: pulumi.Input<string>;
    readonly rootDeviceName?: pulumi.Input<string>;
    readonly rootSnapshotId?: pulumi.Input<string>;
    readonly sriovNetSupport?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly virtualizationType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ami resource.
 */
export interface AmiArgs {
    readonly architecture?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiEbsBlockDevice>[]>;
    readonly enaSupport?: pulumi.Input<boolean>;
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiEphemeralBlockDevice>[]>;
    readonly imageLocation?: pulumi.Input<string>;
    readonly kernelId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly ramdiskId?: pulumi.Input<string>;
    readonly rootDeviceName?: pulumi.Input<string>;
    readonly sriovNetSupport?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly virtualizationType?: pulumi.Input<string>;
}
