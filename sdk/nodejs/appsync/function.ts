// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly dataSource!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly functionId!: pulumi.Output<string>;
    public readonly functionVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly requestMappingTemplate!: pulumi.Output<string>;
    public readonly responseMappingTemplate!: pulumi.Output<string>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as FunctionState | undefined;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["dataSource"] = state ? state.dataSource : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["functionId"] = state ? state.functionId : undefined;
            inputs["functionVersion"] = state ? state.functionVersion : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["requestMappingTemplate"] = state ? state.requestMappingTemplate : undefined;
            inputs["responseMappingTemplate"] = state ? state.responseMappingTemplate : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if (!args || args.apiId === undefined) {
                throw new Error("Missing required property 'apiId'");
            }
            if (!args || args.dataSource === undefined) {
                throw new Error("Missing required property 'dataSource'");
            }
            if (!args || args.requestMappingTemplate === undefined) {
                throw new Error("Missing required property 'requestMappingTemplate'");
            }
            if (!args || args.responseMappingTemplate === undefined) {
                throw new Error("Missing required property 'responseMappingTemplate'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["dataSource"] = args ? args.dataSource : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["functionVersion"] = args ? args.functionVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["requestMappingTemplate"] = args ? args.requestMappingTemplate : undefined;
            inputs["responseMappingTemplate"] = args ? args.responseMappingTemplate : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["functionId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Function.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    readonly apiId?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly dataSource?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly functionId?: pulumi.Input<string>;
    readonly functionVersion?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly requestMappingTemplate?: pulumi.Input<string>;
    readonly responseMappingTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    readonly apiId: pulumi.Input<string>;
    readonly dataSource: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly functionVersion?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly requestMappingTemplate: pulumi.Input<string>;
    readonly responseMappingTemplate: pulumi.Input<string>;
}
