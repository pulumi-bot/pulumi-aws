// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ebs/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly encrypted!: pulumi.Output<boolean>;
    public readonly iops!: pulumi.Output<number>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly multiAttachEnabled!: pulumi.Output<boolean | undefined>;
    public readonly outpostArn!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VolumeState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["iops"] = state ? state.iops : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["multiAttachEnabled"] = state ? state.multiAttachEnabled : undefined;
            inputs["outpostArn"] = state ? state.outpostArn : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (!args || args.availabilityZone === undefined) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["iops"] = args ? args.iops : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["multiAttachEnabled"] = args ? args.multiAttachEnabled : undefined;
            inputs["outpostArn"] = args ? args.outpostArn : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    readonly arn?: pulumi.Input<string>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly encrypted?: pulumi.Input<boolean>;
    readonly iops?: pulumi.Input<number>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly multiAttachEnabled?: pulumi.Input<boolean>;
    readonly outpostArn?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly snapshotId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    readonly availabilityZone: pulumi.Input<string>;
    readonly encrypted?: pulumi.Input<boolean>;
    readonly iops?: pulumi.Input<number>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly multiAttachEnabled?: pulumi.Input<boolean>;
    readonly outpostArn?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly snapshotId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type?: pulumi.Input<string>;
}
