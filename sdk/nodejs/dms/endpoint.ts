// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dms/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    public readonly certificateArn!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string | undefined>;
    public readonly elasticsearchSettings!: pulumi.Output<outputs.dms.EndpointElasticsearchSettings | undefined>;
    public /*out*/ readonly endpointArn!: pulumi.Output<string>;
    public readonly endpointId!: pulumi.Output<string>;
    public readonly endpointType!: pulumi.Output<string>;
    public readonly engineName!: pulumi.Output<string>;
    public readonly extraConnectionAttributes!: pulumi.Output<string>;
    public readonly kafkaSettings!: pulumi.Output<outputs.dms.EndpointKafkaSettings | undefined>;
    public readonly kinesisSettings!: pulumi.Output<outputs.dms.EndpointKinesisSettings | undefined>;
    public readonly kmsKeyArn!: pulumi.Output<string>;
    public readonly mongodbSettings!: pulumi.Output<outputs.dms.EndpointMongodbSettings | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly s3Settings!: pulumi.Output<outputs.dms.EndpointS3Settings | undefined>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly serviceAccessRole!: pulumi.Output<string | undefined>;
    public readonly sslMode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EndpointState | undefined;
            inputs["certificateArn"] = state ? state.certificateArn : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["elasticsearchSettings"] = state ? state.elasticsearchSettings : undefined;
            inputs["endpointArn"] = state ? state.endpointArn : undefined;
            inputs["endpointId"] = state ? state.endpointId : undefined;
            inputs["endpointType"] = state ? state.endpointType : undefined;
            inputs["engineName"] = state ? state.engineName : undefined;
            inputs["extraConnectionAttributes"] = state ? state.extraConnectionAttributes : undefined;
            inputs["kafkaSettings"] = state ? state.kafkaSettings : undefined;
            inputs["kinesisSettings"] = state ? state.kinesisSettings : undefined;
            inputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            inputs["mongodbSettings"] = state ? state.mongodbSettings : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["s3Settings"] = state ? state.s3Settings : undefined;
            inputs["serverName"] = state ? state.serverName : undefined;
            inputs["serviceAccessRole"] = state ? state.serviceAccessRole : undefined;
            inputs["sslMode"] = state ? state.sslMode : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (!args || args.endpointId === undefined) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (!args || args.endpointType === undefined) {
                throw new Error("Missing required property 'endpointType'");
            }
            if (!args || args.engineName === undefined) {
                throw new Error("Missing required property 'engineName'");
            }
            inputs["certificateArn"] = args ? args.certificateArn : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["elasticsearchSettings"] = args ? args.elasticsearchSettings : undefined;
            inputs["endpointId"] = args ? args.endpointId : undefined;
            inputs["endpointType"] = args ? args.endpointType : undefined;
            inputs["engineName"] = args ? args.engineName : undefined;
            inputs["extraConnectionAttributes"] = args ? args.extraConnectionAttributes : undefined;
            inputs["kafkaSettings"] = args ? args.kafkaSettings : undefined;
            inputs["kinesisSettings"] = args ? args.kinesisSettings : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["mongodbSettings"] = args ? args.mongodbSettings : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["s3Settings"] = args ? args.s3Settings : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["serviceAccessRole"] = args ? args.serviceAccessRole : undefined;
            inputs["sslMode"] = args ? args.sslMode : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["endpointArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Endpoint.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    readonly certificateArn?: pulumi.Input<string>;
    readonly databaseName?: pulumi.Input<string>;
    readonly elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    readonly endpointArn?: pulumi.Input<string>;
    readonly endpointId?: pulumi.Input<string>;
    readonly endpointType?: pulumi.Input<string>;
    readonly engineName?: pulumi.Input<string>;
    readonly extraConnectionAttributes?: pulumi.Input<string>;
    readonly kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    readonly kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    readonly password?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly s3Settings?: pulumi.Input<inputs.dms.EndpointS3Settings>;
    readonly serverName?: pulumi.Input<string>;
    readonly serviceAccessRole?: pulumi.Input<string>;
    readonly sslMode?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    readonly certificateArn?: pulumi.Input<string>;
    readonly databaseName?: pulumi.Input<string>;
    readonly elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    readonly endpointId: pulumi.Input<string>;
    readonly endpointType: pulumi.Input<string>;
    readonly engineName: pulumi.Input<string>;
    readonly extraConnectionAttributes?: pulumi.Input<string>;
    readonly kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    readonly kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    readonly password?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly s3Settings?: pulumi.Input<inputs.dms.EndpointS3Settings>;
    readonly serverName?: pulumi.Input<string>;
    readonly serviceAccessRole?: pulumi.Input<string>;
    readonly sslMode?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly username?: pulumi.Input<string>;
}
