// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LicenseConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LicenseConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseConfigurationState, opts?: pulumi.CustomResourceOptions): LicenseConfiguration {
        return new LicenseConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:licensemanager/licenseConfiguration:LicenseConfiguration';

    /**
     * Returns true if the given object is an instance of LicenseConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseConfiguration.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly licenseCount!: pulumi.Output<number | undefined>;
    public readonly licenseCountHardLimit!: pulumi.Output<boolean | undefined>;
    public readonly licenseCountingType!: pulumi.Output<string>;
    public readonly licenseRules!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a LicenseConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseConfigurationArgs | LicenseConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LicenseConfigurationState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["licenseCount"] = state ? state.licenseCount : undefined;
            inputs["licenseCountHardLimit"] = state ? state.licenseCountHardLimit : undefined;
            inputs["licenseCountingType"] = state ? state.licenseCountingType : undefined;
            inputs["licenseRules"] = state ? state.licenseRules : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LicenseConfigurationArgs | undefined;
            if (!args || args.licenseCountingType === undefined) {
                throw new Error("Missing required property 'licenseCountingType'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["licenseCount"] = args ? args.licenseCount : undefined;
            inputs["licenseCountHardLimit"] = args ? args.licenseCountHardLimit : undefined;
            inputs["licenseCountingType"] = args ? args.licenseCountingType : undefined;
            inputs["licenseRules"] = args ? args.licenseRules : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LicenseConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicenseConfiguration resources.
 */
export interface LicenseConfigurationState {
    readonly description?: pulumi.Input<string>;
    readonly licenseCount?: pulumi.Input<number>;
    readonly licenseCountHardLimit?: pulumi.Input<boolean>;
    readonly licenseCountingType?: pulumi.Input<string>;
    readonly licenseRules?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LicenseConfiguration resource.
 */
export interface LicenseConfigurationArgs {
    readonly description?: pulumi.Input<string>;
    readonly licenseCount?: pulumi.Input<number>;
    readonly licenseCountHardLimit?: pulumi.Input<boolean>;
    readonly licenseCountingType: pulumi.Input<string>;
    readonly licenseRules?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
