// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {LaunchConfiguration} from "../ec2/launchConfiguration";
import {PlacementGroup} from "../ec2/placementGroup";
import {Metric, MetricsGranularity} from "./metrics";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly availabilityZones: pulumi.Output<string[]>;
    public readonly defaultCooldown: pulumi.Output<number>;
    public readonly desiredCapacity: pulumi.Output<number>;
    public readonly enabledMetrics: pulumi.Output<Metric[] | undefined>;
    public readonly forceDelete: pulumi.Output<boolean | undefined>;
    public readonly healthCheckGracePeriod: pulumi.Output<number | undefined>;
    public readonly healthCheckType: pulumi.Output<string>;
    public readonly initialLifecycleHooks: pulumi.Output<{ defaultResult: string, heartbeatTimeout?: number, lifecycleTransition: string, name: string, notificationMetadata?: string, notificationTargetArn?: string, roleArn?: string }[] | undefined>;
    public readonly launchConfiguration: pulumi.Output<string | undefined>;
    public readonly launchTemplate: pulumi.Output<{ id: string, name: string, version?: string } | undefined>;
    public readonly loadBalancers: pulumi.Output<string[]>;
    public readonly maxSize: pulumi.Output<number>;
    public readonly metricsGranularity: pulumi.Output<string | undefined>;
    public readonly minElbCapacity: pulumi.Output<number | undefined>;
    public readonly minSize: pulumi.Output<number>;
    public readonly mixedInstancesPolicy: pulumi.Output<{ instancesDistribution?: { onDemandAllocationStrategy?: string, onDemandBaseCapacity?: number, onDemandPercentageAboveBaseCapacity?: number, spotAllocationStrategy?: string, spotInstancePools: number, spotMaxPrice?: string }, launchTemplate: { launchTemplateSpecification: { launchTemplateId: string, launchTemplateName: string, version?: string }, overrides?: { instanceType?: string }[] } } | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly namePrefix: pulumi.Output<string | undefined>;
    public readonly placementGroup: pulumi.Output<string | undefined>;
    public readonly protectFromScaleIn: pulumi.Output<boolean | undefined>;
    public readonly serviceLinkedRoleArn: pulumi.Output<string>;
    public readonly suspendedProcesses: pulumi.Output<string[] | undefined>;
    public readonly tags: pulumi.Output<{ key: string, propagateAtLaunch: boolean, value: string }[] | undefined>;
    public readonly tagsCollection: pulumi.Output<{[key: string]: any}[] | undefined>;
    public readonly targetGroupArns: pulumi.Output<string[]>;
    public readonly terminationPolicies: pulumi.Output<string[] | undefined>;
    public readonly vpcZoneIdentifiers: pulumi.Output<string[]>;
    public readonly waitForCapacityTimeout: pulumi.Output<string | undefined>;
    public readonly waitForElbCapacity: pulumi.Output<number | undefined>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: GroupState = argsOrState as GroupState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["defaultCooldown"] = state ? state.defaultCooldown : undefined;
            inputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            inputs["enabledMetrics"] = state ? state.enabledMetrics : undefined;
            inputs["forceDelete"] = state ? state.forceDelete : undefined;
            inputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            inputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            inputs["initialLifecycleHooks"] = state ? state.initialLifecycleHooks : undefined;
            inputs["launchConfiguration"] = state ? state.launchConfiguration : undefined;
            inputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            inputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["metricsGranularity"] = state ? state.metricsGranularity : undefined;
            inputs["minElbCapacity"] = state ? state.minElbCapacity : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["mixedInstancesPolicy"] = state ? state.mixedInstancesPolicy : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["placementGroup"] = state ? state.placementGroup : undefined;
            inputs["protectFromScaleIn"] = state ? state.protectFromScaleIn : undefined;
            inputs["serviceLinkedRoleArn"] = state ? state.serviceLinkedRoleArn : undefined;
            inputs["suspendedProcesses"] = state ? state.suspendedProcesses : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsCollection"] = state ? state.tagsCollection : undefined;
            inputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            inputs["terminationPolicies"] = state ? state.terminationPolicies : undefined;
            inputs["vpcZoneIdentifiers"] = state ? state.vpcZoneIdentifiers : undefined;
            inputs["waitForCapacityTimeout"] = state ? state.waitForCapacityTimeout : undefined;
            inputs["waitForElbCapacity"] = state ? state.waitForElbCapacity : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if (!args || args.maxSize === undefined) {
                throw new Error("Missing required property 'maxSize'");
            }
            if (!args || args.minSize === undefined) {
                throw new Error("Missing required property 'minSize'");
            }
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["defaultCooldown"] = args ? args.defaultCooldown : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["enabledMetrics"] = args ? args.enabledMetrics : undefined;
            inputs["forceDelete"] = args ? args.forceDelete : undefined;
            inputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            inputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            inputs["initialLifecycleHooks"] = args ? args.initialLifecycleHooks : undefined;
            inputs["launchConfiguration"] = args ? args.launchConfiguration : undefined;
            inputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            inputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["metricsGranularity"] = args ? args.metricsGranularity : undefined;
            inputs["minElbCapacity"] = args ? args.minElbCapacity : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["mixedInstancesPolicy"] = args ? args.mixedInstancesPolicy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["placementGroup"] = args ? args.placementGroup : undefined;
            inputs["protectFromScaleIn"] = args ? args.protectFromScaleIn : undefined;
            inputs["serviceLinkedRoleArn"] = args ? args.serviceLinkedRoleArn : undefined;
            inputs["suspendedProcesses"] = args ? args.suspendedProcesses : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tagsCollection"] = args ? args.tagsCollection : undefined;
            inputs["targetGroupArns"] = args ? args.targetGroupArns : undefined;
            inputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            inputs["vpcZoneIdentifiers"] = args ? args.vpcZoneIdentifiers : undefined;
            inputs["waitForCapacityTimeout"] = args ? args.waitForCapacityTimeout : undefined;
            inputs["waitForElbCapacity"] = args ? args.waitForElbCapacity : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        super("aws:autoscaling/group:Group", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    readonly arn?: pulumi.Input<string>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultCooldown?: pulumi.Input<number>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    readonly forceDelete?: pulumi.Input<boolean>;
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    readonly healthCheckType?: pulumi.Input<string>;
    readonly initialLifecycleHooks?: pulumi.Input<pulumi.Input<{ defaultResult?: pulumi.Input<string>, heartbeatTimeout?: pulumi.Input<number>, lifecycleTransition: pulumi.Input<string>, name: pulumi.Input<string>, notificationMetadata?: pulumi.Input<string>, notificationTargetArn?: pulumi.Input<string>, roleArn?: pulumi.Input<string> }>[]>;
    readonly launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    readonly launchTemplate?: pulumi.Input<{ id?: pulumi.Input<string>, name?: pulumi.Input<string>, version?: pulumi.Input<string> }>;
    readonly loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly maxSize?: pulumi.Input<number>;
    readonly metricsGranularity?: pulumi.Input<string | MetricsGranularity>;
    readonly minElbCapacity?: pulumi.Input<number>;
    readonly minSize?: pulumi.Input<number>;
    readonly mixedInstancesPolicy?: pulumi.Input<{ instancesDistribution?: pulumi.Input<{ onDemandAllocationStrategy?: pulumi.Input<string>, onDemandBaseCapacity?: pulumi.Input<number>, onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>, spotAllocationStrategy?: pulumi.Input<string>, spotInstancePools?: pulumi.Input<number>, spotMaxPrice?: pulumi.Input<string> }>, launchTemplate: pulumi.Input<{ launchTemplateSpecification: pulumi.Input<{ launchTemplateId?: pulumi.Input<string>, launchTemplateName?: pulumi.Input<string>, version?: pulumi.Input<string> }>, overrides?: pulumi.Input<pulumi.Input<{ instanceType?: pulumi.Input<string> }>[]> }> }>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly placementGroup?: pulumi.Input<string | PlacementGroup>;
    readonly protectFromScaleIn?: pulumi.Input<boolean>;
    readonly serviceLinkedRoleArn?: pulumi.Input<string>;
    readonly suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, propagateAtLaunch: pulumi.Input<boolean>, value: pulumi.Input<string> }>[]>;
    readonly tagsCollection?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    readonly targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    readonly vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly waitForCapacityTimeout?: pulumi.Input<string>;
    readonly waitForElbCapacity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultCooldown?: pulumi.Input<number>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    readonly forceDelete?: pulumi.Input<boolean>;
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    readonly healthCheckType?: pulumi.Input<string>;
    readonly initialLifecycleHooks?: pulumi.Input<pulumi.Input<{ defaultResult?: pulumi.Input<string>, heartbeatTimeout?: pulumi.Input<number>, lifecycleTransition: pulumi.Input<string>, name: pulumi.Input<string>, notificationMetadata?: pulumi.Input<string>, notificationTargetArn?: pulumi.Input<string>, roleArn?: pulumi.Input<string> }>[]>;
    readonly launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    readonly launchTemplate?: pulumi.Input<{ id?: pulumi.Input<string>, name?: pulumi.Input<string>, version?: pulumi.Input<string> }>;
    readonly loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly maxSize: pulumi.Input<number>;
    readonly metricsGranularity?: pulumi.Input<string | MetricsGranularity>;
    readonly minElbCapacity?: pulumi.Input<number>;
    readonly minSize: pulumi.Input<number>;
    readonly mixedInstancesPolicy?: pulumi.Input<{ instancesDistribution?: pulumi.Input<{ onDemandAllocationStrategy?: pulumi.Input<string>, onDemandBaseCapacity?: pulumi.Input<number>, onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>, spotAllocationStrategy?: pulumi.Input<string>, spotInstancePools?: pulumi.Input<number>, spotMaxPrice?: pulumi.Input<string> }>, launchTemplate: pulumi.Input<{ launchTemplateSpecification: pulumi.Input<{ launchTemplateId?: pulumi.Input<string>, launchTemplateName?: pulumi.Input<string>, version?: pulumi.Input<string> }>, overrides?: pulumi.Input<pulumi.Input<{ instanceType?: pulumi.Input<string> }>[]> }> }>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly placementGroup?: pulumi.Input<string | PlacementGroup>;
    readonly protectFromScaleIn?: pulumi.Input<boolean>;
    readonly serviceLinkedRoleArn?: pulumi.Input<string>;
    readonly suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, propagateAtLaunch: pulumi.Input<boolean>, value: pulumi.Input<string> }>[]>;
    readonly tagsCollection?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    readonly targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    readonly vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly waitForCapacityTimeout?: pulumi.Input<string>;
    readonly waitForElbCapacity?: pulumi.Input<number>;
}
