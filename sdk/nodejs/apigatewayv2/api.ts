// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Api extends pulumi.CustomResource {
    /**
     * Get an existing Api resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiState, opts?: pulumi.CustomResourceOptions): Api {
        return new Api(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigatewayv2/api:Api';

    /**
     * Returns true if the given object is an instance of Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Api {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Api.__pulumiType;
    }

    public /*out*/ readonly apiEndpoint!: pulumi.Output<string>;
    public readonly apiKeySelectionExpression!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly corsConfiguration!: pulumi.Output<outputs.apigatewayv2.ApiCorsConfiguration | undefined>;
    public readonly credentialsArn!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly executionArn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocolType!: pulumi.Output<string>;
    public readonly routeKey!: pulumi.Output<string | undefined>;
    public readonly routeSelectionExpression!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Api resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiArgs | ApiState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ApiState | undefined;
            inputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            inputs["apiKeySelectionExpression"] = state ? state.apiKeySelectionExpression : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["corsConfiguration"] = state ? state.corsConfiguration : undefined;
            inputs["credentialsArn"] = state ? state.credentialsArn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["executionArn"] = state ? state.executionArn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["protocolType"] = state ? state.protocolType : undefined;
            inputs["routeKey"] = state ? state.routeKey : undefined;
            inputs["routeSelectionExpression"] = state ? state.routeSelectionExpression : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["target"] = state ? state.target : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ApiArgs | undefined;
            if (!args || args.protocolType === undefined) {
                throw new Error("Missing required property 'protocolType'");
            }
            inputs["apiKeySelectionExpression"] = args ? args.apiKeySelectionExpression : undefined;
            inputs["corsConfiguration"] = args ? args.corsConfiguration : undefined;
            inputs["credentialsArn"] = args ? args.credentialsArn : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["protocolType"] = args ? args.protocolType : undefined;
            inputs["routeKey"] = args ? args.routeKey : undefined;
            inputs["routeSelectionExpression"] = args ? args.routeSelectionExpression : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["target"] = args ? args.target : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["apiEndpoint"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["executionArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Api.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Api resources.
 */
export interface ApiState {
    readonly apiEndpoint?: pulumi.Input<string>;
    readonly apiKeySelectionExpression?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly corsConfiguration?: pulumi.Input<inputs.apigatewayv2.ApiCorsConfiguration>;
    readonly credentialsArn?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly executionArn?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly protocolType?: pulumi.Input<string>;
    readonly routeKey?: pulumi.Input<string>;
    readonly routeSelectionExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly target?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Api resource.
 */
export interface ApiArgs {
    readonly apiKeySelectionExpression?: pulumi.Input<string>;
    readonly corsConfiguration?: pulumi.Input<inputs.apigatewayv2.ApiCorsConfiguration>;
    readonly credentialsArn?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly protocolType: pulumi.Input<string>;
    readonly routeKey?: pulumi.Input<string>;
    readonly routeSelectionExpression?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly target?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
