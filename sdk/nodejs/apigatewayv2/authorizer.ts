// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizerState, opts?: pulumi.CustomResourceOptions): Authorizer {
        return new Authorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigatewayv2/authorizer:Authorizer';

    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public readonly authorizerCredentialsArn!: pulumi.Output<string | undefined>;
    public readonly authorizerType!: pulumi.Output<string>;
    public readonly authorizerUri!: pulumi.Output<string | undefined>;
    public readonly identitySources!: pulumi.Output<string[]>;
    public readonly jwtConfiguration!: pulumi.Output<outputs.apigatewayv2.AuthorizerJwtConfiguration | undefined>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizerArgs | AuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthorizerState | undefined;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["authorizerCredentialsArn"] = state ? state.authorizerCredentialsArn : undefined;
            inputs["authorizerType"] = state ? state.authorizerType : undefined;
            inputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            inputs["identitySources"] = state ? state.identitySources : undefined;
            inputs["jwtConfiguration"] = state ? state.jwtConfiguration : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AuthorizerArgs | undefined;
            if (!args || args.apiId === undefined) {
                throw new Error("Missing required property 'apiId'");
            }
            if (!args || args.authorizerType === undefined) {
                throw new Error("Missing required property 'authorizerType'");
            }
            if (!args || args.identitySources === undefined) {
                throw new Error("Missing required property 'identitySources'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["authorizerCredentialsArn"] = args ? args.authorizerCredentialsArn : undefined;
            inputs["authorizerType"] = args ? args.authorizerType : undefined;
            inputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            inputs["identitySources"] = args ? args.identitySources : undefined;
            inputs["jwtConfiguration"] = args ? args.jwtConfiguration : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Authorizer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Authorizer resources.
 */
export interface AuthorizerState {
    readonly apiId?: pulumi.Input<string>;
    readonly authorizerCredentialsArn?: pulumi.Input<string>;
    readonly authorizerType?: pulumi.Input<string>;
    readonly authorizerUri?: pulumi.Input<string>;
    readonly identitySources?: pulumi.Input<pulumi.Input<string>[]>;
    readonly jwtConfiguration?: pulumi.Input<inputs.apigatewayv2.AuthorizerJwtConfiguration>;
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authorizer resource.
 */
export interface AuthorizerArgs {
    readonly apiId: pulumi.Input<string>;
    readonly authorizerCredentialsArn?: pulumi.Input<string>;
    readonly authorizerType: pulumi.Input<string>;
    readonly authorizerUri?: pulumi.Input<string>;
    readonly identitySources: pulumi.Input<pulumi.Input<string>[]>;
    readonly jwtConfiguration?: pulumi.Input<inputs.apigatewayv2.AuthorizerJwtConfiguration>;
    readonly name?: pulumi.Input<string>;
}
