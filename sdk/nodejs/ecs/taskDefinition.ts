// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class TaskDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskDefinitionState, opts?: pulumi.CustomResourceOptions): TaskDefinition {
        return new TaskDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ecs/taskDefinition:TaskDefinition';

    /**
     * Returns true if the given object is an instance of TaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaskDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskDefinition.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly containerDefinitions!: pulumi.Output<string>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    public readonly executionRoleArn!: pulumi.Output<string | undefined>;
    public readonly family!: pulumi.Output<string>;
    public readonly inferenceAccelerators!: pulumi.Output<outputs.ecs.TaskDefinitionInferenceAccelerator[] | undefined>;
    public readonly ipcMode!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<string | undefined>;
    public readonly networkMode!: pulumi.Output<string>;
    public readonly pidMode!: pulumi.Output<string | undefined>;
    public readonly placementConstraints!: pulumi.Output<outputs.ecs.TaskDefinitionPlacementConstraint[] | undefined>;
    public readonly proxyConfiguration!: pulumi.Output<outputs.ecs.TaskDefinitionProxyConfiguration | undefined>;
    public readonly requiresCompatibilities!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly revision!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taskRoleArn!: pulumi.Output<string | undefined>;
    public readonly volumes!: pulumi.Output<outputs.ecs.TaskDefinitionVolume[] | undefined>;

    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskDefinitionArgs | TaskDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TaskDefinitionState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["containerDefinitions"] = state ? state.containerDefinitions : undefined;
            inputs["cpu"] = state ? state.cpu : undefined;
            inputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            inputs["family"] = state ? state.family : undefined;
            inputs["inferenceAccelerators"] = state ? state.inferenceAccelerators : undefined;
            inputs["ipcMode"] = state ? state.ipcMode : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["networkMode"] = state ? state.networkMode : undefined;
            inputs["pidMode"] = state ? state.pidMode : undefined;
            inputs["placementConstraints"] = state ? state.placementConstraints : undefined;
            inputs["proxyConfiguration"] = state ? state.proxyConfiguration : undefined;
            inputs["requiresCompatibilities"] = state ? state.requiresCompatibilities : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["taskRoleArn"] = state ? state.taskRoleArn : undefined;
            inputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as TaskDefinitionArgs | undefined;
            if (!args || args.containerDefinitions === undefined) {
                throw new Error("Missing required property 'containerDefinitions'");
            }
            if (!args || args.family === undefined) {
                throw new Error("Missing required property 'family'");
            }
            inputs["containerDefinitions"] = args ? args.containerDefinitions : undefined;
            inputs["cpu"] = args ? args.cpu : undefined;
            inputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            inputs["family"] = args ? args.family : undefined;
            inputs["inferenceAccelerators"] = args ? args.inferenceAccelerators : undefined;
            inputs["ipcMode"] = args ? args.ipcMode : undefined;
            inputs["memory"] = args ? args.memory : undefined;
            inputs["networkMode"] = args ? args.networkMode : undefined;
            inputs["pidMode"] = args ? args.pidMode : undefined;
            inputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            inputs["proxyConfiguration"] = args ? args.proxyConfiguration : undefined;
            inputs["requiresCompatibilities"] = args ? args.requiresCompatibilities : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["taskRoleArn"] = args ? args.taskRoleArn : undefined;
            inputs["volumes"] = args ? args.volumes : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TaskDefinition.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TaskDefinition resources.
 */
export interface TaskDefinitionState {
    readonly arn?: pulumi.Input<string>;
    readonly containerDefinitions?: pulumi.Input<string>;
    readonly cpu?: pulumi.Input<string>;
    readonly executionRoleArn?: pulumi.Input<string>;
    readonly family?: pulumi.Input<string>;
    readonly inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionInferenceAccelerator>[]>;
    readonly ipcMode?: pulumi.Input<string>;
    readonly memory?: pulumi.Input<string>;
    readonly networkMode?: pulumi.Input<string>;
    readonly pidMode?: pulumi.Input<string>;
    readonly placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    readonly proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    readonly requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    readonly revision?: pulumi.Input<number>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly taskRoleArn?: pulumi.Input<string>;
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}

/**
 * The set of arguments for constructing a TaskDefinition resource.
 */
export interface TaskDefinitionArgs {
    readonly containerDefinitions: pulumi.Input<string>;
    readonly cpu?: pulumi.Input<string>;
    readonly executionRoleArn?: pulumi.Input<string>;
    readonly family: pulumi.Input<string>;
    readonly inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionInferenceAccelerator>[]>;
    readonly ipcMode?: pulumi.Input<string>;
    readonly memory?: pulumi.Input<string>;
    readonly networkMode?: pulumi.Input<string>;
    readonly pidMode?: pulumi.Input<string>;
    readonly placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    readonly proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    readonly requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly taskRoleArn?: pulumi.Input<string>;
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}
