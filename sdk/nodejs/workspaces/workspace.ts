// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Workspace extends pulumi.CustomResource {
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceState, opts?: pulumi.CustomResourceOptions): Workspace {
        return new Workspace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:workspaces/workspace:Workspace';

    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }

    public readonly bundleId!: pulumi.Output<string>;
    public /*out*/ readonly computerName!: pulumi.Output<string>;
    public readonly directoryId!: pulumi.Output<string>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public readonly rootVolumeEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly userName!: pulumi.Output<string>;
    public readonly userVolumeEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly volumeEncryptionKey!: pulumi.Output<string | undefined>;
    public readonly workspaceProperties!: pulumi.Output<outputs.workspaces.WorkspaceWorkspaceProperties>;

    /**
     * Create a Workspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceArgs | WorkspaceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as WorkspaceState | undefined;
            inputs["bundleId"] = state ? state.bundleId : undefined;
            inputs["computerName"] = state ? state.computerName : undefined;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["rootVolumeEncryptionEnabled"] = state ? state.rootVolumeEncryptionEnabled : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["userName"] = state ? state.userName : undefined;
            inputs["userVolumeEncryptionEnabled"] = state ? state.userVolumeEncryptionEnabled : undefined;
            inputs["volumeEncryptionKey"] = state ? state.volumeEncryptionKey : undefined;
            inputs["workspaceProperties"] = state ? state.workspaceProperties : undefined;
        } else {
            const args = argsOrState as WorkspaceArgs | undefined;
            if (!args || args.bundleId === undefined) {
                throw new Error("Missing required property 'bundleId'");
            }
            if (!args || args.directoryId === undefined) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (!args || args.userName === undefined) {
                throw new Error("Missing required property 'userName'");
            }
            inputs["bundleId"] = args ? args.bundleId : undefined;
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["rootVolumeEncryptionEnabled"] = args ? args.rootVolumeEncryptionEnabled : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userName"] = args ? args.userName : undefined;
            inputs["userVolumeEncryptionEnabled"] = args ? args.userVolumeEncryptionEnabled : undefined;
            inputs["volumeEncryptionKey"] = args ? args.volumeEncryptionKey : undefined;
            inputs["workspaceProperties"] = args ? args.workspaceProperties : undefined;
            inputs["computerName"] = undefined /*out*/;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Workspace.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workspace resources.
 */
export interface WorkspaceState {
    readonly bundleId?: pulumi.Input<string>;
    readonly computerName?: pulumi.Input<string>;
    readonly directoryId?: pulumi.Input<string>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly rootVolumeEncryptionEnabled?: pulumi.Input<boolean>;
    readonly state?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly userName?: pulumi.Input<string>;
    readonly userVolumeEncryptionEnabled?: pulumi.Input<boolean>;
    readonly volumeEncryptionKey?: pulumi.Input<string>;
    readonly workspaceProperties?: pulumi.Input<inputs.workspaces.WorkspaceWorkspaceProperties>;
}

/**
 * The set of arguments for constructing a Workspace resource.
 */
export interface WorkspaceArgs {
    readonly bundleId: pulumi.Input<string>;
    readonly directoryId: pulumi.Input<string>;
    readonly rootVolumeEncryptionEnabled?: pulumi.Input<boolean>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly userName: pulumi.Input<string>;
    readonly userVolumeEncryptionEnabled?: pulumi.Input<boolean>;
    readonly volumeEncryptionKey?: pulumi.Input<string>;
    readonly workspaceProperties?: pulumi.Input<inputs.workspaces.WorkspaceWorkspaceProperties>;
}
