// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2clientvpn/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationOptions!: pulumi.Output<outputs.ec2clientvpn.EndpointAuthenticationOption[]>;
    public readonly clientCidrBlock!: pulumi.Output<string>;
    public readonly connectionLogOptions!: pulumi.Output<outputs.ec2clientvpn.EndpointConnectionLogOptions>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    public readonly serverCertificateArn!: pulumi.Output<string>;
    public readonly splitTunnel!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly transportProtocol!: pulumi.Output<string | undefined>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EndpointState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["authenticationOptions"] = state ? state.authenticationOptions : undefined;
            inputs["clientCidrBlock"] = state ? state.clientCidrBlock : undefined;
            inputs["connectionLogOptions"] = state ? state.connectionLogOptions : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["dnsServers"] = state ? state.dnsServers : undefined;
            inputs["serverCertificateArn"] = state ? state.serverCertificateArn : undefined;
            inputs["splitTunnel"] = state ? state.splitTunnel : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["transportProtocol"] = state ? state.transportProtocol : undefined;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (!args || args.authenticationOptions === undefined) {
                throw new Error("Missing required property 'authenticationOptions'");
            }
            if (!args || args.clientCidrBlock === undefined) {
                throw new Error("Missing required property 'clientCidrBlock'");
            }
            if (!args || args.connectionLogOptions === undefined) {
                throw new Error("Missing required property 'connectionLogOptions'");
            }
            if (!args || args.serverCertificateArn === undefined) {
                throw new Error("Missing required property 'serverCertificateArn'");
            }
            inputs["authenticationOptions"] = args ? args.authenticationOptions : undefined;
            inputs["clientCidrBlock"] = args ? args.clientCidrBlock : undefined;
            inputs["connectionLogOptions"] = args ? args.connectionLogOptions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsServers"] = args ? args.dnsServers : undefined;
            inputs["serverCertificateArn"] = args ? args.serverCertificateArn : undefined;
            inputs["splitTunnel"] = args ? args.splitTunnel : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transportProtocol"] = args ? args.transportProtocol : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Endpoint.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    readonly arn?: pulumi.Input<string>;
    readonly authenticationOptions?: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.EndpointAuthenticationOption>[]>;
    readonly clientCidrBlock?: pulumi.Input<string>;
    readonly connectionLogOptions?: pulumi.Input<inputs.ec2clientvpn.EndpointConnectionLogOptions>;
    readonly description?: pulumi.Input<string>;
    readonly dnsName?: pulumi.Input<string>;
    readonly dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly serverCertificateArn?: pulumi.Input<string>;
    readonly splitTunnel?: pulumi.Input<boolean>;
    readonly status?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly transportProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    readonly authenticationOptions: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.EndpointAuthenticationOption>[]>;
    readonly clientCidrBlock: pulumi.Input<string>;
    readonly connectionLogOptions: pulumi.Input<inputs.ec2clientvpn.EndpointConnectionLogOptions>;
    readonly description?: pulumi.Input<string>;
    readonly dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly serverCertificateArn: pulumi.Input<string>;
    readonly splitTunnel?: pulumi.Input<boolean>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly transportProtocol?: pulumi.Input<string>;
}
