// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly attributes: pulumi.Output<{ name: string, type: string }[]>;
    public readonly billingMode: pulumi.Output<string | undefined>;
    public readonly globalSecondaryIndexes: pulumi.Output<{ hashKey: string, name: string, nonKeyAttributes?: string[], projectionType: string, rangeKey?: string, readCapacity?: number, writeCapacity?: number }[] | undefined>;
    public readonly hashKey: pulumi.Output<string>;
    public readonly localSecondaryIndexes: pulumi.Output<{ name: string, nonKeyAttributes?: string[], projectionType: string, rangeKey: string }[] | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly pointInTimeRecovery: pulumi.Output<{ enabled: boolean }>;
    public readonly rangeKey: pulumi.Output<string | undefined>;
    public readonly readCapacity: pulumi.Output<number | undefined>;
    public readonly serverSideEncryption: pulumi.Output<{ enabled: boolean }>;
    public /*out*/ readonly streamArn: pulumi.Output<string>;
    public readonly streamEnabled: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly streamLabel: pulumi.Output<string>;
    public readonly streamViewType: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly ttl: pulumi.Output<{ attributeName: string, enabled: boolean } | undefined>;
    public readonly writeCapacity: pulumi.Output<number | undefined>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TableState = argsOrState as TableState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["attributes"] = state ? state.attributes : undefined;
            inputs["billingMode"] = state ? state.billingMode : undefined;
            inputs["globalSecondaryIndexes"] = state ? state.globalSecondaryIndexes : undefined;
            inputs["hashKey"] = state ? state.hashKey : undefined;
            inputs["localSecondaryIndexes"] = state ? state.localSecondaryIndexes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pointInTimeRecovery"] = state ? state.pointInTimeRecovery : undefined;
            inputs["rangeKey"] = state ? state.rangeKey : undefined;
            inputs["readCapacity"] = state ? state.readCapacity : undefined;
            inputs["serverSideEncryption"] = state ? state.serverSideEncryption : undefined;
            inputs["streamArn"] = state ? state.streamArn : undefined;
            inputs["streamEnabled"] = state ? state.streamEnabled : undefined;
            inputs["streamLabel"] = state ? state.streamLabel : undefined;
            inputs["streamViewType"] = state ? state.streamViewType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["writeCapacity"] = state ? state.writeCapacity : undefined;
        } else {
            const args = argsOrState as TableArgs | undefined;
            if (!args || args.attributes === undefined) {
                throw new Error("Missing required property 'attributes'");
            }
            if (!args || args.hashKey === undefined) {
                throw new Error("Missing required property 'hashKey'");
            }
            inputs["attributes"] = args ? args.attributes : undefined;
            inputs["billingMode"] = args ? args.billingMode : undefined;
            inputs["globalSecondaryIndexes"] = args ? args.globalSecondaryIndexes : undefined;
            inputs["hashKey"] = args ? args.hashKey : undefined;
            inputs["localSecondaryIndexes"] = args ? args.localSecondaryIndexes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pointInTimeRecovery"] = args ? args.pointInTimeRecovery : undefined;
            inputs["rangeKey"] = args ? args.rangeKey : undefined;
            inputs["readCapacity"] = args ? args.readCapacity : undefined;
            inputs["serverSideEncryption"] = args ? args.serverSideEncryption : undefined;
            inputs["streamEnabled"] = args ? args.streamEnabled : undefined;
            inputs["streamViewType"] = args ? args.streamViewType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["writeCapacity"] = args ? args.writeCapacity : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["streamArn"] = undefined /*out*/;
            inputs["streamLabel"] = undefined /*out*/;
        }
        super("aws:dynamodb/table:Table", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    readonly arn?: pulumi.Input<string>;
    readonly attributes?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, type: pulumi.Input<string> }>[]>;
    readonly billingMode?: pulumi.Input<string>;
    readonly globalSecondaryIndexes?: pulumi.Input<pulumi.Input<{ hashKey: pulumi.Input<string>, name: pulumi.Input<string>, nonKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>, projectionType: pulumi.Input<string>, rangeKey?: pulumi.Input<string>, readCapacity?: pulumi.Input<number>, writeCapacity?: pulumi.Input<number> }>[]>;
    readonly hashKey?: pulumi.Input<string>;
    readonly localSecondaryIndexes?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, nonKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>, projectionType: pulumi.Input<string>, rangeKey: pulumi.Input<string> }>[]>;
    readonly name?: pulumi.Input<string>;
    readonly pointInTimeRecovery?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly rangeKey?: pulumi.Input<string>;
    readonly readCapacity?: pulumi.Input<number>;
    readonly serverSideEncryption?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly streamArn?: pulumi.Input<string>;
    readonly streamEnabled?: pulumi.Input<boolean>;
    readonly streamLabel?: pulumi.Input<string>;
    readonly streamViewType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly ttl?: pulumi.Input<{ attributeName: pulumi.Input<string>, enabled: pulumi.Input<boolean> }>;
    readonly writeCapacity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    readonly attributes: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, type: pulumi.Input<string> }>[]>;
    readonly billingMode?: pulumi.Input<string>;
    readonly globalSecondaryIndexes?: pulumi.Input<pulumi.Input<{ hashKey: pulumi.Input<string>, name: pulumi.Input<string>, nonKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>, projectionType: pulumi.Input<string>, rangeKey?: pulumi.Input<string>, readCapacity?: pulumi.Input<number>, writeCapacity?: pulumi.Input<number> }>[]>;
    readonly hashKey: pulumi.Input<string>;
    readonly localSecondaryIndexes?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, nonKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>, projectionType: pulumi.Input<string>, rangeKey: pulumi.Input<string> }>[]>;
    readonly name?: pulumi.Input<string>;
    readonly pointInTimeRecovery?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly rangeKey?: pulumi.Input<string>;
    readonly readCapacity?: pulumi.Input<number>;
    readonly serverSideEncryption?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly streamEnabled?: pulumi.Input<boolean>;
    readonly streamViewType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly ttl?: pulumi.Input<{ attributeName: pulumi.Input<string>, enabled: pulumi.Input<boolean> }>;
    readonly writeCapacity?: pulumi.Input<number>;
}
