// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class DeploymentGroup extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentGroupState, opts?: pulumi.CustomResourceOptions): DeploymentGroup {
        return new DeploymentGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codedeploy/deploymentGroup:DeploymentGroup';

    /**
     * Returns true if the given object is an instance of DeploymentGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentGroup.__pulumiType;
    }

    public readonly alarmConfiguration!: pulumi.Output<outputs.codedeploy.DeploymentGroupAlarmConfiguration | undefined>;
    public readonly appName!: pulumi.Output<string>;
    public readonly autoRollbackConfiguration!: pulumi.Output<outputs.codedeploy.DeploymentGroupAutoRollbackConfiguration | undefined>;
    public readonly autoscalingGroups!: pulumi.Output<string[] | undefined>;
    public readonly blueGreenDeploymentConfig!: pulumi.Output<outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    public readonly deploymentConfigName!: pulumi.Output<string | undefined>;
    public readonly deploymentGroupName!: pulumi.Output<string>;
    public readonly deploymentStyle!: pulumi.Output<outputs.codedeploy.DeploymentGroupDeploymentStyle | undefined>;
    public readonly ec2TagFilters!: pulumi.Output<outputs.codedeploy.DeploymentGroupEc2TagFilter[] | undefined>;
    public readonly ec2TagSets!: pulumi.Output<outputs.codedeploy.DeploymentGroupEc2TagSet[] | undefined>;
    public readonly ecsService!: pulumi.Output<outputs.codedeploy.DeploymentGroupEcsService | undefined>;
    public readonly loadBalancerInfo!: pulumi.Output<outputs.codedeploy.DeploymentGroupLoadBalancerInfo | undefined>;
    public readonly onPremisesInstanceTagFilters!: pulumi.Output<outputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter[] | undefined>;
    public readonly serviceRoleArn!: pulumi.Output<string>;
    public readonly triggerConfigurations!: pulumi.Output<outputs.codedeploy.DeploymentGroupTriggerConfiguration[] | undefined>;

    /**
     * Create a DeploymentGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentGroupArgs | DeploymentGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DeploymentGroupState | undefined;
            inputs["alarmConfiguration"] = state ? state.alarmConfiguration : undefined;
            inputs["appName"] = state ? state.appName : undefined;
            inputs["autoRollbackConfiguration"] = state ? state.autoRollbackConfiguration : undefined;
            inputs["autoscalingGroups"] = state ? state.autoscalingGroups : undefined;
            inputs["blueGreenDeploymentConfig"] = state ? state.blueGreenDeploymentConfig : undefined;
            inputs["deploymentConfigName"] = state ? state.deploymentConfigName : undefined;
            inputs["deploymentGroupName"] = state ? state.deploymentGroupName : undefined;
            inputs["deploymentStyle"] = state ? state.deploymentStyle : undefined;
            inputs["ec2TagFilters"] = state ? state.ec2TagFilters : undefined;
            inputs["ec2TagSets"] = state ? state.ec2TagSets : undefined;
            inputs["ecsService"] = state ? state.ecsService : undefined;
            inputs["loadBalancerInfo"] = state ? state.loadBalancerInfo : undefined;
            inputs["onPremisesInstanceTagFilters"] = state ? state.onPremisesInstanceTagFilters : undefined;
            inputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            inputs["triggerConfigurations"] = state ? state.triggerConfigurations : undefined;
        } else {
            const args = argsOrState as DeploymentGroupArgs | undefined;
            if (!args || args.appName === undefined) {
                throw new Error("Missing required property 'appName'");
            }
            if (!args || args.deploymentGroupName === undefined) {
                throw new Error("Missing required property 'deploymentGroupName'");
            }
            if (!args || args.serviceRoleArn === undefined) {
                throw new Error("Missing required property 'serviceRoleArn'");
            }
            inputs["alarmConfiguration"] = args ? args.alarmConfiguration : undefined;
            inputs["appName"] = args ? args.appName : undefined;
            inputs["autoRollbackConfiguration"] = args ? args.autoRollbackConfiguration : undefined;
            inputs["autoscalingGroups"] = args ? args.autoscalingGroups : undefined;
            inputs["blueGreenDeploymentConfig"] = args ? args.blueGreenDeploymentConfig : undefined;
            inputs["deploymentConfigName"] = args ? args.deploymentConfigName : undefined;
            inputs["deploymentGroupName"] = args ? args.deploymentGroupName : undefined;
            inputs["deploymentStyle"] = args ? args.deploymentStyle : undefined;
            inputs["ec2TagFilters"] = args ? args.ec2TagFilters : undefined;
            inputs["ec2TagSets"] = args ? args.ec2TagSets : undefined;
            inputs["ecsService"] = args ? args.ecsService : undefined;
            inputs["loadBalancerInfo"] = args ? args.loadBalancerInfo : undefined;
            inputs["onPremisesInstanceTagFilters"] = args ? args.onPremisesInstanceTagFilters : undefined;
            inputs["serviceRoleArn"] = args ? args.serviceRoleArn : undefined;
            inputs["triggerConfigurations"] = args ? args.triggerConfigurations : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DeploymentGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentGroup resources.
 */
export interface DeploymentGroupState {
    readonly alarmConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAlarmConfiguration>;
    readonly appName?: pulumi.Input<string>;
    readonly autoRollbackConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAutoRollbackConfiguration>;
    readonly autoscalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly blueGreenDeploymentConfig?: pulumi.Input<inputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    readonly deploymentConfigName?: pulumi.Input<string>;
    readonly deploymentGroupName?: pulumi.Input<string>;
    readonly deploymentStyle?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentStyle>;
    readonly ec2TagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagFilter>[]>;
    readonly ec2TagSets?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagSet>[]>;
    readonly ecsService?: pulumi.Input<inputs.codedeploy.DeploymentGroupEcsService>;
    readonly loadBalancerInfo?: pulumi.Input<inputs.codedeploy.DeploymentGroupLoadBalancerInfo>;
    readonly onPremisesInstanceTagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter>[]>;
    readonly serviceRoleArn?: pulumi.Input<string>;
    readonly triggerConfigurations?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTriggerConfiguration>[]>;
}

/**
 * The set of arguments for constructing a DeploymentGroup resource.
 */
export interface DeploymentGroupArgs {
    readonly alarmConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAlarmConfiguration>;
    readonly appName: pulumi.Input<string>;
    readonly autoRollbackConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAutoRollbackConfiguration>;
    readonly autoscalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly blueGreenDeploymentConfig?: pulumi.Input<inputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    readonly deploymentConfigName?: pulumi.Input<string>;
    readonly deploymentGroupName: pulumi.Input<string>;
    readonly deploymentStyle?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentStyle>;
    readonly ec2TagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagFilter>[]>;
    readonly ec2TagSets?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagSet>[]>;
    readonly ecsService?: pulumi.Input<inputs.codedeploy.DeploymentGroupEcsService>;
    readonly loadBalancerInfo?: pulumi.Input<inputs.codedeploy.DeploymentGroupLoadBalancerInfo>;
    readonly onPremisesInstanceTagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter>[]>;
    readonly serviceRoleArn: pulumi.Input<string>;
    readonly triggerConfigurations?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTriggerConfiguration>[]>;
}
