// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshift/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly allowVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly automatedSnapshotRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public readonly clusterParameterGroupName!: pulumi.Output<string>;
    public readonly clusterPublicKey!: pulumi.Output<string>;
    public readonly clusterRevisionNumber!: pulumi.Output<string>;
    public readonly clusterSecurityGroups!: pulumi.Output<string[]>;
    public readonly clusterSubnetGroupName!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly clusterVersion!: pulumi.Output<string | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly elasticIp!: pulumi.Output<string | undefined>;
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    public readonly endpoint!: pulumi.Output<string>;
    public readonly enhancedVpcRouting!: pulumi.Output<boolean>;
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly iamRoles!: pulumi.Output<string[]>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly logging!: pulumi.Output<outputs.redshift.ClusterLogging | undefined>;
    public readonly masterPassword!: pulumi.Output<string | undefined>;
    public readonly masterUsername!: pulumi.Output<string | undefined>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly numberOfNodes!: pulumi.Output<number | undefined>;
    public readonly ownerAccount!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly snapshotClusterIdentifier!: pulumi.Output<string | undefined>;
    public readonly snapshotCopy!: pulumi.Output<outputs.redshift.ClusterSnapshotCopy | undefined>;
    public readonly snapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["allowVersionUpgrade"] = state ? state.allowVersionUpgrade : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["automatedSnapshotRetentionPeriod"] = state ? state.automatedSnapshotRetentionPeriod : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            inputs["clusterParameterGroupName"] = state ? state.clusterParameterGroupName : undefined;
            inputs["clusterPublicKey"] = state ? state.clusterPublicKey : undefined;
            inputs["clusterRevisionNumber"] = state ? state.clusterRevisionNumber : undefined;
            inputs["clusterSecurityGroups"] = state ? state.clusterSecurityGroups : undefined;
            inputs["clusterSubnetGroupName"] = state ? state.clusterSubnetGroupName : undefined;
            inputs["clusterType"] = state ? state.clusterType : undefined;
            inputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["elasticIp"] = state ? state.elasticIp : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["enhancedVpcRouting"] = state ? state.enhancedVpcRouting : undefined;
            inputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            inputs["iamRoles"] = state ? state.iamRoles : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["masterPassword"] = state ? state.masterPassword : undefined;
            inputs["masterUsername"] = state ? state.masterUsername : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            inputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            inputs["snapshotClusterIdentifier"] = state ? state.snapshotClusterIdentifier : undefined;
            inputs["snapshotCopy"] = state ? state.snapshotCopy : undefined;
            inputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (!args || args.clusterIdentifier === undefined) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if (!args || args.nodeType === undefined) {
                throw new Error("Missing required property 'nodeType'");
            }
            inputs["allowVersionUpgrade"] = args ? args.allowVersionUpgrade : undefined;
            inputs["automatedSnapshotRetentionPeriod"] = args ? args.automatedSnapshotRetentionPeriod : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            inputs["clusterParameterGroupName"] = args ? args.clusterParameterGroupName : undefined;
            inputs["clusterPublicKey"] = args ? args.clusterPublicKey : undefined;
            inputs["clusterRevisionNumber"] = args ? args.clusterRevisionNumber : undefined;
            inputs["clusterSecurityGroups"] = args ? args.clusterSecurityGroups : undefined;
            inputs["clusterSubnetGroupName"] = args ? args.clusterSubnetGroupName : undefined;
            inputs["clusterType"] = args ? args.clusterType : undefined;
            inputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["elasticIp"] = args ? args.elasticIp : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["enhancedVpcRouting"] = args ? args.enhancedVpcRouting : undefined;
            inputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            inputs["iamRoles"] = args ? args.iamRoles : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["masterPassword"] = args ? args.masterPassword : undefined;
            inputs["masterUsername"] = args ? args.masterUsername : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["numberOfNodes"] = args ? args.numberOfNodes : undefined;
            inputs["ownerAccount"] = args ? args.ownerAccount : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            inputs["snapshotClusterIdentifier"] = args ? args.snapshotClusterIdentifier : undefined;
            inputs["snapshotCopy"] = args ? args.snapshotCopy : undefined;
            inputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    readonly allowVersionUpgrade?: pulumi.Input<boolean>;
    readonly arn?: pulumi.Input<string>;
    readonly automatedSnapshotRetentionPeriod?: pulumi.Input<number>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly clusterIdentifier?: pulumi.Input<string>;
    readonly clusterParameterGroupName?: pulumi.Input<string>;
    readonly clusterPublicKey?: pulumi.Input<string>;
    readonly clusterRevisionNumber?: pulumi.Input<string>;
    readonly clusterSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterSubnetGroupName?: pulumi.Input<string>;
    readonly clusterType?: pulumi.Input<string>;
    readonly clusterVersion?: pulumi.Input<string>;
    readonly databaseName?: pulumi.Input<string>;
    readonly dnsName?: pulumi.Input<string>;
    readonly elasticIp?: pulumi.Input<string>;
    readonly encrypted?: pulumi.Input<boolean>;
    readonly endpoint?: pulumi.Input<string>;
    readonly enhancedVpcRouting?: pulumi.Input<boolean>;
    readonly finalSnapshotIdentifier?: pulumi.Input<string>;
    readonly iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly logging?: pulumi.Input<inputs.redshift.ClusterLogging>;
    readonly masterPassword?: pulumi.Input<string>;
    readonly masterUsername?: pulumi.Input<string>;
    readonly nodeType?: pulumi.Input<string>;
    readonly numberOfNodes?: pulumi.Input<number>;
    readonly ownerAccount?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly preferredMaintenanceWindow?: pulumi.Input<string>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly skipFinalSnapshot?: pulumi.Input<boolean>;
    readonly snapshotClusterIdentifier?: pulumi.Input<string>;
    readonly snapshotCopy?: pulumi.Input<inputs.redshift.ClusterSnapshotCopy>;
    readonly snapshotIdentifier?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    readonly allowVersionUpgrade?: pulumi.Input<boolean>;
    readonly automatedSnapshotRetentionPeriod?: pulumi.Input<number>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly clusterIdentifier: pulumi.Input<string>;
    readonly clusterParameterGroupName?: pulumi.Input<string>;
    readonly clusterPublicKey?: pulumi.Input<string>;
    readonly clusterRevisionNumber?: pulumi.Input<string>;
    readonly clusterSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterSubnetGroupName?: pulumi.Input<string>;
    readonly clusterType?: pulumi.Input<string>;
    readonly clusterVersion?: pulumi.Input<string>;
    readonly databaseName?: pulumi.Input<string>;
    readonly elasticIp?: pulumi.Input<string>;
    readonly encrypted?: pulumi.Input<boolean>;
    readonly endpoint?: pulumi.Input<string>;
    readonly enhancedVpcRouting?: pulumi.Input<boolean>;
    readonly finalSnapshotIdentifier?: pulumi.Input<string>;
    readonly iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly logging?: pulumi.Input<inputs.redshift.ClusterLogging>;
    readonly masterPassword?: pulumi.Input<string>;
    readonly masterUsername?: pulumi.Input<string>;
    readonly nodeType: pulumi.Input<string>;
    readonly numberOfNodes?: pulumi.Input<number>;
    readonly ownerAccount?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly preferredMaintenanceWindow?: pulumi.Input<string>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly skipFinalSnapshot?: pulumi.Input<boolean>;
    readonly snapshotClusterIdentifier?: pulumi.Input<string>;
    readonly snapshotCopy?: pulumi.Input<inputs.redshift.ClusterSnapshotCopy>;
    readonly snapshotIdentifier?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
