// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opsworks/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    public readonly appSources!: pulumi.Output<outputs.opsworks.ApplicationAppSource[]>;
    public readonly autoBundleOnDeploy!: pulumi.Output<string | undefined>;
    public readonly awsFlowRubySettings!: pulumi.Output<string | undefined>;
    public readonly dataSourceArn!: pulumi.Output<string | undefined>;
    public readonly dataSourceDatabaseName!: pulumi.Output<string | undefined>;
    public readonly dataSourceType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly documentRoot!: pulumi.Output<string | undefined>;
    public readonly domains!: pulumi.Output<string[] | undefined>;
    public readonly enableSsl!: pulumi.Output<boolean | undefined>;
    public readonly environments!: pulumi.Output<outputs.opsworks.ApplicationEnvironment[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly railsEnv!: pulumi.Output<string | undefined>;
    public readonly shortName!: pulumi.Output<string>;
    public readonly sslConfigurations!: pulumi.Output<outputs.opsworks.ApplicationSslConfiguration[] | undefined>;
    public readonly stackId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            inputs["appSources"] = state ? state.appSources : undefined;
            inputs["autoBundleOnDeploy"] = state ? state.autoBundleOnDeploy : undefined;
            inputs["awsFlowRubySettings"] = state ? state.awsFlowRubySettings : undefined;
            inputs["dataSourceArn"] = state ? state.dataSourceArn : undefined;
            inputs["dataSourceDatabaseName"] = state ? state.dataSourceDatabaseName : undefined;
            inputs["dataSourceType"] = state ? state.dataSourceType : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["documentRoot"] = state ? state.documentRoot : undefined;
            inputs["domains"] = state ? state.domains : undefined;
            inputs["enableSsl"] = state ? state.enableSsl : undefined;
            inputs["environments"] = state ? state.environments : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["railsEnv"] = state ? state.railsEnv : undefined;
            inputs["shortName"] = state ? state.shortName : undefined;
            inputs["sslConfigurations"] = state ? state.sslConfigurations : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if (!args || args.stackId === undefined) {
                throw new Error("Missing required property 'stackId'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["appSources"] = args ? args.appSources : undefined;
            inputs["autoBundleOnDeploy"] = args ? args.autoBundleOnDeploy : undefined;
            inputs["awsFlowRubySettings"] = args ? args.awsFlowRubySettings : undefined;
            inputs["dataSourceArn"] = args ? args.dataSourceArn : undefined;
            inputs["dataSourceDatabaseName"] = args ? args.dataSourceDatabaseName : undefined;
            inputs["dataSourceType"] = args ? args.dataSourceType : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["documentRoot"] = args ? args.documentRoot : undefined;
            inputs["domains"] = args ? args.domains : undefined;
            inputs["enableSsl"] = args ? args.enableSsl : undefined;
            inputs["environments"] = args ? args.environments : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["railsEnv"] = args ? args.railsEnv : undefined;
            inputs["shortName"] = args ? args.shortName : undefined;
            inputs["sslConfigurations"] = args ? args.sslConfigurations : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    readonly appSources?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationAppSource>[]>;
    readonly autoBundleOnDeploy?: pulumi.Input<string>;
    readonly awsFlowRubySettings?: pulumi.Input<string>;
    readonly dataSourceArn?: pulumi.Input<string>;
    readonly dataSourceDatabaseName?: pulumi.Input<string>;
    readonly dataSourceType?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly documentRoot?: pulumi.Input<string>;
    readonly domains?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableSsl?: pulumi.Input<boolean>;
    readonly environments?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationEnvironment>[]>;
    readonly name?: pulumi.Input<string>;
    readonly railsEnv?: pulumi.Input<string>;
    readonly shortName?: pulumi.Input<string>;
    readonly sslConfigurations?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationSslConfiguration>[]>;
    readonly stackId?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    readonly appSources?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationAppSource>[]>;
    readonly autoBundleOnDeploy?: pulumi.Input<string>;
    readonly awsFlowRubySettings?: pulumi.Input<string>;
    readonly dataSourceArn?: pulumi.Input<string>;
    readonly dataSourceDatabaseName?: pulumi.Input<string>;
    readonly dataSourceType?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly documentRoot?: pulumi.Input<string>;
    readonly domains?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableSsl?: pulumi.Input<boolean>;
    readonly environments?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationEnvironment>[]>;
    readonly name?: pulumi.Input<string>;
    readonly railsEnv?: pulumi.Input<string>;
    readonly shortName?: pulumi.Input<string>;
    readonly sslConfigurations?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationSslConfiguration>[]>;
    readonly stackId: pulumi.Input<string>;
    readonly type: pulumi.Input<string>;
}
