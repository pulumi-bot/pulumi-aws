// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {CannedAcl} from "./cannedAcl";

export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    public readonly accelerationStatus: pulumi.Output<string>;
    public readonly acl: pulumi.Output<string | undefined>;
    public readonly arn: pulumi.Output<string>;
    public readonly bucket: pulumi.Output<string>;
    public /*out*/ readonly bucketDomainName: pulumi.Output<string>;
    public readonly bucketPrefix: pulumi.Output<string | undefined>;
    public /*out*/ readonly bucketRegionalDomainName: pulumi.Output<string>;
    public readonly corsRules: pulumi.Output<{ allowedHeaders?: string[], allowedMethods: string[], allowedOrigins: string[], exposeHeaders?: string[], maxAgeSeconds?: number }[] | undefined>;
    public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    public readonly hostedZoneId: pulumi.Output<string>;
    public readonly lifecycleRules: pulumi.Output<{ abortIncompleteMultipartUploadDays?: number, enabled: boolean, expirations?: { date?: string, days?: number, expiredObjectDeleteMarker?: boolean }[], id: string, noncurrentVersionExpirations?: { days?: number }[], noncurrentVersionTransitions?: { days?: number, storageClass: string }[], prefix?: string, tags?: {[key: string]: any}, transitions?: { date?: string, days?: number, storageClass: string }[] }[] | undefined>;
    public readonly loggings: pulumi.Output<{ targetBucket: string, targetPrefix?: string }[] | undefined>;
    public readonly policy: pulumi.Output<string | undefined>;
    public readonly region: pulumi.Output<string>;
    public readonly replicationConfiguration: pulumi.Output<{ role: string, rules: { destination: { accessControlTranslation?: { owner: string }, accountId?: string, bucket: string, replicaKmsKeyId?: string, storageClass?: string }, filter?: { prefix?: string, tags?: {[key: string]: any} }, id?: string, prefix?: string, priority?: number, sourceSelectionCriteria?: { sseKmsEncryptedObjects?: { enabled: boolean } }, status: string }[] } | undefined>;
    public readonly requestPayer: pulumi.Output<string>;
    public readonly serverSideEncryptionConfiguration: pulumi.Output<{ rule: { applyServerSideEncryptionByDefault: { kmsMasterKeyId?: string, sseAlgorithm: string } } } | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly versioning: pulumi.Output<{ enabled?: boolean, mfaDelete?: boolean }>;
    public readonly website: pulumi.Output<{ errorDocument?: string, indexDocument?: string, redirectAllRequestsTo?: string, routingRules?: string } | undefined>;
    public readonly websiteDomain: pulumi.Output<string>;
    public readonly websiteEndpoint: pulumi.Output<string>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: BucketState = argsOrState as BucketState | undefined;
            inputs["accelerationStatus"] = state ? state.accelerationStatus : undefined;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["bucket"] = state ? state.bucket : undefined;
            inputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            inputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            inputs["bucketRegionalDomainName"] = state ? state.bucketRegionalDomainName : undefined;
            inputs["corsRules"] = state ? state.corsRules : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            inputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            inputs["loggings"] = state ? state.loggings : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["replicationConfiguration"] = state ? state.replicationConfiguration : undefined;
            inputs["requestPayer"] = state ? state.requestPayer : undefined;
            inputs["serverSideEncryptionConfiguration"] = state ? state.serverSideEncryptionConfiguration : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["versioning"] = state ? state.versioning : undefined;
            inputs["website"] = state ? state.website : undefined;
            inputs["websiteDomain"] = state ? state.websiteDomain : undefined;
            inputs["websiteEndpoint"] = state ? state.websiteEndpoint : undefined;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            inputs["accelerationStatus"] = args ? args.accelerationStatus : undefined;
            inputs["acl"] = args ? args.acl : undefined;
            inputs["arn"] = args ? args.arn : undefined;
            inputs["bucket"] = args ? args.bucket : undefined;
            inputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            inputs["corsRules"] = args ? args.corsRules : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            inputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            inputs["loggings"] = args ? args.loggings : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["replicationConfiguration"] = args ? args.replicationConfiguration : undefined;
            inputs["requestPayer"] = args ? args.requestPayer : undefined;
            inputs["serverSideEncryptionConfiguration"] = args ? args.serverSideEncryptionConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["versioning"] = args ? args.versioning : undefined;
            inputs["website"] = args ? args.website : undefined;
            inputs["websiteDomain"] = args ? args.websiteDomain : undefined;
            inputs["websiteEndpoint"] = args ? args.websiteEndpoint : undefined;
            inputs["bucketDomainName"] = undefined /*out*/;
            inputs["bucketRegionalDomainName"] = undefined /*out*/;
        }
        super("aws:s3/bucket:Bucket", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    readonly accelerationStatus?: pulumi.Input<string>;
    readonly acl?: pulumi.Input<string | CannedAcl>;
    readonly arn?: pulumi.Input<string>;
    readonly bucket?: pulumi.Input<string>;
    readonly bucketDomainName?: pulumi.Input<string>;
    readonly bucketPrefix?: pulumi.Input<string>;
    readonly bucketRegionalDomainName?: pulumi.Input<string>;
    readonly corsRules?: pulumi.Input<pulumi.Input<{ allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>, allowedMethods: pulumi.Input<pulumi.Input<string>[]>, allowedOrigins: pulumi.Input<pulumi.Input<string>[]>, exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>, maxAgeSeconds?: pulumi.Input<number> }>[]>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly hostedZoneId?: pulumi.Input<string>;
    readonly lifecycleRules?: pulumi.Input<pulumi.Input<{ abortIncompleteMultipartUploadDays?: pulumi.Input<number>, enabled: pulumi.Input<boolean>, expirations?: pulumi.Input<pulumi.Input<{ date?: pulumi.Input<string>, days?: pulumi.Input<number>, expiredObjectDeleteMarker?: pulumi.Input<boolean> }>[]>, id?: pulumi.Input<string>, noncurrentVersionExpirations?: pulumi.Input<pulumi.Input<{ days?: pulumi.Input<number> }>[]>, noncurrentVersionTransitions?: pulumi.Input<pulumi.Input<{ days?: pulumi.Input<number>, storageClass: pulumi.Input<string> }>[]>, prefix?: pulumi.Input<string>, tags?: pulumi.Input<{[key: string]: any}>, transitions?: pulumi.Input<pulumi.Input<{ date?: pulumi.Input<string>, days?: pulumi.Input<number>, storageClass: pulumi.Input<string> }>[]> }>[]>;
    readonly loggings?: pulumi.Input<pulumi.Input<{ targetBucket: pulumi.Input<string>, targetPrefix?: pulumi.Input<string> }>[]>;
    readonly policy?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly replicationConfiguration?: pulumi.Input<{ role: pulumi.Input<string>, rules: pulumi.Input<pulumi.Input<{ destination: pulumi.Input<{ accessControlTranslation?: pulumi.Input<{ owner: pulumi.Input<string> }>, accountId?: pulumi.Input<string>, bucket: pulumi.Input<string>, replicaKmsKeyId?: pulumi.Input<string>, storageClass?: pulumi.Input<string> }>, filter?: pulumi.Input<{ prefix?: pulumi.Input<string>, tags?: pulumi.Input<{[key: string]: any}> }>, id?: pulumi.Input<string>, prefix?: pulumi.Input<string>, priority?: pulumi.Input<number>, sourceSelectionCriteria?: pulumi.Input<{ sseKmsEncryptedObjects?: pulumi.Input<{ enabled: pulumi.Input<boolean> }> }>, status: pulumi.Input<string> }>[]> }>;
    readonly requestPayer?: pulumi.Input<string>;
    readonly serverSideEncryptionConfiguration?: pulumi.Input<{ rule: pulumi.Input<{ applyServerSideEncryptionByDefault: pulumi.Input<{ kmsMasterKeyId?: pulumi.Input<string>, sseAlgorithm: pulumi.Input<string> }> }> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly versioning?: pulumi.Input<{ enabled?: pulumi.Input<boolean>, mfaDelete?: pulumi.Input<boolean> }>;
    readonly website?: pulumi.Input<{ errorDocument?: pulumi.Input<string>, indexDocument?: pulumi.Input<string>, redirectAllRequestsTo?: pulumi.Input<string>, routingRules?: pulumi.Input<string> }>;
    readonly websiteDomain?: pulumi.Input<string>;
    readonly websiteEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    readonly accelerationStatus?: pulumi.Input<string>;
    readonly acl?: pulumi.Input<string | CannedAcl>;
    readonly arn?: pulumi.Input<string>;
    readonly bucket?: pulumi.Input<string>;
    readonly bucketPrefix?: pulumi.Input<string>;
    readonly corsRules?: pulumi.Input<pulumi.Input<{ allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>, allowedMethods: pulumi.Input<pulumi.Input<string>[]>, allowedOrigins: pulumi.Input<pulumi.Input<string>[]>, exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>, maxAgeSeconds?: pulumi.Input<number> }>[]>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly hostedZoneId?: pulumi.Input<string>;
    readonly lifecycleRules?: pulumi.Input<pulumi.Input<{ abortIncompleteMultipartUploadDays?: pulumi.Input<number>, enabled: pulumi.Input<boolean>, expirations?: pulumi.Input<pulumi.Input<{ date?: pulumi.Input<string>, days?: pulumi.Input<number>, expiredObjectDeleteMarker?: pulumi.Input<boolean> }>[]>, id?: pulumi.Input<string>, noncurrentVersionExpirations?: pulumi.Input<pulumi.Input<{ days?: pulumi.Input<number> }>[]>, noncurrentVersionTransitions?: pulumi.Input<pulumi.Input<{ days?: pulumi.Input<number>, storageClass: pulumi.Input<string> }>[]>, prefix?: pulumi.Input<string>, tags?: pulumi.Input<{[key: string]: any}>, transitions?: pulumi.Input<pulumi.Input<{ date?: pulumi.Input<string>, days?: pulumi.Input<number>, storageClass: pulumi.Input<string> }>[]> }>[]>;
    readonly loggings?: pulumi.Input<pulumi.Input<{ targetBucket: pulumi.Input<string>, targetPrefix?: pulumi.Input<string> }>[]>;
    readonly policy?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly replicationConfiguration?: pulumi.Input<{ role: pulumi.Input<string>, rules: pulumi.Input<pulumi.Input<{ destination: pulumi.Input<{ accessControlTranslation?: pulumi.Input<{ owner: pulumi.Input<string> }>, accountId?: pulumi.Input<string>, bucket: pulumi.Input<string>, replicaKmsKeyId?: pulumi.Input<string>, storageClass?: pulumi.Input<string> }>, filter?: pulumi.Input<{ prefix?: pulumi.Input<string>, tags?: pulumi.Input<{[key: string]: any}> }>, id?: pulumi.Input<string>, prefix?: pulumi.Input<string>, priority?: pulumi.Input<number>, sourceSelectionCriteria?: pulumi.Input<{ sseKmsEncryptedObjects?: pulumi.Input<{ enabled: pulumi.Input<boolean> }> }>, status: pulumi.Input<string> }>[]> }>;
    readonly requestPayer?: pulumi.Input<string>;
    readonly serverSideEncryptionConfiguration?: pulumi.Input<{ rule: pulumi.Input<{ applyServerSideEncryptionByDefault: pulumi.Input<{ kmsMasterKeyId?: pulumi.Input<string>, sseAlgorithm: pulumi.Input<string> }> }> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly versioning?: pulumi.Input<{ enabled?: pulumi.Input<boolean>, mfaDelete?: pulumi.Input<boolean> }>;
    readonly website?: pulumi.Input<{ errorDocument?: pulumi.Input<string>, indexDocument?: pulumi.Input<string>, redirectAllRequestsTo?: pulumi.Input<string>, routingRules?: pulumi.Input<string> }>;
    readonly websiteDomain?: pulumi.Input<string>;
    readonly websiteEndpoint?: pulumi.Input<string>;
}
