// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class RestApi extends pulumi.CustomResource {
    /**
     * Get an existing RestApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RestApiState, opts?: pulumi.CustomResourceOptions): RestApi {
        return new RestApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigateway/restApi:RestApi';

    /**
     * Returns true if the given object is an instance of RestApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestApi.__pulumiType;
    }

    public readonly apiKeySource!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly binaryMediaTypes!: pulumi.Output<string[] | undefined>;
    public readonly body!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endpointConfiguration!: pulumi.Output<outputs.apigateway.RestApiEndpointConfiguration>;
    public /*out*/ readonly executionArn!: pulumi.Output<string>;
    public readonly minimumCompressionSize!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly rootResourceId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a RestApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RestApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RestApiArgs | RestApiState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RestApiState | undefined;
            inputs["apiKeySource"] = state ? state.apiKeySource : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["binaryMediaTypes"] = state ? state.binaryMediaTypes : undefined;
            inputs["body"] = state ? state.body : undefined;
            inputs["createdDate"] = state ? state.createdDate : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["endpointConfiguration"] = state ? state.endpointConfiguration : undefined;
            inputs["executionArn"] = state ? state.executionArn : undefined;
            inputs["minimumCompressionSize"] = state ? state.minimumCompressionSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["rootResourceId"] = state ? state.rootResourceId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RestApiArgs | undefined;
            inputs["apiKeySource"] = args ? args.apiKeySource : undefined;
            inputs["binaryMediaTypes"] = args ? args.binaryMediaTypes : undefined;
            inputs["body"] = args ? args.body : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            inputs["minimumCompressionSize"] = args ? args.minimumCompressionSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdDate"] = undefined /*out*/;
            inputs["executionArn"] = undefined /*out*/;
            inputs["rootResourceId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RestApi.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RestApi resources.
 */
export interface RestApiState {
    readonly apiKeySource?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly binaryMediaTypes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly body?: pulumi.Input<string>;
    readonly createdDate?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly endpointConfiguration?: pulumi.Input<inputs.apigateway.RestApiEndpointConfiguration>;
    readonly executionArn?: pulumi.Input<string>;
    readonly minimumCompressionSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly policy?: pulumi.Input<string>;
    readonly rootResourceId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RestApi resource.
 */
export interface RestApiArgs {
    readonly apiKeySource?: pulumi.Input<string>;
    readonly binaryMediaTypes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly body?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly endpointConfiguration?: pulumi.Input<inputs.apigateway.RestApiEndpointConfiguration>;
    readonly minimumCompressionSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly policy?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
