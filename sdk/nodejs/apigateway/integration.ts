// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {RestApi} from "./index";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigateway/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    public readonly cacheKeyParameters!: pulumi.Output<string[] | undefined>;
    public readonly cacheNamespace!: pulumi.Output<string>;
    public readonly connectionId!: pulumi.Output<string | undefined>;
    public readonly connectionType!: pulumi.Output<string | undefined>;
    public readonly contentHandling!: pulumi.Output<string | undefined>;
    public readonly credentials!: pulumi.Output<string | undefined>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly integrationHttpMethod!: pulumi.Output<string | undefined>;
    public readonly passthroughBehavior!: pulumi.Output<string>;
    public readonly requestParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly requestTemplates!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly restApi!: pulumi.Output<string>;
    public readonly timeoutMilliseconds!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly uri!: pulumi.Output<string | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            inputs["cacheKeyParameters"] = state ? state.cacheKeyParameters : undefined;
            inputs["cacheNamespace"] = state ? state.cacheNamespace : undefined;
            inputs["connectionId"] = state ? state.connectionId : undefined;
            inputs["connectionType"] = state ? state.connectionType : undefined;
            inputs["contentHandling"] = state ? state.contentHandling : undefined;
            inputs["credentials"] = state ? state.credentials : undefined;
            inputs["httpMethod"] = state ? state.httpMethod : undefined;
            inputs["integrationHttpMethod"] = state ? state.integrationHttpMethod : undefined;
            inputs["passthroughBehavior"] = state ? state.passthroughBehavior : undefined;
            inputs["requestParameters"] = state ? state.requestParameters : undefined;
            inputs["requestTemplates"] = state ? state.requestTemplates : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["restApi"] = state ? state.restApi : undefined;
            inputs["timeoutMilliseconds"] = state ? state.timeoutMilliseconds : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if (!args || args.httpMethod === undefined) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if (!args || args.resourceId === undefined) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (!args || args.restApi === undefined) {
                throw new Error("Missing required property 'restApi'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["cacheKeyParameters"] = args ? args.cacheKeyParameters : undefined;
            inputs["cacheNamespace"] = args ? args.cacheNamespace : undefined;
            inputs["connectionId"] = args ? args.connectionId : undefined;
            inputs["connectionType"] = args ? args.connectionType : undefined;
            inputs["contentHandling"] = args ? args.contentHandling : undefined;
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["httpMethod"] = args ? args.httpMethod : undefined;
            inputs["integrationHttpMethod"] = args ? args.integrationHttpMethod : undefined;
            inputs["passthroughBehavior"] = args ? args.passthroughBehavior : undefined;
            inputs["requestParameters"] = args ? args.requestParameters : undefined;
            inputs["requestTemplates"] = args ? args.requestTemplates : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["restApi"] = args ? args.restApi : undefined;
            inputs["timeoutMilliseconds"] = args ? args.timeoutMilliseconds : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["uri"] = args ? args.uri : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Integration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    readonly cacheKeyParameters?: pulumi.Input<pulumi.Input<string>[]>;
    readonly cacheNamespace?: pulumi.Input<string>;
    readonly connectionId?: pulumi.Input<string>;
    readonly connectionType?: pulumi.Input<string>;
    readonly contentHandling?: pulumi.Input<string>;
    readonly credentials?: pulumi.Input<string>;
    readonly httpMethod?: pulumi.Input<string>;
    readonly integrationHttpMethod?: pulumi.Input<string>;
    readonly passthroughBehavior?: pulumi.Input<string>;
    readonly requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly resourceId?: pulumi.Input<string>;
    readonly restApi?: pulumi.Input<string | RestApi>;
    readonly timeoutMilliseconds?: pulumi.Input<number>;
    readonly type?: pulumi.Input<string>;
    readonly uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    readonly cacheKeyParameters?: pulumi.Input<pulumi.Input<string>[]>;
    readonly cacheNamespace?: pulumi.Input<string>;
    readonly connectionId?: pulumi.Input<string>;
    readonly connectionType?: pulumi.Input<string>;
    readonly contentHandling?: pulumi.Input<string>;
    readonly credentials?: pulumi.Input<string>;
    readonly httpMethod: pulumi.Input<string>;
    readonly integrationHttpMethod?: pulumi.Input<string>;
    readonly passthroughBehavior?: pulumi.Input<string>;
    readonly requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly resourceId: pulumi.Input<string>;
    readonly restApi: pulumi.Input<string | RestApi>;
    readonly timeoutMilliseconds?: pulumi.Input<number>;
    readonly type: pulumi.Input<string>;
    readonly uri?: pulumi.Input<string>;
}
