// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    public readonly activationKey: pulumi.Output<string>;
    public /*out*/ readonly arn: pulumi.Output<string>;
    public /*out*/ readonly gatewayId: pulumi.Output<string>;
    public readonly gatewayIpAddress: pulumi.Output<string>;
    public readonly gatewayName: pulumi.Output<string>;
    public readonly gatewayTimezone: pulumi.Output<string>;
    public readonly gatewayType: pulumi.Output<string | undefined>;
    public readonly mediumChangerType: pulumi.Output<string | undefined>;
    public readonly smbActiveDirectorySettings: pulumi.Output<{ domainName: string, password: string, username: string } | undefined>;
    public readonly smbGuestPassword: pulumi.Output<string | undefined>;
    public readonly tapeDriveType: pulumi.Output<string | undefined>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: GatewayState = argsOrState as GatewayState | undefined;
            inputs["activationKey"] = state ? state.activationKey : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["gatewayId"] = state ? state.gatewayId : undefined;
            inputs["gatewayIpAddress"] = state ? state.gatewayIpAddress : undefined;
            inputs["gatewayName"] = state ? state.gatewayName : undefined;
            inputs["gatewayTimezone"] = state ? state.gatewayTimezone : undefined;
            inputs["gatewayType"] = state ? state.gatewayType : undefined;
            inputs["mediumChangerType"] = state ? state.mediumChangerType : undefined;
            inputs["smbActiveDirectorySettings"] = state ? state.smbActiveDirectorySettings : undefined;
            inputs["smbGuestPassword"] = state ? state.smbGuestPassword : undefined;
            inputs["tapeDriveType"] = state ? state.tapeDriveType : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if (!args || args.gatewayName === undefined) {
                throw new Error("Missing required property 'gatewayName'");
            }
            if (!args || args.gatewayTimezone === undefined) {
                throw new Error("Missing required property 'gatewayTimezone'");
            }
            inputs["activationKey"] = args ? args.activationKey : undefined;
            inputs["gatewayIpAddress"] = args ? args.gatewayIpAddress : undefined;
            inputs["gatewayName"] = args ? args.gatewayName : undefined;
            inputs["gatewayTimezone"] = args ? args.gatewayTimezone : undefined;
            inputs["gatewayType"] = args ? args.gatewayType : undefined;
            inputs["mediumChangerType"] = args ? args.mediumChangerType : undefined;
            inputs["smbActiveDirectorySettings"] = args ? args.smbActiveDirectorySettings : undefined;
            inputs["smbGuestPassword"] = args ? args.smbGuestPassword : undefined;
            inputs["tapeDriveType"] = args ? args.tapeDriveType : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["gatewayId"] = undefined /*out*/;
        }
        super("aws:storagegateway/gateway:Gateway", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    readonly activationKey?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly gatewayId?: pulumi.Input<string>;
    readonly gatewayIpAddress?: pulumi.Input<string>;
    readonly gatewayName?: pulumi.Input<string>;
    readonly gatewayTimezone?: pulumi.Input<string>;
    readonly gatewayType?: pulumi.Input<string>;
    readonly mediumChangerType?: pulumi.Input<string>;
    readonly smbActiveDirectorySettings?: pulumi.Input<{ domainName: pulumi.Input<string>, password: pulumi.Input<string>, username: pulumi.Input<string> }>;
    readonly smbGuestPassword?: pulumi.Input<string>;
    readonly tapeDriveType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    readonly activationKey?: pulumi.Input<string>;
    readonly gatewayIpAddress?: pulumi.Input<string>;
    readonly gatewayName: pulumi.Input<string>;
    readonly gatewayTimezone: pulumi.Input<string>;
    readonly gatewayType?: pulumi.Input<string>;
    readonly mediumChangerType?: pulumi.Input<string>;
    readonly smbActiveDirectorySettings?: pulumi.Input<{ domainName: pulumi.Input<string>, password: pulumi.Input<string>, username: pulumi.Input<string> }>;
    readonly smbGuestPassword?: pulumi.Input<string>;
    readonly tapeDriveType?: pulumi.Input<string>;
}
