// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NfsFileShare extends pulumi.CustomResource {
    /**
     * Get an existing NfsFileShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NfsFileShareState, opts?: pulumi.CustomResourceOptions): NfsFileShare {
        return new NfsFileShare(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly clientLists: pulumi.Output<string[]>;
    public readonly defaultStorageClass: pulumi.Output<string | undefined>;
    public /*out*/ readonly fileshareId: pulumi.Output<string>;
    public readonly gatewayArn: pulumi.Output<string>;
    public readonly guessMimeTypeEnabled: pulumi.Output<boolean | undefined>;
    public readonly kmsEncrypted: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyArn: pulumi.Output<string | undefined>;
    public readonly locationArn: pulumi.Output<string>;
    public readonly nfsFileShareDefaults: pulumi.Output<{ directoryMode?: string, fileMode?: string, groupId?: number, ownerId?: number } | undefined>;
    public readonly objectAcl: pulumi.Output<string | undefined>;
    public readonly readOnly: pulumi.Output<boolean | undefined>;
    public readonly requesterPays: pulumi.Output<boolean | undefined>;
    public readonly roleArn: pulumi.Output<string>;
    public readonly squash: pulumi.Output<string | undefined>;

    /**
     * Create a NfsFileShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NfsFileShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NfsFileShareArgs | NfsFileShareState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NfsFileShareState = argsOrState as NfsFileShareState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["clientLists"] = state ? state.clientLists : undefined;
            inputs["defaultStorageClass"] = state ? state.defaultStorageClass : undefined;
            inputs["fileshareId"] = state ? state.fileshareId : undefined;
            inputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            inputs["guessMimeTypeEnabled"] = state ? state.guessMimeTypeEnabled : undefined;
            inputs["kmsEncrypted"] = state ? state.kmsEncrypted : undefined;
            inputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            inputs["locationArn"] = state ? state.locationArn : undefined;
            inputs["nfsFileShareDefaults"] = state ? state.nfsFileShareDefaults : undefined;
            inputs["objectAcl"] = state ? state.objectAcl : undefined;
            inputs["readOnly"] = state ? state.readOnly : undefined;
            inputs["requesterPays"] = state ? state.requesterPays : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["squash"] = state ? state.squash : undefined;
        } else {
            const args = argsOrState as NfsFileShareArgs | undefined;
            if (!args || args.clientLists === undefined) {
                throw new Error("Missing required property 'clientLists'");
            }
            if (!args || args.gatewayArn === undefined) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if (!args || args.locationArn === undefined) {
                throw new Error("Missing required property 'locationArn'");
            }
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["clientLists"] = args ? args.clientLists : undefined;
            inputs["defaultStorageClass"] = args ? args.defaultStorageClass : undefined;
            inputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            inputs["guessMimeTypeEnabled"] = args ? args.guessMimeTypeEnabled : undefined;
            inputs["kmsEncrypted"] = args ? args.kmsEncrypted : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["locationArn"] = args ? args.locationArn : undefined;
            inputs["nfsFileShareDefaults"] = args ? args.nfsFileShareDefaults : undefined;
            inputs["objectAcl"] = args ? args.objectAcl : undefined;
            inputs["readOnly"] = args ? args.readOnly : undefined;
            inputs["requesterPays"] = args ? args.requesterPays : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["squash"] = args ? args.squash : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["fileshareId"] = undefined /*out*/;
        }
        super("aws:storagegateway/nfsFileShare:NfsFileShare", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NfsFileShare resources.
 */
export interface NfsFileShareState {
    readonly arn?: pulumi.Input<string>;
    readonly clientLists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultStorageClass?: pulumi.Input<string>;
    readonly fileshareId?: pulumi.Input<string>;
    readonly gatewayArn?: pulumi.Input<string>;
    readonly guessMimeTypeEnabled?: pulumi.Input<boolean>;
    readonly kmsEncrypted?: pulumi.Input<boolean>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly locationArn?: pulumi.Input<string>;
    readonly nfsFileShareDefaults?: pulumi.Input<{ directoryMode?: pulumi.Input<string>, fileMode?: pulumi.Input<string>, groupId?: pulumi.Input<number>, ownerId?: pulumi.Input<number> }>;
    readonly objectAcl?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    readonly requesterPays?: pulumi.Input<boolean>;
    readonly roleArn?: pulumi.Input<string>;
    readonly squash?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NfsFileShare resource.
 */
export interface NfsFileShareArgs {
    readonly clientLists: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultStorageClass?: pulumi.Input<string>;
    readonly gatewayArn: pulumi.Input<string>;
    readonly guessMimeTypeEnabled?: pulumi.Input<boolean>;
    readonly kmsEncrypted?: pulumi.Input<boolean>;
    readonly kmsKeyArn?: pulumi.Input<string>;
    readonly locationArn: pulumi.Input<string>;
    readonly nfsFileShareDefaults?: pulumi.Input<{ directoryMode?: pulumi.Input<string>, fileMode?: pulumi.Input<string>, groupId?: pulumi.Input<number>, ownerId?: pulumi.Input<number> }>;
    readonly objectAcl?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    readonly requesterPays?: pulumi.Input<boolean>;
    readonly roleArn: pulumi.Input<string>;
    readonly squash?: pulumi.Input<string>;
}
