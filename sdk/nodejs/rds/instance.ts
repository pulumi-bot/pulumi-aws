// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

import {InstanceType, StorageType} from "./index";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    public readonly allocatedStorage!: pulumi.Output<number>;
    public readonly allowMajorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly applyImmediately!: pulumi.Output<boolean>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupRetentionPeriod!: pulumi.Output<number>;
    public readonly backupWindow!: pulumi.Output<string>;
    public readonly caCertIdentifier!: pulumi.Output<string>;
    public readonly characterSetName!: pulumi.Output<string>;
    public readonly copyTagsToSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly dbSubnetGroupName!: pulumi.Output<string>;
    public readonly deleteAutomatedBackups!: pulumi.Output<boolean | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly domainIamRoleName!: pulumi.Output<string | undefined>;
    public readonly enabledCloudwatchLogsExports!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostedZoneId!: pulumi.Output<string>;
    public readonly iamDatabaseAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly identifier!: pulumi.Output<string>;
    public readonly identifierPrefix!: pulumi.Output<string>;
    public readonly instanceClass!: pulumi.Output<string>;
    public readonly iops!: pulumi.Output<number | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly licenseModel!: pulumi.Output<string>;
    public readonly maintenanceWindow!: pulumi.Output<string>;
    public readonly maxAllocatedStorage!: pulumi.Output<number | undefined>;
    public readonly monitoringInterval!: pulumi.Output<number | undefined>;
    public readonly monitoringRoleArn!: pulumi.Output<string>;
    public readonly multiAz!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly optionGroupName!: pulumi.Output<string>;
    public readonly parameterGroupName!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly performanceInsightsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly performanceInsightsKmsKeyId!: pulumi.Output<string>;
    public readonly performanceInsightsRetentionPeriod!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly replicas!: pulumi.Output<string[]>;
    public readonly replicateSourceDb!: pulumi.Output<string | undefined>;
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    public readonly s3Import!: pulumi.Output<outputs.rds.InstanceS3Import | undefined>;
    public readonly securityGroupNames!: pulumi.Output<string[] | undefined>;
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly snapshotIdentifier!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageEncrypted!: pulumi.Output<boolean | undefined>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InstanceState | undefined;
            inputs["address"] = state ? state.address : undefined;
            inputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            inputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            inputs["backupWindow"] = state ? state.backupWindow : undefined;
            inputs["caCertIdentifier"] = state ? state.caCertIdentifier : undefined;
            inputs["characterSetName"] = state ? state.characterSetName : undefined;
            inputs["copyTagsToSnapshot"] = state ? state.copyTagsToSnapshot : undefined;
            inputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            inputs["deleteAutomatedBackups"] = state ? state.deleteAutomatedBackups : undefined;
            inputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["domainIamRoleName"] = state ? state.domainIamRoleName : undefined;
            inputs["enabledCloudwatchLogsExports"] = state ? state.enabledCloudwatchLogsExports : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            inputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            inputs["iamDatabaseAuthenticationEnabled"] = state ? state.iamDatabaseAuthenticationEnabled : undefined;
            inputs["identifier"] = state ? state.identifier : undefined;
            inputs["identifierPrefix"] = state ? state.identifierPrefix : undefined;
            inputs["instanceClass"] = state ? state.instanceClass : undefined;
            inputs["iops"] = state ? state.iops : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["licenseModel"] = state ? state.licenseModel : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["maxAllocatedStorage"] = state ? state.maxAllocatedStorage : undefined;
            inputs["monitoringInterval"] = state ? state.monitoringInterval : undefined;
            inputs["monitoringRoleArn"] = state ? state.monitoringRoleArn : undefined;
            inputs["multiAz"] = state ? state.multiAz : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            inputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["performanceInsightsEnabled"] = state ? state.performanceInsightsEnabled : undefined;
            inputs["performanceInsightsKmsKeyId"] = state ? state.performanceInsightsKmsKeyId : undefined;
            inputs["performanceInsightsRetentionPeriod"] = state ? state.performanceInsightsRetentionPeriod : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["replicas"] = state ? state.replicas : undefined;
            inputs["replicateSourceDb"] = state ? state.replicateSourceDb : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["s3Import"] = state ? state.s3Import : undefined;
            inputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            inputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            inputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
            inputs["username"] = state ? state.username : undefined;
            inputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (!args || args.instanceClass === undefined) {
                throw new Error("Missing required property 'instanceClass'");
            }
            inputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            inputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            inputs["backupWindow"] = args ? args.backupWindow : undefined;
            inputs["caCertIdentifier"] = args ? args.caCertIdentifier : undefined;
            inputs["characterSetName"] = args ? args.characterSetName : undefined;
            inputs["copyTagsToSnapshot"] = args ? args.copyTagsToSnapshot : undefined;
            inputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            inputs["deleteAutomatedBackups"] = args ? args.deleteAutomatedBackups : undefined;
            inputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["domainIamRoleName"] = args ? args.domainIamRoleName : undefined;
            inputs["enabledCloudwatchLogsExports"] = args ? args.enabledCloudwatchLogsExports : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            inputs["iamDatabaseAuthenticationEnabled"] = args ? args.iamDatabaseAuthenticationEnabled : undefined;
            inputs["identifier"] = args ? args.identifier : undefined;
            inputs["identifierPrefix"] = args ? args.identifierPrefix : undefined;
            inputs["instanceClass"] = args ? args.instanceClass : undefined;
            inputs["iops"] = args ? args.iops : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["licenseModel"] = args ? args.licenseModel : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["maxAllocatedStorage"] = args ? args.maxAllocatedStorage : undefined;
            inputs["monitoringInterval"] = args ? args.monitoringInterval : undefined;
            inputs["monitoringRoleArn"] = args ? args.monitoringRoleArn : undefined;
            inputs["multiAz"] = args ? args.multiAz : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            inputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["performanceInsightsEnabled"] = args ? args.performanceInsightsEnabled : undefined;
            inputs["performanceInsightsKmsKeyId"] = args ? args.performanceInsightsKmsKeyId : undefined;
            inputs["performanceInsightsRetentionPeriod"] = args ? args.performanceInsightsRetentionPeriod : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["replicateSourceDb"] = args ? args.replicateSourceDb : undefined;
            inputs["s3Import"] = args ? args.s3Import : undefined;
            inputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            inputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            inputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            inputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["address"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["hostedZoneId"] = undefined /*out*/;
            inputs["replicas"] = undefined /*out*/;
            inputs["resourceId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    readonly address?: pulumi.Input<string>;
    readonly allocatedStorage?: pulumi.Input<number>;
    readonly allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly arn?: pulumi.Input<string>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly backupRetentionPeriod?: pulumi.Input<number>;
    readonly backupWindow?: pulumi.Input<string>;
    readonly caCertIdentifier?: pulumi.Input<string>;
    readonly characterSetName?: pulumi.Input<string>;
    readonly copyTagsToSnapshot?: pulumi.Input<boolean>;
    readonly dbSubnetGroupName?: pulumi.Input<string>;
    readonly deleteAutomatedBackups?: pulumi.Input<boolean>;
    readonly deletionProtection?: pulumi.Input<boolean>;
    readonly domain?: pulumi.Input<string>;
    readonly domainIamRoleName?: pulumi.Input<string>;
    readonly enabledCloudwatchLogsExports?: pulumi.Input<pulumi.Input<string>[]>;
    readonly endpoint?: pulumi.Input<string>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly finalSnapshotIdentifier?: pulumi.Input<string>;
    readonly hostedZoneId?: pulumi.Input<string>;
    readonly iamDatabaseAuthenticationEnabled?: pulumi.Input<boolean>;
    readonly identifier?: pulumi.Input<string>;
    readonly identifierPrefix?: pulumi.Input<string>;
    readonly instanceClass?: pulumi.Input<string | InstanceType>;
    readonly iops?: pulumi.Input<number>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly licenseModel?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly maxAllocatedStorage?: pulumi.Input<number>;
    readonly monitoringInterval?: pulumi.Input<number>;
    readonly monitoringRoleArn?: pulumi.Input<string>;
    readonly multiAz?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly optionGroupName?: pulumi.Input<string>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly performanceInsightsEnabled?: pulumi.Input<boolean>;
    readonly performanceInsightsKmsKeyId?: pulumi.Input<string>;
    readonly performanceInsightsRetentionPeriod?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly replicas?: pulumi.Input<pulumi.Input<string>[]>;
    readonly replicateSourceDb?: pulumi.Input<string>;
    readonly resourceId?: pulumi.Input<string>;
    readonly s3Import?: pulumi.Input<inputs.rds.InstanceS3Import>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly skipFinalSnapshot?: pulumi.Input<boolean>;
    readonly snapshotIdentifier?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly storageEncrypted?: pulumi.Input<boolean>;
    readonly storageType?: pulumi.Input<string | StorageType>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timezone?: pulumi.Input<string>;
    readonly username?: pulumi.Input<string>;
    readonly vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    readonly allocatedStorage?: pulumi.Input<number>;
    readonly allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly backupRetentionPeriod?: pulumi.Input<number>;
    readonly backupWindow?: pulumi.Input<string>;
    readonly caCertIdentifier?: pulumi.Input<string>;
    readonly characterSetName?: pulumi.Input<string>;
    readonly copyTagsToSnapshot?: pulumi.Input<boolean>;
    readonly dbSubnetGroupName?: pulumi.Input<string>;
    readonly deleteAutomatedBackups?: pulumi.Input<boolean>;
    readonly deletionProtection?: pulumi.Input<boolean>;
    readonly domain?: pulumi.Input<string>;
    readonly domainIamRoleName?: pulumi.Input<string>;
    readonly enabledCloudwatchLogsExports?: pulumi.Input<pulumi.Input<string>[]>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly finalSnapshotIdentifier?: pulumi.Input<string>;
    readonly iamDatabaseAuthenticationEnabled?: pulumi.Input<boolean>;
    readonly identifier?: pulumi.Input<string>;
    readonly identifierPrefix?: pulumi.Input<string>;
    readonly instanceClass: pulumi.Input<string | InstanceType>;
    readonly iops?: pulumi.Input<number>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly licenseModel?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly maxAllocatedStorage?: pulumi.Input<number>;
    readonly monitoringInterval?: pulumi.Input<number>;
    readonly monitoringRoleArn?: pulumi.Input<string>;
    readonly multiAz?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly optionGroupName?: pulumi.Input<string>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly performanceInsightsEnabled?: pulumi.Input<boolean>;
    readonly performanceInsightsKmsKeyId?: pulumi.Input<string>;
    readonly performanceInsightsRetentionPeriod?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly replicateSourceDb?: pulumi.Input<string>;
    readonly s3Import?: pulumi.Input<inputs.rds.InstanceS3Import>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly skipFinalSnapshot?: pulumi.Input<boolean>;
    readonly snapshotIdentifier?: pulumi.Input<string>;
    readonly storageEncrypted?: pulumi.Input<boolean>;
    readonly storageType?: pulumi.Input<string | StorageType>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timezone?: pulumi.Input<string>;
    readonly username?: pulumi.Input<string>;
    readonly vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
