// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    public readonly accessPolicies: pulumi.Output<string>;
    public readonly advancedOptions: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly clusterConfig: pulumi.Output<{ dedicatedMasterCount?: number, dedicatedMasterEnabled?: boolean, dedicatedMasterType?: string, instanceCount?: number, instanceType?: string, zoneAwarenessEnabled?: boolean }>;
    public readonly cognitoOptions: pulumi.Output<{ enabled?: boolean, identityPoolId: string, roleArn: string, userPoolId: string } | undefined>;
    public /*out*/ readonly domainId: pulumi.Output<string>;
    public readonly domainName: pulumi.Output<string>;
    public readonly ebsOptions: pulumi.Output<{ ebsEnabled: boolean, iops?: number, volumeSize?: number, volumeType: string }>;
    public readonly elasticsearchVersion: pulumi.Output<string | undefined>;
    public readonly encryptAtRest: pulumi.Output<{ enabled: boolean, kmsKeyId: string }>;
    public /*out*/ readonly endpoint: pulumi.Output<string>;
    public /*out*/ readonly kibanaEndpoint: pulumi.Output<string>;
    public readonly logPublishingOptions: pulumi.Output<{ cloudwatchLogGroupArn: string, enabled?: boolean, logType: string }[] | undefined>;
    public readonly nodeToNodeEncryption: pulumi.Output<{ enabled: boolean }>;
    public readonly snapshotOptions: pulumi.Output<{ automatedSnapshotStartHour: number } | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly vpcOptions: pulumi.Output<{ availabilityZones: string[], securityGroupIds?: string[], subnetIds?: string[], vpcId: string } | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DomainState = argsOrState as DomainState | undefined;
            inputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            inputs["advancedOptions"] = state ? state.advancedOptions : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            inputs["cognitoOptions"] = state ? state.cognitoOptions : undefined;
            inputs["domainId"] = state ? state.domainId : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["ebsOptions"] = state ? state.ebsOptions : undefined;
            inputs["elasticsearchVersion"] = state ? state.elasticsearchVersion : undefined;
            inputs["encryptAtRest"] = state ? state.encryptAtRest : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["kibanaEndpoint"] = state ? state.kibanaEndpoint : undefined;
            inputs["logPublishingOptions"] = state ? state.logPublishingOptions : undefined;
            inputs["nodeToNodeEncryption"] = state ? state.nodeToNodeEncryption : undefined;
            inputs["snapshotOptions"] = state ? state.snapshotOptions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcOptions"] = state ? state.vpcOptions : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            inputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            inputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            inputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            inputs["cognitoOptions"] = args ? args.cognitoOptions : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["ebsOptions"] = args ? args.ebsOptions : undefined;
            inputs["elasticsearchVersion"] = args ? args.elasticsearchVersion : undefined;
            inputs["encryptAtRest"] = args ? args.encryptAtRest : undefined;
            inputs["logPublishingOptions"] = args ? args.logPublishingOptions : undefined;
            inputs["nodeToNodeEncryption"] = args ? args.nodeToNodeEncryption : undefined;
            inputs["snapshotOptions"] = args ? args.snapshotOptions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["domainId"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["kibanaEndpoint"] = undefined /*out*/;
        }
        super("aws:elasticsearch/domain:Domain", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    readonly accessPolicies?: pulumi.Input<string>;
    readonly advancedOptions?: pulumi.Input<{[key: string]: any}>;
    readonly arn?: pulumi.Input<string>;
    readonly clusterConfig?: pulumi.Input<{ dedicatedMasterCount?: pulumi.Input<number>, dedicatedMasterEnabled?: pulumi.Input<boolean>, dedicatedMasterType?: pulumi.Input<string>, instanceCount?: pulumi.Input<number>, instanceType?: pulumi.Input<string>, zoneAwarenessEnabled?: pulumi.Input<boolean> }>;
    readonly cognitoOptions?: pulumi.Input<{ enabled?: pulumi.Input<boolean>, identityPoolId: pulumi.Input<string>, roleArn: pulumi.Input<string>, userPoolId: pulumi.Input<string> }>;
    readonly domainId?: pulumi.Input<string>;
    readonly domainName?: pulumi.Input<string>;
    readonly ebsOptions?: pulumi.Input<{ ebsEnabled: pulumi.Input<boolean>, iops?: pulumi.Input<number>, volumeSize?: pulumi.Input<number>, volumeType?: pulumi.Input<string> }>;
    readonly elasticsearchVersion?: pulumi.Input<string>;
    readonly encryptAtRest?: pulumi.Input<{ enabled: pulumi.Input<boolean>, kmsKeyId?: pulumi.Input<string> }>;
    readonly endpoint?: pulumi.Input<string>;
    readonly kibanaEndpoint?: pulumi.Input<string>;
    readonly logPublishingOptions?: pulumi.Input<pulumi.Input<{ cloudwatchLogGroupArn: pulumi.Input<string>, enabled?: pulumi.Input<boolean>, logType: pulumi.Input<string> }>[]>;
    readonly nodeToNodeEncryption?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly snapshotOptions?: pulumi.Input<{ automatedSnapshotStartHour: pulumi.Input<number> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly vpcOptions?: pulumi.Input<{ availabilityZones?: pulumi.Input<pulumi.Input<string>[]>, securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>, subnetIds?: pulumi.Input<pulumi.Input<string>[]>, vpcId?: pulumi.Input<string> }>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    readonly accessPolicies?: pulumi.Input<string>;
    readonly advancedOptions?: pulumi.Input<{[key: string]: any}>;
    readonly clusterConfig?: pulumi.Input<{ dedicatedMasterCount?: pulumi.Input<number>, dedicatedMasterEnabled?: pulumi.Input<boolean>, dedicatedMasterType?: pulumi.Input<string>, instanceCount?: pulumi.Input<number>, instanceType?: pulumi.Input<string>, zoneAwarenessEnabled?: pulumi.Input<boolean> }>;
    readonly cognitoOptions?: pulumi.Input<{ enabled?: pulumi.Input<boolean>, identityPoolId: pulumi.Input<string>, roleArn: pulumi.Input<string>, userPoolId: pulumi.Input<string> }>;
    readonly domainName?: pulumi.Input<string>;
    readonly ebsOptions?: pulumi.Input<{ ebsEnabled: pulumi.Input<boolean>, iops?: pulumi.Input<number>, volumeSize?: pulumi.Input<number>, volumeType?: pulumi.Input<string> }>;
    readonly elasticsearchVersion?: pulumi.Input<string>;
    readonly encryptAtRest?: pulumi.Input<{ enabled: pulumi.Input<boolean>, kmsKeyId?: pulumi.Input<string> }>;
    readonly logPublishingOptions?: pulumi.Input<pulumi.Input<{ cloudwatchLogGroupArn: pulumi.Input<string>, enabled?: pulumi.Input<boolean>, logType: pulumi.Input<string> }>[]>;
    readonly nodeToNodeEncryption?: pulumi.Input<{ enabled: pulumi.Input<boolean> }>;
    readonly snapshotOptions?: pulumi.Input<{ automatedSnapshotStartHour: pulumi.Input<number> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly vpcOptions?: pulumi.Input<{ availabilityZones?: pulumi.Input<pulumi.Input<string>[]>, securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>, subnetIds?: pulumi.Input<pulumi.Input<string>[]>, vpcId?: pulumi.Input<string> }>;
}
