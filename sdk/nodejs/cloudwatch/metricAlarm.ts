// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

import {Topic} from "../sns";

export class MetricAlarm extends pulumi.CustomResource {
    /**
     * Get an existing MetricAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricAlarmState, opts?: pulumi.CustomResourceOptions): MetricAlarm {
        return new MetricAlarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/metricAlarm:MetricAlarm';

    /**
     * Returns true if the given object is an instance of MetricAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricAlarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricAlarm.__pulumiType;
    }

    public readonly actionsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly alarmActions!: pulumi.Output<string[] | undefined>;
    public readonly alarmDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly comparisonOperator!: pulumi.Output<string>;
    public readonly datapointsToAlarm!: pulumi.Output<number | undefined>;
    public readonly dimensions!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly evaluateLowSampleCountPercentiles!: pulumi.Output<string>;
    public readonly evaluationPeriods!: pulumi.Output<number>;
    public readonly extendedStatistic!: pulumi.Output<string | undefined>;
    public readonly insufficientDataActions!: pulumi.Output<string[] | undefined>;
    public readonly metricName!: pulumi.Output<string | undefined>;
    public readonly metricQueries!: pulumi.Output<outputs.cloudwatch.MetricAlarmMetricQuery[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly okActions!: pulumi.Output<string[] | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly statistic!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly threshold!: pulumi.Output<number | undefined>;
    public readonly thresholdMetricId!: pulumi.Output<string | undefined>;
    public readonly treatMissingData!: pulumi.Output<string | undefined>;
    public readonly unit!: pulumi.Output<string | undefined>;

    /**
     * Create a MetricAlarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricAlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricAlarmArgs | MetricAlarmState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MetricAlarmState | undefined;
            inputs["actionsEnabled"] = state ? state.actionsEnabled : undefined;
            inputs["alarmActions"] = state ? state.alarmActions : undefined;
            inputs["alarmDescription"] = state ? state.alarmDescription : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["comparisonOperator"] = state ? state.comparisonOperator : undefined;
            inputs["datapointsToAlarm"] = state ? state.datapointsToAlarm : undefined;
            inputs["dimensions"] = state ? state.dimensions : undefined;
            inputs["evaluateLowSampleCountPercentiles"] = state ? state.evaluateLowSampleCountPercentiles : undefined;
            inputs["evaluationPeriods"] = state ? state.evaluationPeriods : undefined;
            inputs["extendedStatistic"] = state ? state.extendedStatistic : undefined;
            inputs["insufficientDataActions"] = state ? state.insufficientDataActions : undefined;
            inputs["metricName"] = state ? state.metricName : undefined;
            inputs["metricQueries"] = state ? state.metricQueries : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["okActions"] = state ? state.okActions : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["statistic"] = state ? state.statistic : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["threshold"] = state ? state.threshold : undefined;
            inputs["thresholdMetricId"] = state ? state.thresholdMetricId : undefined;
            inputs["treatMissingData"] = state ? state.treatMissingData : undefined;
            inputs["unit"] = state ? state.unit : undefined;
        } else {
            const args = argsOrState as MetricAlarmArgs | undefined;
            if (!args || args.comparisonOperator === undefined) {
                throw new Error("Missing required property 'comparisonOperator'");
            }
            if (!args || args.evaluationPeriods === undefined) {
                throw new Error("Missing required property 'evaluationPeriods'");
            }
            inputs["actionsEnabled"] = args ? args.actionsEnabled : undefined;
            inputs["alarmActions"] = args ? args.alarmActions : undefined;
            inputs["alarmDescription"] = args ? args.alarmDescription : undefined;
            inputs["comparisonOperator"] = args ? args.comparisonOperator : undefined;
            inputs["datapointsToAlarm"] = args ? args.datapointsToAlarm : undefined;
            inputs["dimensions"] = args ? args.dimensions : undefined;
            inputs["evaluateLowSampleCountPercentiles"] = args ? args.evaluateLowSampleCountPercentiles : undefined;
            inputs["evaluationPeriods"] = args ? args.evaluationPeriods : undefined;
            inputs["extendedStatistic"] = args ? args.extendedStatistic : undefined;
            inputs["insufficientDataActions"] = args ? args.insufficientDataActions : undefined;
            inputs["metricName"] = args ? args.metricName : undefined;
            inputs["metricQueries"] = args ? args.metricQueries : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["okActions"] = args ? args.okActions : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["statistic"] = args ? args.statistic : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["threshold"] = args ? args.threshold : undefined;
            inputs["thresholdMetricId"] = args ? args.thresholdMetricId : undefined;
            inputs["treatMissingData"] = args ? args.treatMissingData : undefined;
            inputs["unit"] = args ? args.unit : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MetricAlarm.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricAlarm resources.
 */
export interface MetricAlarmState {
    readonly actionsEnabled?: pulumi.Input<boolean>;
    readonly alarmActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly alarmDescription?: pulumi.Input<string>;
    readonly arn?: pulumi.Input<string>;
    readonly comparisonOperator?: pulumi.Input<string>;
    readonly datapointsToAlarm?: pulumi.Input<number>;
    readonly dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly evaluateLowSampleCountPercentiles?: pulumi.Input<string>;
    readonly evaluationPeriods?: pulumi.Input<number>;
    readonly extendedStatistic?: pulumi.Input<string>;
    readonly insufficientDataActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly metricName?: pulumi.Input<string>;
    readonly metricQueries?: pulumi.Input<pulumi.Input<inputs.cloudwatch.MetricAlarmMetricQuery>[]>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly okActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly period?: pulumi.Input<number>;
    readonly statistic?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly threshold?: pulumi.Input<number>;
    readonly thresholdMetricId?: pulumi.Input<string>;
    readonly treatMissingData?: pulumi.Input<string>;
    readonly unit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricAlarm resource.
 */
export interface MetricAlarmArgs {
    readonly actionsEnabled?: pulumi.Input<boolean>;
    readonly alarmActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly alarmDescription?: pulumi.Input<string>;
    readonly comparisonOperator: pulumi.Input<string>;
    readonly datapointsToAlarm?: pulumi.Input<number>;
    readonly dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly evaluateLowSampleCountPercentiles?: pulumi.Input<string>;
    readonly evaluationPeriods: pulumi.Input<number>;
    readonly extendedStatistic?: pulumi.Input<string>;
    readonly insufficientDataActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly metricName?: pulumi.Input<string>;
    readonly metricQueries?: pulumi.Input<pulumi.Input<inputs.cloudwatch.MetricAlarmMetricQuery>[]>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly okActions?: pulumi.Input<pulumi.Input<string | Topic>[]>;
    readonly period?: pulumi.Input<number>;
    readonly statistic?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly threshold?: pulumi.Input<number>;
    readonly thresholdMetricId?: pulumi.Input<string>;
    readonly treatMissingData?: pulumi.Input<string>;
    readonly unit?: pulumi.Input<string>;
}
