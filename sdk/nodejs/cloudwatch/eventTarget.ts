// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class EventTarget extends pulumi.CustomResource {
    /**
     * Get an existing EventTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventTargetState, opts?: pulumi.CustomResourceOptions): EventTarget {
        return new EventTarget(name, <any>state, { ...opts, id: id });
    }

    public readonly arn: pulumi.Output<string>;
    public readonly batchTarget: pulumi.Output<{ arraySize?: number, jobAttempts?: number, jobDefinition: string, jobName: string } | undefined>;
    public readonly ecsTarget: pulumi.Output<{ group?: string, launchType?: string, networkConfiguration?: { assignPublicIp?: boolean, securityGroups?: string[], subnets: string[] }, platformVersion?: string, taskCount?: number, taskDefinitionArn: string } | undefined>;
    public readonly input: pulumi.Output<string | undefined>;
    public readonly inputPath: pulumi.Output<string | undefined>;
    public readonly inputTransformer: pulumi.Output<{ inputPaths?: {[key: string]: any}, inputTemplate: string } | undefined>;
    public readonly kinesisTarget: pulumi.Output<{ partitionKeyPath?: string } | undefined>;
    public readonly roleArn: pulumi.Output<string | undefined>;
    public readonly rule: pulumi.Output<string>;
    public readonly runCommandTargets: pulumi.Output<{ key: string, values: string[] }[] | undefined>;
    public readonly sqsTarget: pulumi.Output<{ messageGroupId?: string } | undefined>;
    public readonly targetId: pulumi.Output<string>;

    /**
     * Create a EventTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventTargetArgs | EventTargetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: EventTargetState = argsOrState as EventTargetState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["batchTarget"] = state ? state.batchTarget : undefined;
            inputs["ecsTarget"] = state ? state.ecsTarget : undefined;
            inputs["input"] = state ? state.input : undefined;
            inputs["inputPath"] = state ? state.inputPath : undefined;
            inputs["inputTransformer"] = state ? state.inputTransformer : undefined;
            inputs["kinesisTarget"] = state ? state.kinesisTarget : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["rule"] = state ? state.rule : undefined;
            inputs["runCommandTargets"] = state ? state.runCommandTargets : undefined;
            inputs["sqsTarget"] = state ? state.sqsTarget : undefined;
            inputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as EventTargetArgs | undefined;
            if (!args || args.arn === undefined) {
                throw new Error("Missing required property 'arn'");
            }
            if (!args || args.rule === undefined) {
                throw new Error("Missing required property 'rule'");
            }
            inputs["arn"] = args ? args.arn : undefined;
            inputs["batchTarget"] = args ? args.batchTarget : undefined;
            inputs["ecsTarget"] = args ? args.ecsTarget : undefined;
            inputs["input"] = args ? args.input : undefined;
            inputs["inputPath"] = args ? args.inputPath : undefined;
            inputs["inputTransformer"] = args ? args.inputTransformer : undefined;
            inputs["kinesisTarget"] = args ? args.kinesisTarget : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["rule"] = args ? args.rule : undefined;
            inputs["runCommandTargets"] = args ? args.runCommandTargets : undefined;
            inputs["sqsTarget"] = args ? args.sqsTarget : undefined;
            inputs["targetId"] = args ? args.targetId : undefined;
        }
        super("aws:cloudwatch/eventTarget:EventTarget", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventTarget resources.
 */
export interface EventTargetState {
    readonly arn?: pulumi.Input<string>;
    readonly batchTarget?: pulumi.Input<{ arraySize?: pulumi.Input<number>, jobAttempts?: pulumi.Input<number>, jobDefinition: pulumi.Input<string>, jobName: pulumi.Input<string> }>;
    readonly ecsTarget?: pulumi.Input<{ group?: pulumi.Input<string>, launchType?: pulumi.Input<string>, networkConfiguration?: pulumi.Input<{ assignPublicIp?: pulumi.Input<boolean>, securityGroups?: pulumi.Input<pulumi.Input<string>[]>, subnets: pulumi.Input<pulumi.Input<string>[]> }>, platformVersion?: pulumi.Input<string>, taskCount?: pulumi.Input<number>, taskDefinitionArn: pulumi.Input<string> }>;
    readonly input?: pulumi.Input<string>;
    readonly inputPath?: pulumi.Input<string>;
    readonly inputTransformer?: pulumi.Input<{ inputPaths?: pulumi.Input<{[key: string]: any}>, inputTemplate: pulumi.Input<string> }>;
    readonly kinesisTarget?: pulumi.Input<{ partitionKeyPath?: pulumi.Input<string> }>;
    readonly roleArn?: pulumi.Input<string>;
    readonly rule?: pulumi.Input<string>;
    readonly runCommandTargets?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly sqsTarget?: pulumi.Input<{ messageGroupId?: pulumi.Input<string> }>;
    readonly targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventTarget resource.
 */
export interface EventTargetArgs {
    readonly arn: pulumi.Input<string>;
    readonly batchTarget?: pulumi.Input<{ arraySize?: pulumi.Input<number>, jobAttempts?: pulumi.Input<number>, jobDefinition: pulumi.Input<string>, jobName: pulumi.Input<string> }>;
    readonly ecsTarget?: pulumi.Input<{ group?: pulumi.Input<string>, launchType?: pulumi.Input<string>, networkConfiguration?: pulumi.Input<{ assignPublicIp?: pulumi.Input<boolean>, securityGroups?: pulumi.Input<pulumi.Input<string>[]>, subnets: pulumi.Input<pulumi.Input<string>[]> }>, platformVersion?: pulumi.Input<string>, taskCount?: pulumi.Input<number>, taskDefinitionArn: pulumi.Input<string> }>;
    readonly input?: pulumi.Input<string>;
    readonly inputPath?: pulumi.Input<string>;
    readonly inputTransformer?: pulumi.Input<{ inputPaths?: pulumi.Input<{[key: string]: any}>, inputTemplate: pulumi.Input<string> }>;
    readonly kinesisTarget?: pulumi.Input<{ partitionKeyPath?: pulumi.Input<string> }>;
    readonly roleArn?: pulumi.Input<string>;
    readonly rule: pulumi.Input<string>;
    readonly runCommandTargets?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, values: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly sqsTarget?: pulumi.Input<{ messageGroupId?: pulumi.Input<string> }>;
    readonly targetId?: pulumi.Input<string>;
}
