// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Broker extends pulumi.CustomResource {
    /**
     * Get an existing Broker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrokerState, opts?: pulumi.CustomResourceOptions): Broker {
        return new Broker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:mq/broker:Broker';

    /**
     * Returns true if the given object is an instance of Broker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Broker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Broker.__pulumiType;
    }

    public readonly applyImmediately!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly brokerName!: pulumi.Output<string>;
    public readonly configuration!: pulumi.Output<outputs.mq.BrokerConfiguration>;
    public readonly deploymentMode!: pulumi.Output<string | undefined>;
    public readonly encryptionOptions!: pulumi.Output<outputs.mq.BrokerEncryptionOptions | undefined>;
    public readonly engineType!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly hostInstanceType!: pulumi.Output<string>;
    public /*out*/ readonly instances!: pulumi.Output<outputs.mq.BrokerInstance[]>;
    public readonly logs!: pulumi.Output<outputs.mq.BrokerLogs | undefined>;
    public readonly maintenanceWindowStartTime!: pulumi.Output<outputs.mq.BrokerMaintenanceWindowStartTime>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly users!: pulumi.Output<outputs.mq.BrokerUser[]>;

    /**
     * Create a Broker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrokerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrokerArgs | BrokerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as BrokerState | undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["brokerName"] = state ? state.brokerName : undefined;
            inputs["configuration"] = state ? state.configuration : undefined;
            inputs["deploymentMode"] = state ? state.deploymentMode : undefined;
            inputs["encryptionOptions"] = state ? state.encryptionOptions : undefined;
            inputs["engineType"] = state ? state.engineType : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["hostInstanceType"] = state ? state.hostInstanceType : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["logs"] = state ? state.logs : undefined;
            inputs["maintenanceWindowStartTime"] = state ? state.maintenanceWindowStartTime : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as BrokerArgs | undefined;
            if (!args || args.brokerName === undefined) {
                throw new Error("Missing required property 'brokerName'");
            }
            if (!args || args.engineType === undefined) {
                throw new Error("Missing required property 'engineType'");
            }
            if (!args || args.engineVersion === undefined) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if (!args || args.hostInstanceType === undefined) {
                throw new Error("Missing required property 'hostInstanceType'");
            }
            if (!args || args.securityGroups === undefined) {
                throw new Error("Missing required property 'securityGroups'");
            }
            if (!args || args.users === undefined) {
                throw new Error("Missing required property 'users'");
            }
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["brokerName"] = args ? args.brokerName : undefined;
            inputs["configuration"] = args ? args.configuration : undefined;
            inputs["deploymentMode"] = args ? args.deploymentMode : undefined;
            inputs["encryptionOptions"] = args ? args.encryptionOptions : undefined;
            inputs["engineType"] = args ? args.engineType : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["hostInstanceType"] = args ? args.hostInstanceType : undefined;
            inputs["logs"] = args ? args.logs : undefined;
            inputs["maintenanceWindowStartTime"] = args ? args.maintenanceWindowStartTime : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["instances"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Broker.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Broker resources.
 */
export interface BrokerState {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly arn?: pulumi.Input<string>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly brokerName?: pulumi.Input<string>;
    readonly configuration?: pulumi.Input<inputs.mq.BrokerConfiguration>;
    readonly deploymentMode?: pulumi.Input<string>;
    readonly encryptionOptions?: pulumi.Input<inputs.mq.BrokerEncryptionOptions>;
    readonly engineType?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly hostInstanceType?: pulumi.Input<string>;
    readonly instances?: pulumi.Input<pulumi.Input<inputs.mq.BrokerInstance>[]>;
    readonly logs?: pulumi.Input<inputs.mq.BrokerLogs>;
    readonly maintenanceWindowStartTime?: pulumi.Input<inputs.mq.BrokerMaintenanceWindowStartTime>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly users?: pulumi.Input<pulumi.Input<inputs.mq.BrokerUser>[]>;
}

/**
 * The set of arguments for constructing a Broker resource.
 */
export interface BrokerArgs {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly brokerName: pulumi.Input<string>;
    readonly configuration?: pulumi.Input<inputs.mq.BrokerConfiguration>;
    readonly deploymentMode?: pulumi.Input<string>;
    readonly encryptionOptions?: pulumi.Input<inputs.mq.BrokerEncryptionOptions>;
    readonly engineType: pulumi.Input<string>;
    readonly engineVersion: pulumi.Input<string>;
    readonly hostInstanceType: pulumi.Input<string>;
    readonly logs?: pulumi.Input<inputs.mq.BrokerLogs>;
    readonly maintenanceWindowStartTime?: pulumi.Input<inputs.mq.BrokerMaintenanceWindowStartTime>;
    readonly publiclyAccessible?: pulumi.Input<boolean>;
    readonly securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    readonly subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly users: pulumi.Input<pulumi.Input<inputs.mq.BrokerUser>[]>;
}
