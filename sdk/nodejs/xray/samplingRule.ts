// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SamplingRule extends pulumi.CustomResource {
    /**
     * Get an existing SamplingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamplingRuleState, opts?: pulumi.CustomResourceOptions): SamplingRule {
        return new SamplingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:xray/samplingRule:SamplingRule';

    /**
     * Returns true if the given object is an instance of SamplingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamplingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamplingRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly attributes!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly fixedRate!: pulumi.Output<number>;
    public readonly host!: pulumi.Output<string>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly reservoirSize!: pulumi.Output<number>;
    public readonly resourceArn!: pulumi.Output<string>;
    public readonly ruleName!: pulumi.Output<string | undefined>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly urlPath!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a SamplingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamplingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamplingRuleArgs | SamplingRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SamplingRuleState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["attributes"] = state ? state.attributes : undefined;
            inputs["fixedRate"] = state ? state.fixedRate : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["httpMethod"] = state ? state.httpMethod : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["reservoirSize"] = state ? state.reservoirSize : undefined;
            inputs["resourceArn"] = state ? state.resourceArn : undefined;
            inputs["ruleName"] = state ? state.ruleName : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["urlPath"] = state ? state.urlPath : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SamplingRuleArgs | undefined;
            if (!args || args.fixedRate === undefined) {
                throw new Error("Missing required property 'fixedRate'");
            }
            if (!args || args.host === undefined) {
                throw new Error("Missing required property 'host'");
            }
            if (!args || args.httpMethod === undefined) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if (!args || args.priority === undefined) {
                throw new Error("Missing required property 'priority'");
            }
            if (!args || args.reservoirSize === undefined) {
                throw new Error("Missing required property 'reservoirSize'");
            }
            if (!args || args.resourceArn === undefined) {
                throw new Error("Missing required property 'resourceArn'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.serviceType === undefined) {
                throw new Error("Missing required property 'serviceType'");
            }
            if (!args || args.urlPath === undefined) {
                throw new Error("Missing required property 'urlPath'");
            }
            if (!args || args.version === undefined) {
                throw new Error("Missing required property 'version'");
            }
            inputs["attributes"] = args ? args.attributes : undefined;
            inputs["fixedRate"] = args ? args.fixedRate : undefined;
            inputs["host"] = args ? args.host : undefined;
            inputs["httpMethod"] = args ? args.httpMethod : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["reservoirSize"] = args ? args.reservoirSize : undefined;
            inputs["resourceArn"] = args ? args.resourceArn : undefined;
            inputs["ruleName"] = args ? args.ruleName : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["serviceType"] = args ? args.serviceType : undefined;
            inputs["urlPath"] = args ? args.urlPath : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SamplingRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamplingRule resources.
 */
export interface SamplingRuleState {
    readonly arn?: pulumi.Input<string>;
    readonly attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly fixedRate?: pulumi.Input<number>;
    readonly host?: pulumi.Input<string>;
    readonly httpMethod?: pulumi.Input<string>;
    readonly priority?: pulumi.Input<number>;
    readonly reservoirSize?: pulumi.Input<number>;
    readonly resourceArn?: pulumi.Input<string>;
    readonly ruleName?: pulumi.Input<string>;
    readonly serviceName?: pulumi.Input<string>;
    readonly serviceType?: pulumi.Input<string>;
    readonly urlPath?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SamplingRule resource.
 */
export interface SamplingRuleArgs {
    readonly attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly fixedRate: pulumi.Input<number>;
    readonly host: pulumi.Input<string>;
    readonly httpMethod: pulumi.Input<string>;
    readonly priority: pulumi.Input<number>;
    readonly reservoirSize: pulumi.Input<number>;
    readonly resourceArn: pulumi.Input<string>;
    readonly ruleName?: pulumi.Input<string>;
    readonly serviceName: pulumi.Input<string>;
    readonly serviceType: pulumi.Input<string>;
    readonly urlPath: pulumi.Input<string>;
    readonly version: pulumi.Input<number>;
}
