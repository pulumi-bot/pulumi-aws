// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationGroupState, opts?: pulumi.CustomResourceOptions): ReplicationGroup {
        return new ReplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/replicationGroup:ReplicationGroup';

    /**
     * Returns true if the given object is an instance of ReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationGroup.__pulumiType;
    }

    public readonly applyImmediately!: pulumi.Output<boolean>;
    public readonly atRestEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly authToken!: pulumi.Output<string | undefined>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean | undefined>;
    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly clusterMode!: pulumi.Output<outputs.elasticache.ReplicationGroupClusterMode>;
    public /*out*/ readonly configurationEndpointAddress!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string | undefined>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<string>;
    public /*out*/ readonly memberClusters!: pulumi.Output<string[]>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly notificationTopicArn!: pulumi.Output<string | undefined>;
    public readonly numberCacheClusters!: pulumi.Output<number>;
    public readonly parameterGroupName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public /*out*/ readonly primaryEndpointAddress!: pulumi.Output<string>;
    public readonly replicationGroupDescription!: pulumi.Output<string>;
    public readonly replicationGroupId!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly securityGroupNames!: pulumi.Output<string[]>;
    public readonly snapshotArns!: pulumi.Output<string[] | undefined>;
    public readonly snapshotName!: pulumi.Output<string | undefined>;
    public readonly snapshotRetentionLimit!: pulumi.Output<number | undefined>;
    public readonly snapshotWindow!: pulumi.Output<string>;
    public readonly subnetGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly transitEncryptionEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationGroupArgs | ReplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ReplicationGroupState | undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            inputs["authToken"] = state ? state.authToken : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["clusterMode"] = state ? state.clusterMode : undefined;
            inputs["configurationEndpointAddress"] = state ? state.configurationEndpointAddress : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["memberClusters"] = state ? state.memberClusters : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["notificationTopicArn"] = state ? state.notificationTopicArn : undefined;
            inputs["numberCacheClusters"] = state ? state.numberCacheClusters : undefined;
            inputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["primaryEndpointAddress"] = state ? state.primaryEndpointAddress : undefined;
            inputs["replicationGroupDescription"] = state ? state.replicationGroupDescription : undefined;
            inputs["replicationGroupId"] = state ? state.replicationGroupId : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            inputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            inputs["snapshotName"] = state ? state.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            inputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        } else {
            const args = argsOrState as ReplicationGroupArgs | undefined;
            if (!args || args.replicationGroupDescription === undefined) {
                throw new Error("Missing required property 'replicationGroupDescription'");
            }
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["atRestEncryptionEnabled"] = args ? args.atRestEncryptionEnabled : undefined;
            inputs["authToken"] = args ? args.authToken : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["clusterMode"] = args ? args.clusterMode : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["notificationTopicArn"] = args ? args.notificationTopicArn : undefined;
            inputs["numberCacheClusters"] = args ? args.numberCacheClusters : undefined;
            inputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["replicationGroupDescription"] = args ? args.replicationGroupDescription : undefined;
            inputs["replicationGroupId"] = args ? args.replicationGroupId : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            inputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            inputs["snapshotName"] = args ? args.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            inputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transitEncryptionEnabled"] = args ? args.transitEncryptionEnabled : undefined;
            inputs["configurationEndpointAddress"] = undefined /*out*/;
            inputs["memberClusters"] = undefined /*out*/;
            inputs["primaryEndpointAddress"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ReplicationGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicationGroup resources.
 */
export interface ReplicationGroupState {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly atRestEncryptionEnabled?: pulumi.Input<boolean>;
    readonly authToken?: pulumi.Input<string>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly automaticFailoverEnabled?: pulumi.Input<boolean>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterMode?: pulumi.Input<inputs.elasticache.ReplicationGroupClusterMode>;
    readonly configurationEndpointAddress?: pulumi.Input<string>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly memberClusters?: pulumi.Input<pulumi.Input<string>[]>;
    readonly nodeType?: pulumi.Input<string>;
    readonly notificationTopicArn?: pulumi.Input<string>;
    readonly numberCacheClusters?: pulumi.Input<number>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly primaryEndpointAddress?: pulumi.Input<string>;
    readonly replicationGroupDescription?: pulumi.Input<string>;
    readonly replicationGroupId?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotName?: pulumi.Input<string>;
    readonly snapshotRetentionLimit?: pulumi.Input<number>;
    readonly snapshotWindow?: pulumi.Input<string>;
    readonly subnetGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly transitEncryptionEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ReplicationGroup resource.
 */
export interface ReplicationGroupArgs {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly atRestEncryptionEnabled?: pulumi.Input<boolean>;
    readonly authToken?: pulumi.Input<string>;
    readonly autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    readonly automaticFailoverEnabled?: pulumi.Input<boolean>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterMode?: pulumi.Input<inputs.elasticache.ReplicationGroupClusterMode>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly kmsKeyId?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly nodeType?: pulumi.Input<string>;
    readonly notificationTopicArn?: pulumi.Input<string>;
    readonly numberCacheClusters?: pulumi.Input<number>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly replicationGroupDescription: pulumi.Input<string>;
    readonly replicationGroupId?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotName?: pulumi.Input<string>;
    readonly snapshotRetentionLimit?: pulumi.Input<number>;
    readonly snapshotWindow?: pulumi.Input<string>;
    readonly subnetGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly transitEncryptionEnabled?: pulumi.Input<boolean>;
}
