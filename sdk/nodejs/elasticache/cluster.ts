// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    public readonly applyImmediately: pulumi.Output<boolean>;
    public readonly availabilityZone: pulumi.Output<string>;
    public readonly availabilityZones: pulumi.Output<string[] | undefined>;
    public readonly azMode: pulumi.Output<string>;
    public /*out*/ readonly cacheNodes: pulumi.Output<{ address: string, availabilityZone: string, id: string, port: number }[]>;
    public /*out*/ readonly clusterAddress: pulumi.Output<string>;
    public readonly clusterId: pulumi.Output<string>;
    public /*out*/ readonly configurationEndpoint: pulumi.Output<string>;
    public readonly engine: pulumi.Output<string>;
    public readonly engineVersion: pulumi.Output<string>;
    public readonly maintenanceWindow: pulumi.Output<string>;
    public readonly nodeType: pulumi.Output<string>;
    public readonly notificationTopicArn: pulumi.Output<string | undefined>;
    public readonly numCacheNodes: pulumi.Output<number>;
    public readonly parameterGroupName: pulumi.Output<string>;
    public readonly port: pulumi.Output<number | undefined>;
    public readonly preferredAvailabilityZones: pulumi.Output<string[] | undefined>;
    public readonly replicationGroupId: pulumi.Output<string>;
    public readonly securityGroupIds: pulumi.Output<string[]>;
    public readonly securityGroupNames: pulumi.Output<string[]>;
    public readonly snapshotArns: pulumi.Output<string[] | undefined>;
    public readonly snapshotName: pulumi.Output<string | undefined>;
    public readonly snapshotRetentionLimit: pulumi.Output<number | undefined>;
    public readonly snapshotWindow: pulumi.Output<string>;
    public readonly subnetGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ClusterState = argsOrState as ClusterState | undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["azMode"] = state ? state.azMode : undefined;
            inputs["cacheNodes"] = state ? state.cacheNodes : undefined;
            inputs["clusterAddress"] = state ? state.clusterAddress : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["configurationEndpoint"] = state ? state.configurationEndpoint : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["notificationTopicArn"] = state ? state.notificationTopicArn : undefined;
            inputs["numCacheNodes"] = state ? state.numCacheNodes : undefined;
            inputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["preferredAvailabilityZones"] = state ? state.preferredAvailabilityZones : undefined;
            inputs["replicationGroupId"] = state ? state.replicationGroupId : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            inputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            inputs["snapshotName"] = state ? state.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            inputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["azMode"] = args ? args.azMode : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["notificationTopicArn"] = args ? args.notificationTopicArn : undefined;
            inputs["numCacheNodes"] = args ? args.numCacheNodes : undefined;
            inputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["preferredAvailabilityZones"] = args ? args.preferredAvailabilityZones : undefined;
            inputs["replicationGroupId"] = args ? args.replicationGroupId : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            inputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            inputs["snapshotName"] = args ? args.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            inputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["cacheNodes"] = undefined /*out*/;
            inputs["clusterAddress"] = undefined /*out*/;
            inputs["configurationEndpoint"] = undefined /*out*/;
        }
        super("aws:elasticache/cluster:Cluster", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly azMode?: pulumi.Input<string>;
    readonly cacheNodes?: pulumi.Input<pulumi.Input<{ address?: pulumi.Input<string>, availabilityZone?: pulumi.Input<string>, id?: pulumi.Input<string>, port?: pulumi.Input<number> }>[]>;
    readonly clusterAddress?: pulumi.Input<string>;
    readonly clusterId?: pulumi.Input<string>;
    readonly configurationEndpoint?: pulumi.Input<string>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly nodeType?: pulumi.Input<string>;
    readonly notificationTopicArn?: pulumi.Input<string>;
    readonly numCacheNodes?: pulumi.Input<number>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly replicationGroupId?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotName?: pulumi.Input<string>;
    readonly snapshotRetentionLimit?: pulumi.Input<number>;
    readonly snapshotWindow?: pulumi.Input<string>;
    readonly subnetGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    readonly applyImmediately?: pulumi.Input<boolean>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly azMode?: pulumi.Input<string>;
    readonly clusterId?: pulumi.Input<string>;
    readonly engine?: pulumi.Input<string>;
    readonly engineVersion?: pulumi.Input<string>;
    readonly maintenanceWindow?: pulumi.Input<string>;
    readonly nodeType?: pulumi.Input<string>;
    readonly notificationTopicArn?: pulumi.Input<string>;
    readonly numCacheNodes?: pulumi.Input<number>;
    readonly parameterGroupName?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly replicationGroupId?: pulumi.Input<string>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly snapshotName?: pulumi.Input<string>;
    readonly snapshotRetentionLimit?: pulumi.Input<number>;
    readonly snapshotWindow?: pulumi.Input<string>;
    readonly subnetGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
