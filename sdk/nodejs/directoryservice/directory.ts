// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Directory extends pulumi.CustomResource {
    /**
     * Get an existing Directory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryState, opts?: pulumi.CustomResourceOptions): Directory {
        return new Directory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directoryservice/directory:Directory';

    /**
     * Returns true if the given object is an instance of Directory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Directory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Directory.__pulumiType;
    }

    public /*out*/ readonly accessUrl!: pulumi.Output<string>;
    public readonly alias!: pulumi.Output<string>;
    public readonly connectSettings!: pulumi.Output<outputs.directoryservice.DirectoryConnectSettings | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsIpAddresses!: pulumi.Output<string[]>;
    public readonly edition!: pulumi.Output<string>;
    public readonly enableSso!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;
    public readonly shortName!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vpcSettings!: pulumi.Output<outputs.directoryservice.DirectoryVpcSettings | undefined>;

    /**
     * Create a Directory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryArgs | DirectoryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DirectoryState | undefined;
            inputs["accessUrl"] = state ? state.accessUrl : undefined;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["connectSettings"] = state ? state.connectSettings : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsIpAddresses"] = state ? state.dnsIpAddresses : undefined;
            inputs["edition"] = state ? state.edition : undefined;
            inputs["enableSso"] = state ? state.enableSso : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["shortName"] = state ? state.shortName : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vpcSettings"] = state ? state.vpcSettings : undefined;
        } else {
            const args = argsOrState as DirectoryArgs | undefined;
            if (!args || args.password === undefined) {
                throw new Error("Missing required property 'password'");
            }
            inputs["alias"] = args ? args.alias : undefined;
            inputs["connectSettings"] = args ? args.connectSettings : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["edition"] = args ? args.edition : undefined;
            inputs["enableSso"] = args ? args.enableSso : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["shortName"] = args ? args.shortName : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vpcSettings"] = args ? args.vpcSettings : undefined;
            inputs["accessUrl"] = undefined /*out*/;
            inputs["dnsIpAddresses"] = undefined /*out*/;
            inputs["securityGroupId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Directory.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Directory resources.
 */
export interface DirectoryState {
    readonly accessUrl?: pulumi.Input<string>;
    readonly alias?: pulumi.Input<string>;
    readonly connectSettings?: pulumi.Input<inputs.directoryservice.DirectoryConnectSettings>;
    readonly description?: pulumi.Input<string>;
    readonly dnsIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly edition?: pulumi.Input<string>;
    readonly enableSso?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly securityGroupId?: pulumi.Input<string>;
    readonly shortName?: pulumi.Input<string>;
    readonly size?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type?: pulumi.Input<string>;
    readonly vpcSettings?: pulumi.Input<inputs.directoryservice.DirectoryVpcSettings>;
}

/**
 * The set of arguments for constructing a Directory resource.
 */
export interface DirectoryArgs {
    readonly alias?: pulumi.Input<string>;
    readonly connectSettings?: pulumi.Input<inputs.directoryservice.DirectoryConnectSettings>;
    readonly description?: pulumi.Input<string>;
    readonly edition?: pulumi.Input<string>;
    readonly enableSso?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly password: pulumi.Input<string>;
    readonly shortName?: pulumi.Input<string>;
    readonly size?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type?: pulumi.Input<string>;
    readonly vpcSettings?: pulumi.Input<inputs.directoryservice.DirectoryVpcSettings>;
}
