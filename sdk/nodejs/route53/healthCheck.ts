// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class HealthCheck extends pulumi.CustomResource {
    /**
     * Get an existing HealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthCheckState, opts?: pulumi.CustomResourceOptions): HealthCheck {
        return new HealthCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:route53/healthCheck:HealthCheck';

    /**
     * Returns true if the given object is an instance of HealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthCheck.__pulumiType;
    }

    public readonly childHealthThreshold!: pulumi.Output<number | undefined>;
    public readonly childHealthchecks!: pulumi.Output<string[] | undefined>;
    public readonly cloudwatchAlarmName!: pulumi.Output<string | undefined>;
    public readonly cloudwatchAlarmRegion!: pulumi.Output<string | undefined>;
    public readonly enableSni!: pulumi.Output<boolean>;
    public readonly failureThreshold!: pulumi.Output<number | undefined>;
    public readonly fqdn!: pulumi.Output<string | undefined>;
    public readonly insufficientDataHealthStatus!: pulumi.Output<string | undefined>;
    public readonly invertHealthcheck!: pulumi.Output<boolean | undefined>;
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    public readonly measureLatency!: pulumi.Output<boolean | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly referenceName!: pulumi.Output<string | undefined>;
    public readonly regions!: pulumi.Output<string[] | undefined>;
    public readonly requestInterval!: pulumi.Output<number | undefined>;
    public readonly resourcePath!: pulumi.Output<string | undefined>;
    public readonly searchString!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a HealthCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthCheckArgs | HealthCheckState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as HealthCheckState | undefined;
            inputs["childHealthThreshold"] = state ? state.childHealthThreshold : undefined;
            inputs["childHealthchecks"] = state ? state.childHealthchecks : undefined;
            inputs["cloudwatchAlarmName"] = state ? state.cloudwatchAlarmName : undefined;
            inputs["cloudwatchAlarmRegion"] = state ? state.cloudwatchAlarmRegion : undefined;
            inputs["enableSni"] = state ? state.enableSni : undefined;
            inputs["failureThreshold"] = state ? state.failureThreshold : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["insufficientDataHealthStatus"] = state ? state.insufficientDataHealthStatus : undefined;
            inputs["invertHealthcheck"] = state ? state.invertHealthcheck : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["measureLatency"] = state ? state.measureLatency : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["referenceName"] = state ? state.referenceName : undefined;
            inputs["regions"] = state ? state.regions : undefined;
            inputs["requestInterval"] = state ? state.requestInterval : undefined;
            inputs["resourcePath"] = state ? state.resourcePath : undefined;
            inputs["searchString"] = state ? state.searchString : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as HealthCheckArgs | undefined;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["childHealthThreshold"] = args ? args.childHealthThreshold : undefined;
            inputs["childHealthchecks"] = args ? args.childHealthchecks : undefined;
            inputs["cloudwatchAlarmName"] = args ? args.cloudwatchAlarmName : undefined;
            inputs["cloudwatchAlarmRegion"] = args ? args.cloudwatchAlarmRegion : undefined;
            inputs["enableSni"] = args ? args.enableSni : undefined;
            inputs["failureThreshold"] = args ? args.failureThreshold : undefined;
            inputs["fqdn"] = args ? args.fqdn : undefined;
            inputs["insufficientDataHealthStatus"] = args ? args.insufficientDataHealthStatus : undefined;
            inputs["invertHealthcheck"] = args ? args.invertHealthcheck : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["measureLatency"] = args ? args.measureLatency : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["referenceName"] = args ? args.referenceName : undefined;
            inputs["regions"] = args ? args.regions : undefined;
            inputs["requestInterval"] = args ? args.requestInterval : undefined;
            inputs["resourcePath"] = args ? args.resourcePath : undefined;
            inputs["searchString"] = args ? args.searchString : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(HealthCheck.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HealthCheck resources.
 */
export interface HealthCheckState {
    readonly childHealthThreshold?: pulumi.Input<number>;
    readonly childHealthchecks?: pulumi.Input<pulumi.Input<string>[]>;
    readonly cloudwatchAlarmName?: pulumi.Input<string>;
    readonly cloudwatchAlarmRegion?: pulumi.Input<string>;
    readonly enableSni?: pulumi.Input<boolean>;
    readonly failureThreshold?: pulumi.Input<number>;
    readonly fqdn?: pulumi.Input<string>;
    readonly insufficientDataHealthStatus?: pulumi.Input<string>;
    readonly invertHealthcheck?: pulumi.Input<boolean>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly measureLatency?: pulumi.Input<boolean>;
    readonly port?: pulumi.Input<number>;
    readonly referenceName?: pulumi.Input<string>;
    readonly regions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requestInterval?: pulumi.Input<number>;
    readonly resourcePath?: pulumi.Input<string>;
    readonly searchString?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthCheck resource.
 */
export interface HealthCheckArgs {
    readonly childHealthThreshold?: pulumi.Input<number>;
    readonly childHealthchecks?: pulumi.Input<pulumi.Input<string>[]>;
    readonly cloudwatchAlarmName?: pulumi.Input<string>;
    readonly cloudwatchAlarmRegion?: pulumi.Input<string>;
    readonly enableSni?: pulumi.Input<boolean>;
    readonly failureThreshold?: pulumi.Input<number>;
    readonly fqdn?: pulumi.Input<string>;
    readonly insufficientDataHealthStatus?: pulumi.Input<string>;
    readonly invertHealthcheck?: pulumi.Input<boolean>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly measureLatency?: pulumi.Input<boolean>;
    readonly port?: pulumi.Input<number>;
    readonly referenceName?: pulumi.Input<string>;
    readonly regions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requestInterval?: pulumi.Input<number>;
    readonly resourcePath?: pulumi.Input<string>;
    readonly searchString?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly type: pulumi.Input<string>;
}
