// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codebuild/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly artifacts!: pulumi.Output<outputs.codebuild.ProjectArtifacts>;
    public readonly badgeEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly badgeUrl!: pulumi.Output<string>;
    public readonly buildTimeout!: pulumi.Output<number | undefined>;
    public readonly cache!: pulumi.Output<outputs.codebuild.ProjectCache | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly encryptionKey!: pulumi.Output<string>;
    public readonly environment!: pulumi.Output<outputs.codebuild.ProjectEnvironment>;
    public readonly logsConfig!: pulumi.Output<outputs.codebuild.ProjectLogsConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly queuedTimeout!: pulumi.Output<number | undefined>;
    public readonly secondaryArtifacts!: pulumi.Output<outputs.codebuild.ProjectSecondaryArtifact[] | undefined>;
    public readonly secondarySources!: pulumi.Output<outputs.codebuild.ProjectSecondarySource[] | undefined>;
    public readonly serviceRole!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<outputs.codebuild.ProjectSource>;
    public readonly sourceVersion!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vpcConfig!: pulumi.Output<outputs.codebuild.ProjectVpcConfig | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProjectState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["artifacts"] = state ? state.artifacts : undefined;
            inputs["badgeEnabled"] = state ? state.badgeEnabled : undefined;
            inputs["badgeUrl"] = state ? state.badgeUrl : undefined;
            inputs["buildTimeout"] = state ? state.buildTimeout : undefined;
            inputs["cache"] = state ? state.cache : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["logsConfig"] = state ? state.logsConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["queuedTimeout"] = state ? state.queuedTimeout : undefined;
            inputs["secondaryArtifacts"] = state ? state.secondaryArtifacts : undefined;
            inputs["secondarySources"] = state ? state.secondarySources : undefined;
            inputs["serviceRole"] = state ? state.serviceRole : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["sourceVersion"] = state ? state.sourceVersion : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if (!args || args.artifacts === undefined) {
                throw new Error("Missing required property 'artifacts'");
            }
            if (!args || args.environment === undefined) {
                throw new Error("Missing required property 'environment'");
            }
            if (!args || args.serviceRole === undefined) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if (!args || args.source === undefined) {
                throw new Error("Missing required property 'source'");
            }
            inputs["artifacts"] = args ? args.artifacts : undefined;
            inputs["badgeEnabled"] = args ? args.badgeEnabled : undefined;
            inputs["buildTimeout"] = args ? args.buildTimeout : undefined;
            inputs["cache"] = args ? args.cache : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["logsConfig"] = args ? args.logsConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["queuedTimeout"] = args ? args.queuedTimeout : undefined;
            inputs["secondaryArtifacts"] = args ? args.secondaryArtifacts : undefined;
            inputs["secondarySources"] = args ? args.secondarySources : undefined;
            inputs["serviceRole"] = args ? args.serviceRole : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["sourceVersion"] = args ? args.sourceVersion : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["badgeUrl"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Project.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    readonly arn?: pulumi.Input<string>;
    readonly artifacts?: pulumi.Input<inputs.codebuild.ProjectArtifacts>;
    readonly badgeEnabled?: pulumi.Input<boolean>;
    readonly badgeUrl?: pulumi.Input<string>;
    readonly buildTimeout?: pulumi.Input<number>;
    readonly cache?: pulumi.Input<inputs.codebuild.ProjectCache>;
    readonly description?: pulumi.Input<string>;
    readonly encryptionKey?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<inputs.codebuild.ProjectEnvironment>;
    readonly logsConfig?: pulumi.Input<inputs.codebuild.ProjectLogsConfig>;
    readonly name?: pulumi.Input<string>;
    readonly queuedTimeout?: pulumi.Input<number>;
    readonly secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSecondaryArtifact>[]>;
    readonly secondarySources?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSecondarySource>[]>;
    readonly serviceRole?: pulumi.Input<string>;
    readonly source?: pulumi.Input<inputs.codebuild.ProjectSource>;
    readonly sourceVersion?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly vpcConfig?: pulumi.Input<inputs.codebuild.ProjectVpcConfig>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    readonly artifacts: pulumi.Input<inputs.codebuild.ProjectArtifacts>;
    readonly badgeEnabled?: pulumi.Input<boolean>;
    readonly buildTimeout?: pulumi.Input<number>;
    readonly cache?: pulumi.Input<inputs.codebuild.ProjectCache>;
    readonly description?: pulumi.Input<string>;
    readonly encryptionKey?: pulumi.Input<string>;
    readonly environment: pulumi.Input<inputs.codebuild.ProjectEnvironment>;
    readonly logsConfig?: pulumi.Input<inputs.codebuild.ProjectLogsConfig>;
    readonly name?: pulumi.Input<string>;
    readonly queuedTimeout?: pulumi.Input<number>;
    readonly secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSecondaryArtifact>[]>;
    readonly secondarySources?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSecondarySource>[]>;
    readonly serviceRole: pulumi.Input<string>;
    readonly source: pulumi.Input<inputs.codebuild.ProjectSource>;
    readonly sourceVersion?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly vpcConfig?: pulumi.Input<inputs.codebuild.ProjectVpcConfig>;
}
