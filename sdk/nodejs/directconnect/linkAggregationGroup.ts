// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LinkAggregationGroup extends pulumi.CustomResource {
    /**
     * Get an existing LinkAggregationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkAggregationGroupState, opts?: pulumi.CustomResourceOptions): LinkAggregationGroup {
        return new LinkAggregationGroup(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly arn: pulumi.Output<string>;
    public readonly connectionsBandwidth: pulumi.Output<string>;
    public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly numberOfConnections: pulumi.Output<number>;
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a LinkAggregationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkAggregationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkAggregationGroupArgs | LinkAggregationGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: LinkAggregationGroupState = argsOrState as LinkAggregationGroupState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["connectionsBandwidth"] = state ? state.connectionsBandwidth : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["numberOfConnections"] = state ? state.numberOfConnections : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LinkAggregationGroupArgs | undefined;
            if (!args || args.connectionsBandwidth === undefined) {
                throw new Error("Missing required property 'connectionsBandwidth'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            inputs["connectionsBandwidth"] = args ? args.connectionsBandwidth : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["numberOfConnections"] = args ? args.numberOfConnections : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        super("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkAggregationGroup resources.
 */
export interface LinkAggregationGroupState {
    readonly arn?: pulumi.Input<string>;
    readonly connectionsBandwidth?: pulumi.Input<string>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numberOfConnections?: pulumi.Input<number>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a LinkAggregationGroup resource.
 */
export interface LinkAggregationGroupArgs {
    readonly connectionsBandwidth: pulumi.Input<string>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numberOfConnections?: pulumi.Input<number>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
