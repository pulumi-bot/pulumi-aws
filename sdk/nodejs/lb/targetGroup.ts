// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class TargetGroup extends pulumi.CustomResource {
    /**
     * Get an existing TargetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetGroupState, opts?: pulumi.CustomResourceOptions): TargetGroup {
        return new TargetGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lb/targetGroup:TargetGroup';

    /**
     * Returns true if the given object is an instance of TargetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TargetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetGroup.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly arnSuffix!: pulumi.Output<string>;
    public readonly deregistrationDelay!: pulumi.Output<number | undefined>;
    public readonly healthCheck!: pulumi.Output<outputs.lb.TargetGroupHealthCheck>;
    public readonly lambdaMultiValueHeadersEnabled!: pulumi.Output<boolean | undefined>;
    public readonly loadBalancingAlgorithmType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly proxyProtocolV2!: pulumi.Output<boolean | undefined>;
    public readonly slowStart!: pulumi.Output<number | undefined>;
    public readonly stickiness!: pulumi.Output<outputs.lb.TargetGroupStickiness>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targetType!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a TargetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TargetGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetGroupArgs | TargetGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TargetGroupState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["arnSuffix"] = state ? state.arnSuffix : undefined;
            inputs["deregistrationDelay"] = state ? state.deregistrationDelay : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["lambdaMultiValueHeadersEnabled"] = state ? state.lambdaMultiValueHeadersEnabled : undefined;
            inputs["loadBalancingAlgorithmType"] = state ? state.loadBalancingAlgorithmType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["proxyProtocolV2"] = state ? state.proxyProtocolV2 : undefined;
            inputs["slowStart"] = state ? state.slowStart : undefined;
            inputs["stickiness"] = state ? state.stickiness : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetType"] = state ? state.targetType : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as TargetGroupArgs | undefined;
            inputs["deregistrationDelay"] = args ? args.deregistrationDelay : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["lambdaMultiValueHeadersEnabled"] = args ? args.lambdaMultiValueHeadersEnabled : undefined;
            inputs["loadBalancingAlgorithmType"] = args ? args.loadBalancingAlgorithmType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["proxyProtocolV2"] = args ? args.proxyProtocolV2 : undefined;
            inputs["slowStart"] = args ? args.slowStart : undefined;
            inputs["stickiness"] = args ? args.stickiness : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetType"] = args ? args.targetType : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["arnSuffix"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "aws:elasticloadbalancingv2/targetGroup:TargetGroup" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(TargetGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetGroup resources.
 */
export interface TargetGroupState {
    readonly arn?: pulumi.Input<string>;
    readonly arnSuffix?: pulumi.Input<string>;
    readonly deregistrationDelay?: pulumi.Input<number>;
    readonly healthCheck?: pulumi.Input<inputs.lb.TargetGroupHealthCheck>;
    readonly lambdaMultiValueHeadersEnabled?: pulumi.Input<boolean>;
    readonly loadBalancingAlgorithmType?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly proxyProtocolV2?: pulumi.Input<boolean>;
    readonly slowStart?: pulumi.Input<number>;
    readonly stickiness?: pulumi.Input<inputs.lb.TargetGroupStickiness>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly targetType?: pulumi.Input<string>;
    readonly vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TargetGroup resource.
 */
export interface TargetGroupArgs {
    readonly deregistrationDelay?: pulumi.Input<number>;
    readonly healthCheck?: pulumi.Input<inputs.lb.TargetGroupHealthCheck>;
    readonly lambdaMultiValueHeadersEnabled?: pulumi.Input<boolean>;
    readonly loadBalancingAlgorithmType?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namePrefix?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly proxyProtocolV2?: pulumi.Input<boolean>;
    readonly slowStart?: pulumi.Input<number>;
    readonly stickiness?: pulumi.Input<inputs.lb.TargetGroupStickiness>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly targetType?: pulumi.Input<string>;
    readonly vpcId?: pulumi.Input<string>;
}
