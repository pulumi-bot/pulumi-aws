// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class UserPoolClient extends pulumi.CustomResource {
    /**
     * Get an existing UserPoolClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPoolClientState, opts?: pulumi.CustomResourceOptions): UserPoolClient {
        return new UserPoolClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cognito/userPoolClient:UserPoolClient';

    /**
     * Returns true if the given object is an instance of UserPoolClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserPoolClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPoolClient.__pulumiType;
    }

    public readonly allowedOauthFlows!: pulumi.Output<string[] | undefined>;
    public readonly allowedOauthFlowsUserPoolClient!: pulumi.Output<boolean | undefined>;
    public readonly allowedOauthScopes!: pulumi.Output<string[] | undefined>;
    public readonly analyticsConfiguration!: pulumi.Output<outputs.cognito.UserPoolClientAnalyticsConfiguration | undefined>;
    public readonly callbackUrls!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    public readonly defaultRedirectUri!: pulumi.Output<string | undefined>;
    public readonly explicitAuthFlows!: pulumi.Output<string[] | undefined>;
    public readonly generateSecret!: pulumi.Output<boolean | undefined>;
    public readonly logoutUrls!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly preventUserExistenceErrors!: pulumi.Output<string>;
    public readonly readAttributes!: pulumi.Output<string[] | undefined>;
    public readonly refreshTokenValidity!: pulumi.Output<number | undefined>;
    public readonly supportedIdentityProviders!: pulumi.Output<string[] | undefined>;
    public readonly userPoolId!: pulumi.Output<string>;
    public readonly writeAttributes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a UserPoolClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPoolClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserPoolClientArgs | UserPoolClientState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as UserPoolClientState | undefined;
            inputs["allowedOauthFlows"] = state ? state.allowedOauthFlows : undefined;
            inputs["allowedOauthFlowsUserPoolClient"] = state ? state.allowedOauthFlowsUserPoolClient : undefined;
            inputs["allowedOauthScopes"] = state ? state.allowedOauthScopes : undefined;
            inputs["analyticsConfiguration"] = state ? state.analyticsConfiguration : undefined;
            inputs["callbackUrls"] = state ? state.callbackUrls : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["defaultRedirectUri"] = state ? state.defaultRedirectUri : undefined;
            inputs["explicitAuthFlows"] = state ? state.explicitAuthFlows : undefined;
            inputs["generateSecret"] = state ? state.generateSecret : undefined;
            inputs["logoutUrls"] = state ? state.logoutUrls : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preventUserExistenceErrors"] = state ? state.preventUserExistenceErrors : undefined;
            inputs["readAttributes"] = state ? state.readAttributes : undefined;
            inputs["refreshTokenValidity"] = state ? state.refreshTokenValidity : undefined;
            inputs["supportedIdentityProviders"] = state ? state.supportedIdentityProviders : undefined;
            inputs["userPoolId"] = state ? state.userPoolId : undefined;
            inputs["writeAttributes"] = state ? state.writeAttributes : undefined;
        } else {
            const args = argsOrState as UserPoolClientArgs | undefined;
            if (!args || args.userPoolId === undefined) {
                throw new Error("Missing required property 'userPoolId'");
            }
            inputs["allowedOauthFlows"] = args ? args.allowedOauthFlows : undefined;
            inputs["allowedOauthFlowsUserPoolClient"] = args ? args.allowedOauthFlowsUserPoolClient : undefined;
            inputs["allowedOauthScopes"] = args ? args.allowedOauthScopes : undefined;
            inputs["analyticsConfiguration"] = args ? args.analyticsConfiguration : undefined;
            inputs["callbackUrls"] = args ? args.callbackUrls : undefined;
            inputs["defaultRedirectUri"] = args ? args.defaultRedirectUri : undefined;
            inputs["explicitAuthFlows"] = args ? args.explicitAuthFlows : undefined;
            inputs["generateSecret"] = args ? args.generateSecret : undefined;
            inputs["logoutUrls"] = args ? args.logoutUrls : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["preventUserExistenceErrors"] = args ? args.preventUserExistenceErrors : undefined;
            inputs["readAttributes"] = args ? args.readAttributes : undefined;
            inputs["refreshTokenValidity"] = args ? args.refreshTokenValidity : undefined;
            inputs["supportedIdentityProviders"] = args ? args.supportedIdentityProviders : undefined;
            inputs["userPoolId"] = args ? args.userPoolId : undefined;
            inputs["writeAttributes"] = args ? args.writeAttributes : undefined;
            inputs["clientSecret"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserPoolClient.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserPoolClient resources.
 */
export interface UserPoolClientState {
    readonly allowedOauthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    readonly allowedOauthFlowsUserPoolClient?: pulumi.Input<boolean>;
    readonly allowedOauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly analyticsConfiguration?: pulumi.Input<inputs.cognito.UserPoolClientAnalyticsConfiguration>;
    readonly callbackUrls?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clientSecret?: pulumi.Input<string>;
    readonly defaultRedirectUri?: pulumi.Input<string>;
    readonly explicitAuthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    readonly generateSecret?: pulumi.Input<boolean>;
    readonly logoutUrls?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly preventUserExistenceErrors?: pulumi.Input<string>;
    readonly readAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly refreshTokenValidity?: pulumi.Input<number>;
    readonly supportedIdentityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userPoolId?: pulumi.Input<string>;
    readonly writeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UserPoolClient resource.
 */
export interface UserPoolClientArgs {
    readonly allowedOauthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    readonly allowedOauthFlowsUserPoolClient?: pulumi.Input<boolean>;
    readonly allowedOauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly analyticsConfiguration?: pulumi.Input<inputs.cognito.UserPoolClientAnalyticsConfiguration>;
    readonly callbackUrls?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultRedirectUri?: pulumi.Input<string>;
    readonly explicitAuthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    readonly generateSecret?: pulumi.Input<boolean>;
    readonly logoutUrls?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly preventUserExistenceErrors?: pulumi.Input<string>;
    readonly readAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly refreshTokenValidity?: pulumi.Input<number>;
    readonly supportedIdentityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userPoolId: pulumi.Input<string>;
    readonly writeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}
