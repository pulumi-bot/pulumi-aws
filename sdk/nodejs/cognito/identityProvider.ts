// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    public readonly attributeMapping: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly idpIdentifiers: pulumi.Output<string[] | undefined>;
    public readonly providerDetails: pulumi.Output<{[key: string]: any}>;
    public readonly providerName: pulumi.Output<string>;
    public readonly providerType: pulumi.Output<string>;
    public readonly userPoolId: pulumi.Output<string>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: IdentityProviderState = argsOrState as IdentityProviderState | undefined;
            inputs["attributeMapping"] = state ? state.attributeMapping : undefined;
            inputs["idpIdentifiers"] = state ? state.idpIdentifiers : undefined;
            inputs["providerDetails"] = state ? state.providerDetails : undefined;
            inputs["providerName"] = state ? state.providerName : undefined;
            inputs["providerType"] = state ? state.providerType : undefined;
            inputs["userPoolId"] = state ? state.userPoolId : undefined;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if (!args || args.providerDetails === undefined) {
                throw new Error("Missing required property 'providerDetails'");
            }
            if (!args || args.providerName === undefined) {
                throw new Error("Missing required property 'providerName'");
            }
            if (!args || args.providerType === undefined) {
                throw new Error("Missing required property 'providerType'");
            }
            if (!args || args.userPoolId === undefined) {
                throw new Error("Missing required property 'userPoolId'");
            }
            inputs["attributeMapping"] = args ? args.attributeMapping : undefined;
            inputs["idpIdentifiers"] = args ? args.idpIdentifiers : undefined;
            inputs["providerDetails"] = args ? args.providerDetails : undefined;
            inputs["providerName"] = args ? args.providerName : undefined;
            inputs["providerType"] = args ? args.providerType : undefined;
            inputs["userPoolId"] = args ? args.userPoolId : undefined;
        }
        super("aws:cognito/identityProvider:IdentityProvider", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    readonly attributeMapping?: pulumi.Input<{[key: string]: any}>;
    readonly idpIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly providerDetails?: pulumi.Input<{[key: string]: any}>;
    readonly providerName?: pulumi.Input<string>;
    readonly providerType?: pulumi.Input<string>;
    readonly userPoolId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    readonly attributeMapping?: pulumi.Input<{[key: string]: any}>;
    readonly idpIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly providerDetails: pulumi.Input<{[key: string]: any}>;
    readonly providerName: pulumi.Input<string>;
    readonly providerType: pulumi.Input<string>;
    readonly userPoolId: pulumi.Input<string>;
}
