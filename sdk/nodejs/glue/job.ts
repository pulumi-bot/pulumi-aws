// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly command!: pulumi.Output<outputs.glue.JobCommand>;
    public readonly connections!: pulumi.Output<string[] | undefined>;
    public readonly defaultArguments!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly executionProperty!: pulumi.Output<outputs.glue.JobExecutionProperty>;
    public readonly glueVersion!: pulumi.Output<string>;
    public readonly maxCapacity!: pulumi.Output<number>;
    public readonly maxRetries!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationProperty!: pulumi.Output<outputs.glue.JobNotificationProperty>;
    public readonly numberOfWorkers!: pulumi.Output<number | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly workerType!: pulumi.Output<string | undefined>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as JobState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["command"] = state ? state.command : undefined;
            inputs["connections"] = state ? state.connections : undefined;
            inputs["defaultArguments"] = state ? state.defaultArguments : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["executionProperty"] = state ? state.executionProperty : undefined;
            inputs["glueVersion"] = state ? state.glueVersion : undefined;
            inputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            inputs["maxRetries"] = state ? state.maxRetries : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationProperty"] = state ? state.notificationProperty : undefined;
            inputs["numberOfWorkers"] = state ? state.numberOfWorkers : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["workerType"] = state ? state.workerType : undefined;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if (!args || args.command === undefined) {
                throw new Error("Missing required property 'command'");
            }
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["command"] = args ? args.command : undefined;
            inputs["connections"] = args ? args.connections : undefined;
            inputs["defaultArguments"] = args ? args.defaultArguments : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["executionProperty"] = args ? args.executionProperty : undefined;
            inputs["glueVersion"] = args ? args.glueVersion : undefined;
            inputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            inputs["maxRetries"] = args ? args.maxRetries : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationProperty"] = args ? args.notificationProperty : undefined;
            inputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["workerType"] = args ? args.workerType : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Job.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    readonly arn?: pulumi.Input<string>;
    readonly command?: pulumi.Input<inputs.glue.JobCommand>;
    readonly connections?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly description?: pulumi.Input<string>;
    readonly executionProperty?: pulumi.Input<inputs.glue.JobExecutionProperty>;
    readonly glueVersion?: pulumi.Input<string>;
    readonly maxCapacity?: pulumi.Input<number>;
    readonly maxRetries?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly notificationProperty?: pulumi.Input<inputs.glue.JobNotificationProperty>;
    readonly numberOfWorkers?: pulumi.Input<number>;
    readonly roleArn?: pulumi.Input<string>;
    readonly securityConfiguration?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timeout?: pulumi.Input<number>;
    readonly workerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    readonly command: pulumi.Input<inputs.glue.JobCommand>;
    readonly connections?: pulumi.Input<pulumi.Input<string>[]>;
    readonly defaultArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly description?: pulumi.Input<string>;
    readonly executionProperty?: pulumi.Input<inputs.glue.JobExecutionProperty>;
    readonly glueVersion?: pulumi.Input<string>;
    readonly maxCapacity?: pulumi.Input<number>;
    readonly maxRetries?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly notificationProperty?: pulumi.Input<inputs.glue.JobNotificationProperty>;
    readonly numberOfWorkers?: pulumi.Input<number>;
    readonly roleArn: pulumi.Input<string>;
    readonly securityConfiguration?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly timeout?: pulumi.Input<number>;
    readonly workerType?: pulumi.Input<string>;
}
