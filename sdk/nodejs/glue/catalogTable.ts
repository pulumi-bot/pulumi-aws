// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class CatalogTable extends pulumi.CustomResource {
    /**
     * Get an existing CatalogTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogTableState, opts?: pulumi.CustomResourceOptions): CatalogTable {
        return new CatalogTable(name, <any>state, { ...opts, id: id });
    }

    public readonly catalogId: pulumi.Output<string>;
    public readonly databaseName: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly owner: pulumi.Output<string | undefined>;
    public readonly parameters: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly partitionKeys: pulumi.Output<{ comment?: string, name: string, type?: string }[] | undefined>;
    public readonly retention: pulumi.Output<number | undefined>;
    public readonly storageDescriptor: pulumi.Output<{ bucketColumns?: string[], columns?: { comment?: string, name: string, type?: string }[], compressed?: boolean, inputFormat?: string, location?: string, numberOfBuckets?: number, outputFormat?: string, parameters?: {[key: string]: string}, serDeInfo?: { name?: string, parameters?: {[key: string]: string}, serializationLibrary?: string }, skewedInfo?: { skewedColumnNames?: string[], skewedColumnValueLocationMaps?: {[key: string]: string}, skewedColumnValues?: string[] }, sortColumns?: { column: string, sortOrder: number }[], storedAsSubDirectories?: boolean } | undefined>;
    public readonly tableType: pulumi.Output<string | undefined>;
    public readonly viewExpandedText: pulumi.Output<string | undefined>;
    public readonly viewOriginalText: pulumi.Output<string | undefined>;

    /**
     * Create a CatalogTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogTableArgs | CatalogTableState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: CatalogTableState = argsOrState as CatalogTableState | undefined;
            inputs["catalogId"] = state ? state.catalogId : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["owner"] = state ? state.owner : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["partitionKeys"] = state ? state.partitionKeys : undefined;
            inputs["retention"] = state ? state.retention : undefined;
            inputs["storageDescriptor"] = state ? state.storageDescriptor : undefined;
            inputs["tableType"] = state ? state.tableType : undefined;
            inputs["viewExpandedText"] = state ? state.viewExpandedText : undefined;
            inputs["viewOriginalText"] = state ? state.viewOriginalText : undefined;
        } else {
            const args = argsOrState as CatalogTableArgs | undefined;
            if (!args || args.databaseName === undefined) {
                throw new Error("Missing required property 'databaseName'");
            }
            inputs["catalogId"] = args ? args.catalogId : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["owner"] = args ? args.owner : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["partitionKeys"] = args ? args.partitionKeys : undefined;
            inputs["retention"] = args ? args.retention : undefined;
            inputs["storageDescriptor"] = args ? args.storageDescriptor : undefined;
            inputs["tableType"] = args ? args.tableType : undefined;
            inputs["viewExpandedText"] = args ? args.viewExpandedText : undefined;
            inputs["viewOriginalText"] = args ? args.viewOriginalText : undefined;
        }
        super("aws:glue/catalogTable:CatalogTable", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogTable resources.
 */
export interface CatalogTableState {
    readonly catalogId?: pulumi.Input<string>;
    readonly databaseName?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly owner?: pulumi.Input<string>;
    readonly parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly partitionKeys?: pulumi.Input<pulumi.Input<{ comment?: pulumi.Input<string>, name: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly retention?: pulumi.Input<number>;
    readonly storageDescriptor?: pulumi.Input<{ bucketColumns?: pulumi.Input<pulumi.Input<string>[]>, columns?: pulumi.Input<pulumi.Input<{ comment?: pulumi.Input<string>, name: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, compressed?: pulumi.Input<boolean>, inputFormat?: pulumi.Input<string>, location?: pulumi.Input<string>, numberOfBuckets?: pulumi.Input<number>, outputFormat?: pulumi.Input<string>, parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serDeInfo?: pulumi.Input<{ name?: pulumi.Input<string>, parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serializationLibrary?: pulumi.Input<string> }>, skewedInfo?: pulumi.Input<{ skewedColumnNames?: pulumi.Input<pulumi.Input<string>[]>, skewedColumnValueLocationMaps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, skewedColumnValues?: pulumi.Input<pulumi.Input<string>[]> }>, sortColumns?: pulumi.Input<pulumi.Input<{ column: pulumi.Input<string>, sortOrder: pulumi.Input<number> }>[]>, storedAsSubDirectories?: pulumi.Input<boolean> }>;
    readonly tableType?: pulumi.Input<string>;
    readonly viewExpandedText?: pulumi.Input<string>;
    readonly viewOriginalText?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogTable resource.
 */
export interface CatalogTableArgs {
    readonly catalogId?: pulumi.Input<string>;
    readonly databaseName: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly owner?: pulumi.Input<string>;
    readonly parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly partitionKeys?: pulumi.Input<pulumi.Input<{ comment?: pulumi.Input<string>, name: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly retention?: pulumi.Input<number>;
    readonly storageDescriptor?: pulumi.Input<{ bucketColumns?: pulumi.Input<pulumi.Input<string>[]>, columns?: pulumi.Input<pulumi.Input<{ comment?: pulumi.Input<string>, name: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, compressed?: pulumi.Input<boolean>, inputFormat?: pulumi.Input<string>, location?: pulumi.Input<string>, numberOfBuckets?: pulumi.Input<number>, outputFormat?: pulumi.Input<string>, parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serDeInfo?: pulumi.Input<{ name?: pulumi.Input<string>, parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serializationLibrary?: pulumi.Input<string> }>, skewedInfo?: pulumi.Input<{ skewedColumnNames?: pulumi.Input<pulumi.Input<string>[]>, skewedColumnValueLocationMaps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, skewedColumnValues?: pulumi.Input<pulumi.Input<string>[]> }>, sortColumns?: pulumi.Input<pulumi.Input<{ column: pulumi.Input<string>, sortOrder: pulumi.Input<number> }>[]>, storedAsSubDirectories?: pulumi.Input<boolean> }>;
    readonly tableType?: pulumi.Input<string>;
    readonly viewExpandedText?: pulumi.Input<string>;
    readonly viewOriginalText?: pulumi.Input<string>;
}
