# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ListenerDefaultAction',
    'ListenerDefaultActionAuthenticateCognito',
    'ListenerDefaultActionAuthenticateOidc',
    'ListenerDefaultActionFixedResponse',
    'ListenerDefaultActionForward',
    'ListenerDefaultActionForwardStickiness',
    'ListenerDefaultActionForwardTargetGroup',
    'ListenerDefaultActionRedirect',
    'ListenerRuleAction',
    'ListenerRuleActionAuthenticateCognito',
    'ListenerRuleActionAuthenticateOidc',
    'ListenerRuleActionFixedResponse',
    'ListenerRuleActionForward',
    'ListenerRuleActionForwardStickiness',
    'ListenerRuleActionForwardTargetGroup',
    'ListenerRuleActionRedirect',
    'ListenerRuleCondition',
    'ListenerRuleConditionHostHeader',
    'ListenerRuleConditionHttpHeader',
    'ListenerRuleConditionHttpRequestMethod',
    'ListenerRuleConditionPathPattern',
    'ListenerRuleConditionQueryString',
    'ListenerRuleConditionSourceIp',
    'LoadBalancerAccessLogs',
    'LoadBalancerSubnetMapping',
    'TargetGroupHealthCheck',
    'TargetGroupStickiness',
    'GetListenerDefaultAction',
    'GetListenerDefaultActionAuthenticateCognito',
    'GetListenerDefaultActionAuthenticateOidc',
    'GetListenerDefaultActionFixedResponse',
    'GetListenerDefaultActionRedirect',
    'GetLoadBalancerAccessLogs',
    'GetLoadBalancerSubnetMapping',
    'GetTargetGroupHealthCheck',
    'GetTargetGroupStickiness',
]

@pulumi.output_type
class ListenerDefaultAction(dict):
    authenticate_cognito: Optional['outputs.ListenerDefaultActionAuthenticateCognito'] = pulumi.output_property("authenticateCognito")
    authenticate_oidc: Optional['outputs.ListenerDefaultActionAuthenticateOidc'] = pulumi.output_property("authenticateOidc")
    fixed_response: Optional['outputs.ListenerDefaultActionFixedResponse'] = pulumi.output_property("fixedResponse")
    """
    Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
    """
    forward: Optional['outputs.ListenerDefaultActionForward'] = pulumi.output_property("forward")
    """
    Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
    """
    order: Optional[float] = pulumi.output_property("order")
    redirect: Optional['outputs.ListenerDefaultActionRedirect'] = pulumi.output_property("redirect")
    """
    Information for creating a redirect action. Required if `type` is `redirect`.
    """
    target_group_arn: Optional[str] = pulumi.output_property("targetGroupArn")
    """
    The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
    """
    type: str = pulumi.output_property("type")
    """
    The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionAuthenticateCognito(dict):
    authentication_request_extra_params: Optional[Dict[str, str]] = pulumi.output_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[str] = pulumi.output_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[str] = pulumi.output_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[float] = pulumi.output_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """
    user_pool_arn: str = pulumi.output_property("userPoolArn")
    """
    The ARN of the Cognito user pool.
    """
    user_pool_client_id: str = pulumi.output_property("userPoolClientId")
    """
    The ID of the Cognito user pool client.
    """
    user_pool_domain: str = pulumi.output_property("userPoolDomain")
    """
    The domain prefix or fully-qualified domain name of the Cognito user pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionAuthenticateOidc(dict):
    authentication_request_extra_params: Optional[Dict[str, str]] = pulumi.output_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    authorization_endpoint: str = pulumi.output_property("authorizationEndpoint")
    """
    The authorization endpoint of the IdP.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client identifier.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret.
    """
    issuer: str = pulumi.output_property("issuer")
    """
    The OIDC issuer identifier of the IdP.
    """
    on_unauthenticated_request: Optional[str] = pulumi.output_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[str] = pulumi.output_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[float] = pulumi.output_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """
    token_endpoint: str = pulumi.output_property("tokenEndpoint")
    """
    The token endpoint of the IdP.
    """
    user_info_endpoint: str = pulumi.output_property("userInfoEndpoint")
    """
    The user info endpoint of the IdP.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionFixedResponse(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
    """
    message_body: Optional[str] = pulumi.output_property("messageBody")
    """
    The message body.
    """
    status_code: Optional[str] = pulumi.output_property("statusCode")
    """
    The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionForward(dict):
    stickiness: Optional['outputs.ListenerDefaultActionForwardStickiness'] = pulumi.output_property("stickiness")
    """
    The target group stickiness for the rule.
    """
    target_groups: List['outputs.ListenerDefaultActionForwardTargetGroup'] = pulumi.output_property("targetGroups")
    """
    One or more target groups block.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionForwardStickiness(dict):
    duration: float = pulumi.output_property("duration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether target group stickiness is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionForwardTargetGroup(dict):
    arn: str = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) of the target group.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    The weight. The range is 0 to 999.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerDefaultActionRedirect(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
    """
    port: Optional[str] = pulumi.output_property("port")
    """
    The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
    """
    protocol: Optional[str] = pulumi.output_property("protocol")
    """
    The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
    """
    query: Optional[str] = pulumi.output_property("query")
    """
    The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
    """
    status_code: str = pulumi.output_property("statusCode")
    """
    The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleAction(dict):
    authenticate_cognito: Optional['outputs.ListenerRuleActionAuthenticateCognito'] = pulumi.output_property("authenticateCognito")
    """
    Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
    """
    authenticate_oidc: Optional['outputs.ListenerRuleActionAuthenticateOidc'] = pulumi.output_property("authenticateOidc")
    """
    Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
    """
    fixed_response: Optional['outputs.ListenerRuleActionFixedResponse'] = pulumi.output_property("fixedResponse")
    """
    Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
    """
    forward: Optional['outputs.ListenerRuleActionForward'] = pulumi.output_property("forward")
    """
    Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
    """
    order: Optional[float] = pulumi.output_property("order")
    redirect: Optional['outputs.ListenerRuleActionRedirect'] = pulumi.output_property("redirect")
    """
    Information for creating a redirect action. Required if `type` is `redirect`.
    """
    target_group_arn: Optional[str] = pulumi.output_property("targetGroupArn")
    """
    The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
    """
    type: str = pulumi.output_property("type")
    """
    The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionAuthenticateCognito(dict):
    authentication_request_extra_params: Optional[Dict[str, str]] = pulumi.output_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[str] = pulumi.output_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[str] = pulumi.output_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[float] = pulumi.output_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """
    user_pool_arn: str = pulumi.output_property("userPoolArn")
    """
    The ARN of the Cognito user pool.
    """
    user_pool_client_id: str = pulumi.output_property("userPoolClientId")
    """
    The ID of the Cognito user pool client.
    """
    user_pool_domain: str = pulumi.output_property("userPoolDomain")
    """
    The domain prefix or fully-qualified domain name of the Cognito user pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionAuthenticateOidc(dict):
    authentication_request_extra_params: Optional[Dict[str, str]] = pulumi.output_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    authorization_endpoint: str = pulumi.output_property("authorizationEndpoint")
    """
    The authorization endpoint of the IdP.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client identifier.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret.
    """
    issuer: str = pulumi.output_property("issuer")
    """
    The OIDC issuer identifier of the IdP.
    """
    on_unauthenticated_request: Optional[str] = pulumi.output_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[str] = pulumi.output_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[float] = pulumi.output_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """
    token_endpoint: str = pulumi.output_property("tokenEndpoint")
    """
    The token endpoint of the IdP.
    """
    user_info_endpoint: str = pulumi.output_property("userInfoEndpoint")
    """
    The user info endpoint of the IdP.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionFixedResponse(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
    """
    message_body: Optional[str] = pulumi.output_property("messageBody")
    """
    The message body.
    """
    status_code: Optional[str] = pulumi.output_property("statusCode")
    """
    The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionForward(dict):
    stickiness: Optional['outputs.ListenerRuleActionForwardStickiness'] = pulumi.output_property("stickiness")
    """
    The target group stickiness for the rule.
    """
    target_groups: List['outputs.ListenerRuleActionForwardTargetGroup'] = pulumi.output_property("targetGroups")
    """
    One or more target groups block.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionForwardStickiness(dict):
    duration: float = pulumi.output_property("duration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether target group stickiness is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionForwardTargetGroup(dict):
    arn: str = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) of the target group.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    The weight. The range is 0 to 999.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleActionRedirect(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
    """
    port: Optional[str] = pulumi.output_property("port")
    """
    The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
    """
    protocol: Optional[str] = pulumi.output_property("protocol")
    """
    The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
    """
    query: Optional[str] = pulumi.output_property("query")
    """
    The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
    """
    status_code: str = pulumi.output_property("statusCode")
    """
    The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleCondition(dict):
    field: Optional[str] = pulumi.output_property("field")
    """
    The type of condition. Valid values are `host-header` or `path-pattern`. Must also set `values`.
    """
    host_header: Optional['outputs.ListenerRuleConditionHostHeader'] = pulumi.output_property("hostHeader")
    """
    Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
    """
    http_header: Optional['outputs.ListenerRuleConditionHttpHeader'] = pulumi.output_property("httpHeader")
    """
    HTTP headers to match. HTTP Header block fields documented below.
    """
    http_request_method: Optional['outputs.ListenerRuleConditionHttpRequestMethod'] = pulumi.output_property("httpRequestMethod")
    """
    Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
    """
    path_pattern: Optional['outputs.ListenerRuleConditionPathPattern'] = pulumi.output_property("pathPattern")
    """
    Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
    """
    query_strings: Optional[List['outputs.ListenerRuleConditionQueryString']] = pulumi.output_property("queryStrings")
    """
    Query strings to match. Query String block fields documented below.
    """
    source_ip: Optional['outputs.ListenerRuleConditionSourceIp'] = pulumi.output_property("sourceIp")
    """
    Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
    """
    values: Optional[str] = pulumi.output_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionHostHeader(dict):
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionHttpHeader(dict):
    http_header_name: str = pulumi.output_property("httpHeaderName")
    """
    Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionHttpRequestMethod(dict):
    values: List[str] = pulumi.output_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionPathPattern(dict):
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionQueryString(dict):
    key: Optional[str] = pulumi.output_property("key")
    """
    Query string key pattern to match.
    """
    value: str = pulumi.output_property("value")
    """
    Query string value pattern to match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerRuleConditionSourceIp(dict):
    values: List[str] = pulumi.output_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerAccessLogs(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    The S3 bucket name to store the logs in.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The S3 bucket prefix. Logs are stored in the root if not configured.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerSubnetMapping(dict):
    allocation_id: Optional[str] = pulumi.output_property("allocationId")
    """
    The allocation ID of the Elastic IP address.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetGroupHealthCheck(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Boolean to enable / disable `stickiness`. Default is `true`
    """
    healthy_threshold: Optional[float] = pulumi.output_property("healthyThreshold")
    """
    The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
    """
    interval: Optional[float] = pulumi.output_property("interval")
    """
    The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
    """
    matcher: Optional[str] = pulumi.output_property("matcher")
    """
    The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
    """
    port: Optional[str] = pulumi.output_property("port")
    """
    The port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
    """
    protocol: Optional[str] = pulumi.output_property("protocol")
    """
    The protocol to use for routing traffic to the targets. Should be one of "TCP", "TLS", "UDP", "TCP_UDP", "HTTP" or "HTTPS". Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
    """
    timeout: Optional[float] = pulumi.output_property("timeout")
    """
    The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
    """
    unhealthy_threshold: Optional[float] = pulumi.output_property("unhealthyThreshold")
    """
    The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthy_threshold`. Defaults to 3.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetGroupStickiness(dict):
    cookie_duration: Optional[float] = pulumi.output_property("cookieDuration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether  health checks are enabled. Defaults to true.
    """
    type: str = pulumi.output_property("type")
    """
    The type of sticky sessions. The only current possible value is `lb_cookie`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetListenerDefaultAction(dict):
    authenticate_cognitos: List['outputs.GetListenerDefaultActionAuthenticateCognito'] = pulumi.output_property("authenticateCognitos")
    authenticate_oidcs: List['outputs.GetListenerDefaultActionAuthenticateOidc'] = pulumi.output_property("authenticateOidcs")
    fixed_responses: List['outputs.GetListenerDefaultActionFixedResponse'] = pulumi.output_property("fixedResponses")
    order: float = pulumi.output_property("order")
    redirects: List['outputs.GetListenerDefaultActionRedirect'] = pulumi.output_property("redirects")
    target_group_arn: str = pulumi.output_property("targetGroupArn")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetListenerDefaultActionAuthenticateCognito(dict):
    authentication_request_extra_params: Dict[str, str] = pulumi.output_property("authenticationRequestExtraParams")
    on_unauthenticated_request: str = pulumi.output_property("onUnauthenticatedRequest")
    scope: str = pulumi.output_property("scope")
    session_cookie_name: str = pulumi.output_property("sessionCookieName")
    session_timeout: float = pulumi.output_property("sessionTimeout")
    user_pool_arn: str = pulumi.output_property("userPoolArn")
    user_pool_client_id: str = pulumi.output_property("userPoolClientId")
    user_pool_domain: str = pulumi.output_property("userPoolDomain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetListenerDefaultActionAuthenticateOidc(dict):
    authentication_request_extra_params: Dict[str, str] = pulumi.output_property("authenticationRequestExtraParams")
    authorization_endpoint: str = pulumi.output_property("authorizationEndpoint")
    client_id: str = pulumi.output_property("clientId")
    client_secret: str = pulumi.output_property("clientSecret")
    issuer: str = pulumi.output_property("issuer")
    on_unauthenticated_request: str = pulumi.output_property("onUnauthenticatedRequest")
    scope: str = pulumi.output_property("scope")
    session_cookie_name: str = pulumi.output_property("sessionCookieName")
    session_timeout: float = pulumi.output_property("sessionTimeout")
    token_endpoint: str = pulumi.output_property("tokenEndpoint")
    user_info_endpoint: str = pulumi.output_property("userInfoEndpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetListenerDefaultActionFixedResponse(dict):
    content_type: str = pulumi.output_property("contentType")
    message_body: str = pulumi.output_property("messageBody")
    status_code: str = pulumi.output_property("statusCode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetListenerDefaultActionRedirect(dict):
    host: str = pulumi.output_property("host")
    path: str = pulumi.output_property("path")
    port: str = pulumi.output_property("port")
    """
    The port of the listener. Required if `arn` is not set.
    """
    protocol: str = pulumi.output_property("protocol")
    query: str = pulumi.output_property("query")
    status_code: str = pulumi.output_property("statusCode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerAccessLogs(dict):
    bucket: str = pulumi.output_property("bucket")
    enabled: bool = pulumi.output_property("enabled")
    prefix: str = pulumi.output_property("prefix")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerSubnetMapping(dict):
    allocation_id: Optional[str] = pulumi.output_property("allocationId")
    subnet_id: str = pulumi.output_property("subnetId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTargetGroupHealthCheck(dict):
    enabled: bool = pulumi.output_property("enabled")
    healthy_threshold: float = pulumi.output_property("healthyThreshold")
    interval: float = pulumi.output_property("interval")
    matcher: str = pulumi.output_property("matcher")
    path: str = pulumi.output_property("path")
    port: str = pulumi.output_property("port")
    protocol: str = pulumi.output_property("protocol")
    timeout: float = pulumi.output_property("timeout")
    unhealthy_threshold: float = pulumi.output_property("unhealthyThreshold")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTargetGroupStickiness(dict):
    cookie_duration: float = pulumi.output_property("cookieDuration")
    enabled: bool = pulumi.output_property("enabled")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


