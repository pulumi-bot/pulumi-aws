# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ListenerRule']


class ListenerRule(pulumi.CustomResource):
    actions: pulumi.Output[List['outputs.ListenerRuleAction']] = pulumi.output_property("actions")
    """
    An Action block. Action blocks are documented below.
    """
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) of the target group.
    """
    conditions: pulumi.Output[List['outputs.ListenerRuleCondition']] = pulumi.output_property("conditions")
    """
    A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
    """
    listener_arn: pulumi.Output[str] = pulumi.output_property("listenerArn")
    """
    The ARN of the listener to which to attach the rule.
    """
    priority: pulumi.Output[float] = pulumi.output_property("priority")
    """
    The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, actions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleActionArgs']]]]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleConditionArgs']]]]] = None, listener_arn: Optional[pulumi.Input[str]] = None, priority: Optional[pulumi.Input[float]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a Load Balancer Listener Rule resource.

        > **Note:** `alb.ListenerRule` is known as `lb.ListenerRule`. The functionality is identical.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
        front_end_listener = aws.lb.Listener("frontEndListener")
        static = aws.lb.ListenerRule("static",
            actions=[{
                "target_group_arn": aws_lb_target_group["static"]["arn"],
                "type": "forward",
            }],
            conditions=[
                {
                    "pathPattern": {
                        "values": ["/static/*"],
                    },
                },
                {
                    "hostHeader": {
                        "values": ["example.com"],
                    },
                },
            ],
            listener_arn=front_end_listener.arn,
            priority=100)
        host_based_routing = aws.lb.ListenerRule("hostBasedRouting",
            actions=[{
                "forward": {
                    "stickiness": {
                        "duration": 600,
                        "enabled": True,
                    },
                    "targetGroup": [
                        {
                            "arn": aws_lb_target_group["main"]["arn"],
                            "weight": 80,
                        },
                        {
                            "arn": aws_lb_target_group["canary"]["arn"],
                            "weight": 20,
                        },
                    ],
                },
                "type": "forward",
            }],
            conditions=[{
                "hostHeader": {
                    "values": ["my-service.*.mycompany.io"],
                },
            }],
            listener_arn=front_end_listener.arn,
            priority=99)
        host_based_weighted_routing = aws.lb.ListenerRule("hostBasedWeightedRouting",
            actions=[{
                "target_group_arn": aws_lb_target_group["static"]["arn"],
                "type": "forward",
            }],
            conditions=[{
                "hostHeader": {
                    "values": ["my-service.*.mydomain.io"],
                },
            }],
            listener_arn=front_end_listener.arn,
            priority=99)
        redirect_http_to_https = aws.lb.ListenerRule("redirectHttpToHttps",
            actions=[{
                "redirect": {
                    "port": "443",
                    "protocol": "HTTPS",
                    "status_code": "HTTP_301",
                },
                "type": "redirect",
            }],
            conditions=[{
                "httpHeader": {
                    "httpHeaderName": "X-Forwarded-For",
                    "values": ["192.168.1.*"],
                },
            }],
            listener_arn=front_end_listener.arn)
        health_check = aws.lb.ListenerRule("healthCheck",
            actions=[{
                "fixedResponse": {
                    "content_type": "text/plain",
                    "messageBody": "HEALTHY",
                    "status_code": "200",
                },
                "type": "fixed-response",
            }],
            conditions=[{
                "queryStrings": [
                    {
                        "key": "health",
                        "value": "check",
                    },
                    {
                        "value": "bar",
                    },
                ],
            }],
            listener_arn=front_end_listener.arn)
        pool = aws.cognito.UserPool("pool")
        client = aws.cognito.UserPoolClient("client")
        domain = aws.cognito.UserPoolDomain("domain")
        admin = aws.lb.ListenerRule("admin",
            actions=[
                {
                    "authenticateOidc": {
                        "authorizationEndpoint": "https://example.com/authorization_endpoint",
                        "client_id": "client_id",
                        "client_secret": "client_secret",
                        "issuer": "https://example.com",
                        "tokenEndpoint": "https://example.com/token_endpoint",
                        "userInfoEndpoint": "https://example.com/user_info_endpoint",
                    },
                    "type": "authenticate-oidc",
                },
                {
                    "target_group_arn": aws_lb_target_group["static"]["arn"],
                    "type": "forward",
                },
            ],
            listener_arn=front_end_listener.arn)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleActionArgs']]]] actions: An Action block. Action blocks are documented below.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleConditionArgs']]]] conditions: A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
        :param pulumi.Input[str] listener_arn: The ARN of the listener to which to attach the rule.
        :param pulumi.Input[float] priority: The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if actions is None:
                raise TypeError("Missing required property 'actions'")
            __props__['actions'] = actions
            if conditions is None:
                raise TypeError("Missing required property 'conditions'")
            __props__['conditions'] = conditions
            if listener_arn is None:
                raise TypeError("Missing required property 'listener_arn'")
            __props__['listener_arn'] = listener_arn
            __props__['priority'] = priority
            __props__['arn'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="aws:elasticloadbalancingv2/listenerRule:ListenerRule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ListenerRule, __self__).__init__(
            'aws:lb/listenerRule:ListenerRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, actions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleActionArgs']]]]] = None, arn: Optional[pulumi.Input[str]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleConditionArgs']]]]] = None, listener_arn: Optional[pulumi.Input[str]] = None, priority: Optional[pulumi.Input[float]] = None) -> 'ListenerRule':
        """
        Get an existing ListenerRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleActionArgs']]]] actions: An Action block. Action blocks are documented below.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the target group.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ListenerRuleConditionArgs']]]] conditions: A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
        :param pulumi.Input[str] listener_arn: The ARN of the listener to which to attach the rule.
        :param pulumi.Input[float] priority: The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["actions"] = actions
        __props__["arn"] = arn
        __props__["conditions"] = conditions
        __props__["listener_arn"] = listener_arn
        __props__["priority"] = priority
        return ListenerRule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

