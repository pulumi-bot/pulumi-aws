# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterBrokerNodeGroupInfo',
    'ClusterClientAuthentication',
    'ClusterClientAuthenticationTls',
    'ClusterConfigurationInfo',
    'ClusterEncryptionInfo',
    'ClusterEncryptionInfoEncryptionInTransit',
    'ClusterLoggingInfo',
    'ClusterLoggingInfoBrokerLogs',
    'ClusterLoggingInfoBrokerLogsCloudwatchLogs',
    'ClusterLoggingInfoBrokerLogsFirehose',
    'ClusterLoggingInfoBrokerLogsS3',
    'ClusterOpenMonitoring',
    'ClusterOpenMonitoringPrometheus',
    'ClusterOpenMonitoringPrometheusJmxExporter',
    'ClusterOpenMonitoringPrometheusNodeExporter',
]

@pulumi.output_type
class ClusterBrokerNodeGroupInfo(dict):
    az_distribution: Optional[str] = pulumi.output_property("azDistribution")
    """
    The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
    """
    client_subnets: List[str] = pulumi.output_property("clientSubnets")
    """
    A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
    """
    ebs_volume_size: float = pulumi.output_property("ebsVolumeSize")
    """
    The size in GiB of the EBS volume for the data drive on each broker node.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
    """
    security_groups: List[str] = pulumi.output_property("securityGroups")
    """
    A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClientAuthentication(dict):
    tls: Optional['outputs.ClusterClientAuthenticationTls'] = pulumi.output_property("tls")
    """
    Configuration block for specifying TLS client authentication. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClientAuthenticationTls(dict):
    certificate_authority_arns: Optional[List[str]] = pulumi.output_property("certificateAuthorityArns")
    """
    List of ACM Certificate Authority Amazon Resource Names (ARNs).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterConfigurationInfo(dict):
    arn: str = pulumi.output_property("arn")
    """
    Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
    """
    revision: float = pulumi.output_property("revision")
    """
    Revision of the MSK Configuration to use in the cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterEncryptionInfo(dict):
    encryption_at_rest_kms_key_arn: Optional[str] = pulumi.output_property("encryptionAtRestKmsKeyArn")
    """
    You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
    """
    encryption_in_transit: Optional['outputs.ClusterEncryptionInfoEncryptionInTransit'] = pulumi.output_property("encryptionInTransit")
    """
    Configuration block to specify encryption in transit. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterEncryptionInfoEncryptionInTransit(dict):
    client_broker: Optional[str] = pulumi.output_property("clientBroker")
    """
    Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value is `TLS_PLAINTEXT` when `encryption_in_transit` block defined, but `TLS` when `encryption_in_transit` block omitted.
    """
    in_cluster: Optional[bool] = pulumi.output_property("inCluster")
    """
    Whether data communication among broker nodes is encrypted. Default value: `true`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterLoggingInfo(dict):
    broker_logs: 'outputs.ClusterLoggingInfoBrokerLogs' = pulumi.output_property("brokerLogs")
    """
    Configuration block for Broker Logs settings for logging info. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterLoggingInfoBrokerLogs(dict):
    cloudwatch_logs: Optional['outputs.ClusterLoggingInfoBrokerLogsCloudwatchLogs'] = pulumi.output_property("cloudwatchLogs")
    firehose: Optional['outputs.ClusterLoggingInfoBrokerLogsFirehose'] = pulumi.output_property("firehose")
    s3: Optional['outputs.ClusterLoggingInfoBrokerLogsS3'] = pulumi.output_property("s3")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterLoggingInfoBrokerLogsCloudwatchLogs(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
    """
    log_group: Optional[str] = pulumi.output_property("logGroup")
    """
    Name of the Cloudwatch Log Group to deliver logs to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterLoggingInfoBrokerLogsFirehose(dict):
    delivery_stream: Optional[str] = pulumi.output_property("deliveryStream")
    """
    Name of the Kinesis Data Firehose delivery stream to deliver logs to.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterLoggingInfoBrokerLogsS3(dict):
    bucket: Optional[str] = pulumi.output_property("bucket")
    """
    Name of the S3 bucket to deliver logs to.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Prefix to append to the folder name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterOpenMonitoring(dict):
    prometheus: 'outputs.ClusterOpenMonitoringPrometheus' = pulumi.output_property("prometheus")
    """
    Configuration block for Prometheus settings for open monitoring. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterOpenMonitoringPrometheus(dict):
    jmx_exporter: Optional['outputs.ClusterOpenMonitoringPrometheusJmxExporter'] = pulumi.output_property("jmxExporter")
    """
    Configuration block for JMX Exporter. See below.
    """
    node_exporter: Optional['outputs.ClusterOpenMonitoringPrometheusNodeExporter'] = pulumi.output_property("nodeExporter")
    """
    Configuration block for Node Exporter. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterOpenMonitoringPrometheusJmxExporter(dict):
    enabled_in_broker: bool = pulumi.output_property("enabledInBroker")
    """
    Indicates whether you want to enable or disable the JMX Exporter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterOpenMonitoringPrometheusNodeExporter(dict):
    enabled_in_broker: bool = pulumi.output_property("enabledInBroker")
    """
    Indicates whether you want to enable or disable the JMX Exporter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


