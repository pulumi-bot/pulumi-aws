# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GroupInitialLifecycleHookArgs',
    'GroupLaunchTemplateArgs',
    'GroupMixedInstancesPolicyArgs',
    'GroupMixedInstancesPolicyInstancesDistributionArgs',
    'GroupMixedInstancesPolicyLaunchTemplateArgs',
    'GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs',
    'GroupMixedInstancesPolicyLaunchTemplateOverrideArgs',
    'GroupTagArgs',
    'PolicyStepAdjustmentArgs',
    'PolicyTargetTrackingConfigurationArgs',
    'PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs',
    'PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimensionArgs',
    'PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs',
]

@pulumi.input_type
class GroupInitialLifecycleHookArgs:
    lifecycle_transition: pulumi.Input[str] = pulumi.input_property("lifecycleTransition")
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the auto scaling group. By default generated by this provider.
    """
    default_result: Optional[pulumi.Input[str]] = pulumi.input_property("defaultResult")
    heartbeat_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("heartbeatTimeout")
    notification_metadata: Optional[pulumi.Input[str]] = pulumi.input_property("notificationMetadata")
    notification_target_arn: Optional[pulumi.Input[str]] = pulumi.input_property("notificationTargetArn")
    role_arn: Optional[pulumi.Input[str]] = pulumi.input_property("roleArn")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, lifecycle_transition: pulumi.Input[str], name: pulumi.Input[str], default_result: Optional[pulumi.Input[str]] = None, heartbeat_timeout: Optional[pulumi.Input[float]] = None, notification_metadata: Optional[pulumi.Input[str]] = None, notification_target_arn: Optional[pulumi.Input[str]] = None, role_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the auto scaling group. By default generated by this provider.
        """
        __self__.lifecycle_transition = lifecycle_transition
        __self__.name = name
        __self__.default_result = default_result
        __self__.heartbeat_timeout = heartbeat_timeout
        __self__.notification_metadata = notification_metadata
        __self__.notification_target_arn = notification_target_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class GroupLaunchTemplateArgs:
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the launch template. Conflicts with `name`.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the auto scaling group. By default generated by this provider.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] id: The ID of the launch template. Conflicts with `name`.
        :param pulumi.Input[str] name: The name of the auto scaling group. By default generated by this provider.
        :param pulumi.Input[str] version: Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
        """
        __self__.id = id
        __self__.name = name
        __self__.version = version

@pulumi.input_type
class GroupMixedInstancesPolicyArgs:
    launch_template: pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateArgs'] = pulumi.input_property("launchTemplate")
    """
    Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
    """
    instances_distribution: Optional[pulumi.Input['GroupMixedInstancesPolicyInstancesDistributionArgs']] = pulumi.input_property("instancesDistribution")
    """
    Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, launch_template: pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateArgs'], instances_distribution: Optional[pulumi.Input['GroupMixedInstancesPolicyInstancesDistributionArgs']] = None) -> None:
        """
        :param pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateArgs'] launch_template: Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
        :param pulumi.Input['GroupMixedInstancesPolicyInstancesDistributionArgs'] instances_distribution: Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
        """
        __self__.launch_template = launch_template
        __self__.instances_distribution = instances_distribution

@pulumi.input_type
class GroupMixedInstancesPolicyInstancesDistributionArgs:
    on_demand_allocation_strategy: Optional[pulumi.Input[str]] = pulumi.input_property("onDemandAllocationStrategy")
    """
    Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
    """
    on_demand_base_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("onDemandBaseCapacity")
    """
    Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
    """
    on_demand_percentage_above_base_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("onDemandPercentageAboveBaseCapacity")
    """
    Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
    """
    spot_allocation_strategy: Optional[pulumi.Input[str]] = pulumi.input_property("spotAllocationStrategy")
    """
    How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
    """
    spot_instance_pools: Optional[pulumi.Input[float]] = pulumi.input_property("spotInstancePools")
    """
    Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
    """
    spot_max_price: Optional[pulumi.Input[str]] = pulumi.input_property("spotMaxPrice")
    """
    Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, on_demand_allocation_strategy: Optional[pulumi.Input[str]] = None, on_demand_base_capacity: Optional[pulumi.Input[float]] = None, on_demand_percentage_above_base_capacity: Optional[pulumi.Input[float]] = None, spot_allocation_strategy: Optional[pulumi.Input[str]] = None, spot_instance_pools: Optional[pulumi.Input[float]] = None, spot_max_price: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] on_demand_allocation_strategy: Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
        :param pulumi.Input[float] on_demand_base_capacity: Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
        :param pulumi.Input[float] on_demand_percentage_above_base_capacity: Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
        :param pulumi.Input[str] spot_allocation_strategy: How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
        :param pulumi.Input[float] spot_instance_pools: Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
        :param pulumi.Input[str] spot_max_price: Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
        """
        __self__.on_demand_allocation_strategy = on_demand_allocation_strategy
        __self__.on_demand_base_capacity = on_demand_base_capacity
        __self__.on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity
        __self__.spot_allocation_strategy = spot_allocation_strategy
        __self__.spot_instance_pools = spot_instance_pools
        __self__.spot_max_price = spot_max_price

@pulumi.input_type
class GroupMixedInstancesPolicyLaunchTemplateArgs:
    launch_template_specification: pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs'] = pulumi.input_property("launchTemplateSpecification")
    """
    Nested argument defines the Launch Template. Defined below.
    """
    overrides: Optional[pulumi.Input[List[pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateOverrideArgs']]]] = pulumi.input_property("overrides")
    """
    List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, launch_template_specification: pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs'], overrides: Optional[pulumi.Input[List[pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateOverrideArgs']]]] = None) -> None:
        """
        :param pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs'] launch_template_specification: Nested argument defines the Launch Template. Defined below.
        :param pulumi.Input[List[pulumi.Input['GroupMixedInstancesPolicyLaunchTemplateOverrideArgs']]] overrides: List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
        """
        __self__.launch_template_specification = launch_template_specification
        __self__.overrides = overrides

@pulumi.input_type
class GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs:
    launch_template_id: Optional[pulumi.Input[str]] = pulumi.input_property("launchTemplateId")
    """
    The ID of the launch template. Conflicts with `launch_template_name`.
    """
    launch_template_name: Optional[pulumi.Input[str]] = pulumi.input_property("launchTemplateName")
    """
    The name of the launch template. Conflicts with `launch_template_id`.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, launch_template_id: Optional[pulumi.Input[str]] = None, launch_template_name: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] launch_template_id: The ID of the launch template. Conflicts with `launch_template_name`.
        :param pulumi.Input[str] launch_template_name: The name of the launch template. Conflicts with `launch_template_id`.
        :param pulumi.Input[str] version: Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
        """
        __self__.launch_template_id = launch_template_id
        __self__.launch_template_name = launch_template_name
        __self__.version = version

@pulumi.input_type
class GroupMixedInstancesPolicyLaunchTemplateOverrideArgs:
    instance_type: Optional[pulumi.Input[str]] = pulumi.input_property("instanceType")
    """
    Override the instance type in the Launch Template.
    """
    weighted_capacity: Optional[pulumi.Input[str]] = pulumi.input_property("weightedCapacity")
    """
    The number of capacity units, which gives the instance type a proportional weight to other instance types.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_type: Optional[pulumi.Input[str]] = None, weighted_capacity: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] instance_type: Override the instance type in the Launch Template.
        :param pulumi.Input[str] weighted_capacity: The number of capacity units, which gives the instance type a proportional weight to other instance types.
        """
        __self__.instance_type = instance_type
        __self__.weighted_capacity = weighted_capacity

@pulumi.input_type
class GroupTagArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    Key
    """
    propagate_at_launch: pulumi.Input[bool] = pulumi.input_property("propagateAtLaunch")
    """
    Enables propagation of the tag to
    Amazon EC2 instances launched via this ASG
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    Value
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], propagate_at_launch: pulumi.Input[bool], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] key: Key
        :param pulumi.Input[bool] propagate_at_launch: Enables propagation of the tag to
               Amazon EC2 instances launched via this ASG
        :param pulumi.Input[str] value: Value
        """
        __self__.key = key
        __self__.propagate_at_launch = propagate_at_launch
        __self__.value = value

@pulumi.input_type
class PolicyStepAdjustmentArgs:
    scaling_adjustment: pulumi.Input[float] = pulumi.input_property("scalingAdjustment")
    """
    The number of members by which to
    scale, when the adjustment bounds are breached. A positive value scales
    up. A negative value scales down.
    """
    metric_interval_lower_bound: Optional[pulumi.Input[str]] = pulumi.input_property("metricIntervalLowerBound")
    """
    The lower bound for the
    difference between the alarm threshold and the CloudWatch metric.
    Without a value, AWS will treat this bound as infinity.
    """
    metric_interval_upper_bound: Optional[pulumi.Input[str]] = pulumi.input_property("metricIntervalUpperBound")
    """
    The upper bound for the
    difference between the alarm threshold and the CloudWatch metric.
    Without a value, AWS will treat this bound as infinity. The upper bound
    must be greater than the lower bound.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, scaling_adjustment: pulumi.Input[float], metric_interval_lower_bound: Optional[pulumi.Input[str]] = None, metric_interval_upper_bound: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] scaling_adjustment: The number of members by which to
               scale, when the adjustment bounds are breached. A positive value scales
               up. A negative value scales down.
        :param pulumi.Input[str] metric_interval_lower_bound: The lower bound for the
               difference between the alarm threshold and the CloudWatch metric.
               Without a value, AWS will treat this bound as infinity.
        :param pulumi.Input[str] metric_interval_upper_bound: The upper bound for the
               difference between the alarm threshold and the CloudWatch metric.
               Without a value, AWS will treat this bound as infinity. The upper bound
               must be greater than the lower bound.
        """
        __self__.scaling_adjustment = scaling_adjustment
        __self__.metric_interval_lower_bound = metric_interval_lower_bound
        __self__.metric_interval_upper_bound = metric_interval_upper_bound

@pulumi.input_type
class PolicyTargetTrackingConfigurationArgs:
    target_value: pulumi.Input[float] = pulumi.input_property("targetValue")
    """
    The target value for the metric.
    """
    customized_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs']] = pulumi.input_property("customizedMetricSpecification")
    """
    A customized metric. Conflicts with `predefined_metric_specification`.
    """
    disable_scale_in: Optional[pulumi.Input[bool]] = pulumi.input_property("disableScaleIn")
    """
    Indicates whether scale in by the target tracking policy is disabled.
    """
    predefined_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs']] = pulumi.input_property("predefinedMetricSpecification")
    """
    A predefined metric. Conflicts with `customized_metric_specification`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_value: pulumi.Input[float], customized_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs']] = None, disable_scale_in: Optional[pulumi.Input[bool]] = None, predefined_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs']] = None) -> None:
        """
        :param pulumi.Input[float] target_value: The target value for the metric.
        :param pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs'] customized_metric_specification: A customized metric. Conflicts with `predefined_metric_specification`.
        :param pulumi.Input[bool] disable_scale_in: Indicates whether scale in by the target tracking policy is disabled.
        :param pulumi.Input['PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs'] predefined_metric_specification: A predefined metric. Conflicts with `customized_metric_specification`.
        """
        __self__.target_value = target_value
        __self__.customized_metric_specification = customized_metric_specification
        __self__.disable_scale_in = disable_scale_in
        __self__.predefined_metric_specification = predefined_metric_specification

@pulumi.input_type
class PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs:
    metric_name: pulumi.Input[str] = pulumi.input_property("metricName")
    """
    The name of the metric.
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    The namespace of the metric.
    """
    statistic: pulumi.Input[str] = pulumi.input_property("statistic")
    """
    The statistic of the metric.
    """
    metric_dimensions: Optional[pulumi.Input[List[pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimensionArgs']]]] = pulumi.input_property("metricDimensions")
    """
    The dimensions of the metric.
    """
    unit: Optional[pulumi.Input[str]] = pulumi.input_property("unit")
    """
    The unit of the metric.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, metric_name: pulumi.Input[str], namespace: pulumi.Input[str], statistic: pulumi.Input[str], metric_dimensions: Optional[pulumi.Input[List[pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimensionArgs']]]] = None, unit: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] metric_name: The name of the metric.
        :param pulumi.Input[str] namespace: The namespace of the metric.
        :param pulumi.Input[str] statistic: The statistic of the metric.
        :param pulumi.Input[List[pulumi.Input['PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimensionArgs']]] metric_dimensions: The dimensions of the metric.
        :param pulumi.Input[str] unit: The unit of the metric.
        """
        __self__.metric_name = metric_name
        __self__.namespace = namespace
        __self__.statistic = statistic
        __self__.metric_dimensions = metric_dimensions
        __self__.unit = unit

@pulumi.input_type
class PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimensionArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the dimension.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The value of the dimension.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the dimension.
        :param pulumi.Input[str] value: The value of the dimension.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs:
    predefined_metric_type: pulumi.Input[str] = pulumi.input_property("predefinedMetricType")
    """
    The metric type.
    """
    resource_label: Optional[pulumi.Input[str]] = pulumi.input_property("resourceLabel")
    """
    Identifies the resource associated with the metric type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, predefined_metric_type: pulumi.Input[str], resource_label: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] predefined_metric_type: The metric type.
        :param pulumi.Input[str] resource_label: Identifies the resource associated with the metric type.
        """
        __self__.predefined_metric_type = predefined_metric_type
        __self__.resource_label = resource_label

