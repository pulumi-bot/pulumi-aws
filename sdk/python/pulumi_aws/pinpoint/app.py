# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['App']


class App(pulumi.CustomResource):
    application_id: pulumi.Output[str] = pulumi.output_property("applicationId")
    """
    The Application ID of the Pinpoint App.
    """
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    Amazon Resource Name (ARN) of the PinPoint Application
    """
    campaign_hook: pulumi.Output[Optional['outputs.AppCampaignHook']] = pulumi.output_property("campaignHook")
    """
    The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
    """
    limits: pulumi.Output[Optional['outputs.AppLimits']] = pulumi.output_property("limits")
    """
    The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The application name. By default generated by this provider
    """
    name_prefix: pulumi.Output[Optional[str]] = pulumi.output_property("namePrefix")
    """
    The name of the Pinpoint application. Conflicts with `name`
    """
    quiet_time: pulumi.Output[Optional['outputs.AppQuietTime']] = pulumi.output_property("quietTime")
    """
    The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    Key-value map of resource tags
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, campaign_hook: Optional[pulumi.Input[pulumi.InputType['AppCampaignHookArgs']]] = None, limits: Optional[pulumi.Input[pulumi.InputType['AppLimitsArgs']]] = None, name: Optional[pulumi.Input[str]] = None, name_prefix: Optional[pulumi.Input[str]] = None, quiet_time: Optional[pulumi.Input[pulumi.InputType['AppQuietTimeArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a Pinpoint App resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.pinpoint.App("example",
            limits={
                "maximumDuration": 600,
            },
            quiet_time={
                "end": "06:00",
                "start": "00:00",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AppCampaignHookArgs']] campaign_hook: The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        :param pulumi.Input[pulumi.InputType['AppLimitsArgs']] limits: The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        :param pulumi.Input[str] name: The application name. By default generated by this provider
        :param pulumi.Input[str] name_prefix: The name of the Pinpoint application. Conflicts with `name`
        :param pulumi.Input[pulumi.InputType['AppQuietTimeArgs']] quiet_time: The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: Key-value map of resource tags
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['campaign_hook'] = campaign_hook
            __props__['limits'] = limits
            __props__['name'] = name
            __props__['name_prefix'] = name_prefix
            __props__['quiet_time'] = quiet_time
            __props__['tags'] = tags
            __props__['application_id'] = None
            __props__['arn'] = None
        super(App, __self__).__init__(
            'aws:pinpoint/app:App',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, application_id: Optional[pulumi.Input[str]] = None, arn: Optional[pulumi.Input[str]] = None, campaign_hook: Optional[pulumi.Input[pulumi.InputType['AppCampaignHookArgs']]] = None, limits: Optional[pulumi.Input[pulumi.InputType['AppLimitsArgs']]] = None, name: Optional[pulumi.Input[str]] = None, name_prefix: Optional[pulumi.Input[str]] = None, quiet_time: Optional[pulumi.Input[pulumi.InputType['AppQuietTimeArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> 'App':
        """
        Get an existing App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The Application ID of the Pinpoint App.
        :param pulumi.Input[str] arn: Amazon Resource Name (ARN) of the PinPoint Application
        :param pulumi.Input[pulumi.InputType['AppCampaignHookArgs']] campaign_hook: The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        :param pulumi.Input[pulumi.InputType['AppLimitsArgs']] limits: The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        :param pulumi.Input[str] name: The application name. By default generated by this provider
        :param pulumi.Input[str] name_prefix: The name of the Pinpoint application. Conflicts with `name`
        :param pulumi.Input[pulumi.InputType['AppQuietTimeArgs']] quiet_time: The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: Key-value map of resource tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["application_id"] = application_id
        __props__["arn"] = arn
        __props__["campaign_hook"] = campaign_hook
        __props__["limits"] = limits
        __props__["name"] = name
        __props__["name_prefix"] = name_prefix
        __props__["quiet_time"] = quiet_time
        __props__["tags"] = tags
        return App(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

