# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class EventStream(pulumi.CustomResource):
    application_id: pulumi.Output[str]
    destination_stream_arn: pulumi.Output[str]
    role_arn: pulumi.Output[str]
    def __init__(__self__, __name__, __opts__=None, application_id=None, destination_stream_arn=None, role_arn=None):
        """
        ## ---
        
        layout: "aws"
        page_title: "AWS: aws_pinpoint_event_stream"
        sidebar_current: "docs-aws-resource-pinpoint-event-stream"
        description: |-
          Provides a Pinpoint Event Stream resource.
        ---
        
        # aws_pinpoint_event_stream
        
        Provides a Pinpoint Event Stream resource.
        
        ## Argument Reference
        
        The following arguments are supported:
        
        * `application_id` - (Required) The application ID.
        * `destination_stream_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
        * `role_arn` - (Required) The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] application_id
        :param pulumi.Input[str] destination_stream_arn
        :param pulumi.Input[str] role_arn
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not application_id:
            raise TypeError('Missing required property application_id')
        __props__['application_id'] = application_id

        if not destination_stream_arn:
            raise TypeError('Missing required property destination_stream_arn')
        __props__['destination_stream_arn'] = destination_stream_arn

        if not role_arn:
            raise TypeError('Missing required property role_arn')
        __props__['role_arn'] = role_arn

        super(EventStream, __self__).__init__(
            'aws:pinpoint/eventStream:EventStream',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

