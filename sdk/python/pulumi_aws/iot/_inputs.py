# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ThingTypePropertiesArgs',
    'TopicRuleCloudwatchAlarmArgs',
    'TopicRuleCloudwatchMetricArgs',
    'TopicRuleDynamodbArgs',
    'TopicRuleDynamodbv2Args',
    'TopicRuleDynamodbv2PutItemArgs',
    'TopicRuleElasticsearchArgs',
    'TopicRuleErrorActionArgs',
    'TopicRuleErrorActionCloudwatchAlarmArgs',
    'TopicRuleErrorActionCloudwatchMetricArgs',
    'TopicRuleErrorActionDynamodbArgs',
    'TopicRuleErrorActionDynamodbv2Args',
    'TopicRuleErrorActionDynamodbv2PutItemArgs',
    'TopicRuleErrorActionElasticsearchArgs',
    'TopicRuleErrorActionFirehoseArgs',
    'TopicRuleErrorActionIotAnalyticsArgs',
    'TopicRuleErrorActionIotEventsArgs',
    'TopicRuleErrorActionKinesisArgs',
    'TopicRuleErrorActionLambdaArgs',
    'TopicRuleErrorActionRepublishArgs',
    'TopicRuleErrorActionS3Args',
    'TopicRuleErrorActionSnsArgs',
    'TopicRuleErrorActionSqsArgs',
    'TopicRuleErrorActionStepFunctionsArgs',
    'TopicRuleFirehoseArgs',
    'TopicRuleIotAnalyticArgs',
    'TopicRuleIotEventArgs',
    'TopicRuleKinesisArgs',
    'TopicRuleLambdaArgs',
    'TopicRuleRepublishArgs',
    'TopicRuleS3Args',
    'TopicRuleSnsArgs',
    'TopicRuleSqsArgs',
    'TopicRuleStepFunctionArgs',
]

@pulumi.input_type
class ThingTypePropertiesArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 searchable_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] description: The description of the thing type.
        :param pulumi.Input[List[pulumi.Input[str]]] searchable_attributes: A list of searchable thing attribute names.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "searchableAttributes", searchable_attributes)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the thing type.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="searchableAttributes")
    def searchable_attributes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of searchable thing attribute names.
        """
        ...

    @searchable_attributes.setter
    def searchable_attributes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class TopicRuleCloudwatchAlarmArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 state_reason: pulumi.Input[str],
                 state_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] alarm_name: The CloudWatch alarm name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input[str] state_reason: The reason for the alarm change.
        :param pulumi.Input[str] state_value: The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        pulumi.set(__self__, "alarmName", alarm_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "stateReason", state_reason)
        pulumi.set(__self__, "stateValue", state_value)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        """
        The CloudWatch alarm name.
        """
        ...

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> pulumi.Input[str]:
        """
        The reason for the alarm change.
        """
        ...

    @state_reason.setter
    def state_reason(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateValue")
    def state_value(self) -> pulumi.Input[str]:
        """
        The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        ...

    @state_value.setter
    def state_value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleCloudwatchMetricArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 metric_namespace: pulumi.Input[str],
                 metric_unit: pulumi.Input[str],
                 metric_value: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 metric_timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_name: The CloudWatch metric name.
        :param pulumi.Input[str] metric_namespace: The CloudWatch metric namespace name.
        :param pulumi.Input[str] metric_unit: The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        :param pulumi.Input[str] metric_value: The CloudWatch metric value.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch metric.
        :param pulumi.Input[str] metric_timestamp: An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        pulumi.set(__self__, "metricName", metric_name)
        pulumi.set(__self__, "metricNamespace", metric_namespace)
        pulumi.set(__self__, "metricUnit", metric_unit)
        pulumi.set(__self__, "metricValue", metric_value)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "metricTimestamp", metric_timestamp)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric name.
        """
        ...

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric namespace name.
        """
        ...

    @metric_namespace.setter
    def metric_namespace(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> pulumi.Input[str]:
        """
        The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        """
        ...

    @metric_unit.setter
    def metric_unit(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric value.
        """
        ...

    @metric_value.setter
    def metric_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch metric.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricTimestamp")
    def metric_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        ...

    @metric_timestamp.setter
    def metric_timestamp(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleDynamodbArgs:
    def __init__(__self__, *,
                 hash_key_field: pulumi.Input[str],
                 hash_key_value: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 hash_key_type: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 payload_field: Optional[pulumi.Input[str]] = None,
                 range_key_field: Optional[pulumi.Input[str]] = None,
                 range_key_type: Optional[pulumi.Input[str]] = None,
                 range_key_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hash_key_field: The hash key name.
        :param pulumi.Input[str] hash_key_value: The hash key value.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the DynamoDB table.
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        :param pulumi.Input[str] hash_key_type: The hash key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] operation: The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        :param pulumi.Input[str] payload_field: The action payload.
        :param pulumi.Input[str] range_key_field: The range key name.
        :param pulumi.Input[str] range_key_type: The range key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] range_key_value: The range key value.
        """
        pulumi.set(__self__, "hashKeyField", hash_key_field)
        pulumi.set(__self__, "hashKeyValue", hash_key_value)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "tableName", table_name)
        pulumi.set(__self__, "hashKeyType", hash_key_type)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "payloadField", payload_field)
        pulumi.set(__self__, "rangeKeyField", range_key_field)
        pulumi.set(__self__, "rangeKeyType", range_key_type)
        pulumi.set(__self__, "rangeKeyValue", range_key_value)

    @property
    @pulumi.getter(name="hashKeyField")
    def hash_key_field(self) -> pulumi.Input[str]:
        """
        The hash key name.
        """
        ...

    @hash_key_field.setter
    def hash_key_field(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="hashKeyValue")
    def hash_key_value(self) -> pulumi.Input[str]:
        """
        The hash key value.
        """
        ...

    @hash_key_value.setter
    def hash_key_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to the DynamoDB table.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The name of the DynamoDB table.
        """
        ...

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="hashKeyType")
    def hash_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        The hash key type. Valid values are "STRING" or "NUMBER".
        """
        ...

    @hash_key_type.setter
    def hash_key_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        """
        ...

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="payloadField")
    def payload_field(self) -> Optional[pulumi.Input[str]]:
        """
        The action payload.
        """
        ...

    @payload_field.setter
    def payload_field(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyField")
    def range_key_field(self) -> Optional[pulumi.Input[str]]:
        """
        The range key name.
        """
        ...

    @range_key_field.setter
    def range_key_field(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyType")
    def range_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        The range key type. Valid values are "STRING" or "NUMBER".
        """
        ...

    @range_key_type.setter
    def range_key_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyValue")
    def range_key_value(self) -> Optional[pulumi.Input[str]]:
        """
        The range key value.
        """
        ...

    @range_key_value.setter
    def range_key_value(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleDynamodbv2Args:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 put_item: Optional[pulumi.Input['TopicRuleDynamodbv2PutItemArgs']] = None):
        """
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input['TopicRuleDynamodbv2PutItemArgs'] put_item: Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "putItem", put_item)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="putItem")
    def put_item(self) -> Optional[pulumi.Input['TopicRuleDynamodbv2PutItemArgs']]:
        """
        Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        ...

    @put_item.setter
    def put_item(self, value: Optional[pulumi.Input['TopicRuleDynamodbv2PutItemArgs']]):
        ...


@pulumi.input_type
class TopicRuleDynamodbv2PutItemArgs:
    def __init__(__self__, *,
                 table_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        """
        pulumi.set(__self__, "tableName", table_name)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The name of the DynamoDB table.
        """
        ...

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleElasticsearchArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 id: pulumi.Input[str],
                 index: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] endpoint: The endpoint of your Elasticsearch domain.
        :param pulumi.Input[str] id: The unique identifier for the document you are storing.
        :param pulumi.Input[str] index: The Elasticsearch index where you want to store your data.
        :param pulumi.Input[str] role_arn: The IAM role ARN that has access to Elasticsearch.
        :param pulumi.Input[str] type: The type of document you are storing.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of your Elasticsearch domain.
        """
        ...

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the document you are storing.
        """
        ...

    @id.setter
    def id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The Elasticsearch index where you want to store your data.
        """
        ...

    @index.setter
    def index(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that has access to Elasticsearch.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of document you are storing.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionArgs:
    def __init__(__self__, *,
                 cloudwatch_alarm: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchAlarmArgs']] = None,
                 cloudwatch_metric: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchMetricArgs']] = None,
                 dynamodb: Optional[pulumi.Input['TopicRuleErrorActionDynamodbArgs']] = None,
                 dynamodbv2: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2Args']] = None,
                 elasticsearch: Optional[pulumi.Input['TopicRuleErrorActionElasticsearchArgs']] = None,
                 firehose: Optional[pulumi.Input['TopicRuleErrorActionFirehoseArgs']] = None,
                 iot_analytics: Optional[pulumi.Input['TopicRuleErrorActionIotAnalyticsArgs']] = None,
                 iot_events: Optional[pulumi.Input['TopicRuleErrorActionIotEventsArgs']] = None,
                 kinesis: Optional[pulumi.Input['TopicRuleErrorActionKinesisArgs']] = None,
                 lambda_: Optional[pulumi.Input['TopicRuleErrorActionLambdaArgs']] = None,
                 republish: Optional[pulumi.Input['TopicRuleErrorActionRepublishArgs']] = None,
                 s3: Optional[pulumi.Input['TopicRuleErrorActionS3Args']] = None,
                 sns: Optional[pulumi.Input['TopicRuleErrorActionSnsArgs']] = None,
                 sqs: Optional[pulumi.Input['TopicRuleErrorActionSqsArgs']] = None,
                 step_functions: Optional[pulumi.Input['TopicRuleErrorActionStepFunctionsArgs']] = None):
        pulumi.set(__self__, "cloudwatchAlarm", cloudwatch_alarm)
        pulumi.set(__self__, "cloudwatchMetric", cloudwatch_metric)
        pulumi.set(__self__, "dynamodb", dynamodb)
        pulumi.set(__self__, "dynamodbv2", dynamodbv2)
        pulumi.set(__self__, "elasticsearch", elasticsearch)
        pulumi.set(__self__, "firehose", firehose)
        pulumi.set(__self__, "iotAnalytics", iot_analytics)
        pulumi.set(__self__, "iotEvents", iot_events)
        pulumi.set(__self__, "kinesis", kinesis)
        pulumi.set(__self__, "lambda", lambda_)
        pulumi.set(__self__, "republish", republish)
        pulumi.set(__self__, "s3", s3)
        pulumi.set(__self__, "sns", sns)
        pulumi.set(__self__, "sqs", sqs)
        pulumi.set(__self__, "stepFunctions", step_functions)

    @property
    @pulumi.getter(name="cloudwatchAlarm")
    def cloudwatch_alarm(self) -> Optional[pulumi.Input['TopicRuleErrorActionCloudwatchAlarmArgs']]:
        ...

    @cloudwatch_alarm.setter
    def cloudwatch_alarm(self, value: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchAlarmArgs']]):
        ...

    @property
    @pulumi.getter(name="cloudwatchMetric")
    def cloudwatch_metric(self) -> Optional[pulumi.Input['TopicRuleErrorActionCloudwatchMetricArgs']]:
        ...

    @cloudwatch_metric.setter
    def cloudwatch_metric(self, value: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchMetricArgs']]):
        ...

    @property
    @pulumi.getter
    def dynamodb(self) -> Optional[pulumi.Input['TopicRuleErrorActionDynamodbArgs']]:
        ...

    @dynamodb.setter
    def dynamodb(self, value: Optional[pulumi.Input['TopicRuleErrorActionDynamodbArgs']]):
        ...

    @property
    @pulumi.getter
    def dynamodbv2(self) -> Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2Args']]:
        ...

    @dynamodbv2.setter
    def dynamodbv2(self, value: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2Args']]):
        ...

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['TopicRuleErrorActionElasticsearchArgs']]:
        ...

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['TopicRuleErrorActionElasticsearchArgs']]):
        ...

    @property
    @pulumi.getter
    def firehose(self) -> Optional[pulumi.Input['TopicRuleErrorActionFirehoseArgs']]:
        ...

    @firehose.setter
    def firehose(self, value: Optional[pulumi.Input['TopicRuleErrorActionFirehoseArgs']]):
        ...

    @property
    @pulumi.getter(name="iotAnalytics")
    def iot_analytics(self) -> Optional[pulumi.Input['TopicRuleErrorActionIotAnalyticsArgs']]:
        ...

    @iot_analytics.setter
    def iot_analytics(self, value: Optional[pulumi.Input['TopicRuleErrorActionIotAnalyticsArgs']]):
        ...

    @property
    @pulumi.getter(name="iotEvents")
    def iot_events(self) -> Optional[pulumi.Input['TopicRuleErrorActionIotEventsArgs']]:
        ...

    @iot_events.setter
    def iot_events(self, value: Optional[pulumi.Input['TopicRuleErrorActionIotEventsArgs']]):
        ...

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input['TopicRuleErrorActionKinesisArgs']]:
        ...

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input['TopicRuleErrorActionKinesisArgs']]):
        ...

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['TopicRuleErrorActionLambdaArgs']]:
        ...

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['TopicRuleErrorActionLambdaArgs']]):
        ...

    @property
    @pulumi.getter
    def republish(self) -> Optional[pulumi.Input['TopicRuleErrorActionRepublishArgs']]:
        ...

    @republish.setter
    def republish(self, value: Optional[pulumi.Input['TopicRuleErrorActionRepublishArgs']]):
        ...

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['TopicRuleErrorActionS3Args']]:
        ...

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['TopicRuleErrorActionS3Args']]):
        ...

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input['TopicRuleErrorActionSnsArgs']]:
        ...

    @sns.setter
    def sns(self, value: Optional[pulumi.Input['TopicRuleErrorActionSnsArgs']]):
        ...

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input['TopicRuleErrorActionSqsArgs']]:
        ...

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input['TopicRuleErrorActionSqsArgs']]):
        ...

    @property
    @pulumi.getter(name="stepFunctions")
    def step_functions(self) -> Optional[pulumi.Input['TopicRuleErrorActionStepFunctionsArgs']]:
        ...

    @step_functions.setter
    def step_functions(self, value: Optional[pulumi.Input['TopicRuleErrorActionStepFunctionsArgs']]):
        ...


@pulumi.input_type
class TopicRuleErrorActionCloudwatchAlarmArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 state_reason: pulumi.Input[str],
                 state_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] alarm_name: The CloudWatch alarm name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input[str] state_reason: The reason for the alarm change.
        :param pulumi.Input[str] state_value: The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        pulumi.set(__self__, "alarmName", alarm_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "stateReason", state_reason)
        pulumi.set(__self__, "stateValue", state_value)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        """
        The CloudWatch alarm name.
        """
        ...

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> pulumi.Input[str]:
        """
        The reason for the alarm change.
        """
        ...

    @state_reason.setter
    def state_reason(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateValue")
    def state_value(self) -> pulumi.Input[str]:
        """
        The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        ...

    @state_value.setter
    def state_value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionCloudwatchMetricArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 metric_namespace: pulumi.Input[str],
                 metric_unit: pulumi.Input[str],
                 metric_value: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 metric_timestamp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_name: The CloudWatch metric name.
        :param pulumi.Input[str] metric_namespace: The CloudWatch metric namespace name.
        :param pulumi.Input[str] metric_unit: The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        :param pulumi.Input[str] metric_value: The CloudWatch metric value.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch metric.
        :param pulumi.Input[str] metric_timestamp: An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        pulumi.set(__self__, "metricName", metric_name)
        pulumi.set(__self__, "metricNamespace", metric_namespace)
        pulumi.set(__self__, "metricUnit", metric_unit)
        pulumi.set(__self__, "metricValue", metric_value)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "metricTimestamp", metric_timestamp)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric name.
        """
        ...

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric namespace name.
        """
        ...

    @metric_namespace.setter
    def metric_namespace(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> pulumi.Input[str]:
        """
        The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        """
        ...

    @metric_unit.setter
    def metric_unit(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> pulumi.Input[str]:
        """
        The CloudWatch metric value.
        """
        ...

    @metric_value.setter
    def metric_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch metric.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="metricTimestamp")
    def metric_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        ...

    @metric_timestamp.setter
    def metric_timestamp(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionDynamodbArgs:
    def __init__(__self__, *,
                 hash_key_field: pulumi.Input[str],
                 hash_key_value: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 hash_key_type: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 payload_field: Optional[pulumi.Input[str]] = None,
                 range_key_field: Optional[pulumi.Input[str]] = None,
                 range_key_type: Optional[pulumi.Input[str]] = None,
                 range_key_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hash_key_field: The hash key name.
        :param pulumi.Input[str] hash_key_value: The hash key value.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the DynamoDB table.
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        :param pulumi.Input[str] hash_key_type: The hash key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] operation: The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        :param pulumi.Input[str] payload_field: The action payload.
        :param pulumi.Input[str] range_key_field: The range key name.
        :param pulumi.Input[str] range_key_type: The range key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] range_key_value: The range key value.
        """
        pulumi.set(__self__, "hashKeyField", hash_key_field)
        pulumi.set(__self__, "hashKeyValue", hash_key_value)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "tableName", table_name)
        pulumi.set(__self__, "hashKeyType", hash_key_type)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "payloadField", payload_field)
        pulumi.set(__self__, "rangeKeyField", range_key_field)
        pulumi.set(__self__, "rangeKeyType", range_key_type)
        pulumi.set(__self__, "rangeKeyValue", range_key_value)

    @property
    @pulumi.getter(name="hashKeyField")
    def hash_key_field(self) -> pulumi.Input[str]:
        """
        The hash key name.
        """
        ...

    @hash_key_field.setter
    def hash_key_field(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="hashKeyValue")
    def hash_key_value(self) -> pulumi.Input[str]:
        """
        The hash key value.
        """
        ...

    @hash_key_value.setter
    def hash_key_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to the DynamoDB table.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The name of the DynamoDB table.
        """
        ...

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="hashKeyType")
    def hash_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        The hash key type. Valid values are "STRING" or "NUMBER".
        """
        ...

    @hash_key_type.setter
    def hash_key_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        """
        ...

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="payloadField")
    def payload_field(self) -> Optional[pulumi.Input[str]]:
        """
        The action payload.
        """
        ...

    @payload_field.setter
    def payload_field(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyField")
    def range_key_field(self) -> Optional[pulumi.Input[str]]:
        """
        The range key name.
        """
        ...

    @range_key_field.setter
    def range_key_field(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyType")
    def range_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        The range key type. Valid values are "STRING" or "NUMBER".
        """
        ...

    @range_key_type.setter
    def range_key_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rangeKeyValue")
    def range_key_value(self) -> Optional[pulumi.Input[str]]:
        """
        The range key value.
        """
        ...

    @range_key_value.setter
    def range_key_value(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionDynamodbv2Args:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 put_item: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs']] = None):
        """
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs'] put_item: Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "putItem", put_item)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="putItem")
    def put_item(self) -> Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs']]:
        """
        Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        ...

    @put_item.setter
    def put_item(self, value: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs']]):
        ...


@pulumi.input_type
class TopicRuleErrorActionDynamodbv2PutItemArgs:
    def __init__(__self__, *,
                 table_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        """
        pulumi.set(__self__, "tableName", table_name)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The name of the DynamoDB table.
        """
        ...

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionElasticsearchArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 id: pulumi.Input[str],
                 index: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] endpoint: The endpoint of your Elasticsearch domain.
        :param pulumi.Input[str] id: The unique identifier for the document you are storing.
        :param pulumi.Input[str] index: The Elasticsearch index where you want to store your data.
        :param pulumi.Input[str] role_arn: The IAM role ARN that has access to Elasticsearch.
        :param pulumi.Input[str] type: The type of document you are storing.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of your Elasticsearch domain.
        """
        ...

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the document you are storing.
        """
        ...

    @id.setter
    def id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The Elasticsearch index where you want to store your data.
        """
        ...

    @index.setter
    def index(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that has access to Elasticsearch.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of document you are storing.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionFirehoseArgs:
    def __init__(__self__, *,
                 delivery_stream_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 separator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delivery_stream_name: The delivery stream name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        :param pulumi.Input[str] separator: A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        pulumi.set(__self__, "deliveryStreamName", delivery_stream_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "separator", separator)

    @property
    @pulumi.getter(name="deliveryStreamName")
    def delivery_stream_name(self) -> pulumi.Input[str]:
        """
        The delivery stream name.
        """
        ...

    @delivery_stream_name.setter
    def delivery_stream_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def separator(self) -> Optional[pulumi.Input[str]]:
        """
        A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        ...

    @separator.setter
    def separator(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionIotAnalyticsArgs:
    def __init__(__self__, *,
                 channel_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] channel_name: Name of AWS IOT Analytics channel.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        """
        pulumi.set(__self__, "channelName", channel_name)
        pulumi.set(__self__, "roleArn", role_arn)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> pulumi.Input[str]:
        """
        Name of AWS IOT Analytics channel.
        """
        ...

    @channel_name.setter
    def channel_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionIotEventsArgs:
    def __init__(__self__, *,
                 input_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 message_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] input_name: The name of the AWS IoT Events input.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] message_id: Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        pulumi.set(__self__, "inputName", input_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "messageId", message_id)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> pulumi.Input[str]:
        """
        The name of the AWS IoT Events input.
        """
        ...

    @input_name.setter
    def input_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[pulumi.Input[str]]:
        """
        Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        ...

    @message_id.setter
    def message_id(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionKinesisArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 partition_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        :param pulumi.Input[str] stream_name: The name of the Amazon Kinesis stream.
        :param pulumi.Input[str] partition_key: The partition key.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "streamName", stream_name)
        pulumi.set(__self__, "partitionKey", partition_key)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon Kinesis stream.
        """
        ...

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="partitionKey")
    def partition_key(self) -> Optional[pulumi.Input[str]]:
        """
        The partition key.
        """
        ...

    @partition_key.setter
    def partition_key(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionLambdaArgs:
    def __init__(__self__, *,
                 function_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] function_arn: The ARN of the Lambda function.
        """
        pulumi.set(__self__, "functionArn", function_arn)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the Lambda function.
        """
        ...

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionRepublishArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 qos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] topic: The name of the MQTT topic the message should be republished to.
        :param pulumi.Input[float] qos: The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "qos", qos)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The name of the MQTT topic the message should be republished to.
        """
        ...

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def qos(self) -> Optional[pulumi.Input[float]]:
        """
        The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        ...

    @qos.setter
    def qos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionS3Args:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 key: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name.
        :param pulumi.Input[str] key: The object key.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        """
        pulumi.set(__self__, "bucketName", bucket_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "roleArn", role_arn)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket name.
        """
        ...

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The object key.
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleErrorActionSnsArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 target_arn: pulumi.Input[str],
                 message_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] target_arn: The ARN of the SNS topic.
        :param pulumi.Input[str] message_format: The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "targetArn", target_arn)
        pulumi.set(__self__, "messageFormat", message_format)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the SNS topic.
        """
        ...

    @target_arn.setter
    def target_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="messageFormat")
    def message_format(self) -> Optional[pulumi.Input[str]]:
        """
        The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        ...

    @message_format.setter
    def message_format(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleErrorActionSqsArgs:
    def __init__(__self__, *,
                 queue_url: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 use_base64: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] queue_url: The URL of the Amazon SQS queue.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[bool] use_base64: Specifies whether to use Base64 encoding.
        """
        pulumi.set(__self__, "queueUrl", queue_url)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "useBase64", use_base64)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> pulumi.Input[str]:
        """
        The URL of the Amazon SQS queue.
        """
        ...

    @queue_url.setter
    def queue_url(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="useBase64")
    def use_base64(self) -> pulumi.Input[bool]:
        """
        Specifies whether to use Base64 encoding.
        """
        ...

    @use_base64.setter
    def use_base64(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class TopicRuleErrorActionStepFunctionsArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 state_machine_name: pulumi.Input[str],
                 execution_name_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to start execution of the state machine.
        :param pulumi.Input[str] state_machine_name: The name of the Step Functions state machine whose execution will be started.
        :param pulumi.Input[str] execution_name_prefix: The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "stateMachineName", state_machine_name)
        pulumi.set(__self__, "executionNamePrefix", execution_name_prefix)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to start execution of the state machine.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateMachineName")
    def state_machine_name(self) -> pulumi.Input[str]:
        """
        The name of the Step Functions state machine whose execution will be started.
        """
        ...

    @state_machine_name.setter
    def state_machine_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="executionNamePrefix")
    def execution_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        ...

    @execution_name_prefix.setter
    def execution_name_prefix(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleFirehoseArgs:
    def __init__(__self__, *,
                 delivery_stream_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 separator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delivery_stream_name: The delivery stream name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        :param pulumi.Input[str] separator: A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        pulumi.set(__self__, "deliveryStreamName", delivery_stream_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "separator", separator)

    @property
    @pulumi.getter(name="deliveryStreamName")
    def delivery_stream_name(self) -> pulumi.Input[str]:
        """
        The delivery stream name.
        """
        ...

    @delivery_stream_name.setter
    def delivery_stream_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def separator(self) -> Optional[pulumi.Input[str]]:
        """
        A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        ...

    @separator.setter
    def separator(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleIotAnalyticArgs:
    def __init__(__self__, *,
                 channel_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] channel_name: Name of AWS IOT Analytics channel.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        """
        pulumi.set(__self__, "channelName", channel_name)
        pulumi.set(__self__, "roleArn", role_arn)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> pulumi.Input[str]:
        """
        Name of AWS IOT Analytics channel.
        """
        ...

    @channel_name.setter
    def channel_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleIotEventArgs:
    def __init__(__self__, *,
                 input_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 message_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] input_name: The name of the AWS IoT Events input.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] message_id: Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        pulumi.set(__self__, "inputName", input_name)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "messageId", message_id)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> pulumi.Input[str]:
        """
        The name of the AWS IoT Events input.
        """
        ...

    @input_name.setter
    def input_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[pulumi.Input[str]]:
        """
        Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        ...

    @message_id.setter
    def message_id(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleKinesisArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 partition_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        :param pulumi.Input[str] stream_name: The name of the Amazon Kinesis stream.
        :param pulumi.Input[str] partition_key: The partition key.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "streamName", stream_name)
        pulumi.set(__self__, "partitionKey", partition_key)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon Kinesis stream.
        """
        ...

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="partitionKey")
    def partition_key(self) -> Optional[pulumi.Input[str]]:
        """
        The partition key.
        """
        ...

    @partition_key.setter
    def partition_key(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleLambdaArgs:
    def __init__(__self__, *,
                 function_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] function_arn: The ARN of the Lambda function.
        """
        pulumi.set(__self__, "functionArn", function_arn)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the Lambda function.
        """
        ...

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleRepublishArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 qos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] topic: The name of the MQTT topic the message should be republished to.
        :param pulumi.Input[float] qos: The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "qos", qos)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The name of the MQTT topic the message should be republished to.
        """
        ...

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def qos(self) -> Optional[pulumi.Input[float]]:
        """
        The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        ...

    @qos.setter
    def qos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class TopicRuleS3Args:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 key: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name.
        :param pulumi.Input[str] key: The object key.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        """
        pulumi.set(__self__, "bucketName", bucket_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "roleArn", role_arn)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket name.
        """
        ...

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The object key.
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The IAM role ARN that allows access to the CloudWatch alarm.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TopicRuleSnsArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 target_arn: pulumi.Input[str],
                 message_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] target_arn: The ARN of the SNS topic.
        :param pulumi.Input[str] message_format: The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "targetArn", target_arn)
        pulumi.set(__self__, "messageFormat", message_format)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the SNS topic.
        """
        ...

    @target_arn.setter
    def target_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="messageFormat")
    def message_format(self) -> Optional[pulumi.Input[str]]:
        """
        The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        ...

    @message_format.setter
    def message_format(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TopicRuleSqsArgs:
    def __init__(__self__, *,
                 queue_url: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 use_base64: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] queue_url: The URL of the Amazon SQS queue.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[bool] use_base64: Specifies whether to use Base64 encoding.
        """
        pulumi.set(__self__, "queueUrl", queue_url)
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "useBase64", use_base64)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> pulumi.Input[str]:
        """
        The URL of the Amazon SQS queue.
        """
        ...

    @queue_url.setter
    def queue_url(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="useBase64")
    def use_base64(self) -> pulumi.Input[bool]:
        """
        Specifies whether to use Base64 encoding.
        """
        ...

    @use_base64.setter
    def use_base64(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class TopicRuleStepFunctionArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 state_machine_name: pulumi.Input[str],
                 execution_name_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to start execution of the state machine.
        :param pulumi.Input[str] state_machine_name: The name of the Step Functions state machine whose execution will be started.
        :param pulumi.Input[str] execution_name_prefix: The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        pulumi.set(__self__, "roleArn", role_arn)
        pulumi.set(__self__, "stateMachineName", state_machine_name)
        pulumi.set(__self__, "executionNamePrefix", execution_name_prefix)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role that grants access to start execution of the state machine.
        """
        ...

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stateMachineName")
    def state_machine_name(self) -> pulumi.Input[str]:
        """
        The name of the Step Functions state machine whose execution will be started.
        """
        ...

    @state_machine_name.setter
    def state_machine_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="executionNamePrefix")
    def execution_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        ...

    @execution_name_prefix.setter
    def execution_name_prefix(self, value: Optional[pulumi.Input[str]]):
        ...


