# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ThingTypePropertiesArgs',
    'TopicRuleCloudwatchAlarmArgs',
    'TopicRuleCloudwatchMetricArgs',
    'TopicRuleDynamodbArgs',
    'TopicRuleDynamodbv2Args',
    'TopicRuleDynamodbv2PutItemArgs',
    'TopicRuleElasticsearchArgs',
    'TopicRuleErrorActionArgs',
    'TopicRuleErrorActionCloudwatchAlarmArgs',
    'TopicRuleErrorActionCloudwatchMetricArgs',
    'TopicRuleErrorActionDynamodbArgs',
    'TopicRuleErrorActionDynamodbv2Args',
    'TopicRuleErrorActionDynamodbv2PutItemArgs',
    'TopicRuleErrorActionElasticsearchArgs',
    'TopicRuleErrorActionFirehoseArgs',
    'TopicRuleErrorActionIotAnalyticsArgs',
    'TopicRuleErrorActionIotEventsArgs',
    'TopicRuleErrorActionKinesisArgs',
    'TopicRuleErrorActionLambdaArgs',
    'TopicRuleErrorActionRepublishArgs',
    'TopicRuleErrorActionS3Args',
    'TopicRuleErrorActionSnsArgs',
    'TopicRuleErrorActionSqsArgs',
    'TopicRuleErrorActionStepFunctionsArgs',
    'TopicRuleFirehoseArgs',
    'TopicRuleIotAnalyticArgs',
    'TopicRuleIotEventArgs',
    'TopicRuleKinesisArgs',
    'TopicRuleLambdaArgs',
    'TopicRuleRepublishArgs',
    'TopicRuleS3Args',
    'TopicRuleSnsArgs',
    'TopicRuleSqsArgs',
    'TopicRuleStepFunctionArgs',
]

@pulumi.input_type
class ThingTypePropertiesArgs:
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    The description of the thing type.
    """
    searchable_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("searchableAttributes")
    """
    A list of searchable thing attribute names.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, description: Optional[pulumi.Input[str]] = None, searchable_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] description: The description of the thing type.
        :param pulumi.Input[List[pulumi.Input[str]]] searchable_attributes: A list of searchable thing attribute names.
        """
        __self__.description = description
        __self__.searchable_attributes = searchable_attributes

@pulumi.input_type
class TopicRuleCloudwatchAlarmArgs:
    alarm_name: pulumi.Input[str] = pulumi.input_property("alarmName")
    """
    The CloudWatch alarm name.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """
    state_reason: pulumi.Input[str] = pulumi.input_property("stateReason")
    """
    The reason for the alarm change.
    """
    state_value: pulumi.Input[str] = pulumi.input_property("stateValue")
    """
    The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, alarm_name: pulumi.Input[str], role_arn: pulumi.Input[str], state_reason: pulumi.Input[str], state_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] alarm_name: The CloudWatch alarm name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input[str] state_reason: The reason for the alarm change.
        :param pulumi.Input[str] state_value: The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        __self__.alarm_name = alarm_name
        __self__.role_arn = role_arn
        __self__.state_reason = state_reason
        __self__.state_value = state_value

@pulumi.input_type
class TopicRuleCloudwatchMetricArgs:
    metric_name: pulumi.Input[str] = pulumi.input_property("metricName")
    """
    The CloudWatch metric name.
    """
    metric_namespace: pulumi.Input[str] = pulumi.input_property("metricNamespace")
    """
    The CloudWatch metric namespace name.
    """
    metric_unit: pulumi.Input[str] = pulumi.input_property("metricUnit")
    """
    The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
    """
    metric_value: pulumi.Input[str] = pulumi.input_property("metricValue")
    """
    The CloudWatch metric value.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch metric.
    """
    metric_timestamp: Optional[pulumi.Input[str]] = pulumi.input_property("metricTimestamp")
    """
    An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, metric_name: pulumi.Input[str], metric_namespace: pulumi.Input[str], metric_unit: pulumi.Input[str], metric_value: pulumi.Input[str], role_arn: pulumi.Input[str], metric_timestamp: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] metric_name: The CloudWatch metric name.
        :param pulumi.Input[str] metric_namespace: The CloudWatch metric namespace name.
        :param pulumi.Input[str] metric_unit: The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        :param pulumi.Input[str] metric_value: The CloudWatch metric value.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch metric.
        :param pulumi.Input[str] metric_timestamp: An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        __self__.metric_name = metric_name
        __self__.metric_namespace = metric_namespace
        __self__.metric_unit = metric_unit
        __self__.metric_value = metric_value
        __self__.role_arn = role_arn
        __self__.metric_timestamp = metric_timestamp

@pulumi.input_type
class TopicRuleDynamodbArgs:
    hash_key_field: pulumi.Input[str] = pulumi.input_property("hashKeyField")
    """
    The hash key name.
    """
    hash_key_value: pulumi.Input[str] = pulumi.input_property("hashKeyValue")
    """
    The hash key value.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to the DynamoDB table.
    """
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    The name of the DynamoDB table.
    """
    hash_key_type: Optional[pulumi.Input[str]] = pulumi.input_property("hashKeyType")
    """
    The hash key type. Valid values are "STRING" or "NUMBER".
    """
    operation: Optional[pulumi.Input[str]] = pulumi.input_property("operation")
    """
    The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
    """
    payload_field: Optional[pulumi.Input[str]] = pulumi.input_property("payloadField")
    """
    The action payload.
    """
    range_key_field: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyField")
    """
    The range key name.
    """
    range_key_type: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyType")
    """
    The range key type. Valid values are "STRING" or "NUMBER".
    """
    range_key_value: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyValue")
    """
    The range key value.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hash_key_field: pulumi.Input[str], hash_key_value: pulumi.Input[str], role_arn: pulumi.Input[str], table_name: pulumi.Input[str], hash_key_type: Optional[pulumi.Input[str]] = None, operation: Optional[pulumi.Input[str]] = None, payload_field: Optional[pulumi.Input[str]] = None, range_key_field: Optional[pulumi.Input[str]] = None, range_key_type: Optional[pulumi.Input[str]] = None, range_key_value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] hash_key_field: The hash key name.
        :param pulumi.Input[str] hash_key_value: The hash key value.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the DynamoDB table.
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        :param pulumi.Input[str] hash_key_type: The hash key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] operation: The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        :param pulumi.Input[str] payload_field: The action payload.
        :param pulumi.Input[str] range_key_field: The range key name.
        :param pulumi.Input[str] range_key_type: The range key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] range_key_value: The range key value.
        """
        __self__.hash_key_field = hash_key_field
        __self__.hash_key_value = hash_key_value
        __self__.role_arn = role_arn
        __self__.table_name = table_name
        __self__.hash_key_type = hash_key_type
        __self__.operation = operation
        __self__.payload_field = payload_field
        __self__.range_key_field = range_key_field
        __self__.range_key_type = range_key_type
        __self__.range_key_value = range_key_value

@pulumi.input_type
class TopicRuleDynamodbv2Args:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """
    put_item: Optional[pulumi.Input['TopicRuleDynamodbv2PutItemArgs']] = pulumi.input_property("putItem")
    """
    Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], put_item: Optional[pulumi.Input['TopicRuleDynamodbv2PutItemArgs']] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input['TopicRuleDynamodbv2PutItemArgs'] put_item: Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        __self__.role_arn = role_arn
        __self__.put_item = put_item

@pulumi.input_type
class TopicRuleDynamodbv2PutItemArgs:
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    The name of the DynamoDB table.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, table_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        """
        __self__.table_name = table_name

@pulumi.input_type
class TopicRuleElasticsearchArgs:
    endpoint: pulumi.Input[str] = pulumi.input_property("endpoint")
    """
    The endpoint of your Elasticsearch domain.
    """
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The unique identifier for the document you are storing.
    """
    index: pulumi.Input[str] = pulumi.input_property("index")
    """
    The Elasticsearch index where you want to store your data.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that has access to Elasticsearch.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of document you are storing.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint: pulumi.Input[str], id: pulumi.Input[str], index: pulumi.Input[str], role_arn: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] endpoint: The endpoint of your Elasticsearch domain.
        :param pulumi.Input[str] id: The unique identifier for the document you are storing.
        :param pulumi.Input[str] index: The Elasticsearch index where you want to store your data.
        :param pulumi.Input[str] role_arn: The IAM role ARN that has access to Elasticsearch.
        :param pulumi.Input[str] type: The type of document you are storing.
        """
        __self__.endpoint = endpoint
        __self__.id = id
        __self__.index = index
        __self__.role_arn = role_arn
        __self__.type = type

@pulumi.input_type
class TopicRuleErrorActionArgs:
    cloudwatch_alarm: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchAlarmArgs']] = pulumi.input_property("cloudwatchAlarm")
    cloudwatch_metric: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchMetricArgs']] = pulumi.input_property("cloudwatchMetric")
    dynamodb: Optional[pulumi.Input['TopicRuleErrorActionDynamodbArgs']] = pulumi.input_property("dynamodb")
    dynamodbv2: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2Args']] = pulumi.input_property("dynamodbv2")
    elasticsearch: Optional[pulumi.Input['TopicRuleErrorActionElasticsearchArgs']] = pulumi.input_property("elasticsearch")
    firehose: Optional[pulumi.Input['TopicRuleErrorActionFirehoseArgs']] = pulumi.input_property("firehose")
    iot_analytics: Optional[pulumi.Input['TopicRuleErrorActionIotAnalyticsArgs']] = pulumi.input_property("iotAnalytics")
    iot_events: Optional[pulumi.Input['TopicRuleErrorActionIotEventsArgs']] = pulumi.input_property("iotEvents")
    kinesis: Optional[pulumi.Input['TopicRuleErrorActionKinesisArgs']] = pulumi.input_property("kinesis")
    lambda_: Optional[pulumi.Input['TopicRuleErrorActionLambdaArgs']] = pulumi.input_property("lambda")
    republish: Optional[pulumi.Input['TopicRuleErrorActionRepublishArgs']] = pulumi.input_property("republish")
    s3: Optional[pulumi.Input['TopicRuleErrorActionS3Args']] = pulumi.input_property("s3")
    sns: Optional[pulumi.Input['TopicRuleErrorActionSnsArgs']] = pulumi.input_property("sns")
    sqs: Optional[pulumi.Input['TopicRuleErrorActionSqsArgs']] = pulumi.input_property("sqs")
    step_functions: Optional[pulumi.Input['TopicRuleErrorActionStepFunctionsArgs']] = pulumi.input_property("stepFunctions")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_alarm: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchAlarmArgs']] = None, cloudwatch_metric: Optional[pulumi.Input['TopicRuleErrorActionCloudwatchMetricArgs']] = None, dynamodb: Optional[pulumi.Input['TopicRuleErrorActionDynamodbArgs']] = None, dynamodbv2: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2Args']] = None, elasticsearch: Optional[pulumi.Input['TopicRuleErrorActionElasticsearchArgs']] = None, firehose: Optional[pulumi.Input['TopicRuleErrorActionFirehoseArgs']] = None, iot_analytics: Optional[pulumi.Input['TopicRuleErrorActionIotAnalyticsArgs']] = None, iot_events: Optional[pulumi.Input['TopicRuleErrorActionIotEventsArgs']] = None, kinesis: Optional[pulumi.Input['TopicRuleErrorActionKinesisArgs']] = None, lambda_: Optional[pulumi.Input['TopicRuleErrorActionLambdaArgs']] = None, republish: Optional[pulumi.Input['TopicRuleErrorActionRepublishArgs']] = None, s3: Optional[pulumi.Input['TopicRuleErrorActionS3Args']] = None, sns: Optional[pulumi.Input['TopicRuleErrorActionSnsArgs']] = None, sqs: Optional[pulumi.Input['TopicRuleErrorActionSqsArgs']] = None, step_functions: Optional[pulumi.Input['TopicRuleErrorActionStepFunctionsArgs']] = None) -> None:
        __self__.cloudwatch_alarm = cloudwatch_alarm
        __self__.cloudwatch_metric = cloudwatch_metric
        __self__.dynamodb = dynamodb
        __self__.dynamodbv2 = dynamodbv2
        __self__.elasticsearch = elasticsearch
        __self__.firehose = firehose
        __self__.iot_analytics = iot_analytics
        __self__.iot_events = iot_events
        __self__.kinesis = kinesis
        __self__.lambda_ = lambda_
        __self__.republish = republish
        __self__.s3 = s3
        __self__.sns = sns
        __self__.sqs = sqs
        __self__.step_functions = step_functions

@pulumi.input_type
class TopicRuleErrorActionCloudwatchAlarmArgs:
    alarm_name: pulumi.Input[str] = pulumi.input_property("alarmName")
    """
    The CloudWatch alarm name.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """
    state_reason: pulumi.Input[str] = pulumi.input_property("stateReason")
    """
    The reason for the alarm change.
    """
    state_value: pulumi.Input[str] = pulumi.input_property("stateValue")
    """
    The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, alarm_name: pulumi.Input[str], role_arn: pulumi.Input[str], state_reason: pulumi.Input[str], state_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] alarm_name: The CloudWatch alarm name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input[str] state_reason: The reason for the alarm change.
        :param pulumi.Input[str] state_value: The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        """
        __self__.alarm_name = alarm_name
        __self__.role_arn = role_arn
        __self__.state_reason = state_reason
        __self__.state_value = state_value

@pulumi.input_type
class TopicRuleErrorActionCloudwatchMetricArgs:
    metric_name: pulumi.Input[str] = pulumi.input_property("metricName")
    """
    The CloudWatch metric name.
    """
    metric_namespace: pulumi.Input[str] = pulumi.input_property("metricNamespace")
    """
    The CloudWatch metric namespace name.
    """
    metric_unit: pulumi.Input[str] = pulumi.input_property("metricUnit")
    """
    The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
    """
    metric_value: pulumi.Input[str] = pulumi.input_property("metricValue")
    """
    The CloudWatch metric value.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch metric.
    """
    metric_timestamp: Optional[pulumi.Input[str]] = pulumi.input_property("metricTimestamp")
    """
    An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, metric_name: pulumi.Input[str], metric_namespace: pulumi.Input[str], metric_unit: pulumi.Input[str], metric_value: pulumi.Input[str], role_arn: pulumi.Input[str], metric_timestamp: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] metric_name: The CloudWatch metric name.
        :param pulumi.Input[str] metric_namespace: The CloudWatch metric namespace name.
        :param pulumi.Input[str] metric_unit: The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
        :param pulumi.Input[str] metric_value: The CloudWatch metric value.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch metric.
        :param pulumi.Input[str] metric_timestamp: An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
        """
        __self__.metric_name = metric_name
        __self__.metric_namespace = metric_namespace
        __self__.metric_unit = metric_unit
        __self__.metric_value = metric_value
        __self__.role_arn = role_arn
        __self__.metric_timestamp = metric_timestamp

@pulumi.input_type
class TopicRuleErrorActionDynamodbArgs:
    hash_key_field: pulumi.Input[str] = pulumi.input_property("hashKeyField")
    """
    The hash key name.
    """
    hash_key_value: pulumi.Input[str] = pulumi.input_property("hashKeyValue")
    """
    The hash key value.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to the DynamoDB table.
    """
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    The name of the DynamoDB table.
    """
    hash_key_type: Optional[pulumi.Input[str]] = pulumi.input_property("hashKeyType")
    """
    The hash key type. Valid values are "STRING" or "NUMBER".
    """
    operation: Optional[pulumi.Input[str]] = pulumi.input_property("operation")
    """
    The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
    """
    payload_field: Optional[pulumi.Input[str]] = pulumi.input_property("payloadField")
    """
    The action payload.
    """
    range_key_field: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyField")
    """
    The range key name.
    """
    range_key_type: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyType")
    """
    The range key type. Valid values are "STRING" or "NUMBER".
    """
    range_key_value: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKeyValue")
    """
    The range key value.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hash_key_field: pulumi.Input[str], hash_key_value: pulumi.Input[str], role_arn: pulumi.Input[str], table_name: pulumi.Input[str], hash_key_type: Optional[pulumi.Input[str]] = None, operation: Optional[pulumi.Input[str]] = None, payload_field: Optional[pulumi.Input[str]] = None, range_key_field: Optional[pulumi.Input[str]] = None, range_key_type: Optional[pulumi.Input[str]] = None, range_key_value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] hash_key_field: The hash key name.
        :param pulumi.Input[str] hash_key_value: The hash key value.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the DynamoDB table.
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        :param pulumi.Input[str] hash_key_type: The hash key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] operation: The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
        :param pulumi.Input[str] payload_field: The action payload.
        :param pulumi.Input[str] range_key_field: The range key name.
        :param pulumi.Input[str] range_key_type: The range key type. Valid values are "STRING" or "NUMBER".
        :param pulumi.Input[str] range_key_value: The range key value.
        """
        __self__.hash_key_field = hash_key_field
        __self__.hash_key_value = hash_key_value
        __self__.role_arn = role_arn
        __self__.table_name = table_name
        __self__.hash_key_type = hash_key_type
        __self__.operation = operation
        __self__.payload_field = payload_field
        __self__.range_key_field = range_key_field
        __self__.range_key_type = range_key_type
        __self__.range_key_value = range_key_value

@pulumi.input_type
class TopicRuleErrorActionDynamodbv2Args:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """
    put_item: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs']] = pulumi.input_property("putItem")
    """
    Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], put_item: Optional[pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs']] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        :param pulumi.Input['TopicRuleErrorActionDynamodbv2PutItemArgs'] put_item: Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
        """
        __self__.role_arn = role_arn
        __self__.put_item = put_item

@pulumi.input_type
class TopicRuleErrorActionDynamodbv2PutItemArgs:
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    The name of the DynamoDB table.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, table_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] table_name: The name of the DynamoDB table.
        """
        __self__.table_name = table_name

@pulumi.input_type
class TopicRuleErrorActionElasticsearchArgs:
    endpoint: pulumi.Input[str] = pulumi.input_property("endpoint")
    """
    The endpoint of your Elasticsearch domain.
    """
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The unique identifier for the document you are storing.
    """
    index: pulumi.Input[str] = pulumi.input_property("index")
    """
    The Elasticsearch index where you want to store your data.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that has access to Elasticsearch.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of document you are storing.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint: pulumi.Input[str], id: pulumi.Input[str], index: pulumi.Input[str], role_arn: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] endpoint: The endpoint of your Elasticsearch domain.
        :param pulumi.Input[str] id: The unique identifier for the document you are storing.
        :param pulumi.Input[str] index: The Elasticsearch index where you want to store your data.
        :param pulumi.Input[str] role_arn: The IAM role ARN that has access to Elasticsearch.
        :param pulumi.Input[str] type: The type of document you are storing.
        """
        __self__.endpoint = endpoint
        __self__.id = id
        __self__.index = index
        __self__.role_arn = role_arn
        __self__.type = type

@pulumi.input_type
class TopicRuleErrorActionFirehoseArgs:
    delivery_stream_name: pulumi.Input[str] = pulumi.input_property("deliveryStreamName")
    """
    The delivery stream name.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
    """
    separator: Optional[pulumi.Input[str]] = pulumi.input_property("separator")
    """
    A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, delivery_stream_name: pulumi.Input[str], role_arn: pulumi.Input[str], separator: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] delivery_stream_name: The delivery stream name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        :param pulumi.Input[str] separator: A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        __self__.delivery_stream_name = delivery_stream_name
        __self__.role_arn = role_arn
        __self__.separator = separator

@pulumi.input_type
class TopicRuleErrorActionIotAnalyticsArgs:
    channel_name: pulumi.Input[str] = pulumi.input_property("channelName")
    """
    Name of AWS IOT Analytics channel.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, channel_name: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] channel_name: Name of AWS IOT Analytics channel.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        """
        __self__.channel_name = channel_name
        __self__.role_arn = role_arn

@pulumi.input_type
class TopicRuleErrorActionIotEventsArgs:
    input_name: pulumi.Input[str] = pulumi.input_property("inputName")
    """
    The name of the AWS IoT Events input.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    message_id: Optional[pulumi.Input[str]] = pulumi.input_property("messageId")
    """
    Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, input_name: pulumi.Input[str], role_arn: pulumi.Input[str], message_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] input_name: The name of the AWS IoT Events input.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] message_id: Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        __self__.input_name = input_name
        __self__.role_arn = role_arn
        __self__.message_id = message_id

@pulumi.input_type
class TopicRuleErrorActionKinesisArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to the Amazon Kinesis stream.
    """
    stream_name: pulumi.Input[str] = pulumi.input_property("streamName")
    """
    The name of the Amazon Kinesis stream.
    """
    partition_key: Optional[pulumi.Input[str]] = pulumi.input_property("partitionKey")
    """
    The partition key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], stream_name: pulumi.Input[str], partition_key: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        :param pulumi.Input[str] stream_name: The name of the Amazon Kinesis stream.
        :param pulumi.Input[str] partition_key: The partition key.
        """
        __self__.role_arn = role_arn
        __self__.stream_name = stream_name
        __self__.partition_key = partition_key

@pulumi.input_type
class TopicRuleErrorActionLambdaArgs:
    function_arn: pulumi.Input[str] = pulumi.input_property("functionArn")
    """
    The ARN of the Lambda function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, function_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] function_arn: The ARN of the Lambda function.
        """
        __self__.function_arn = function_arn

@pulumi.input_type
class TopicRuleErrorActionRepublishArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    topic: pulumi.Input[str] = pulumi.input_property("topic")
    """
    The name of the MQTT topic the message should be republished to.
    """
    qos: Optional[pulumi.Input[float]] = pulumi.input_property("qos")
    """
    The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], topic: pulumi.Input[str], qos: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] topic: The name of the MQTT topic the message should be republished to.
        :param pulumi.Input[float] qos: The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        __self__.role_arn = role_arn
        __self__.topic = topic
        __self__.qos = qos

@pulumi.input_type
class TopicRuleErrorActionS3Args:
    bucket_name: pulumi.Input[str] = pulumi.input_property("bucketName")
    """
    The Amazon S3 bucket name.
    """
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The object key.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_name: pulumi.Input[str], key: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name.
        :param pulumi.Input[str] key: The object key.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        """
        __self__.bucket_name = bucket_name
        __self__.key = key
        __self__.role_arn = role_arn

@pulumi.input_type
class TopicRuleErrorActionSnsArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    target_arn: pulumi.Input[str] = pulumi.input_property("targetArn")
    """
    The ARN of the SNS topic.
    """
    message_format: Optional[pulumi.Input[str]] = pulumi.input_property("messageFormat")
    """
    The message format of the message to publish. Accepted values are "JSON" and "RAW".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], target_arn: pulumi.Input[str], message_format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] target_arn: The ARN of the SNS topic.
        :param pulumi.Input[str] message_format: The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        __self__.role_arn = role_arn
        __self__.target_arn = target_arn
        __self__.message_format = message_format

@pulumi.input_type
class TopicRuleErrorActionSqsArgs:
    queue_url: pulumi.Input[str] = pulumi.input_property("queueUrl")
    """
    The URL of the Amazon SQS queue.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    use_base64: pulumi.Input[bool] = pulumi.input_property("useBase64")
    """
    Specifies whether to use Base64 encoding.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, queue_url: pulumi.Input[str], role_arn: pulumi.Input[str], use_base64: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[str] queue_url: The URL of the Amazon SQS queue.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[bool] use_base64: Specifies whether to use Base64 encoding.
        """
        __self__.queue_url = queue_url
        __self__.role_arn = role_arn
        __self__.use_base64 = use_base64

@pulumi.input_type
class TopicRuleErrorActionStepFunctionsArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to start execution of the state machine.
    """
    state_machine_name: pulumi.Input[str] = pulumi.input_property("stateMachineName")
    """
    The name of the Step Functions state machine whose execution will be started.
    """
    execution_name_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("executionNamePrefix")
    """
    The prefix used to generate, along with a UUID, the unique state machine execution name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], state_machine_name: pulumi.Input[str], execution_name_prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to start execution of the state machine.
        :param pulumi.Input[str] state_machine_name: The name of the Step Functions state machine whose execution will be started.
        :param pulumi.Input[str] execution_name_prefix: The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        __self__.role_arn = role_arn
        __self__.state_machine_name = state_machine_name
        __self__.execution_name_prefix = execution_name_prefix

@pulumi.input_type
class TopicRuleFirehoseArgs:
    delivery_stream_name: pulumi.Input[str] = pulumi.input_property("deliveryStreamName")
    """
    The delivery stream name.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
    """
    separator: Optional[pulumi.Input[str]] = pulumi.input_property("separator")
    """
    A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, delivery_stream_name: pulumi.Input[str], role_arn: pulumi.Input[str], separator: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] delivery_stream_name: The delivery stream name.
        :param pulumi.Input[str] role_arn: The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
        :param pulumi.Input[str] separator: A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        """
        __self__.delivery_stream_name = delivery_stream_name
        __self__.role_arn = role_arn
        __self__.separator = separator

@pulumi.input_type
class TopicRuleIotAnalyticArgs:
    channel_name: pulumi.Input[str] = pulumi.input_property("channelName")
    """
    Name of AWS IOT Analytics channel.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, channel_name: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] channel_name: Name of AWS IOT Analytics channel.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        """
        __self__.channel_name = channel_name
        __self__.role_arn = role_arn

@pulumi.input_type
class TopicRuleIotEventArgs:
    input_name: pulumi.Input[str] = pulumi.input_property("inputName")
    """
    The name of the AWS IoT Events input.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    message_id: Optional[pulumi.Input[str]] = pulumi.input_property("messageId")
    """
    Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, input_name: pulumi.Input[str], role_arn: pulumi.Input[str], message_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] input_name: The name of the AWS IoT Events input.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] message_id: Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
        """
        __self__.input_name = input_name
        __self__.role_arn = role_arn
        __self__.message_id = message_id

@pulumi.input_type
class TopicRuleKinesisArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to the Amazon Kinesis stream.
    """
    stream_name: pulumi.Input[str] = pulumi.input_property("streamName")
    """
    The name of the Amazon Kinesis stream.
    """
    partition_key: Optional[pulumi.Input[str]] = pulumi.input_property("partitionKey")
    """
    The partition key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], stream_name: pulumi.Input[str], partition_key: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        :param pulumi.Input[str] stream_name: The name of the Amazon Kinesis stream.
        :param pulumi.Input[str] partition_key: The partition key.
        """
        __self__.role_arn = role_arn
        __self__.stream_name = stream_name
        __self__.partition_key = partition_key

@pulumi.input_type
class TopicRuleLambdaArgs:
    function_arn: pulumi.Input[str] = pulumi.input_property("functionArn")
    """
    The ARN of the Lambda function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, function_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] function_arn: The ARN of the Lambda function.
        """
        __self__.function_arn = function_arn

@pulumi.input_type
class TopicRuleRepublishArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    topic: pulumi.Input[str] = pulumi.input_property("topic")
    """
    The name of the MQTT topic the message should be republished to.
    """
    qos: Optional[pulumi.Input[float]] = pulumi.input_property("qos")
    """
    The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], topic: pulumi.Input[str], qos: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] topic: The name of the MQTT topic the message should be republished to.
        :param pulumi.Input[float] qos: The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        """
        __self__.role_arn = role_arn
        __self__.topic = topic
        __self__.qos = qos

@pulumi.input_type
class TopicRuleS3Args:
    bucket_name: pulumi.Input[str] = pulumi.input_property("bucketName")
    """
    The Amazon S3 bucket name.
    """
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The object key.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The IAM role ARN that allows access to the CloudWatch alarm.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_name: pulumi.Input[str], key: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name.
        :param pulumi.Input[str] key: The object key.
        :param pulumi.Input[str] role_arn: The IAM role ARN that allows access to the CloudWatch alarm.
        """
        __self__.bucket_name = bucket_name
        __self__.key = key
        __self__.role_arn = role_arn

@pulumi.input_type
class TopicRuleSnsArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    target_arn: pulumi.Input[str] = pulumi.input_property("targetArn")
    """
    The ARN of the SNS topic.
    """
    message_format: Optional[pulumi.Input[str]] = pulumi.input_property("messageFormat")
    """
    The message format of the message to publish. Accepted values are "JSON" and "RAW".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], target_arn: pulumi.Input[str], message_format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[str] target_arn: The ARN of the SNS topic.
        :param pulumi.Input[str] message_format: The message format of the message to publish. Accepted values are "JSON" and "RAW".
        """
        __self__.role_arn = role_arn
        __self__.target_arn = target_arn
        __self__.message_format = message_format

@pulumi.input_type
class TopicRuleSqsArgs:
    queue_url: pulumi.Input[str] = pulumi.input_property("queueUrl")
    """
    The URL of the Amazon SQS queue.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access.
    """
    use_base64: pulumi.Input[bool] = pulumi.input_property("useBase64")
    """
    Specifies whether to use Base64 encoding.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, queue_url: pulumi.Input[str], role_arn: pulumi.Input[str], use_base64: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[str] queue_url: The URL of the Amazon SQS queue.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access.
        :param pulumi.Input[bool] use_base64: Specifies whether to use Base64 encoding.
        """
        __self__.queue_url = queue_url
        __self__.role_arn = role_arn
        __self__.use_base64 = use_base64

@pulumi.input_type
class TopicRuleStepFunctionArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role that grants access to start execution of the state machine.
    """
    state_machine_name: pulumi.Input[str] = pulumi.input_property("stateMachineName")
    """
    The name of the Step Functions state machine whose execution will be started.
    """
    execution_name_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("executionNamePrefix")
    """
    The prefix used to generate, along with a UUID, the unique state machine execution name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], state_machine_name: pulumi.Input[str], execution_name_prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role that grants access to start execution of the state machine.
        :param pulumi.Input[str] state_machine_name: The name of the Step Functions state machine whose execution will be started.
        :param pulumi.Input[str] execution_name_prefix: The prefix used to generate, along with a UUID, the unique state machine execution name.
        """
        __self__.role_arn = role_arn
        __self__.state_machine_name = state_machine_name
        __self__.execution_name_prefix = execution_name_prefix

