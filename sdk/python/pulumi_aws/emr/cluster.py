# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Cluster']


class Cluster(pulumi.CustomResource):
    additional_info: pulumi.Output[Optional[str]] = pulumi.output_property("additionalInfo")
    """
    A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
    """
    applications: pulumi.Output[Optional[List[str]]] = pulumi.output_property("applications")
    """
    A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
    """
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    autoscaling_role: pulumi.Output[Optional[str]] = pulumi.output_property("autoscalingRole")
    """
    An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
    """
    bootstrap_actions: pulumi.Output[Optional[List['outputs.ClusterBootstrapAction']]] = pulumi.output_property("bootstrapActions")
    """
    Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
    """
    cluster_state: pulumi.Output[str] = pulumi.output_property("clusterState")
    configurations: pulumi.Output[Optional[str]] = pulumi.output_property("configurations")
    """
    List of configurations supplied for the EMR cluster you are creating
    """
    configurations_json: pulumi.Output[Optional[str]] = pulumi.output_property("configurationsJson")
    """
    A JSON string for supplying list of configurations for the EMR cluster.
    """
    core_instance_count: pulumi.Output[float] = pulumi.output_property("coreInstanceCount")
    """
    Use the `core_instance_group` configuration block `instance_count` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`core_instance_count`-1) as core nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set. Default `1`
    """
    core_instance_group: pulumi.Output['outputs.ClusterCoreInstanceGroup'] = pulumi.output_property("coreInstanceGroup")
    """
    Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `core_instance_count` argument, `core_instance_type` argument, or `instance_group` configuration blocks are set. Detailed below.
    """
    core_instance_type: pulumi.Output[str] = pulumi.output_property("coreInstanceType")
    """
    Use the `core_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set.
    """
    custom_ami_id: pulumi.Output[Optional[str]] = pulumi.output_property("customAmiId")
    """
    A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
    """
    ebs_root_volume_size: pulumi.Output[Optional[float]] = pulumi.output_property("ebsRootVolumeSize")
    """
    Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
    """
    ec2_attributes: pulumi.Output[Optional['outputs.ClusterEc2Attributes']] = pulumi.output_property("ec2Attributes")
    """
    Attributes for the EC2 instances running the job flow. Defined below
    """
    instance_groups: pulumi.Output[List['outputs.ClusterInstanceGroup']] = pulumi.output_property("instanceGroups")
    """
    Use the `master_instance_group` configuration block, `core_instance_group` configuration block and `emr.InstanceGroup` resource(s) instead. A list of `instance_group` objects for each instance group in the cluster. Exactly one of `master_instance_type` and `instance_group` must be specified. If `instance_group` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `master_instance_group` or `core_instance_group` configuration blocks are set. Defined below
    """
    keep_job_flow_alive_when_no_steps: pulumi.Output[bool] = pulumi.output_property("keepJobFlowAliveWhenNoSteps")
    """
    Switch on/off run cluster with no steps or when all steps are complete (default is on)
    """
    kerberos_attributes: pulumi.Output[Optional['outputs.ClusterKerberosAttributes']] = pulumi.output_property("kerberosAttributes")
    """
    Kerberos configuration for the cluster. Defined below
    """
    log_uri: pulumi.Output[Optional[str]] = pulumi.output_property("logUri")
    """
    S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
    """
    master_instance_group: pulumi.Output['outputs.ClusterMasterInstanceGroup'] = pulumi.output_property("masterInstanceGroup")
    """
    Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `master_instance_type` argument or `instance_group` configuration blocks are set. Detailed below.
    """
    master_instance_type: pulumi.Output[str] = pulumi.output_property("masterInstanceType")
    """
    Use the `master_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the master node. Cannot be specified if `master_instance_group` or `instance_group` configuration blocks are set.
    """
    master_public_dns: pulumi.Output[str] = pulumi.output_property("masterPublicDns")
    """
    The public DNS name of the master EC2 instance.
    * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The name of the step.
    """
    release_label: pulumi.Output[str] = pulumi.output_property("releaseLabel")
    """
    The release label for the Amazon EMR release
    """
    scale_down_behavior: pulumi.Output[str] = pulumi.output_property("scaleDownBehavior")
    """
    The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
    """
    security_configuration: pulumi.Output[Optional[str]] = pulumi.output_property("securityConfiguration")
    """
    The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
    """
    service_role: pulumi.Output[str] = pulumi.output_property("serviceRole")
    """
    IAM role that will be assumed by the Amazon EMR service to access AWS resources
    """
    step_concurrency_level: pulumi.Output[Optional[float]] = pulumi.output_property("stepConcurrencyLevel")
    """
    The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
    """
    steps: pulumi.Output[List['outputs.ClusterStep']] = pulumi.output_property("steps")
    """
    List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    list of tags to apply to the EMR Cluster
    """
    termination_protection: pulumi.Output[bool] = pulumi.output_property("terminationProtection")
    """
    Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
    """
    visible_to_all_users: pulumi.Output[Optional[bool]] = pulumi.output_property("visibleToAllUsers")
    """
    Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, additional_info: Optional[pulumi.Input[str]] = None, applications: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, autoscaling_role: Optional[pulumi.Input[str]] = None, bootstrap_actions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterBootstrapActionArgs']]]]] = None, configurations: Optional[pulumi.Input[str]] = None, configurations_json: Optional[pulumi.Input[str]] = None, core_instance_count: Optional[pulumi.Input[float]] = None, core_instance_group: Optional[pulumi.Input[pulumi.InputType['ClusterCoreInstanceGroupArgs']]] = None, core_instance_type: Optional[pulumi.Input[str]] = None, custom_ami_id: Optional[pulumi.Input[str]] = None, ebs_root_volume_size: Optional[pulumi.Input[float]] = None, ec2_attributes: Optional[pulumi.Input[pulumi.InputType['ClusterEc2AttributesArgs']]] = None, instance_groups: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterInstanceGroupArgs']]]]] = None, keep_job_flow_alive_when_no_steps: Optional[pulumi.Input[bool]] = None, kerberos_attributes: Optional[pulumi.Input[pulumi.InputType['ClusterKerberosAttributesArgs']]] = None, log_uri: Optional[pulumi.Input[str]] = None, master_instance_group: Optional[pulumi.Input[pulumi.InputType['ClusterMasterInstanceGroupArgs']]] = None, master_instance_type: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, release_label: Optional[pulumi.Input[str]] = None, scale_down_behavior: Optional[pulumi.Input[str]] = None, security_configuration: Optional[pulumi.Input[str]] = None, service_role: Optional[pulumi.Input[str]] = None, step_concurrency_level: Optional[pulumi.Input[float]] = None, steps: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterStepArgs']]]]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, termination_protection: Optional[pulumi.Input[bool]] = None, visible_to_all_users: Optional[pulumi.Input[bool]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides an Elastic MapReduce Cluster, a web service that makes it easy to
        process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/)
        for more information.

        To configure [Instance Groups](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for [task nodes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-task), see the `emr.InstanceGroup` resource.

        > Support for [Instance Fleets](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-fleets) will be made available in an upcoming release.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        cluster = aws.emr.Cluster("cluster",
            additional_info=\"\"\"{
          "instanceAwsClientConfiguration": {
            "proxyPort": 8099,
            "proxyHost": "myproxy.example.com"
          }
        }

        \"\"\",
            applications=["Spark"],
            bootstrap_actions=[{
                "args": [
                    "instance.isMaster=true",
                    "echo running on master node",
                ],
                "name": "runif",
                "path": "s3://elasticmapreduce/bootstrap-actions/run-if",
            }],
            configurations_json=\"\"\"  [
            {
              "Classification": "hadoop-env",
              "Configurations": [
                {
                  "Classification": "export",
                  "Properties": {
                    "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
                  }
                }
              ],
              "Properties": {}
            },
            {
              "Classification": "spark-env",
              "Configurations": [
                {
                  "Classification": "export",
                  "Properties": {
                    "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
                  }
                }
              ],
              "Properties": {}
            }
          ]

        \"\"\",
            core_instance_group={
                "autoscaling_policy": \"\"\"{
        "Constraints": {
          "MinCapacity": 1,
          "MaxCapacity": 2
        },
        "Rules": [
          {
            "Name": "ScaleOutMemoryPercentage",
            "Description": "Scale out if YARNMemoryAvailablePercentage is less than 15",
            "Action": {
              "SimpleScalingPolicyConfiguration": {
                "AdjustmentType": "CHANGE_IN_CAPACITY",
                "ScalingAdjustment": 1,
                "CoolDown": 300
              }
            },
            "Trigger": {
              "CloudWatchAlarmDefinition": {
                "ComparisonOperator": "LESS_THAN",
                "EvaluationPeriods": 1,
                "MetricName": "YARNMemoryAvailablePercentage",
                "Namespace": "AWS/ElasticMapReduce",
                "Period": 300,
                "Statistic": "AVERAGE",
                "Threshold": 15.0,
                "Unit": "PERCENT"
              }
            }
          }
        ]
        }

        \"\"\",
                "bid_price": "0.30",
                "ebs_configs": [{
                    "size": "40",
                    "type": "gp2",
                    "volumesPerInstance": 1,
                }],
                "instance_count": 1,
                "instance_type": "c4.large",
            },
            ebs_root_volume_size=100,
            ec2_attributes={
                "emrManagedMasterSecurityGroup": aws_security_group["sg"]["id"],
                "emrManagedSlaveSecurityGroup": aws_security_group["sg"]["id"],
                "instanceProfile": aws_iam_instance_profile["emr_profile"]["arn"],
                "subnet_id": aws_subnet["main"]["id"],
            },
            keep_job_flow_alive_when_no_steps=True,
            master_instance_group={
                "instance_type": "m4.large",
            },
            release_label="emr-4.6.0",
            service_role=aws_iam_role["iam_emr_service_role"]["arn"],
            tags={
                "env": "env",
                "role": "rolename",
            },
            termination_protection=False)
        ```

        The `emr.Cluster` resource typically requires two IAM roles, one for the EMR Cluster
        to use as a service, and another to place on your Cluster Instances to interact
        with AWS from those instances. The suggested role policy template for the EMR service is `AmazonElasticMapReduceRole`,
        and `AmazonElasticMapReduceforEC2Role` for the EC2 profile. See the [Getting
        Started](https://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/emr-gs-launch-sample-cluster.html)
        guide for more information on these IAM roles. There is also a fully-bootable
        example this provider configuration at the bottom of this page.
        ### Enable Debug Logging

        [Debug logging in EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-debugging.html)
        is implemented as a step. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other
        steps are being managed outside of this provider.

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.emr.Cluster("example",
            lifecycle={
                "ignoreChanges": [
                    "stepConcurrencyLevel",
                    "steps",
                ],
            },
            steps=[{
                "actionOnFailure": "TERMINATE_CLUSTER",
                "hadoopJarStep": {
                    "args": ["state-pusher-script"],
                    "jar": "command-runner.jar",
                },
                "name": "Setup Hadoop Debugging",
            }])
        ```
        ### Multiple Node Master Instance Group

        Available in EMR version 5.23.0 and later, an EMR Cluster can be launched with three master nodes for high availability. Additional information about this functionality and its requirements can be found in the [EMR Management Guide](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-ha.html).

        ```python
        import pulumi
        import pulumi_aws as aws

        # Map public IP on launch must be enabled for public (Internet accessible) subnets
        example_subnet = aws.ec2.Subnet("exampleSubnet", map_public_ip_on_launch=True)
        example_cluster = aws.emr.Cluster("exampleCluster",
            core_instance_group={},
            ec2_attributes={
                "subnet_id": example_subnet.id,
            },
            master_instance_group={
                "instance_count": 3,
            },
            release_label="emr-5.24.1",
            termination_protection=True)
        ```
        ## Example bootable config

        **NOTE:** This configuration demonstrates a minimal configuration needed to
        boot an example EMR Cluster. It is not meant to display best practices. Please
        use at your own risk.

        ```python
        import pulumi
        import pulumi_aws as aws

        main_vpc = aws.ec2.Vpc("mainVpc",
            cidr_block="168.31.0.0/16",
            enable_dns_hostnames=True,
            tags={
                "name": "emr_test",
            })
        main_subnet = aws.ec2.Subnet("mainSubnet",
            vpc_id=main_vpc.id,
            cidr_block="168.31.0.0/20",
            tags={
                "name": "emr_test",
            })
        # IAM role for EMR Service
        iam_emr_service_role = aws.iam.Role("iamEmrServiceRole", assume_role_policy=\"\"\"{
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "elasticmapreduce.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        \"\"\")
        # IAM Role for EC2 Instance Profile
        iam_emr_profile_role = aws.iam.Role("iamEmrProfileRole", assume_role_policy=\"\"\"{
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        \"\"\")
        emr_profile = aws.iam.InstanceProfile("emrProfile", roles=[iam_emr_profile_role.name])
        cluster = aws.emr.Cluster("cluster",
            release_label="emr-4.6.0",
            applications=["Spark"],
            ec2_attributes={
                "subnet_id": main_subnet.id,
                "emrManagedMasterSecurityGroup": aws_security_group["allow_all"]["id"],
                "emrManagedSlaveSecurityGroup": aws_security_group["allow_all"]["id"],
                "instanceProfile": emr_profile.arn,
            },
            master_instance_type="m5.xlarge",
            core_instance_type="m5.xlarge",
            core_instance_count=1,
            tags={
                "role": "rolename",
                "dns_zone": "env_zone",
                "env": "env",
                "name": "name-env",
            },
            bootstrap_actions=[{
                "path": "s3://elasticmapreduce/bootstrap-actions/run-if",
                "name": "runif",
                "args": [
                    "instance.isMaster=true",
                    "echo running on master node",
                ],
            }],
            configurations_json=\"\"\"  [
            {
              "Classification": "hadoop-env",
              "Configurations": [
                {
                  "Classification": "export",
                  "Properties": {
                    "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
                  }
                }
              ],
              "Properties": {}
            },
            {
              "Classification": "spark-env",
              "Configurations": [
                {
                  "Classification": "export",
                  "Properties": {
                    "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
                  }
                }
              ],
              "Properties": {}
            }
          ]
        \"\"\",
            service_role=iam_emr_service_role.arn)
        allow_access = aws.ec2.SecurityGroup("allowAccess",
            description="Allow inbound traffic",
            vpc_id=main_vpc.id,
            ingress=[{
                "from_port": 0,
                "to_port": 0,
                "protocol": "-1",
                "cidr_blocks": main_vpc.cidr_block,
            }],
            egress=[{
                "from_port": 0,
                "to_port": 0,
                "protocol": "-1",
                "cidr_blocks": ["0.0.0.0/0"],
            }],
            tags={
                "name": "emr_test",
            },
            opts=ResourceOptions(depends_on=["aws_subnet.main"]))
        gw = aws.ec2.InternetGateway("gw", vpc_id=main_vpc.id)
        route_table = aws.ec2.RouteTable("routeTable",
            vpc_id=main_vpc.id,
            routes=[{
                "cidr_block": "0.0.0.0/0",
                "gateway_id": gw.id,
            }])
        main_route_table_association = aws.ec2.MainRouteTableAssociation("mainRouteTableAssociation",
            vpc_id=main_vpc.id,
            route_table_id=route_table.id)
        ###
        iam_emr_service_policy = aws.iam.RolePolicy("iamEmrServicePolicy",
            role=iam_emr_service_role.id,
            policy=\"\"\"{
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CancelSpotInstanceRequests",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateTags",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteSecurityGroup",
                    "ec2:DeleteTags",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribePrefixLists",
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSpotInstanceRequests",
                    "ec2:DescribeSpotPriceHistory",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeVpcEndpoints",
                    "ec2:DescribeVpcEndpointServices",
                    "ec2:DescribeVpcs",
                    "ec2:DetachNetworkInterface",
                    "ec2:ModifyImageAttribute",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:RequestSpotInstances",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RunInstances",
                    "ec2:TerminateInstances",
                    "ec2:DeleteVolume",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumes",
                    "ec2:DetachVolume",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "iam:ListInstanceProfiles",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "s3:CreateBucket",
                    "s3:Get*",
                    "s3:List*",
                    "sdb:BatchPutAttributes",
                    "sdb:Select",
                    "sqs:CreateQueue",
                    "sqs:Delete*",
                    "sqs:GetQueue*",
                    "sqs:PurgeQueue",
                    "sqs:ReceiveMessage"
                ]
            }]
        }
        \"\"\")
        iam_emr_profile_policy = aws.iam.RolePolicy("iamEmrProfilePolicy",
            role=iam_emr_profile_role.id,
            policy=\"\"\"{
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                    "cloudwatch:*",
                    "dynamodb:*",
                    "ec2:Describe*",
                    "elasticmapreduce:Describe*",
                    "elasticmapreduce:ListBootstrapActions",
                    "elasticmapreduce:ListClusters",
                    "elasticmapreduce:ListInstanceGroups",
                    "elasticmapreduce:ListInstances",
                    "elasticmapreduce:ListSteps",
                    "kinesis:CreateStream",
                    "kinesis:DeleteStream",
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:MergeShards",
                    "kinesis:PutRecord",
                    "kinesis:SplitShard",
                    "rds:Describe*",
                    "s3:*",
                    "sdb:*",
                    "sns:*",
                    "sqs:*"
                ]
            }]
        }
        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_info: A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
        :param pulumi.Input[List[pulumi.Input[str]]] applications: A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
        :param pulumi.Input[str] autoscaling_role: An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterBootstrapActionArgs']]]] bootstrap_actions: Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
        :param pulumi.Input[str] configurations: List of configurations supplied for the EMR cluster you are creating
        :param pulumi.Input[str] configurations_json: A JSON string for supplying list of configurations for the EMR cluster.
        :param pulumi.Input[float] core_instance_count: Use the `core_instance_group` configuration block `instance_count` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`core_instance_count`-1) as core nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set. Default `1`
        :param pulumi.Input[pulumi.InputType['ClusterCoreInstanceGroupArgs']] core_instance_group: Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `core_instance_count` argument, `core_instance_type` argument, or `instance_group` configuration blocks are set. Detailed below.
        :param pulumi.Input[str] core_instance_type: Use the `core_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set.
        :param pulumi.Input[str] custom_ami_id: A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
        :param pulumi.Input[float] ebs_root_volume_size: Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        :param pulumi.Input[pulumi.InputType['ClusterEc2AttributesArgs']] ec2_attributes: Attributes for the EC2 instances running the job flow. Defined below
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterInstanceGroupArgs']]]] instance_groups: Use the `master_instance_group` configuration block, `core_instance_group` configuration block and `emr.InstanceGroup` resource(s) instead. A list of `instance_group` objects for each instance group in the cluster. Exactly one of `master_instance_type` and `instance_group` must be specified. If `instance_group` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `master_instance_group` or `core_instance_group` configuration blocks are set. Defined below
        :param pulumi.Input[bool] keep_job_flow_alive_when_no_steps: Switch on/off run cluster with no steps or when all steps are complete (default is on)
        :param pulumi.Input[pulumi.InputType['ClusterKerberosAttributesArgs']] kerberos_attributes: Kerberos configuration for the cluster. Defined below
        :param pulumi.Input[str] log_uri: S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
        :param pulumi.Input[pulumi.InputType['ClusterMasterInstanceGroupArgs']] master_instance_group: Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `master_instance_type` argument or `instance_group` configuration blocks are set. Detailed below.
        :param pulumi.Input[str] master_instance_type: Use the `master_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the master node. Cannot be specified if `master_instance_group` or `instance_group` configuration blocks are set.
        :param pulumi.Input[str] name: The name of the step.
        :param pulumi.Input[str] release_label: The release label for the Amazon EMR release
        :param pulumi.Input[str] scale_down_behavior: The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
        :param pulumi.Input[str] security_configuration: The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
        :param pulumi.Input[str] service_role: IAM role that will be assumed by the Amazon EMR service to access AWS resources
        :param pulumi.Input[float] step_concurrency_level: The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterStepArgs']]]] steps: List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: list of tags to apply to the EMR Cluster
        :param pulumi.Input[bool] termination_protection: Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
        :param pulumi.Input[bool] visible_to_all_users: Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['additional_info'] = additional_info
            __props__['applications'] = applications
            __props__['autoscaling_role'] = autoscaling_role
            __props__['bootstrap_actions'] = bootstrap_actions
            __props__['configurations'] = configurations
            __props__['configurations_json'] = configurations_json
            if core_instance_count is not None:
                warnings.warn("use `core_instance_group` configuration block `instance_count` argument instead", DeprecationWarning)
                pulumi.log.warn("core_instance_count is deprecated: use `core_instance_group` configuration block `instance_count` argument instead")
            __props__['core_instance_count'] = core_instance_count
            __props__['core_instance_group'] = core_instance_group
            if core_instance_type is not None:
                warnings.warn("use `core_instance_group` configuration block `instance_type` argument instead", DeprecationWarning)
                pulumi.log.warn("core_instance_type is deprecated: use `core_instance_group` configuration block `instance_type` argument instead")
            __props__['core_instance_type'] = core_instance_type
            __props__['custom_ami_id'] = custom_ami_id
            __props__['ebs_root_volume_size'] = ebs_root_volume_size
            __props__['ec2_attributes'] = ec2_attributes
            if instance_groups is not None:
                warnings.warn("use `master_instance_group` configuration block, `core_instance_group` configuration block, and `aws_emr_instance_group` resource(s) instead", DeprecationWarning)
                pulumi.log.warn("instance_groups is deprecated: use `master_instance_group` configuration block, `core_instance_group` configuration block, and `aws_emr_instance_group` resource(s) instead")
            __props__['instance_groups'] = instance_groups
            __props__['keep_job_flow_alive_when_no_steps'] = keep_job_flow_alive_when_no_steps
            __props__['kerberos_attributes'] = kerberos_attributes
            __props__['log_uri'] = log_uri
            __props__['master_instance_group'] = master_instance_group
            if master_instance_type is not None:
                warnings.warn("use `master_instance_group` configuration block `instance_type` argument instead", DeprecationWarning)
                pulumi.log.warn("master_instance_type is deprecated: use `master_instance_group` configuration block `instance_type` argument instead")
            __props__['master_instance_type'] = master_instance_type
            __props__['name'] = name
            if release_label is None:
                raise TypeError("Missing required property 'release_label'")
            __props__['release_label'] = release_label
            __props__['scale_down_behavior'] = scale_down_behavior
            __props__['security_configuration'] = security_configuration
            if service_role is None:
                raise TypeError("Missing required property 'service_role'")
            __props__['service_role'] = service_role
            __props__['step_concurrency_level'] = step_concurrency_level
            __props__['steps'] = steps
            __props__['tags'] = tags
            __props__['termination_protection'] = termination_protection
            __props__['visible_to_all_users'] = visible_to_all_users
            __props__['arn'] = None
            __props__['cluster_state'] = None
            __props__['master_public_dns'] = None
        super(Cluster, __self__).__init__(
            'aws:emr/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, additional_info: Optional[pulumi.Input[str]] = None, applications: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, arn: Optional[pulumi.Input[str]] = None, autoscaling_role: Optional[pulumi.Input[str]] = None, bootstrap_actions: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterBootstrapActionArgs']]]]] = None, cluster_state: Optional[pulumi.Input[str]] = None, configurations: Optional[pulumi.Input[str]] = None, configurations_json: Optional[pulumi.Input[str]] = None, core_instance_count: Optional[pulumi.Input[float]] = None, core_instance_group: Optional[pulumi.Input[pulumi.InputType['ClusterCoreInstanceGroupArgs']]] = None, core_instance_type: Optional[pulumi.Input[str]] = None, custom_ami_id: Optional[pulumi.Input[str]] = None, ebs_root_volume_size: Optional[pulumi.Input[float]] = None, ec2_attributes: Optional[pulumi.Input[pulumi.InputType['ClusterEc2AttributesArgs']]] = None, instance_groups: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterInstanceGroupArgs']]]]] = None, keep_job_flow_alive_when_no_steps: Optional[pulumi.Input[bool]] = None, kerberos_attributes: Optional[pulumi.Input[pulumi.InputType['ClusterKerberosAttributesArgs']]] = None, log_uri: Optional[pulumi.Input[str]] = None, master_instance_group: Optional[pulumi.Input[pulumi.InputType['ClusterMasterInstanceGroupArgs']]] = None, master_instance_type: Optional[pulumi.Input[str]] = None, master_public_dns: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, release_label: Optional[pulumi.Input[str]] = None, scale_down_behavior: Optional[pulumi.Input[str]] = None, security_configuration: Optional[pulumi.Input[str]] = None, service_role: Optional[pulumi.Input[str]] = None, step_concurrency_level: Optional[pulumi.Input[float]] = None, steps: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterStepArgs']]]]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, termination_protection: Optional[pulumi.Input[bool]] = None, visible_to_all_users: Optional[pulumi.Input[bool]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_info: A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
        :param pulumi.Input[List[pulumi.Input[str]]] applications: A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
        :param pulumi.Input[str] autoscaling_role: An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterBootstrapActionArgs']]]] bootstrap_actions: Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
        :param pulumi.Input[str] configurations: List of configurations supplied for the EMR cluster you are creating
        :param pulumi.Input[str] configurations_json: A JSON string for supplying list of configurations for the EMR cluster.
        :param pulumi.Input[float] core_instance_count: Use the `core_instance_group` configuration block `instance_count` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`core_instance_count`-1) as core nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set. Default `1`
        :param pulumi.Input[pulumi.InputType['ClusterCoreInstanceGroupArgs']] core_instance_group: Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `core_instance_count` argument, `core_instance_type` argument, or `instance_group` configuration blocks are set. Detailed below.
        :param pulumi.Input[str] core_instance_type: Use the `core_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `core_instance_group` or `instance_group` configuration blocks are set.
        :param pulumi.Input[str] custom_ami_id: A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
        :param pulumi.Input[float] ebs_root_volume_size: Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        :param pulumi.Input[pulumi.InputType['ClusterEc2AttributesArgs']] ec2_attributes: Attributes for the EC2 instances running the job flow. Defined below
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterInstanceGroupArgs']]]] instance_groups: Use the `master_instance_group` configuration block, `core_instance_group` configuration block and `emr.InstanceGroup` resource(s) instead. A list of `instance_group` objects for each instance group in the cluster. Exactly one of `master_instance_type` and `instance_group` must be specified. If `instance_group` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `master_instance_group` or `core_instance_group` configuration blocks are set. Defined below
        :param pulumi.Input[bool] keep_job_flow_alive_when_no_steps: Switch on/off run cluster with no steps or when all steps are complete (default is on)
        :param pulumi.Input[pulumi.InputType['ClusterKerberosAttributesArgs']] kerberos_attributes: Kerberos configuration for the cluster. Defined below
        :param pulumi.Input[str] log_uri: S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
        :param pulumi.Input[pulumi.InputType['ClusterMasterInstanceGroupArgs']] master_instance_group: Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `master_instance_type` argument or `instance_group` configuration blocks are set. Detailed below.
        :param pulumi.Input[str] master_instance_type: Use the `master_instance_group` configuration block `instance_type` argument instead. The EC2 instance type of the master node. Cannot be specified if `master_instance_group` or `instance_group` configuration blocks are set.
        :param pulumi.Input[str] master_public_dns: The public DNS name of the master EC2 instance.
               * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
        :param pulumi.Input[str] name: The name of the step.
        :param pulumi.Input[str] release_label: The release label for the Amazon EMR release
        :param pulumi.Input[str] scale_down_behavior: The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
        :param pulumi.Input[str] security_configuration: The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
        :param pulumi.Input[str] service_role: IAM role that will be assumed by the Amazon EMR service to access AWS resources
        :param pulumi.Input[float] step_concurrency_level: The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['ClusterStepArgs']]]] steps: List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: list of tags to apply to the EMR Cluster
        :param pulumi.Input[bool] termination_protection: Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
        :param pulumi.Input[bool] visible_to_all_users: Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["additional_info"] = additional_info
        __props__["applications"] = applications
        __props__["arn"] = arn
        __props__["autoscaling_role"] = autoscaling_role
        __props__["bootstrap_actions"] = bootstrap_actions
        __props__["cluster_state"] = cluster_state
        __props__["configurations"] = configurations
        __props__["configurations_json"] = configurations_json
        __props__["core_instance_count"] = core_instance_count
        __props__["core_instance_group"] = core_instance_group
        __props__["core_instance_type"] = core_instance_type
        __props__["custom_ami_id"] = custom_ami_id
        __props__["ebs_root_volume_size"] = ebs_root_volume_size
        __props__["ec2_attributes"] = ec2_attributes
        __props__["instance_groups"] = instance_groups
        __props__["keep_job_flow_alive_when_no_steps"] = keep_job_flow_alive_when_no_steps
        __props__["kerberos_attributes"] = kerberos_attributes
        __props__["log_uri"] = log_uri
        __props__["master_instance_group"] = master_instance_group
        __props__["master_instance_type"] = master_instance_type
        __props__["master_public_dns"] = master_public_dns
        __props__["name"] = name
        __props__["release_label"] = release_label
        __props__["scale_down_behavior"] = scale_down_behavior
        __props__["security_configuration"] = security_configuration
        __props__["service_role"] = service_role
        __props__["step_concurrency_level"] = step_concurrency_level
        __props__["steps"] = steps
        __props__["tags"] = tags
        __props__["termination_protection"] = termination_protection
        __props__["visible_to_all_users"] = visible_to_all_users
        return Cluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

