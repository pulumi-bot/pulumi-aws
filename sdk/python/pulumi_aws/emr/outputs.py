# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterBootstrapAction',
    'ClusterCoreInstanceGroup',
    'ClusterCoreInstanceGroupEbsConfig',
    'ClusterEc2Attributes',
    'ClusterInstanceGroup',
    'ClusterInstanceGroupEbsConfig',
    'ClusterKerberosAttributes',
    'ClusterMasterInstanceGroup',
    'ClusterMasterInstanceGroupEbsConfig',
    'ClusterStep',
    'ClusterStepHadoopJarStep',
    'InstanceGroupEbsConfig',
]

@pulumi.output_type
class ClusterBootstrapAction(dict):
    args: Optional[List[str]] = pulumi.output_property("args")
    """
    List of command line arguments passed to the JAR file's main function when executed.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the step.
    """
    path: str = pulumi.output_property("path")
    """
    Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterCoreInstanceGroup(dict):
    autoscaling_policy: Optional[str] = pulumi.output_property("autoscalingPolicy")
    """
    The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
    """
    bid_price: Optional[str] = pulumi.output_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[List['outputs.ClusterCoreInstanceGroupEbsConfig']] = pulumi.output_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[float] = pulumi.output_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the step.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterCoreInstanceGroupEbsConfig(dict):
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    size: float = pulumi.output_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: str = pulumi.output_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    volumes_per_instance: Optional[float] = pulumi.output_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterEc2Attributes(dict):
    additional_master_security_groups: Optional[str] = pulumi.output_property("additionalMasterSecurityGroups")
    """
    String containing a comma separated list of additional Amazon EC2 security group IDs for the master node
    """
    additional_slave_security_groups: Optional[str] = pulumi.output_property("additionalSlaveSecurityGroups")
    """
    String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string
    """
    emr_managed_master_security_group: Optional[str] = pulumi.output_property("emrManagedMasterSecurityGroup")
    """
    Identifier of the Amazon EC2 EMR-Managed security group for the master node
    """
    emr_managed_slave_security_group: Optional[str] = pulumi.output_property("emrManagedSlaveSecurityGroup")
    """
    Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes
    """
    instance_profile: str = pulumi.output_property("instanceProfile")
    """
    Instance Profile for EC2 instances of the cluster assume this role
    """
    key_name: Optional[str] = pulumi.output_property("keyName")
    """
    Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`
    """
    service_access_security_group: Optional[str] = pulumi.output_property("serviceAccessSecurityGroup")
    """
    Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in a Amazon VPC
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterInstanceGroup(dict):
    autoscaling_policy: Optional[str] = pulumi.output_property("autoscalingPolicy")
    """
    The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
    """
    bid_price: Optional[str] = pulumi.output_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[List['outputs.ClusterInstanceGroupEbsConfig']] = pulumi.output_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[float] = pulumi.output_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    instance_role: str = pulumi.output_property("instanceRole")
    """
    The role of the instance group in the cluster. Valid values are: `MASTER`, `CORE`, and `TASK`.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the step.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterInstanceGroupEbsConfig(dict):
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    size: float = pulumi.output_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: str = pulumi.output_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    volumes_per_instance: Optional[float] = pulumi.output_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterKerberosAttributes(dict):
    ad_domain_join_password: Optional[str] = pulumi.output_property("adDomainJoinPassword")
    """
    The Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
    """
    ad_domain_join_user: Optional[str] = pulumi.output_property("adDomainJoinUser")
    """
    Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
    """
    cross_realm_trust_principal_password: Optional[str] = pulumi.output_property("crossRealmTrustPrincipalPassword")
    """
    Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
    """
    kdc_admin_password: str = pulumi.output_property("kdcAdminPassword")
    """
    The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
    """
    realm: str = pulumi.output_property("realm")
    """
    The name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterInstanceGroup(dict):
    bid_price: Optional[str] = pulumi.output_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[List['outputs.ClusterMasterInstanceGroupEbsConfig']] = pulumi.output_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[float] = pulumi.output_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the step.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterInstanceGroupEbsConfig(dict):
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    size: float = pulumi.output_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: str = pulumi.output_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    volumes_per_instance: Optional[float] = pulumi.output_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterStep(dict):
    action_on_failure: str = pulumi.output_property("actionOnFailure")
    """
    The action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
    """
    hadoop_jar_step: 'outputs.ClusterStepHadoopJarStep' = pulumi.output_property("hadoopJarStep")
    """
    The JAR file used for the step. Defined below.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the step.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterStepHadoopJarStep(dict):
    args: Optional[List[str]] = pulumi.output_property("args")
    """
    List of command line arguments passed to the JAR file's main function when executed.
    """
    jar: str = pulumi.output_property("jar")
    """
    Path to a JAR file run during the step.
    """
    main_class: Optional[str] = pulumi.output_property("mainClass")
    """
    Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
    """
    properties: Optional[Dict[str, str]] = pulumi.output_property("properties")
    """
    Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupEbsConfig(dict):
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports.
    """
    size: float = pulumi.output_property("size")
    """
    The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
    """
    type: str = pulumi.output_property("type")
    """
    The volume type. Valid options are 'gp2', 'io1' and 'standard'.
    """
    volumes_per_instance: Optional[float] = pulumi.output_property("volumesPerInstance")
    """
    The number of EBS Volumes to attach per instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


