# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterBootstrapActionArgs',
    'ClusterCoreInstanceGroupArgs',
    'ClusterCoreInstanceGroupEbsConfigArgs',
    'ClusterEc2AttributesArgs',
    'ClusterInstanceGroupArgs',
    'ClusterInstanceGroupEbsConfigArgs',
    'ClusterKerberosAttributesArgs',
    'ClusterMasterInstanceGroupArgs',
    'ClusterMasterInstanceGroupEbsConfigArgs',
    'ClusterStepArgs',
    'ClusterStepHadoopJarStepArgs',
    'InstanceGroupEbsConfigArgs',
]

@pulumi.input_type
class ClusterBootstrapActionArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the step.
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    List of command line arguments passed to the JAR file's main function when executed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], path: pulumi.Input[str], args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the step.
        :param pulumi.Input[str] path: Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system
        :param pulumi.Input[List[pulumi.Input[str]]] args: List of command line arguments passed to the JAR file's main function when executed.
        """
        __self__.name = name
        __self__.path = path
        __self__.args = args

@pulumi.input_type
class ClusterCoreInstanceGroupArgs:
    instance_type: pulumi.Input[str] = pulumi.input_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    autoscaling_policy: Optional[pulumi.Input[str]] = pulumi.input_property("autoscalingPolicy")
    """
    The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
    """
    bid_price: Optional[pulumi.Input[str]] = pulumi.input_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterCoreInstanceGroupEbsConfigArgs']]]] = pulumi.input_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the step.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_type: pulumi.Input[str], autoscaling_policy: Optional[pulumi.Input[str]] = None, bid_price: Optional[pulumi.Input[str]] = None, ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterCoreInstanceGroupEbsConfigArgs']]]] = None, id: Optional[pulumi.Input[str]] = None, instance_count: Optional[pulumi.Input[float]] = None, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] instance_type: EC2 instance type for all instances in the instance group.
        :param pulumi.Input[str] autoscaling_policy: The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
        :param pulumi.Input[str] bid_price: Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
        :param pulumi.Input[List[pulumi.Input['ClusterCoreInstanceGroupEbsConfigArgs']]] ebs_configs: Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
        :param pulumi.Input[str] id: The ID of the EMR Cluster
        :param pulumi.Input[float] instance_count: Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
        :param pulumi.Input[str] name: The name of the step.
        """
        __self__.instance_type = instance_type
        __self__.autoscaling_policy = autoscaling_policy
        __self__.bid_price = bid_price
        __self__.ebs_configs = ebs_configs
        __self__.id = id
        __self__.instance_count = instance_count
        __self__.name = name

@pulumi.input_type
class ClusterCoreInstanceGroupEbsConfigArgs:
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    volumes_per_instance: Optional[pulumi.Input[float]] = pulumi.input_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, size: pulumi.Input[float], type: pulumi.Input[str], iops: Optional[pulumi.Input[float]] = None, volumes_per_instance: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] size: The volume size, in gibibytes (GiB).
        :param pulumi.Input[str] type: The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
        :param pulumi.Input[float] iops: The number of I/O operations per second (IOPS) that the volume supports
        :param pulumi.Input[float] volumes_per_instance: The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
        """
        __self__.size = size
        __self__.type = type
        __self__.iops = iops
        __self__.volumes_per_instance = volumes_per_instance

@pulumi.input_type
class ClusterEc2AttributesArgs:
    instance_profile: pulumi.Input[str] = pulumi.input_property("instanceProfile")
    """
    Instance Profile for EC2 instances of the cluster assume this role
    """
    additional_master_security_groups: Optional[pulumi.Input[str]] = pulumi.input_property("additionalMasterSecurityGroups")
    """
    String containing a comma separated list of additional Amazon EC2 security group IDs for the master node
    """
    additional_slave_security_groups: Optional[pulumi.Input[str]] = pulumi.input_property("additionalSlaveSecurityGroups")
    """
    String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string
    """
    emr_managed_master_security_group: Optional[pulumi.Input[str]] = pulumi.input_property("emrManagedMasterSecurityGroup")
    """
    Identifier of the Amazon EC2 EMR-Managed security group for the master node
    """
    emr_managed_slave_security_group: Optional[pulumi.Input[str]] = pulumi.input_property("emrManagedSlaveSecurityGroup")
    """
    Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes
    """
    key_name: Optional[pulumi.Input[str]] = pulumi.input_property("keyName")
    """
    Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`
    """
    service_access_security_group: Optional[pulumi.Input[str]] = pulumi.input_property("serviceAccessSecurityGroup")
    """
    Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in a Amazon VPC
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_profile: pulumi.Input[str], additional_master_security_groups: Optional[pulumi.Input[str]] = None, additional_slave_security_groups: Optional[pulumi.Input[str]] = None, emr_managed_master_security_group: Optional[pulumi.Input[str]] = None, emr_managed_slave_security_group: Optional[pulumi.Input[str]] = None, key_name: Optional[pulumi.Input[str]] = None, service_access_security_group: Optional[pulumi.Input[str]] = None, subnet_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] instance_profile: Instance Profile for EC2 instances of the cluster assume this role
        :param pulumi.Input[str] additional_master_security_groups: String containing a comma separated list of additional Amazon EC2 security group IDs for the master node
        :param pulumi.Input[str] additional_slave_security_groups: String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string
        :param pulumi.Input[str] emr_managed_master_security_group: Identifier of the Amazon EC2 EMR-Managed security group for the master node
        :param pulumi.Input[str] emr_managed_slave_security_group: Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes
        :param pulumi.Input[str] key_name: Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`
        :param pulumi.Input[str] service_access_security_group: Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet
        :param pulumi.Input[str] subnet_id: VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in a Amazon VPC
        """
        __self__.instance_profile = instance_profile
        __self__.additional_master_security_groups = additional_master_security_groups
        __self__.additional_slave_security_groups = additional_slave_security_groups
        __self__.emr_managed_master_security_group = emr_managed_master_security_group
        __self__.emr_managed_slave_security_group = emr_managed_slave_security_group
        __self__.key_name = key_name
        __self__.service_access_security_group = service_access_security_group
        __self__.subnet_id = subnet_id

@pulumi.input_type
class ClusterInstanceGroupArgs:
    instance_role: pulumi.Input[str] = pulumi.input_property("instanceRole")
    """
    The role of the instance group in the cluster. Valid values are: `MASTER`, `CORE`, and `TASK`.
    """
    instance_type: pulumi.Input[str] = pulumi.input_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    autoscaling_policy: Optional[pulumi.Input[str]] = pulumi.input_property("autoscalingPolicy")
    """
    The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
    """
    bid_price: Optional[pulumi.Input[str]] = pulumi.input_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterInstanceGroupEbsConfigArgs']]]] = pulumi.input_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the step.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_role: pulumi.Input[str], instance_type: pulumi.Input[str], autoscaling_policy: Optional[pulumi.Input[str]] = None, bid_price: Optional[pulumi.Input[str]] = None, ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterInstanceGroupEbsConfigArgs']]]] = None, id: Optional[pulumi.Input[str]] = None, instance_count: Optional[pulumi.Input[float]] = None, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] instance_role: The role of the instance group in the cluster. Valid values are: `MASTER`, `CORE`, and `TASK`.
        :param pulumi.Input[str] instance_type: EC2 instance type for all instances in the instance group.
        :param pulumi.Input[str] autoscaling_policy: The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
        :param pulumi.Input[str] bid_price: Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
        :param pulumi.Input[List[pulumi.Input['ClusterInstanceGroupEbsConfigArgs']]] ebs_configs: Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
        :param pulumi.Input[str] id: The ID of the EMR Cluster
        :param pulumi.Input[float] instance_count: Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
        :param pulumi.Input[str] name: The name of the step.
        """
        __self__.instance_role = instance_role
        __self__.instance_type = instance_type
        __self__.autoscaling_policy = autoscaling_policy
        __self__.bid_price = bid_price
        __self__.ebs_configs = ebs_configs
        __self__.id = id
        __self__.instance_count = instance_count
        __self__.name = name

@pulumi.input_type
class ClusterInstanceGroupEbsConfigArgs:
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    volumes_per_instance: Optional[pulumi.Input[float]] = pulumi.input_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, size: pulumi.Input[float], type: pulumi.Input[str], iops: Optional[pulumi.Input[float]] = None, volumes_per_instance: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] size: The volume size, in gibibytes (GiB).
        :param pulumi.Input[str] type: The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
        :param pulumi.Input[float] iops: The number of I/O operations per second (IOPS) that the volume supports
        :param pulumi.Input[float] volumes_per_instance: The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
        """
        __self__.size = size
        __self__.type = type
        __self__.iops = iops
        __self__.volumes_per_instance = volumes_per_instance

@pulumi.input_type
class ClusterKerberosAttributesArgs:
    kdc_admin_password: pulumi.Input[str] = pulumi.input_property("kdcAdminPassword")
    """
    The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
    """
    realm: pulumi.Input[str] = pulumi.input_property("realm")
    """
    The name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
    """
    ad_domain_join_password: Optional[pulumi.Input[str]] = pulumi.input_property("adDomainJoinPassword")
    """
    The Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
    """
    ad_domain_join_user: Optional[pulumi.Input[str]] = pulumi.input_property("adDomainJoinUser")
    """
    Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
    """
    cross_realm_trust_principal_password: Optional[pulumi.Input[str]] = pulumi.input_property("crossRealmTrustPrincipalPassword")
    """
    Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kdc_admin_password: pulumi.Input[str], realm: pulumi.Input[str], ad_domain_join_password: Optional[pulumi.Input[str]] = None, ad_domain_join_user: Optional[pulumi.Input[str]] = None, cross_realm_trust_principal_password: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] kdc_admin_password: The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] realm: The name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
        :param pulumi.Input[str] ad_domain_join_password: The Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] ad_domain_join_user: Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] cross_realm_trust_principal_password: Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
        """
        __self__.kdc_admin_password = kdc_admin_password
        __self__.realm = realm
        __self__.ad_domain_join_password = ad_domain_join_password
        __self__.ad_domain_join_user = ad_domain_join_user
        __self__.cross_realm_trust_principal_password = cross_realm_trust_principal_password

@pulumi.input_type
class ClusterMasterInstanceGroupArgs:
    instance_type: pulumi.Input[str] = pulumi.input_property("instanceType")
    """
    EC2 instance type for all instances in the instance group.
    """
    bid_price: Optional[pulumi.Input[str]] = pulumi.input_property("bidPrice")
    """
    Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
    """
    ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterMasterInstanceGroupEbsConfigArgs']]]] = pulumi.input_property("ebsConfigs")
    """
    Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the EMR Cluster
    """
    instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("instanceCount")
    """
    Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the step.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_type: pulumi.Input[str], bid_price: Optional[pulumi.Input[str]] = None, ebs_configs: Optional[pulumi.Input[List[pulumi.Input['ClusterMasterInstanceGroupEbsConfigArgs']]]] = None, id: Optional[pulumi.Input[str]] = None, instance_count: Optional[pulumi.Input[float]] = None, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] instance_type: EC2 instance type for all instances in the instance group.
        :param pulumi.Input[str] bid_price: Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
        :param pulumi.Input[List[pulumi.Input['ClusterMasterInstanceGroupEbsConfigArgs']]] ebs_configs: Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
        :param pulumi.Input[str] id: The ID of the EMR Cluster
        :param pulumi.Input[float] instance_count: Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `core_instance_group` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `termination_protection = false` configuration applied before destroying this resource.
        :param pulumi.Input[str] name: The name of the step.
        """
        __self__.instance_type = instance_type
        __self__.bid_price = bid_price
        __self__.ebs_configs = ebs_configs
        __self__.id = id
        __self__.instance_count = instance_count
        __self__.name = name

@pulumi.input_type
class ClusterMasterInstanceGroupEbsConfigArgs:
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The volume size, in gibibytes (GiB).
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports
    """
    volumes_per_instance: Optional[pulumi.Input[float]] = pulumi.input_property("volumesPerInstance")
    """
    The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, size: pulumi.Input[float], type: pulumi.Input[str], iops: Optional[pulumi.Input[float]] = None, volumes_per_instance: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] size: The volume size, in gibibytes (GiB).
        :param pulumi.Input[str] type: The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
        :param pulumi.Input[float] iops: The number of I/O operations per second (IOPS) that the volume supports
        :param pulumi.Input[float] volumes_per_instance: The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
        """
        __self__.size = size
        __self__.type = type
        __self__.iops = iops
        __self__.volumes_per_instance = volumes_per_instance

@pulumi.input_type
class ClusterStepArgs:
    action_on_failure: pulumi.Input[str] = pulumi.input_property("actionOnFailure")
    """
    The action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
    """
    hadoop_jar_step: pulumi.Input['ClusterStepHadoopJarStepArgs'] = pulumi.input_property("hadoopJarStep")
    """
    The JAR file used for the step. Defined below.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the step.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action_on_failure: pulumi.Input[str], hadoop_jar_step: pulumi.Input['ClusterStepHadoopJarStepArgs'], name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] action_on_failure: The action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
        :param pulumi.Input['ClusterStepHadoopJarStepArgs'] hadoop_jar_step: The JAR file used for the step. Defined below.
        :param pulumi.Input[str] name: The name of the step.
        """
        __self__.action_on_failure = action_on_failure
        __self__.hadoop_jar_step = hadoop_jar_step
        __self__.name = name

@pulumi.input_type
class ClusterStepHadoopJarStepArgs:
    jar: pulumi.Input[str] = pulumi.input_property("jar")
    """
    Path to a JAR file run during the step.
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    List of command line arguments passed to the JAR file's main function when executed.
    """
    main_class: Optional[pulumi.Input[str]] = pulumi.input_property("mainClass")
    """
    Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
    """
    properties: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("properties")
    """
    Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, jar: pulumi.Input[str], args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, main_class: Optional[pulumi.Input[str]] = None, properties: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] jar: Path to a JAR file run during the step.
        :param pulumi.Input[List[pulumi.Input[str]]] args: List of command line arguments passed to the JAR file's main function when executed.
        :param pulumi.Input[str] main_class: Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] properties: Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        """
        __self__.jar = jar
        __self__.args = args
        __self__.main_class = main_class
        __self__.properties = properties

@pulumi.input_type
class InstanceGroupEbsConfigArgs:
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The volume type. Valid options are 'gp2', 'io1' and 'standard'.
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    The number of I/O operations per second (IOPS) that the volume supports.
    """
    volumes_per_instance: Optional[pulumi.Input[float]] = pulumi.input_property("volumesPerInstance")
    """
    The number of EBS Volumes to attach per instance.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, size: pulumi.Input[float], type: pulumi.Input[str], iops: Optional[pulumi.Input[float]] = None, volumes_per_instance: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] size: The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        :param pulumi.Input[str] type: The volume type. Valid options are 'gp2', 'io1' and 'standard'.
        :param pulumi.Input[float] iops: The number of I/O operations per second (IOPS) that the volume supports.
        :param pulumi.Input[float] volumes_per_instance: The number of EBS Volumes to attach per instance.
        """
        __self__.size = size
        __self__.type = type
        __self__.iops = iops
        __self__.volumes_per_instance = volumes_per_instance

