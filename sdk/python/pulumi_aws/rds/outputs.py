# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterParameterGroupParameter',
    'ClusterS3Import',
    'ClusterScalingConfiguration',
    'InstanceS3Import',
    'OptionGroupOption',
    'OptionGroupOptionOptionSetting',
    'ParameterGroupParameter',
    'SecurityGroupIngress',
]

@pulumi.output_type
class ClusterParameterGroupParameter(dict):
    apply_method: Optional[str] = pulumi.output_property("applyMethod")
    """
    "immediate" (default), or "pending-reboot". Some
    engines can't apply some parameters without a reboot, and you will need to
    specify "pending-reboot" here.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the DB parameter.
    """
    value: str = pulumi.output_property("value")
    """
    The value of the DB parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterS3Import(dict):
    bucket_name: str = pulumi.output_property("bucketName")
    """
    The bucket name where your backup is stored
    """
    bucket_prefix: Optional[str] = pulumi.output_property("bucketPrefix")
    """
    Can be blank, but is the path to your backup
    """
    ingestion_role: str = pulumi.output_property("ingestionRole")
    """
    Role applied to load the data.
    """
    source_engine: str = pulumi.output_property("sourceEngine")
    """
    Source engine for the backup
    """
    source_engine_version: str = pulumi.output_property("sourceEngineVersion")
    """
    Version of the source engine used to make the backup
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterScalingConfiguration(dict):
    auto_pause: Optional[bool] = pulumi.output_property("autoPause")
    """
    Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
    """
    max_capacity: Optional[float] = pulumi.output_property("maxCapacity")
    """
    The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
    """
    min_capacity: Optional[float] = pulumi.output_property("minCapacity")
    """
    The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `2`.
    """
    seconds_until_auto_pause: Optional[float] = pulumi.output_property("secondsUntilAutoPause")
    """
    The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
    """
    timeout_action: Optional[str] = pulumi.output_property("timeoutAction")
    """
    The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceS3Import(dict):
    bucket_name: str = pulumi.output_property("bucketName")
    """
    The bucket name where your backup is stored
    """
    bucket_prefix: Optional[str] = pulumi.output_property("bucketPrefix")
    """
    Can be blank, but is the path to your backup
    """
    ingestion_role: str = pulumi.output_property("ingestionRole")
    """
    Role applied to load the data.
    """
    source_engine: str = pulumi.output_property("sourceEngine")
    """
    Source engine for the backup
    """
    source_engine_version: str = pulumi.output_property("sourceEngineVersion")
    """
    Version of the source engine used to make the backup
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OptionGroupOption(dict):
    db_security_group_memberships: Optional[List[str]] = pulumi.output_property("dbSecurityGroupMemberships")
    """
    A list of DB Security Groups for which the option is enabled.
    """
    option_name: str = pulumi.output_property("optionName")
    """
    The Name of the Option (e.g. MEMCACHED).
    """
    option_settings: Optional[List['outputs.OptionGroupOptionOptionSetting']] = pulumi.output_property("optionSettings")
    """
    A list of option settings to apply.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The Port number when connecting to the Option (e.g. 11211).
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    The version of the option (e.g. 13.1.0.0).
    """
    vpc_security_group_memberships: Optional[List[str]] = pulumi.output_property("vpcSecurityGroupMemberships")
    """
    A list of VPC Security Groups for which the option is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OptionGroupOptionOptionSetting(dict):
    name: str = pulumi.output_property("name")
    """
    The Name of the setting.
    """
    value: str = pulumi.output_property("value")
    """
    The Value of the setting.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ParameterGroupParameter(dict):
    apply_method: Optional[str] = pulumi.output_property("applyMethod")
    """
    "immediate" (default), or "pending-reboot". Some
    engines can't apply some parameters without a reboot, and you will need to
    specify "pending-reboot" here.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the DB parameter.
    """
    value: str = pulumi.output_property("value")
    """
    The value of the DB parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityGroupIngress(dict):
    cidr: Optional[str] = pulumi.output_property("cidr")
    """
    The CIDR block to accept
    """
    security_group_id: Optional[str] = pulumi.output_property("securityGroupId")
    """
    The ID of the security group to authorize
    """
    security_group_name: Optional[str] = pulumi.output_property("securityGroupName")
    """
    The name of the security group to authorize
    """
    security_group_owner_id: Optional[str] = pulumi.output_property("securityGroupOwnerId")
    """
    The owner Id of the security group provided
    by `security_group_name`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


