# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ListenerDefaultActionArgs',
    'ListenerDefaultActionAuthenticateCognitoArgs',
    'ListenerDefaultActionAuthenticateOidcArgs',
    'ListenerDefaultActionFixedResponseArgs',
    'ListenerDefaultActionForwardArgs',
    'ListenerDefaultActionForwardStickinessArgs',
    'ListenerDefaultActionForwardTargetGroupArgs',
    'ListenerDefaultActionRedirectArgs',
    'ListenerRuleActionArgs',
    'ListenerRuleActionAuthenticateCognitoArgs',
    'ListenerRuleActionAuthenticateOidcArgs',
    'ListenerRuleActionFixedResponseArgs',
    'ListenerRuleActionForwardArgs',
    'ListenerRuleActionForwardStickinessArgs',
    'ListenerRuleActionForwardTargetGroupArgs',
    'ListenerRuleActionRedirectArgs',
    'ListenerRuleConditionArgs',
    'ListenerRuleConditionHostHeaderArgs',
    'ListenerRuleConditionHttpHeaderArgs',
    'ListenerRuleConditionHttpRequestMethodArgs',
    'ListenerRuleConditionPathPatternArgs',
    'ListenerRuleConditionQueryStringArgs',
    'ListenerRuleConditionSourceIpArgs',
    'LoadBalancerAccessLogsArgs',
    'LoadBalancerSubnetMappingArgs',
    'TargetGroupHealthCheckArgs',
    'TargetGroupStickinessArgs',
]

@pulumi.input_type
class ListenerDefaultActionArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
    """
    authenticate_cognito: Optional[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs']] = pulumi.input_property("authenticateCognito")
    authenticate_oidc: Optional[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs']] = pulumi.input_property("authenticateOidc")
    fixed_response: Optional[pulumi.Input['ListenerDefaultActionFixedResponseArgs']] = pulumi.input_property("fixedResponse")
    """
    Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
    """
    forward: Optional[pulumi.Input['ListenerDefaultActionForwardArgs']] = pulumi.input_property("forward")
    """
    Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
    """
    order: Optional[pulumi.Input[float]] = pulumi.input_property("order")
    redirect: Optional[pulumi.Input['ListenerDefaultActionRedirectArgs']] = pulumi.input_property("redirect")
    """
    Information for creating a redirect action. Required if `type` is `redirect`.
    """
    target_group_arn: Optional[pulumi.Input[str]] = pulumi.input_property("targetGroupArn")
    """
    The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], authenticate_cognito: Optional[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs']] = None, authenticate_oidc: Optional[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs']] = None, fixed_response: Optional[pulumi.Input['ListenerDefaultActionFixedResponseArgs']] = None, forward: Optional[pulumi.Input['ListenerDefaultActionForwardArgs']] = None, order: Optional[pulumi.Input[float]] = None, redirect: Optional[pulumi.Input['ListenerDefaultActionRedirectArgs']] = None, target_group_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        :param pulumi.Input['ListenerDefaultActionFixedResponseArgs'] fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param pulumi.Input['ListenerDefaultActionForwardArgs'] forward: Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
        :param pulumi.Input['ListenerDefaultActionRedirectArgs'] redirect: Information for creating a redirect action. Required if `type` is `redirect`.
        :param pulumi.Input[str] target_group_arn: The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        __self__.type = type
        __self__.authenticate_cognito = authenticate_cognito
        __self__.authenticate_oidc = authenticate_oidc
        __self__.fixed_response = fixed_response
        __self__.forward = forward
        __self__.order = order
        __self__.redirect = redirect
        __self__.target_group_arn = target_group_arn

@pulumi.input_type
class ListenerDefaultActionAuthenticateCognitoArgs:
    user_pool_arn: pulumi.Input[str] = pulumi.input_property("userPoolArn")
    """
    The ARN of the Cognito user pool.
    """
    user_pool_client_id: pulumi.Input[str] = pulumi.input_property("userPoolClientId")
    """
    The ID of the Cognito user pool client.
    """
    user_pool_domain: pulumi.Input[str] = pulumi.input_property("userPoolDomain")
    """
    The domain prefix or fully-qualified domain name of the Cognito user pool.
    """
    authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[pulumi.Input[str]] = pulumi.input_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[pulumi.Input[str]] = pulumi.input_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[pulumi.Input[str]] = pulumi.input_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, user_pool_arn: pulumi.Input[str], user_pool_client_id: pulumi.Input[str], user_pool_domain: pulumi.Input[str], authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, on_unauthenticated_request: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[str]] = None, session_cookie_name: Optional[pulumi.Input[str]] = None, session_timeout: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] user_pool_arn: The ARN of the Cognito user pool.
        :param pulumi.Input[str] user_pool_client_id: The ID of the Cognito user pool client.
        :param pulumi.Input[str] user_pool_domain: The domain prefix or fully-qualified domain name of the Cognito user pool.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[float] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        __self__.user_pool_arn = user_pool_arn
        __self__.user_pool_client_id = user_pool_client_id
        __self__.user_pool_domain = user_pool_domain
        __self__.authentication_request_extra_params = authentication_request_extra_params
        __self__.on_unauthenticated_request = on_unauthenticated_request
        __self__.scope = scope
        __self__.session_cookie_name = session_cookie_name
        __self__.session_timeout = session_timeout

@pulumi.input_type
class ListenerDefaultActionAuthenticateOidcArgs:
    authorization_endpoint: pulumi.Input[str] = pulumi.input_property("authorizationEndpoint")
    """
    The authorization endpoint of the IdP.
    """
    client_id: pulumi.Input[str] = pulumi.input_property("clientId")
    """
    The OAuth 2.0 client identifier.
    """
    client_secret: pulumi.Input[str] = pulumi.input_property("clientSecret")
    """
    The OAuth 2.0 client secret.
    """
    issuer: pulumi.Input[str] = pulumi.input_property("issuer")
    """
    The OIDC issuer identifier of the IdP.
    """
    token_endpoint: pulumi.Input[str] = pulumi.input_property("tokenEndpoint")
    """
    The token endpoint of the IdP.
    """
    user_info_endpoint: pulumi.Input[str] = pulumi.input_property("userInfoEndpoint")
    """
    The user info endpoint of the IdP.
    """
    authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[pulumi.Input[str]] = pulumi.input_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[pulumi.Input[str]] = pulumi.input_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[pulumi.Input[str]] = pulumi.input_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, authorization_endpoint: pulumi.Input[str], client_id: pulumi.Input[str], client_secret: pulumi.Input[str], issuer: pulumi.Input[str], token_endpoint: pulumi.Input[str], user_info_endpoint: pulumi.Input[str], authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, on_unauthenticated_request: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[str]] = None, session_cookie_name: Optional[pulumi.Input[str]] = None, session_timeout: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] authorization_endpoint: The authorization endpoint of the IdP.
        :param pulumi.Input[str] client_id: The OAuth 2.0 client identifier.
        :param pulumi.Input[str] client_secret: The OAuth 2.0 client secret.
        :param pulumi.Input[str] issuer: The OIDC issuer identifier of the IdP.
        :param pulumi.Input[str] token_endpoint: The token endpoint of the IdP.
        :param pulumi.Input[str] user_info_endpoint: The user info endpoint of the IdP.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[float] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        __self__.authorization_endpoint = authorization_endpoint
        __self__.client_id = client_id
        __self__.client_secret = client_secret
        __self__.issuer = issuer
        __self__.token_endpoint = token_endpoint
        __self__.user_info_endpoint = user_info_endpoint
        __self__.authentication_request_extra_params = authentication_request_extra_params
        __self__.on_unauthenticated_request = on_unauthenticated_request
        __self__.scope = scope
        __self__.session_cookie_name = session_cookie_name
        __self__.session_timeout = session_timeout

@pulumi.input_type
class ListenerDefaultActionFixedResponseArgs:
    content_type: pulumi.Input[str] = pulumi.input_property("contentType")
    """
    The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
    """
    message_body: Optional[pulumi.Input[str]] = pulumi.input_property("messageBody")
    """
    The message body.
    """
    status_code: Optional[pulumi.Input[str]] = pulumi.input_property("statusCode")
    """
    The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, content_type: pulumi.Input[str], message_body: Optional[pulumi.Input[str]] = None, status_code: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] content_type: The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        :param pulumi.Input[str] message_body: The message body.
        :param pulumi.Input[str] status_code: The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        __self__.content_type = content_type
        __self__.message_body = message_body
        __self__.status_code = status_code

@pulumi.input_type
class ListenerDefaultActionForwardArgs:
    target_groups: pulumi.Input[List[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]] = pulumi.input_property("targetGroups")
    """
    One or more target groups block.
    """
    stickiness: Optional[pulumi.Input['ListenerDefaultActionForwardStickinessArgs']] = pulumi.input_property("stickiness")
    """
    The target group stickiness for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_groups: pulumi.Input[List[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]], stickiness: Optional[pulumi.Input['ListenerDefaultActionForwardStickinessArgs']] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]] target_groups: One or more target groups block.
        :param pulumi.Input['ListenerDefaultActionForwardStickinessArgs'] stickiness: The target group stickiness for the rule.
        """
        __self__.target_groups = target_groups
        __self__.stickiness = stickiness

@pulumi.input_type
class ListenerDefaultActionForwardStickinessArgs:
    duration: pulumi.Input[float] = pulumi.input_property("duration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether target group stickiness is enabled.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, duration: pulumi.Input[float], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[float] duration: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        :param pulumi.Input[bool] enabled: Indicates whether target group stickiness is enabled.
        """
        __self__.duration = duration
        __self__.enabled = enabled

@pulumi.input_type
class ListenerDefaultActionForwardTargetGroupArgs:
    arn: pulumi.Input[str] = pulumi.input_property("arn")
    """
    The Amazon Resource Name (ARN) of the target group.
    """
    weight: Optional[pulumi.Input[float]] = pulumi.input_property("weight")
    """
    The weight. The range is 0 to 999.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, arn: pulumi.Input[str], weight: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the target group.
        :param pulumi.Input[float] weight: The weight. The range is 0 to 999.
        """
        __self__.arn = arn
        __self__.weight = weight

@pulumi.input_type
class ListenerDefaultActionRedirectArgs:
    status_code: pulumi.Input[str] = pulumi.input_property("statusCode")
    """
    The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
    """
    port: Optional[pulumi.Input[str]] = pulumi.input_property("port")
    """
    The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
    """
    query: Optional[pulumi.Input[str]] = pulumi.input_property("query")
    """
    The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status_code: pulumi.Input[str], host: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None, query: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] status_code: The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        :param pulumi.Input[str] host: The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param pulumi.Input[str] path: The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param pulumi.Input[str] port: The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param pulumi.Input[str] protocol: The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param pulumi.Input[str] query: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        __self__.status_code = status_code
        __self__.host = host
        __self__.path = path
        __self__.port = port
        __self__.protocol = protocol
        __self__.query = query

@pulumi.input_type
class ListenerRuleActionArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
    """
    authenticate_cognito: Optional[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs']] = pulumi.input_property("authenticateCognito")
    """
    Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
    """
    authenticate_oidc: Optional[pulumi.Input['ListenerRuleActionAuthenticateOidcArgs']] = pulumi.input_property("authenticateOidc")
    """
    Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
    """
    fixed_response: Optional[pulumi.Input['ListenerRuleActionFixedResponseArgs']] = pulumi.input_property("fixedResponse")
    """
    Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
    """
    forward: Optional[pulumi.Input['ListenerRuleActionForwardArgs']] = pulumi.input_property("forward")
    """
    Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
    """
    order: Optional[pulumi.Input[float]] = pulumi.input_property("order")
    redirect: Optional[pulumi.Input['ListenerRuleActionRedirectArgs']] = pulumi.input_property("redirect")
    """
    Information for creating a redirect action. Required if `type` is `redirect`.
    """
    target_group_arn: Optional[pulumi.Input[str]] = pulumi.input_property("targetGroupArn")
    """
    The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], authenticate_cognito: Optional[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs']] = None, authenticate_oidc: Optional[pulumi.Input['ListenerRuleActionAuthenticateOidcArgs']] = None, fixed_response: Optional[pulumi.Input['ListenerRuleActionFixedResponseArgs']] = None, forward: Optional[pulumi.Input['ListenerRuleActionForwardArgs']] = None, order: Optional[pulumi.Input[float]] = None, redirect: Optional[pulumi.Input['ListenerRuleActionRedirectArgs']] = None, target_group_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        :param pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs'] authenticate_cognito: Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        :param pulumi.Input['ListenerRuleActionAuthenticateOidcArgs'] authenticate_oidc: Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        :param pulumi.Input['ListenerRuleActionFixedResponseArgs'] fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param pulumi.Input['ListenerRuleActionForwardArgs'] forward: Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
        :param pulumi.Input['ListenerRuleActionRedirectArgs'] redirect: Information for creating a redirect action. Required if `type` is `redirect`.
        :param pulumi.Input[str] target_group_arn: The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        __self__.type = type
        __self__.authenticate_cognito = authenticate_cognito
        __self__.authenticate_oidc = authenticate_oidc
        __self__.fixed_response = fixed_response
        __self__.forward = forward
        __self__.order = order
        __self__.redirect = redirect
        __self__.target_group_arn = target_group_arn

@pulumi.input_type
class ListenerRuleActionAuthenticateCognitoArgs:
    user_pool_arn: pulumi.Input[str] = pulumi.input_property("userPoolArn")
    """
    The ARN of the Cognito user pool.
    """
    user_pool_client_id: pulumi.Input[str] = pulumi.input_property("userPoolClientId")
    """
    The ID of the Cognito user pool client.
    """
    user_pool_domain: pulumi.Input[str] = pulumi.input_property("userPoolDomain")
    """
    The domain prefix or fully-qualified domain name of the Cognito user pool.
    """
    authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[pulumi.Input[str]] = pulumi.input_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[pulumi.Input[str]] = pulumi.input_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[pulumi.Input[str]] = pulumi.input_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, user_pool_arn: pulumi.Input[str], user_pool_client_id: pulumi.Input[str], user_pool_domain: pulumi.Input[str], authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, on_unauthenticated_request: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[str]] = None, session_cookie_name: Optional[pulumi.Input[str]] = None, session_timeout: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] user_pool_arn: The ARN of the Cognito user pool.
        :param pulumi.Input[str] user_pool_client_id: The ID of the Cognito user pool client.
        :param pulumi.Input[str] user_pool_domain: The domain prefix or fully-qualified domain name of the Cognito user pool.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[float] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        __self__.user_pool_arn = user_pool_arn
        __self__.user_pool_client_id = user_pool_client_id
        __self__.user_pool_domain = user_pool_domain
        __self__.authentication_request_extra_params = authentication_request_extra_params
        __self__.on_unauthenticated_request = on_unauthenticated_request
        __self__.scope = scope
        __self__.session_cookie_name = session_cookie_name
        __self__.session_timeout = session_timeout

@pulumi.input_type
class ListenerRuleActionAuthenticateOidcArgs:
    authorization_endpoint: pulumi.Input[str] = pulumi.input_property("authorizationEndpoint")
    """
    The authorization endpoint of the IdP.
    """
    client_id: pulumi.Input[str] = pulumi.input_property("clientId")
    """
    The OAuth 2.0 client identifier.
    """
    client_secret: pulumi.Input[str] = pulumi.input_property("clientSecret")
    """
    The OAuth 2.0 client secret.
    """
    issuer: pulumi.Input[str] = pulumi.input_property("issuer")
    """
    The OIDC issuer identifier of the IdP.
    """
    token_endpoint: pulumi.Input[str] = pulumi.input_property("tokenEndpoint")
    """
    The token endpoint of the IdP.
    """
    user_info_endpoint: pulumi.Input[str] = pulumi.input_property("userInfoEndpoint")
    """
    The user info endpoint of the IdP.
    """
    authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("authenticationRequestExtraParams")
    """
    The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    """
    on_unauthenticated_request: Optional[pulumi.Input[str]] = pulumi.input_property("onUnauthenticatedRequest")
    """
    The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
    """
    scope: Optional[pulumi.Input[str]] = pulumi.input_property("scope")
    """
    The set of user claims to be requested from the IdP.
    """
    session_cookie_name: Optional[pulumi.Input[str]] = pulumi.input_property("sessionCookieName")
    """
    The name of the cookie used to maintain session information.
    """
    session_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("sessionTimeout")
    """
    The maximum duration of the authentication session, in seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, authorization_endpoint: pulumi.Input[str], client_id: pulumi.Input[str], client_secret: pulumi.Input[str], issuer: pulumi.Input[str], token_endpoint: pulumi.Input[str], user_info_endpoint: pulumi.Input[str], authentication_request_extra_params: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, on_unauthenticated_request: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[str]] = None, session_cookie_name: Optional[pulumi.Input[str]] = None, session_timeout: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] authorization_endpoint: The authorization endpoint of the IdP.
        :param pulumi.Input[str] client_id: The OAuth 2.0 client identifier.
        :param pulumi.Input[str] client_secret: The OAuth 2.0 client secret.
        :param pulumi.Input[str] issuer: The OIDC issuer identifier of the IdP.
        :param pulumi.Input[str] token_endpoint: The token endpoint of the IdP.
        :param pulumi.Input[str] user_info_endpoint: The user info endpoint of the IdP.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[float] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        __self__.authorization_endpoint = authorization_endpoint
        __self__.client_id = client_id
        __self__.client_secret = client_secret
        __self__.issuer = issuer
        __self__.token_endpoint = token_endpoint
        __self__.user_info_endpoint = user_info_endpoint
        __self__.authentication_request_extra_params = authentication_request_extra_params
        __self__.on_unauthenticated_request = on_unauthenticated_request
        __self__.scope = scope
        __self__.session_cookie_name = session_cookie_name
        __self__.session_timeout = session_timeout

@pulumi.input_type
class ListenerRuleActionFixedResponseArgs:
    content_type: pulumi.Input[str] = pulumi.input_property("contentType")
    """
    The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
    """
    message_body: Optional[pulumi.Input[str]] = pulumi.input_property("messageBody")
    """
    The message body.
    """
    status_code: Optional[pulumi.Input[str]] = pulumi.input_property("statusCode")
    """
    The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, content_type: pulumi.Input[str], message_body: Optional[pulumi.Input[str]] = None, status_code: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] content_type: The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        :param pulumi.Input[str] message_body: The message body.
        :param pulumi.Input[str] status_code: The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        __self__.content_type = content_type
        __self__.message_body = message_body
        __self__.status_code = status_code

@pulumi.input_type
class ListenerRuleActionForwardArgs:
    target_groups: pulumi.Input[List[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]] = pulumi.input_property("targetGroups")
    """
    One or more target groups block.
    """
    stickiness: Optional[pulumi.Input['ListenerRuleActionForwardStickinessArgs']] = pulumi.input_property("stickiness")
    """
    The target group stickiness for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_groups: pulumi.Input[List[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]], stickiness: Optional[pulumi.Input['ListenerRuleActionForwardStickinessArgs']] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]] target_groups: One or more target groups block.
        :param pulumi.Input['ListenerRuleActionForwardStickinessArgs'] stickiness: The target group stickiness for the rule.
        """
        __self__.target_groups = target_groups
        __self__.stickiness = stickiness

@pulumi.input_type
class ListenerRuleActionForwardStickinessArgs:
    duration: pulumi.Input[float] = pulumi.input_property("duration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether target group stickiness is enabled.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, duration: pulumi.Input[float], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[float] duration: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        :param pulumi.Input[bool] enabled: Indicates whether target group stickiness is enabled.
        """
        __self__.duration = duration
        __self__.enabled = enabled

@pulumi.input_type
class ListenerRuleActionForwardTargetGroupArgs:
    arn: pulumi.Input[str] = pulumi.input_property("arn")
    """
    The Amazon Resource Name (ARN) of the target group.
    """
    weight: Optional[pulumi.Input[float]] = pulumi.input_property("weight")
    """
    The weight. The range is 0 to 999.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, arn: pulumi.Input[str], weight: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the target group.
        :param pulumi.Input[float] weight: The weight. The range is 0 to 999.
        """
        __self__.arn = arn
        __self__.weight = weight

@pulumi.input_type
class ListenerRuleActionRedirectArgs:
    status_code: pulumi.Input[str] = pulumi.input_property("statusCode")
    """
    The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
    """
    port: Optional[pulumi.Input[str]] = pulumi.input_property("port")
    """
    The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
    """
    query: Optional[pulumi.Input[str]] = pulumi.input_property("query")
    """
    The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status_code: pulumi.Input[str], host: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None, query: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] status_code: The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        :param pulumi.Input[str] host: The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param pulumi.Input[str] path: The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param pulumi.Input[str] port: The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param pulumi.Input[str] protocol: The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param pulumi.Input[str] query: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        __self__.status_code = status_code
        __self__.host = host
        __self__.path = path
        __self__.port = port
        __self__.protocol = protocol
        __self__.query = query

@pulumi.input_type
class ListenerRuleConditionArgs:
    field: Optional[pulumi.Input[str]] = pulumi.input_property("field")
    """
    The type of condition. Valid values are `host-header` or `path-pattern`. Must also set `values`.
    """
    host_header: Optional[pulumi.Input['ListenerRuleConditionHostHeaderArgs']] = pulumi.input_property("hostHeader")
    """
    Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
    """
    http_header: Optional[pulumi.Input['ListenerRuleConditionHttpHeaderArgs']] = pulumi.input_property("httpHeader")
    """
    HTTP headers to match. HTTP Header block fields documented below.
    """
    http_request_method: Optional[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs']] = pulumi.input_property("httpRequestMethod")
    """
    Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
    """
    path_pattern: Optional[pulumi.Input['ListenerRuleConditionPathPatternArgs']] = pulumi.input_property("pathPattern")
    """
    Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
    """
    query_strings: Optional[pulumi.Input[List[pulumi.Input['ListenerRuleConditionQueryStringArgs']]]] = pulumi.input_property("queryStrings")
    """
    Query strings to match. Query String block fields documented below.
    """
    source_ip: Optional[pulumi.Input['ListenerRuleConditionSourceIpArgs']] = pulumi.input_property("sourceIp")
    """
    Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
    """
    values: Optional[pulumi.Input[str]] = pulumi.input_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, field: Optional[pulumi.Input[str]] = None, host_header: Optional[pulumi.Input['ListenerRuleConditionHostHeaderArgs']] = None, http_header: Optional[pulumi.Input['ListenerRuleConditionHttpHeaderArgs']] = None, http_request_method: Optional[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs']] = None, path_pattern: Optional[pulumi.Input['ListenerRuleConditionPathPatternArgs']] = None, query_strings: Optional[pulumi.Input[List[pulumi.Input['ListenerRuleConditionQueryStringArgs']]]] = None, source_ip: Optional[pulumi.Input['ListenerRuleConditionSourceIpArgs']] = None, values: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] field: The type of condition. Valid values are `host-header` or `path-pattern`. Must also set `values`.
        :param pulumi.Input['ListenerRuleConditionHostHeaderArgs'] host_header: Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        :param pulumi.Input['ListenerRuleConditionHttpHeaderArgs'] http_header: HTTP headers to match. HTTP Header block fields documented below.
        :param pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs'] http_request_method: Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        :param pulumi.Input['ListenerRuleConditionPathPatternArgs'] path_pattern: Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        :param pulumi.Input[List[pulumi.Input['ListenerRuleConditionQueryStringArgs']]] query_strings: Query strings to match. Query String block fields documented below.
        :param pulumi.Input['ListenerRuleConditionSourceIpArgs'] source_ip: Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
        :param pulumi.Input[str] values: List of exactly one pattern to match. Required when `field` is set.
        """
        if field is not None:
            warnings.warn("use 'host_header' or 'path_pattern' attribute instead", DeprecationWarning)
            pulumi.log.warn("field is deprecated: use 'host_header' or 'path_pattern' attribute instead")
        __self__.field = field
        __self__.host_header = host_header
        __self__.http_header = http_header
        __self__.http_request_method = http_request_method
        __self__.path_pattern = path_pattern
        __self__.query_strings = query_strings
        __self__.source_ip = source_ip
        if values is not None:
            warnings.warn("use 'host_header' or 'path_pattern' attribute instead", DeprecationWarning)
            pulumi.log.warn("values is deprecated: use 'host_header' or 'path_pattern' attribute instead")
        __self__.values = values

@pulumi.input_type
class ListenerRuleConditionHostHeaderArgs:
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] values: List of exactly one pattern to match. Required when `field` is set.
        """
        __self__.values = values

@pulumi.input_type
class ListenerRuleConditionHttpHeaderArgs:
    http_header_name: pulumi.Input[str] = pulumi.input_property("httpHeaderName")
    """
    Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, http_header_name: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] http_header_name: Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        :param pulumi.Input[List[pulumi.Input[str]]] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        __self__.http_header_name = http_header_name
        __self__.values = values

@pulumi.input_type
class ListenerRuleConditionHttpRequestMethodArgs:
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] values: List of exactly one pattern to match. Required when `field` is set.
        """
        __self__.values = values

@pulumi.input_type
class ListenerRuleConditionPathPatternArgs:
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] values: List of exactly one pattern to match. Required when `field` is set.
        """
        __self__.values = values

@pulumi.input_type
class ListenerRuleConditionQueryStringArgs:
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    Query string value pattern to match.
    """
    key: Optional[pulumi.Input[str]] = pulumi.input_property("key")
    """
    Query string key pattern to match.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, value: pulumi.Input[str], key: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] value: Query string value pattern to match.
        :param pulumi.Input[str] key: Query string key pattern to match.
        """
        __self__.value = value
        __self__.key = key

@pulumi.input_type
class ListenerRuleConditionSourceIpArgs:
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    List of exactly one pattern to match. Required when `field` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] values: List of exactly one pattern to match. Required when `field` is set.
        """
        __self__.values = values

@pulumi.input_type
class LoadBalancerAccessLogsArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    The S3 bucket name to store the logs in.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The S3 bucket prefix. Logs are stored in the root if not configured.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None, prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket: The S3 bucket name to store the logs in.
        :param pulumi.Input[bool] enabled: Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        :param pulumi.Input[str] prefix: The S3 bucket prefix. Logs are stored in the root if not configured.
        """
        __self__.bucket = bucket
        __self__.enabled = enabled
        __self__.prefix = prefix

@pulumi.input_type
class LoadBalancerSubnetMappingArgs:
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
    """
    allocation_id: Optional[pulumi.Input[str]] = pulumi.input_property("allocationId")
    """
    The allocation ID of the Elastic IP address.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, subnet_id: pulumi.Input[str], allocation_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] subnet_id: The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        :param pulumi.Input[str] allocation_id: The allocation ID of the Elastic IP address.
        """
        __self__.subnet_id = subnet_id
        __self__.allocation_id = allocation_id

@pulumi.input_type
class TargetGroupHealthCheckArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Boolean to enable / disable `stickiness`. Default is `true`
    """
    healthy_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("healthyThreshold")
    """
    The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
    """
    interval: Optional[pulumi.Input[float]] = pulumi.input_property("interval")
    """
    The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
    """
    matcher: Optional[pulumi.Input[str]] = pulumi.input_property("matcher")
    """
    The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
    """
    port: Optional[pulumi.Input[str]] = pulumi.input_property("port")
    """
    The port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    The protocol to use for routing traffic to the targets. Should be one of "TCP", "TLS", "UDP", "TCP_UDP", "HTTP" or "HTTPS". Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
    """
    timeout: Optional[pulumi.Input[float]] = pulumi.input_property("timeout")
    """
    The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
    """
    unhealthy_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("unhealthyThreshold")
    """
    The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthy_threshold`. Defaults to 3.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, healthy_threshold: Optional[pulumi.Input[float]] = None, interval: Optional[pulumi.Input[float]] = None, matcher: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None, timeout: Optional[pulumi.Input[float]] = None, unhealthy_threshold: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Boolean to enable / disable `stickiness`. Default is `true`
        :param pulumi.Input[float] healthy_threshold: The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
        :param pulumi.Input[float] interval: The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
        :param pulumi.Input[str] matcher: The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
        :param pulumi.Input[str] path: The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
        :param pulumi.Input[str] port: The port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
        :param pulumi.Input[str] protocol: The protocol to use for routing traffic to the targets. Should be one of "TCP", "TLS", "UDP", "TCP_UDP", "HTTP" or "HTTPS". Required when `target_type` is `instance` or `ip`. Does not apply when `target_type` is `lambda`.
        :param pulumi.Input[float] timeout: The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
        :param pulumi.Input[float] unhealthy_threshold: The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthy_threshold`. Defaults to 3.
        """
        __self__.enabled = enabled
        __self__.healthy_threshold = healthy_threshold
        __self__.interval = interval
        __self__.matcher = matcher
        __self__.path = path
        __self__.port = port
        __self__.protocol = protocol
        __self__.timeout = timeout
        __self__.unhealthy_threshold = unhealthy_threshold

@pulumi.input_type
class TargetGroupStickinessArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of sticky sessions. The only current possible value is `lb_cookie`.
    """
    cookie_duration: Optional[pulumi.Input[float]] = pulumi.input_property("cookieDuration")
    """
    The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether  health checks are enabled. Defaults to true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], cookie_duration: Optional[pulumi.Input[float]] = None, enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of sticky sessions. The only current possible value is `lb_cookie`.
        :param pulumi.Input[float] cookie_duration: The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        :param pulumi.Input[bool] enabled: Indicates whether  health checks are enabled. Defaults to true.
        """
        __self__.type = type
        __self__.cookie_duration = cookie_duration
        __self__.enabled = enabled

