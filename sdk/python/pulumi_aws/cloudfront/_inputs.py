# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DistributionCustomErrorResponseArgs',
    'DistributionDefaultCacheBehaviorArgs',
    'DistributionDefaultCacheBehaviorForwardedValuesArgs',
    'DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs',
    'DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs',
    'DistributionLoggingConfigArgs',
    'DistributionOrderedCacheBehaviorArgs',
    'DistributionOrderedCacheBehaviorForwardedValuesArgs',
    'DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs',
    'DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs',
    'DistributionOriginArgs',
    'DistributionOriginCustomHeaderArgs',
    'DistributionOriginCustomOriginConfigArgs',
    'DistributionOriginGroupArgs',
    'DistributionOriginGroupFailoverCriteriaArgs',
    'DistributionOriginGroupMemberArgs',
    'DistributionOriginS3OriginConfigArgs',
    'DistributionRestrictionsArgs',
    'DistributionRestrictionsGeoRestrictionArgs',
    'DistributionViewerCertificateArgs',
]

@pulumi.input_type
class DistributionCustomErrorResponseArgs:
    def __init__(__self__, *,
                 error_code: pulumi.Input[float],
                 error_caching_min_ttl: Optional[pulumi.Input[float]] = None,
                 response_code: Optional[pulumi.Input[float]] = None,
                 response_page_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] error_code: The 4xx or 5xx HTTP status code that you want to
               customize.
        :param pulumi.Input[float] error_caching_min_ttl: The minimum amount of time you want
               HTTP error codes to stay in CloudFront caches before CloudFront queries your
               origin to see whether the object has been updated.
        :param pulumi.Input[float] response_code: The HTTP status code that you want CloudFront
               to return with the custom error page to the viewer.
        :param pulumi.Input[str] response_page_path: The path of the custom error page (for
               example, `/custom_404.html`).
        """
        pulumi.set(__self__, "errorCode", error_code)
        pulumi.set(__self__, "errorCachingMinTtl", error_caching_min_ttl)
        pulumi.set(__self__, "responseCode", response_code)
        pulumi.set(__self__, "responsePagePath", response_page_path)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> pulumi.Input[float]:
        """
        The 4xx or 5xx HTTP status code that you want to
        customize.
        """
        ...

    @error_code.setter
    def error_code(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="errorCachingMinTtl")
    def error_caching_min_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum amount of time you want
        HTTP error codes to stay in CloudFront caches before CloudFront queries your
        origin to see whether the object has been updated.
        """
        ...

    @error_caching_min_ttl.setter
    def error_caching_min_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status code that you want CloudFront
        to return with the custom error page to the viewer.
        """
        ...

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="responsePagePath")
    def response_page_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of the custom error page (for
        example, `/custom_404.html`).
        """
        ...

    @response_page_path.setter
    def response_page_path(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DistributionDefaultCacheBehaviorArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[List[pulumi.Input[str]]],
                 cached_methods: pulumi.Input[List[pulumi.Input[str]]],
                 forwarded_values: pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesArgs'],
                 target_origin_id: pulumi.Input[str],
                 viewer_protocol_policy: pulumi.Input[str],
                 compress: Optional[pulumi.Input[bool]] = None,
                 default_ttl: Optional[pulumi.Input[float]] = None,
                 field_level_encryption_id: Optional[pulumi.Input[str]] = None,
                 lambda_function_associations: Optional[pulumi.Input[List[pulumi.Input['DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]] = None,
                 max_ttl: Optional[pulumi.Input[float]] = None,
                 min_ttl: Optional[pulumi.Input[float]] = None,
                 smooth_streaming: Optional[pulumi.Input[bool]] = None,
                 trusted_signers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_methods: Controls which HTTP methods CloudFront
               processes and forwards to your Amazon S3 bucket or your custom origin.
        :param pulumi.Input[List[pulumi.Input[str]]] cached_methods: Controls whether CloudFront caches the
               response to requests using the specified HTTP methods.
        :param pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesArgs'] forwarded_values: The forwarded values configuration that specifies how CloudFront
               handles query strings, cookies and headers (maximum one).
        :param pulumi.Input[str] target_origin_id: The value of ID for the origin that you want
               CloudFront to route requests to when a request matches the path pattern
               either for a cache behavior or for the default cache behavior.
        :param pulumi.Input[str] viewer_protocol_policy: Use this element to specify the
               protocol that users can use to access the files in the origin specified by
               TargetOriginId when a request matches the path pattern in PathPattern. One
               of `allow-all`, `https-only`, or `redirect-to-https`.
        :param pulumi.Input[bool] compress: Whether you want CloudFront to automatically
               compress content for web requests that include `Accept-Encoding: gzip` in
               the request header (default: `false`).
        :param pulumi.Input[float] default_ttl: The default amount of time (in seconds) that an
               object is in a CloudFront cache before CloudFront forwards another request
               in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
               1 day.
        :param pulumi.Input[str] field_level_encryption_id: Field level encryption configuration ID
        :param pulumi.Input[List[pulumi.Input['DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]] lambda_function_associations: A config block that triggers a lambda function with
               specific actions. Defined below, maximum 4.
        :param pulumi.Input[float] max_ttl: The maximum amount of time (in seconds) that an
               object is in a CloudFront cache before CloudFront forwards another request
               to your origin to determine whether the object has been updated. Only
               effective in the presence of `Cache-Control max-age`, `Cache-Control
               s-maxage`, and `Expires` headers. Defaults to 365 days.
        :param pulumi.Input[float] min_ttl: The minimum amount of time that you want objects to
               stay in CloudFront caches before CloudFront queries your origin to see
               whether the object has been updated. Defaults to 0 seconds.
        :param pulumi.Input[bool] smooth_streaming: Indicates whether you want to distribute
               media files in Microsoft Smooth Streaming format using the origin that is
               associated with this cache behavior.
        :param pulumi.Input[List[pulumi.Input[str]]] trusted_signers: The AWS accounts, if any, that you want to
               allow to create signed URLs for private content.
        """
        pulumi.set(__self__, "allowedMethods", allowed_methods)
        pulumi.set(__self__, "cachedMethods", cached_methods)
        pulumi.set(__self__, "forwardedValues", forwarded_values)
        pulumi.set(__self__, "targetOriginId", target_origin_id)
        pulumi.set(__self__, "viewerProtocolPolicy", viewer_protocol_policy)
        pulumi.set(__self__, "compress", compress)
        pulumi.set(__self__, "defaultTtl", default_ttl)
        pulumi.set(__self__, "fieldLevelEncryptionId", field_level_encryption_id)
        pulumi.set(__self__, "lambdaFunctionAssociations", lambda_function_associations)
        pulumi.set(__self__, "maxTtl", max_ttl)
        pulumi.set(__self__, "minTtl", min_ttl)
        pulumi.set(__self__, "smoothStreaming", smooth_streaming)
        pulumi.set(__self__, "trustedSigners", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Controls which HTTP methods CloudFront
        processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        ...

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Controls whether CloudFront caches the
        response to requests using the specified HTTP methods.
        """
        ...

    @cached_methods.setter
    def cached_methods(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesArgs']:
        """
        The forwarded values configuration that specifies how CloudFront
        handles query strings, cookies and headers (maximum one).
        """
        ...

    @forwarded_values.setter
    def forwarded_values(self, value: pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesArgs']):
        ...

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> pulumi.Input[str]:
        """
        The value of ID for the origin that you want
        CloudFront to route requests to when a request matches the path pattern
        either for a cache behavior or for the default cache behavior.
        """
        ...

    @target_origin_id.setter
    def target_origin_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> pulumi.Input[str]:
        """
        Use this element to specify the
        protocol that users can use to access the files in the origin specified by
        TargetOriginId when a request matches the path pattern in PathPattern. One
        of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        ...

    @viewer_protocol_policy.setter
    def viewer_protocol_policy(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you want CloudFront to automatically
        compress content for web requests that include `Accept-Encoding: gzip` in
        the request header (default: `false`).
        """
        ...

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The default amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
        1 day.
        """
        ...

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[pulumi.Input[str]]:
        """
        Field level encryption configuration ID
        """
        ...

    @field_level_encryption_id.setter
    def field_level_encryption_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[pulumi.Input[List[pulumi.Input['DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]]:
        """
        A config block that triggers a lambda function with
        specific actions. Defined below, maximum 4.
        """
        ...

    @lambda_function_associations.setter
    def lambda_function_associations(self, value: Optional[pulumi.Input[List[pulumi.Input['DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]]):
        ...

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        to your origin to determine whether the object has been updated. Only
        effective in the presence of `Cache-Control max-age`, `Cache-Control
        s-maxage`, and `Expires` headers. Defaults to 365 days.
        """
        ...

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum amount of time that you want objects to
        stay in CloudFront caches before CloudFront queries your origin to see
        whether the object has been updated. Defaults to 0 seconds.
        """
        ...

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether you want to distribute
        media files in Microsoft Smooth Streaming format using the origin that is
        associated with this cache behavior.
        """
        ...

    @smooth_streaming.setter
    def smooth_streaming(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The AWS accounts, if any, that you want to
        allow to create signed URLs for private content.
        """
        ...

    @trusted_signers.setter
    def trusted_signers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionDefaultCacheBehaviorForwardedValuesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs'],
                 query_string: pulumi.Input[bool],
                 headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 query_string_cache_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs'] cookies: The forwarded values cookies
               that specifies how CloudFront handles cookies (maximum one).
        :param pulumi.Input[bool] query_string: Indicates whether you want CloudFront to forward
               query strings to the origin that is associated with this cache behavior.
        :param pulumi.Input[List[pulumi.Input[str]]] headers: Specifies the Headers, if any, that you want
               CloudFront to vary upon for this cache behavior. Specify `*` to include all
               headers.
        :param pulumi.Input[List[pulumi.Input[str]]] query_string_cache_keys: When specified, along with a value of
               `true` for `query_string`, all query strings are forwarded, however only the
               query string keys listed in this argument are cached. When omitted with a
               value of `true` for `query_string`, all query string keys are cached.
        """
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "queryString", query_string)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "queryStringCacheKeys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs']:
        """
        The forwarded values cookies
        that specifies how CloudFront handles cookies (maximum one).
        """
        ...

    @cookies.setter
    def cookies(self, value: pulumi.Input['DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs']):
        ...

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[bool]:
        """
        Indicates whether you want CloudFront to forward
        query strings to the origin that is associated with this cache behavior.
        """
        ...

    @query_string.setter
    def query_string(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the Headers, if any, that you want
        CloudFront to vary upon for this cache behavior. Specify `*` to include all
        headers.
        """
        ...

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        When specified, along with a value of
        `true` for `query_string`, all query strings are forwarded, however only the
        query string keys listed in this argument are cached. When omitted with a
        value of `true` for `query_string`, all query string keys are cached.
        """
        ...

    @query_string_cache_keys.setter
    def query_string_cache_keys(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs:
    def __init__(__self__, *,
                 forward: pulumi.Input[str],
                 whitelisted_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] forward: Specifies whether you want CloudFront to forward
               cookies to the origin that is associated with this cache behavior. You can
               specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
               subsequent `whitelisted_names`
        :param pulumi.Input[List[pulumi.Input[str]]] whitelisted_names: If you have specified `whitelist` to
               `forward`, the whitelisted cookies that you want CloudFront to forward to
               your origin.
        """
        pulumi.set(__self__, "forward", forward)
        pulumi.set(__self__, "whitelistedNames", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Input[str]:
        """
        Specifies whether you want CloudFront to forward
        cookies to the origin that is associated with this cache behavior. You can
        specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
        subsequent `whitelisted_names`
        """
        ...

    @forward.setter
    def forward(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        If you have specified `whitelist` to
        `forward`, the whitelisted cookies that you want CloudFront to forward to
        your origin.
        """
        ...

    @whitelisted_names.setter
    def whitelisted_names(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 lambda_arn: pulumi.Input[str],
                 include_body: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] event_type: The specific event to trigger this function.
               Valid values: `viewer-request`, `origin-request`, `viewer-response`,
               `origin-response`
        :param pulumi.Input[str] lambda_arn: ARN of the Lambda function.
        :param pulumi.Input[bool] include_body: When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        pulumi.set(__self__, "eventType", event_type)
        pulumi.set(__self__, "lambdaArn", lambda_arn)
        pulumi.set(__self__, "includeBody", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        """
        The specific event to trigger this function.
        Valid values: `viewer-request`, `origin-request`, `viewer-response`,
        `origin-response`
        """
        ...

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[str]:
        """
        ARN of the Lambda function.
        """
        ...

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        ...

    @include_body.setter
    def include_body(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class DistributionLoggingConfigArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 include_cookies: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The Amazon S3 bucket to store the access logs in, for
               example, `myawslogbucket.s3.amazonaws.com`.
        :param pulumi.Input[bool] include_cookies: Specifies whether you want CloudFront to
               include cookies in access logs (default: `false`).
        :param pulumi.Input[str] prefix: An optional string that you want CloudFront to prefix
               to the access log filenames for this distribution, for example, `myprefix/`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "includeCookies", include_cookies)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket to store the access logs in, for
        example, `myawslogbucket.s3.amazonaws.com`.
        """
        ...

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="includeCookies")
    def include_cookies(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether you want CloudFront to
        include cookies in access logs (default: `false`).
        """
        ...

    @include_cookies.setter
    def include_cookies(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string that you want CloudFront to prefix
        to the access log filenames for this distribution, for example, `myprefix/`.
        """
        ...

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DistributionOrderedCacheBehaviorArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[List[pulumi.Input[str]]],
                 cached_methods: pulumi.Input[List[pulumi.Input[str]]],
                 forwarded_values: pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesArgs'],
                 path_pattern: pulumi.Input[str],
                 target_origin_id: pulumi.Input[str],
                 viewer_protocol_policy: pulumi.Input[str],
                 compress: Optional[pulumi.Input[bool]] = None,
                 default_ttl: Optional[pulumi.Input[float]] = None,
                 field_level_encryption_id: Optional[pulumi.Input[str]] = None,
                 lambda_function_associations: Optional[pulumi.Input[List[pulumi.Input['DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]] = None,
                 max_ttl: Optional[pulumi.Input[float]] = None,
                 min_ttl: Optional[pulumi.Input[float]] = None,
                 smooth_streaming: Optional[pulumi.Input[bool]] = None,
                 trusted_signers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_methods: Controls which HTTP methods CloudFront
               processes and forwards to your Amazon S3 bucket or your custom origin.
        :param pulumi.Input[List[pulumi.Input[str]]] cached_methods: Controls whether CloudFront caches the
               response to requests using the specified HTTP methods.
        :param pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesArgs'] forwarded_values: The forwarded values configuration that specifies how CloudFront
               handles query strings, cookies and headers (maximum one).
        :param pulumi.Input[str] path_pattern: The pattern (for example, `images/*.jpg)` that
               specifies which requests you want this cache behavior to apply to.
        :param pulumi.Input[str] target_origin_id: The value of ID for the origin that you want
               CloudFront to route requests to when a request matches the path pattern
               either for a cache behavior or for the default cache behavior.
        :param pulumi.Input[str] viewer_protocol_policy: Use this element to specify the
               protocol that users can use to access the files in the origin specified by
               TargetOriginId when a request matches the path pattern in PathPattern. One
               of `allow-all`, `https-only`, or `redirect-to-https`.
        :param pulumi.Input[bool] compress: Whether you want CloudFront to automatically
               compress content for web requests that include `Accept-Encoding: gzip` in
               the request header (default: `false`).
        :param pulumi.Input[float] default_ttl: The default amount of time (in seconds) that an
               object is in a CloudFront cache before CloudFront forwards another request
               in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
               1 day.
        :param pulumi.Input[str] field_level_encryption_id: Field level encryption configuration ID
        :param pulumi.Input[List[pulumi.Input['DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]] lambda_function_associations: A config block that triggers a lambda function with
               specific actions. Defined below, maximum 4.
        :param pulumi.Input[float] max_ttl: The maximum amount of time (in seconds) that an
               object is in a CloudFront cache before CloudFront forwards another request
               to your origin to determine whether the object has been updated. Only
               effective in the presence of `Cache-Control max-age`, `Cache-Control
               s-maxage`, and `Expires` headers. Defaults to 365 days.
        :param pulumi.Input[float] min_ttl: The minimum amount of time that you want objects to
               stay in CloudFront caches before CloudFront queries your origin to see
               whether the object has been updated. Defaults to 0 seconds.
        :param pulumi.Input[bool] smooth_streaming: Indicates whether you want to distribute
               media files in Microsoft Smooth Streaming format using the origin that is
               associated with this cache behavior.
        :param pulumi.Input[List[pulumi.Input[str]]] trusted_signers: The AWS accounts, if any, that you want to
               allow to create signed URLs for private content.
        """
        pulumi.set(__self__, "allowedMethods", allowed_methods)
        pulumi.set(__self__, "cachedMethods", cached_methods)
        pulumi.set(__self__, "forwardedValues", forwarded_values)
        pulumi.set(__self__, "pathPattern", path_pattern)
        pulumi.set(__self__, "targetOriginId", target_origin_id)
        pulumi.set(__self__, "viewerProtocolPolicy", viewer_protocol_policy)
        pulumi.set(__self__, "compress", compress)
        pulumi.set(__self__, "defaultTtl", default_ttl)
        pulumi.set(__self__, "fieldLevelEncryptionId", field_level_encryption_id)
        pulumi.set(__self__, "lambdaFunctionAssociations", lambda_function_associations)
        pulumi.set(__self__, "maxTtl", max_ttl)
        pulumi.set(__self__, "minTtl", min_ttl)
        pulumi.set(__self__, "smoothStreaming", smooth_streaming)
        pulumi.set(__self__, "trustedSigners", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Controls which HTTP methods CloudFront
        processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        ...

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Controls whether CloudFront caches the
        response to requests using the specified HTTP methods.
        """
        ...

    @cached_methods.setter
    def cached_methods(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesArgs']:
        """
        The forwarded values configuration that specifies how CloudFront
        handles query strings, cookies and headers (maximum one).
        """
        ...

    @forwarded_values.setter
    def forwarded_values(self, value: pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesArgs']):
        ...

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> pulumi.Input[str]:
        """
        The pattern (for example, `images/*.jpg)` that
        specifies which requests you want this cache behavior to apply to.
        """
        ...

    @path_pattern.setter
    def path_pattern(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> pulumi.Input[str]:
        """
        The value of ID for the origin that you want
        CloudFront to route requests to when a request matches the path pattern
        either for a cache behavior or for the default cache behavior.
        """
        ...

    @target_origin_id.setter
    def target_origin_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> pulumi.Input[str]:
        """
        Use this element to specify the
        protocol that users can use to access the files in the origin specified by
        TargetOriginId when a request matches the path pattern in PathPattern. One
        of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        ...

    @viewer_protocol_policy.setter
    def viewer_protocol_policy(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you want CloudFront to automatically
        compress content for web requests that include `Accept-Encoding: gzip` in
        the request header (default: `false`).
        """
        ...

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The default amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
        1 day.
        """
        ...

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[pulumi.Input[str]]:
        """
        Field level encryption configuration ID
        """
        ...

    @field_level_encryption_id.setter
    def field_level_encryption_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[pulumi.Input[List[pulumi.Input['DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]]:
        """
        A config block that triggers a lambda function with
        specific actions. Defined below, maximum 4.
        """
        ...

    @lambda_function_associations.setter
    def lambda_function_associations(self, value: Optional[pulumi.Input[List[pulumi.Input['DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]]):
        ...

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        to your origin to determine whether the object has been updated. Only
        effective in the presence of `Cache-Control max-age`, `Cache-Control
        s-maxage`, and `Expires` headers. Defaults to 365 days.
        """
        ...

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum amount of time that you want objects to
        stay in CloudFront caches before CloudFront queries your origin to see
        whether the object has been updated. Defaults to 0 seconds.
        """
        ...

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether you want to distribute
        media files in Microsoft Smooth Streaming format using the origin that is
        associated with this cache behavior.
        """
        ...

    @smooth_streaming.setter
    def smooth_streaming(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The AWS accounts, if any, that you want to
        allow to create signed URLs for private content.
        """
        ...

    @trusted_signers.setter
    def trusted_signers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionOrderedCacheBehaviorForwardedValuesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs'],
                 query_string: pulumi.Input[bool],
                 headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 query_string_cache_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs'] cookies: The forwarded values cookies
               that specifies how CloudFront handles cookies (maximum one).
        :param pulumi.Input[bool] query_string: Indicates whether you want CloudFront to forward
               query strings to the origin that is associated with this cache behavior.
        :param pulumi.Input[List[pulumi.Input[str]]] headers: Specifies the Headers, if any, that you want
               CloudFront to vary upon for this cache behavior. Specify `*` to include all
               headers.
        :param pulumi.Input[List[pulumi.Input[str]]] query_string_cache_keys: When specified, along with a value of
               `true` for `query_string`, all query strings are forwarded, however only the
               query string keys listed in this argument are cached. When omitted with a
               value of `true` for `query_string`, all query string keys are cached.
        """
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "queryString", query_string)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "queryStringCacheKeys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs']:
        """
        The forwarded values cookies
        that specifies how CloudFront handles cookies (maximum one).
        """
        ...

    @cookies.setter
    def cookies(self, value: pulumi.Input['DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs']):
        ...

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[bool]:
        """
        Indicates whether you want CloudFront to forward
        query strings to the origin that is associated with this cache behavior.
        """
        ...

    @query_string.setter
    def query_string(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the Headers, if any, that you want
        CloudFront to vary upon for this cache behavior. Specify `*` to include all
        headers.
        """
        ...

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        When specified, along with a value of
        `true` for `query_string`, all query strings are forwarded, however only the
        query string keys listed in this argument are cached. When omitted with a
        value of `true` for `query_string`, all query string keys are cached.
        """
        ...

    @query_string_cache_keys.setter
    def query_string_cache_keys(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs:
    def __init__(__self__, *,
                 forward: pulumi.Input[str],
                 whitelisted_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] forward: Specifies whether you want CloudFront to forward
               cookies to the origin that is associated with this cache behavior. You can
               specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
               subsequent `whitelisted_names`
        :param pulumi.Input[List[pulumi.Input[str]]] whitelisted_names: If you have specified `whitelist` to
               `forward`, the whitelisted cookies that you want CloudFront to forward to
               your origin.
        """
        pulumi.set(__self__, "forward", forward)
        pulumi.set(__self__, "whitelistedNames", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Input[str]:
        """
        Specifies whether you want CloudFront to forward
        cookies to the origin that is associated with this cache behavior. You can
        specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
        subsequent `whitelisted_names`
        """
        ...

    @forward.setter
    def forward(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        If you have specified `whitelist` to
        `forward`, the whitelisted cookies that you want CloudFront to forward to
        your origin.
        """
        ...

    @whitelisted_names.setter
    def whitelisted_names(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 lambda_arn: pulumi.Input[str],
                 include_body: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] event_type: The specific event to trigger this function.
               Valid values: `viewer-request`, `origin-request`, `viewer-response`,
               `origin-response`
        :param pulumi.Input[str] lambda_arn: ARN of the Lambda function.
        :param pulumi.Input[bool] include_body: When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        pulumi.set(__self__, "eventType", event_type)
        pulumi.set(__self__, "lambdaArn", lambda_arn)
        pulumi.set(__self__, "includeBody", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        """
        The specific event to trigger this function.
        Valid values: `viewer-request`, `origin-request`, `viewer-response`,
        `origin-response`
        """
        ...

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[str]:
        """
        ARN of the Lambda function.
        """
        ...

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        ...

    @include_body.setter
    def include_body(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class DistributionOriginArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 origin_id: pulumi.Input[str],
                 custom_headers: Optional[pulumi.Input[List[pulumi.Input['DistributionOriginCustomHeaderArgs']]]] = None,
                 custom_origin_config: Optional[pulumi.Input['DistributionOriginCustomOriginConfigArgs']] = None,
                 origin_path: Optional[pulumi.Input[str]] = None,
                 s3_origin_config: Optional[pulumi.Input['DistributionOriginS3OriginConfigArgs']] = None):
        """
        :param pulumi.Input[str] domain_name: The DNS domain name of either the S3 bucket, or
               web site of your custom origin.
        :param pulumi.Input[str] origin_id: The unique identifier of the member origin
        :param pulumi.Input[List[pulumi.Input['DistributionOriginCustomHeaderArgs']]] custom_headers: One or more sub-resources with `name` and
               `value` parameters that specify header data that will be sent to the origin
               (multiples allowed).
        :param pulumi.Input['DistributionOriginCustomOriginConfigArgs'] custom_origin_config: The CloudFront custom
               origin configuration information. If an S3
               origin is required, use `s3_origin_config` instead.
        :param pulumi.Input[str] origin_path: An optional element that causes CloudFront to
               request your content from a directory in your Amazon S3 bucket or your
               custom origin.
        :param pulumi.Input['DistributionOriginS3OriginConfigArgs'] s3_origin_config: The CloudFront S3 origin
               configuration information. If a custom origin is required, use
               `custom_origin_config` instead.
        """
        pulumi.set(__self__, "domainName", domain_name)
        pulumi.set(__self__, "originId", origin_id)
        pulumi.set(__self__, "customHeaders", custom_headers)
        pulumi.set(__self__, "customOriginConfig", custom_origin_config)
        pulumi.set(__self__, "originPath", origin_path)
        pulumi.set(__self__, "s3OriginConfig", s3_origin_config)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        The DNS domain name of either the S3 bucket, or
        web site of your custom origin.
        """
        ...

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        """
        The unique identifier of the member origin
        """
        ...

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[List[pulumi.Input['DistributionOriginCustomHeaderArgs']]]]:
        """
        One or more sub-resources with `name` and
        `value` parameters that specify header data that will be sent to the origin
        (multiples allowed).
        """
        ...

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[List[pulumi.Input['DistributionOriginCustomHeaderArgs']]]]):
        ...

    @property
    @pulumi.getter(name="customOriginConfig")
    def custom_origin_config(self) -> Optional[pulumi.Input['DistributionOriginCustomOriginConfigArgs']]:
        """
        The CloudFront custom
        origin configuration information. If an S3
        origin is required, use `s3_origin_config` instead.
        """
        ...

    @custom_origin_config.setter
    def custom_origin_config(self, value: Optional[pulumi.Input['DistributionOriginCustomOriginConfigArgs']]):
        ...

    @property
    @pulumi.getter(name="originPath")
    def origin_path(self) -> Optional[pulumi.Input[str]]:
        """
        An optional element that causes CloudFront to
        request your content from a directory in your Amazon S3 bucket or your
        custom origin.
        """
        ...

    @origin_path.setter
    def origin_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="s3OriginConfig")
    def s3_origin_config(self) -> Optional[pulumi.Input['DistributionOriginS3OriginConfigArgs']]:
        """
        The CloudFront S3 origin
        configuration information. If a custom origin is required, use
        `custom_origin_config` instead.
        """
        ...

    @s3_origin_config.setter
    def s3_origin_config(self, value: Optional[pulumi.Input['DistributionOriginS3OriginConfigArgs']]):
        ...


@pulumi.input_type
class DistributionOriginCustomHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class DistributionOriginCustomOriginConfigArgs:
    def __init__(__self__, *,
                 http_port: pulumi.Input[float],
                 https_port: pulumi.Input[float],
                 origin_protocol_policy: pulumi.Input[str],
                 origin_ssl_protocols: pulumi.Input[List[pulumi.Input[str]]],
                 origin_keepalive_timeout: Optional[pulumi.Input[float]] = None,
                 origin_read_timeout: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] http_port: The HTTP port the custom origin listens on.
        :param pulumi.Input[float] https_port: The HTTPS port the custom origin listens on.
        :param pulumi.Input[str] origin_protocol_policy: The origin protocol policy to apply to
               your origin. One of `http-only`, `https-only`, or `match-viewer`.
        :param pulumi.Input[List[pulumi.Input[str]]] origin_ssl_protocols: The SSL/TLS protocols that you want
               CloudFront to use when communicating with your origin over HTTPS. A list of
               one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
        :param pulumi.Input[float] origin_keepalive_timeout: The Custom KeepAlive timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        :param pulumi.Input[float] origin_read_timeout: The Custom Read timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        """
        pulumi.set(__self__, "httpPort", http_port)
        pulumi.set(__self__, "httpsPort", https_port)
        pulumi.set(__self__, "originProtocolPolicy", origin_protocol_policy)
        pulumi.set(__self__, "originSslProtocols", origin_ssl_protocols)
        pulumi.set(__self__, "originKeepaliveTimeout", origin_keepalive_timeout)
        pulumi.set(__self__, "originReadTimeout", origin_read_timeout)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> pulumi.Input[float]:
        """
        The HTTP port the custom origin listens on.
        """
        ...

    @http_port.setter
    def http_port(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> pulumi.Input[float]:
        """
        The HTTPS port the custom origin listens on.
        """
        ...

    @https_port.setter
    def https_port(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="originProtocolPolicy")
    def origin_protocol_policy(self) -> pulumi.Input[str]:
        """
        The origin protocol policy to apply to
        your origin. One of `http-only`, `https-only`, or `match-viewer`.
        """
        ...

    @origin_protocol_policy.setter
    def origin_protocol_policy(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="originSslProtocols")
    def origin_ssl_protocols(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The SSL/TLS protocols that you want
        CloudFront to use when communicating with your origin over HTTPS. A list of
        one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
        """
        ...

    @origin_ssl_protocols.setter
    def origin_ssl_protocols(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="originKeepaliveTimeout")
    def origin_keepalive_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The Custom KeepAlive timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        """
        ...

    @origin_keepalive_timeout.setter
    def origin_keepalive_timeout(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="originReadTimeout")
    def origin_read_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The Custom Read timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        """
        ...

    @origin_read_timeout.setter
    def origin_read_timeout(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class DistributionOriginGroupArgs:
    def __init__(__self__, *,
                 failover_criteria: pulumi.Input['DistributionOriginGroupFailoverCriteriaArgs'],
                 members: pulumi.Input[List[pulumi.Input['DistributionOriginGroupMemberArgs']]],
                 origin_id: pulumi.Input[str]):
        """
        :param pulumi.Input['DistributionOriginGroupFailoverCriteriaArgs'] failover_criteria: The failover criteria for when to failover to the secondary origin
        :param pulumi.Input[List[pulumi.Input['DistributionOriginGroupMemberArgs']]] members: Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
        :param pulumi.Input[str] origin_id: The unique identifier of the member origin
        """
        pulumi.set(__self__, "failoverCriteria", failover_criteria)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "originId", origin_id)

    @property
    @pulumi.getter(name="failoverCriteria")
    def failover_criteria(self) -> pulumi.Input['DistributionOriginGroupFailoverCriteriaArgs']:
        """
        The failover criteria for when to failover to the secondary origin
        """
        ...

    @failover_criteria.setter
    def failover_criteria(self, value: pulumi.Input['DistributionOriginGroupFailoverCriteriaArgs']):
        ...

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[List[pulumi.Input['DistributionOriginGroupMemberArgs']]]:
        """
        Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
        """
        ...

    @members.setter
    def members(self, value: pulumi.Input[List[pulumi.Input['DistributionOriginGroupMemberArgs']]]):
        ...

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        """
        The unique identifier of the member origin
        """
        ...

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class DistributionOriginGroupFailoverCriteriaArgs:
    def __init__(__self__, *,
                 status_codes: pulumi.Input[List[pulumi.Input[float]]]):
        """
        :param pulumi.Input[List[pulumi.Input[float]]] status_codes: A list of HTTP status codes for the origin group
        """
        pulumi.set(__self__, "statusCodes", status_codes)

    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> pulumi.Input[List[pulumi.Input[float]]]:
        """
        A list of HTTP status codes for the origin group
        """
        ...

    @status_codes.setter
    def status_codes(self, value: pulumi.Input[List[pulumi.Input[float]]]):
        ...


@pulumi.input_type
class DistributionOriginGroupMemberArgs:
    def __init__(__self__, *,
                 origin_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] origin_id: The unique identifier of the member origin
        """
        pulumi.set(__self__, "originId", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        """
        The unique identifier of the member origin
        """
        ...

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class DistributionOriginS3OriginConfigArgs:
    def __init__(__self__, *,
                 origin_access_identity: pulumi.Input[str]):
        """
        :param pulumi.Input[str] origin_access_identity: The [CloudFront origin access
               identity][5] to associate with the origin.
        """
        pulumi.set(__self__, "originAccessIdentity", origin_access_identity)

    @property
    @pulumi.getter(name="originAccessIdentity")
    def origin_access_identity(self) -> pulumi.Input[str]:
        """
        The [CloudFront origin access
        identity][5] to associate with the origin.
        """
        ...

    @origin_access_identity.setter
    def origin_access_identity(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class DistributionRestrictionsArgs:
    def __init__(__self__, *,
                 geo_restriction: pulumi.Input['DistributionRestrictionsGeoRestrictionArgs']):
        pulumi.set(__self__, "geoRestriction", geo_restriction)

    @property
    @pulumi.getter(name="geoRestriction")
    def geo_restriction(self) -> pulumi.Input['DistributionRestrictionsGeoRestrictionArgs']:
        ...

    @geo_restriction.setter
    def geo_restriction(self, value: pulumi.Input['DistributionRestrictionsGeoRestrictionArgs']):
        ...


@pulumi.input_type
class DistributionRestrictionsGeoRestrictionArgs:
    def __init__(__self__, *,
                 restriction_type: pulumi.Input[str],
                 locations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] restriction_type: The method that you want to use to restrict
               distribution of your content by country: `none`, `whitelist`, or
               `blacklist`.
        :param pulumi.Input[List[pulumi.Input[str]]] locations: The [ISO 3166-1-alpha-2 codes][4] for which you
               want CloudFront either to distribute your content (`whitelist`) or not
               distribute your content (`blacklist`).
        """
        pulumi.set(__self__, "restrictionType", restriction_type)
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> pulumi.Input[str]:
        """
        The method that you want to use to restrict
        distribution of your content by country: `none`, `whitelist`, or
        `blacklist`.
        """
        ...

    @restriction_type.setter
    def restriction_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The [ISO 3166-1-alpha-2 codes][4] for which you
        want CloudFront either to distribute your content (`whitelist`) or not
        distribute your content (`blacklist`).
        """
        ...

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class DistributionViewerCertificateArgs:
    def __init__(__self__, *,
                 acm_certificate_arn: Optional[pulumi.Input[str]] = None,
                 cloudfront_default_certificate: Optional[pulumi.Input[bool]] = None,
                 iam_certificate_id: Optional[pulumi.Input[str]] = None,
                 minimum_protocol_version: Optional[pulumi.Input[str]] = None,
                 ssl_support_method: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] acm_certificate_arn: The ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/)
               certificate that you wish to use with this distribution. Specify this,
               `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM
               certificate must be in  US-EAST-1.
        :param pulumi.Input[bool] cloudfront_default_certificate: `true` if you want viewers to use HTTPS
               to request your objects and you're using the CloudFront domain name for your
               distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
        :param pulumi.Input[str] iam_certificate_id: The IAM certificate identifier of the custom viewer
               certificate for this distribution if you are using a custom domain. Specify
               this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
        :param pulumi.Input[str] minimum_protocol_version: The minimum version of the SSL protocol that
               you want CloudFront to use for HTTPS connections. Can only be set if
               `cloudfront_default_certificate = false`. One of `SSLv3`, `TLSv1`,
               `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
               If you are using a custom certificate (specified with `acm_certificate_arn`
               or `iam_certificate_id`), and have specified `sni-only` in
               `ssl_support_method`, `TLSv1` or later must be specified. If you have
               specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be
               specified. If you have specified `cloudfront_default_certificate`, `TLSv1`
               must be specified.
        """
        pulumi.set(__self__, "acmCertificateArn", acm_certificate_arn)
        pulumi.set(__self__, "cloudfrontDefaultCertificate", cloudfront_default_certificate)
        pulumi.set(__self__, "iamCertificateId", iam_certificate_id)
        pulumi.set(__self__, "minimumProtocolVersion", minimum_protocol_version)
        pulumi.set(__self__, "sslSupportMethod", ssl_support_method)

    @property
    @pulumi.getter(name="acmCertificateArn")
    def acm_certificate_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/)
        certificate that you wish to use with this distribution. Specify this,
        `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM
        certificate must be in  US-EAST-1.
        """
        ...

    @acm_certificate_arn.setter
    def acm_certificate_arn(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="cloudfrontDefaultCertificate")
    def cloudfront_default_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if you want viewers to use HTTPS
        to request your objects and you're using the CloudFront domain name for your
        distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
        """
        ...

    @cloudfront_default_certificate.setter
    def cloudfront_default_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="iamCertificateId")
    def iam_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM certificate identifier of the custom viewer
        certificate for this distribution if you are using a custom domain. Specify
        this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
        """
        ...

    @iam_certificate_id.setter
    def iam_certificate_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="minimumProtocolVersion")
    def minimum_protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum version of the SSL protocol that
        you want CloudFront to use for HTTPS connections. Can only be set if
        `cloudfront_default_certificate = false`. One of `SSLv3`, `TLSv1`,
        `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
        If you are using a custom certificate (specified with `acm_certificate_arn`
        or `iam_certificate_id`), and have specified `sni-only` in
        `ssl_support_method`, `TLSv1` or later must be specified. If you have
        specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be
        specified. If you have specified `cloudfront_default_certificate`, `TLSv1`
        must be specified.
        """
        ...

    @minimum_protocol_version.setter
    def minimum_protocol_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="sslSupportMethod")
    def ssl_support_method(self) -> Optional[pulumi.Input[str]]:
        ...

    @ssl_support_method.setter
    def ssl_support_method(self, value: Optional[pulumi.Input[str]]):
        ...


