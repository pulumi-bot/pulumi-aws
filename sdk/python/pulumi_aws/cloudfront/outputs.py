# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'DistributionCustomErrorResponse',
    'DistributionDefaultCacheBehavior',
    'DistributionDefaultCacheBehaviorForwardedValues',
    'DistributionDefaultCacheBehaviorForwardedValuesCookies',
    'DistributionDefaultCacheBehaviorLambdaFunctionAssociation',
    'DistributionLoggingConfig',
    'DistributionOrderedCacheBehavior',
    'DistributionOrderedCacheBehaviorForwardedValues',
    'DistributionOrderedCacheBehaviorForwardedValuesCookies',
    'DistributionOrderedCacheBehaviorLambdaFunctionAssociation',
    'DistributionOrigin',
    'DistributionOriginCustomHeader',
    'DistributionOriginCustomOriginConfig',
    'DistributionOriginGroup',
    'DistributionOriginGroupFailoverCriteria',
    'DistributionOriginGroupMember',
    'DistributionOriginS3OriginConfig',
    'DistributionRestrictions',
    'DistributionRestrictionsGeoRestriction',
    'DistributionViewerCertificate',
]

@pulumi.output_type
class DistributionCustomErrorResponse(dict):
    @property
    @pulumi.getter(name="errorCachingMinTtl")
    def error_caching_min_ttl(self) -> Optional[float]:
        """
        The minimum amount of time you want
        HTTP error codes to stay in CloudFront caches before CloudFront queries your
        origin to see whether the object has been updated.
        """
        ...

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> float:
        """
        The 4xx or 5xx HTTP status code that you want to
        customize.
        """
        ...

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[float]:
        """
        The HTTP status code that you want CloudFront
        to return with the custom error page to the viewer.
        """
        ...

    @property
    @pulumi.getter(name="responsePagePath")
    def response_page_path(self) -> Optional[str]:
        """
        The path of the custom error page (for
        example, `/custom_404.html`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionDefaultCacheBehavior(dict):
    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> List[str]:
        """
        Controls which HTTP methods CloudFront
        processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        ...

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> List[str]:
        """
        Controls whether CloudFront caches the
        response to requests using the specified HTTP methods.
        """
        ...

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        """
        Whether you want CloudFront to automatically
        compress content for web requests that include `Accept-Encoding: gzip` in
        the request header (default: `false`).
        """
        ...

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[float]:
        """
        The default amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
        1 day.
        """
        ...

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[str]:
        """
        Field level encryption configuration ID
        """
        ...

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> 'outputs.DistributionDefaultCacheBehaviorForwardedValues':
        """
        The forwarded values configuration that specifies how CloudFront
        handles query strings, cookies and headers (maximum one).
        """
        ...

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[List['outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation']]:
        """
        A config block that triggers a lambda function with
        specific actions. Defined below, maximum 4.
        """
        ...

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[float]:
        """
        The maximum amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        to your origin to determine whether the object has been updated. Only
        effective in the presence of `Cache-Control max-age`, `Cache-Control
        s-maxage`, and `Expires` headers. Defaults to 365 days.
        """
        ...

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[float]:
        """
        The minimum amount of time that you want objects to
        stay in CloudFront caches before CloudFront queries your origin to see
        whether the object has been updated. Defaults to 0 seconds.
        """
        ...

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[bool]:
        """
        Indicates whether you want to distribute
        media files in Microsoft Smooth Streaming format using the origin that is
        associated with this cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> str:
        """
        The value of ID for the origin that you want
        CloudFront to route requests to when a request matches the path pattern
        either for a cache behavior or for the default cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[List[str]]:
        """
        The AWS accounts, if any, that you want to
        allow to create signed URLs for private content.
        """
        ...

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> str:
        """
        Use this element to specify the
        protocol that users can use to access the files in the origin specified by
        TargetOriginId when a request matches the path pattern in PathPattern. One
        of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionDefaultCacheBehaviorForwardedValues(dict):
    @property
    @pulumi.getter
    def cookies(self) -> 'outputs.DistributionDefaultCacheBehaviorForwardedValuesCookies':
        """
        The forwarded values cookies
        that specifies how CloudFront handles cookies (maximum one).
        """
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[List[str]]:
        """
        Specifies the Headers, if any, that you want
        CloudFront to vary upon for this cache behavior. Specify `*` to include all
        headers.
        """
        ...

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> bool:
        """
        Indicates whether you want CloudFront to forward
        query strings to the origin that is associated with this cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[List[str]]:
        """
        When specified, along with a value of
        `true` for `query_string`, all query strings are forwarded, however only the
        query string keys listed in this argument are cached. When omitted with a
        value of `true` for `query_string`, all query string keys are cached.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionDefaultCacheBehaviorForwardedValuesCookies(dict):
    @property
    @pulumi.getter
    def forward(self) -> str:
        """
        Specifies whether you want CloudFront to forward
        cookies to the origin that is associated with this cache behavior. You can
        specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
        subsequent `whitelisted_names`
        """
        ...

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[List[str]]:
        """
        If you have specified `whitelist` to
        `forward`, the whitelisted cookies that you want CloudFront to forward to
        your origin.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionDefaultCacheBehaviorLambdaFunctionAssociation(dict):
    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        The specific event to trigger this function.
        Valid values: `viewer-request`, `origin-request`, `viewer-response`,
        `origin-response`
        """
        ...

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[bool]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        ...

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> str:
        """
        ARN of the Lambda function.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionLoggingConfig(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Amazon S3 bucket to store the access logs in, for
        example, `myawslogbucket.s3.amazonaws.com`.
        """
        ...

    @property
    @pulumi.getter(name="includeCookies")
    def include_cookies(self) -> Optional[bool]:
        """
        Specifies whether you want CloudFront to
        include cookies in access logs (default: `false`).
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        An optional string that you want CloudFront to prefix
        to the access log filenames for this distribution, for example, `myprefix/`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOrderedCacheBehavior(dict):
    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> List[str]:
        """
        Controls which HTTP methods CloudFront
        processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        ...

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> List[str]:
        """
        Controls whether CloudFront caches the
        response to requests using the specified HTTP methods.
        """
        ...

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        """
        Whether you want CloudFront to automatically
        compress content for web requests that include `Accept-Encoding: gzip` in
        the request header (default: `false`).
        """
        ...

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[float]:
        """
        The default amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
        1 day.
        """
        ...

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[str]:
        """
        Field level encryption configuration ID
        """
        ...

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> 'outputs.DistributionOrderedCacheBehaviorForwardedValues':
        """
        The forwarded values configuration that specifies how CloudFront
        handles query strings, cookies and headers (maximum one).
        """
        ...

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[List['outputs.DistributionOrderedCacheBehaviorLambdaFunctionAssociation']]:
        """
        A config block that triggers a lambda function with
        specific actions. Defined below, maximum 4.
        """
        ...

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[float]:
        """
        The maximum amount of time (in seconds) that an
        object is in a CloudFront cache before CloudFront forwards another request
        to your origin to determine whether the object has been updated. Only
        effective in the presence of `Cache-Control max-age`, `Cache-Control
        s-maxage`, and `Expires` headers. Defaults to 365 days.
        """
        ...

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[float]:
        """
        The minimum amount of time that you want objects to
        stay in CloudFront caches before CloudFront queries your origin to see
        whether the object has been updated. Defaults to 0 seconds.
        """
        ...

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> str:
        """
        The pattern (for example, `images/*.jpg)` that
        specifies which requests you want this cache behavior to apply to.
        """
        ...

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[bool]:
        """
        Indicates whether you want to distribute
        media files in Microsoft Smooth Streaming format using the origin that is
        associated with this cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> str:
        """
        The value of ID for the origin that you want
        CloudFront to route requests to when a request matches the path pattern
        either for a cache behavior or for the default cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[List[str]]:
        """
        The AWS accounts, if any, that you want to
        allow to create signed URLs for private content.
        """
        ...

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> str:
        """
        Use this element to specify the
        protocol that users can use to access the files in the origin specified by
        TargetOriginId when a request matches the path pattern in PathPattern. One
        of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOrderedCacheBehaviorForwardedValues(dict):
    @property
    @pulumi.getter
    def cookies(self) -> 'outputs.DistributionOrderedCacheBehaviorForwardedValuesCookies':
        """
        The forwarded values cookies
        that specifies how CloudFront handles cookies (maximum one).
        """
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[List[str]]:
        """
        Specifies the Headers, if any, that you want
        CloudFront to vary upon for this cache behavior. Specify `*` to include all
        headers.
        """
        ...

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> bool:
        """
        Indicates whether you want CloudFront to forward
        query strings to the origin that is associated with this cache behavior.
        """
        ...

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[List[str]]:
        """
        When specified, along with a value of
        `true` for `query_string`, all query strings are forwarded, however only the
        query string keys listed in this argument are cached. When omitted with a
        value of `true` for `query_string`, all query string keys are cached.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOrderedCacheBehaviorForwardedValuesCookies(dict):
    @property
    @pulumi.getter
    def forward(self) -> str:
        """
        Specifies whether you want CloudFront to forward
        cookies to the origin that is associated with this cache behavior. You can
        specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
        subsequent `whitelisted_names`
        """
        ...

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[List[str]]:
        """
        If you have specified `whitelist` to
        `forward`, the whitelisted cookies that you want CloudFront to forward to
        your origin.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOrderedCacheBehaviorLambdaFunctionAssociation(dict):
    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        The specific event to trigger this function.
        Valid values: `viewer-request`, `origin-request`, `viewer-response`,
        `origin-response`
        """
        ...

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[bool]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        ...

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> str:
        """
        ARN of the Lambda function.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOrigin(dict):
    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[List['outputs.DistributionOriginCustomHeader']]:
        """
        One or more sub-resources with `name` and
        `value` parameters that specify header data that will be sent to the origin
        (multiples allowed).
        """
        ...

    @property
    @pulumi.getter(name="customOriginConfig")
    def custom_origin_config(self) -> Optional['outputs.DistributionOriginCustomOriginConfig']:
        """
        The CloudFront custom
        origin configuration information. If an S3
        origin is required, use `s3_origin_config` instead.
        """
        ...

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The DNS domain name of either the S3 bucket, or
        web site of your custom origin.
        """
        ...

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        The unique identifier of the member origin
        """
        ...

    @property
    @pulumi.getter(name="originPath")
    def origin_path(self) -> Optional[str]:
        """
        An optional element that causes CloudFront to
        request your content from a directory in your Amazon S3 bucket or your
        custom origin.
        """
        ...

    @property
    @pulumi.getter(name="s3OriginConfig")
    def s3_origin_config(self) -> Optional['outputs.DistributionOriginS3OriginConfig']:
        """
        The CloudFront S3 origin
        configuration information. If a custom origin is required, use
        `custom_origin_config` instead.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginCustomHeader(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginCustomOriginConfig(dict):
    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> float:
        """
        The HTTP port the custom origin listens on.
        """
        ...

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> float:
        """
        The HTTPS port the custom origin listens on.
        """
        ...

    @property
    @pulumi.getter(name="originKeepaliveTimeout")
    def origin_keepalive_timeout(self) -> Optional[float]:
        """
        The Custom KeepAlive timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        """
        ...

    @property
    @pulumi.getter(name="originProtocolPolicy")
    def origin_protocol_policy(self) -> str:
        """
        The origin protocol policy to apply to
        your origin. One of `http-only`, `https-only`, or `match-viewer`.
        """
        ...

    @property
    @pulumi.getter(name="originReadTimeout")
    def origin_read_timeout(self) -> Optional[float]:
        """
        The Custom Read timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
        """
        ...

    @property
    @pulumi.getter(name="originSslProtocols")
    def origin_ssl_protocols(self) -> List[str]:
        """
        The SSL/TLS protocols that you want
        CloudFront to use when communicating with your origin over HTTPS. A list of
        one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginGroup(dict):
    @property
    @pulumi.getter(name="failoverCriteria")
    def failover_criteria(self) -> 'outputs.DistributionOriginGroupFailoverCriteria':
        """
        The failover criteria for when to failover to the secondary origin
        """
        ...

    @property
    @pulumi.getter
    def members(self) -> List['outputs.DistributionOriginGroupMember']:
        """
        Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
        """
        ...

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        The unique identifier of the member origin
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginGroupFailoverCriteria(dict):
    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> List[float]:
        """
        A list of HTTP status codes for the origin group
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginGroupMember(dict):
    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        The unique identifier of the member origin
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionOriginS3OriginConfig(dict):
    @property
    @pulumi.getter(name="originAccessIdentity")
    def origin_access_identity(self) -> str:
        """
        The [CloudFront origin access
        identity][5] to associate with the origin.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionRestrictions(dict):
    @property
    @pulumi.getter(name="geoRestriction")
    def geo_restriction(self) -> 'outputs.DistributionRestrictionsGeoRestriction':
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionRestrictionsGeoRestriction(dict):
    @property
    @pulumi.getter
    def locations(self) -> Optional[List[str]]:
        """
        The [ISO 3166-1-alpha-2 codes][4] for which you
        want CloudFront either to distribute your content (`whitelist`) or not
        distribute your content (`blacklist`).
        """
        ...

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> str:
        """
        The method that you want to use to restrict
        distribution of your content by country: `none`, `whitelist`, or
        `blacklist`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DistributionViewerCertificate(dict):
    @property
    @pulumi.getter(name="acmCertificateArn")
    def acm_certificate_arn(self) -> Optional[str]:
        """
        The ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/)
        certificate that you wish to use with this distribution. Specify this,
        `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM
        certificate must be in  US-EAST-1.
        """
        ...

    @property
    @pulumi.getter(name="cloudfrontDefaultCertificate")
    def cloudfront_default_certificate(self) -> Optional[bool]:
        """
        `true` if you want viewers to use HTTPS
        to request your objects and you're using the CloudFront domain name for your
        distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
        """
        ...

    @property
    @pulumi.getter(name="iamCertificateId")
    def iam_certificate_id(self) -> Optional[str]:
        """
        The IAM certificate identifier of the custom viewer
        certificate for this distribution if you are using a custom domain. Specify
        this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="minimumProtocolVersion")
    def minimum_protocol_version(self) -> Optional[str]:
        """
        The minimum version of the SSL protocol that
        you want CloudFront to use for HTTPS connections. Can only be set if
        `cloudfront_default_certificate = false`. One of `SSLv3`, `TLSv1`,
        `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
        If you are using a custom certificate (specified with `acm_certificate_arn`
        or `iam_certificate_id`), and have specified `sni-only` in
        `ssl_support_method`, `TLSv1` or later must be specified. If you have
        specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be
        specified. If you have specified `cloudfront_default_certificate`, `TLSv1`
        must be specified.
        """
        ...

    @property
    @pulumi.getter(name="sslSupportMethod")
    def ssl_support_method(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


