# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'LoadBalancerAccessLogsArgs',
    'LoadBalancerHealthCheckArgs',
    'LoadBalancerListenerArgs',
    'LoadBalancerPolicyPolicyAttributeArgs',
    'SslNegotiationPolicyAttributeArgs',
]

@pulumi.input_type
class LoadBalancerAccessLogsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] bucket: The S3 bucket name to store the logs in.
        :param pulumi.Input[str] bucket_prefix: The S3 bucket prefix. Logs are stored in the root if not configured.
        :param pulumi.Input[bool] enabled: Boolean to enable / disable `access_logs`. Default is `true`
        :param pulumi.Input[float] interval: The publishing interval in minutes. Default: 60 minutes.
        """
        pulumi.set(__self__, "bucket", bucket)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The S3 bucket name to store the logs in.
        """
        ...

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The S3 bucket prefix. Logs are stored in the root if not configured.
        """
        ...

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean to enable / disable `access_logs`. Default is `true`
        """
        ...

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[float]]:
        """
        The publishing interval in minutes. Default: 60 minutes.
        """
        ...

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class LoadBalancerHealthCheckArgs:
    def __init__(__self__, *,
                 healthy_threshold: pulumi.Input[float],
                 interval: pulumi.Input[float],
                 target: pulumi.Input[str],
                 timeout: pulumi.Input[float],
                 unhealthy_threshold: pulumi.Input[float]):
        """
        :param pulumi.Input[float] healthy_threshold: The number of checks before the instance is declared healthy.
        :param pulumi.Input[float] interval: The interval between checks.
        :param pulumi.Input[str] target: The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
               values are:
               * `HTTP`, `HTTPS` - PORT and PATH are required
               * `TCP`, `SSL` - PORT is required, PATH is not supported
        :param pulumi.Input[float] timeout: The length of time before the check times out.
        :param pulumi.Input[float] unhealthy_threshold: The number of checks before the instance is declared unhealthy.
        """
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Input[float]:
        """
        The number of checks before the instance is declared healthy.
        """
        ...

    @healthy_threshold.setter
    def healthy_threshold(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[float]:
        """
        The interval between checks.
        """
        ...

    @interval.setter
    def interval(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
        values are:
        * `HTTP`, `HTTPS` - PORT and PATH are required
        * `TCP`, `SSL` - PORT is required, PATH is not supported
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[float]:
        """
        The length of time before the check times out.
        """
        ...

    @timeout.setter
    def timeout(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Input[float]:
        """
        The number of checks before the instance is declared unhealthy.
        """
        ...

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class LoadBalancerListenerArgs:
    def __init__(__self__, *,
                 instance_port: pulumi.Input[float],
                 instance_protocol: pulumi.Input[str],
                 lb_port: pulumi.Input[float],
                 lb_protocol: pulumi.Input[str],
                 ssl_certificate_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] instance_port: The port on the instance to route to
        :param pulumi.Input[str] instance_protocol: The protocol to use to the instance. Valid
               values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
        :param pulumi.Input[float] lb_port: The port to listen on for the load balancer
        :param pulumi.Input[str] lb_protocol: The protocol to listen on. Valid values are `HTTP`,
               `HTTPS`, `TCP`, or `SSL`
        :param pulumi.Input[str] ssl_certificate_id: The ARN of an SSL certificate you have
               uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
        """
        pulumi.set(__self__, "instance_port", instance_port)
        pulumi.set(__self__, "instance_protocol", instance_protocol)
        pulumi.set(__self__, "lb_port", lb_port)
        pulumi.set(__self__, "lb_protocol", lb_protocol)
        if ssl_certificate_id is not None:
            pulumi.set(__self__, "ssl_certificate_id", ssl_certificate_id)

    @property
    @pulumi.getter(name="instancePort")
    def instance_port(self) -> pulumi.Input[float]:
        """
        The port on the instance to route to
        """
        ...

    @instance_port.setter
    def instance_port(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="instanceProtocol")
    def instance_protocol(self) -> pulumi.Input[str]:
        """
        The protocol to use to the instance. Valid
        values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
        """
        ...

    @instance_protocol.setter
    def instance_protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="lbPort")
    def lb_port(self) -> pulumi.Input[float]:
        """
        The port to listen on for the load balancer
        """
        ...

    @lb_port.setter
    def lb_port(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="lbProtocol")
    def lb_protocol(self) -> pulumi.Input[str]:
        """
        The protocol to listen on. Valid values are `HTTP`,
        `HTTPS`, `TCP`, or `SSL`
        """
        ...

    @lb_protocol.setter
    def lb_protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of an SSL certificate you have
        uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
        """
        ...

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class LoadBalancerPolicyPolicyAttributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        ...

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SslNegotiationPolicyAttributeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the attribute
        :param pulumi.Input[str] value: The value of the attribute
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the attribute
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the attribute
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


