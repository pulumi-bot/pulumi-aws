# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AliasRoutingStrategy',
    'BuildStorageLocation',
    'FleetEc2InboundPermission',
    'FleetResourceCreationLimitPolicy',
    'FleetRuntimeConfiguration',
    'FleetRuntimeConfigurationServerProcess',
    'GameSessionQueuePlayerLatencyPolicy',
]

@pulumi.output_type
class AliasRoutingStrategy(dict):
    fleet_id: Optional[str] = pulumi.output_property("fleetId")
    """
    ID of the Gamelift Fleet to point the alias to.
    """
    message: Optional[str] = pulumi.output_property("message")
    """
    Message text to be used with the `TERMINAL` routing strategy.
    """
    type: str = pulumi.output_property("type")
    """
    Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BuildStorageLocation(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Name of your S3 bucket.
    """
    key: str = pulumi.output_property("key")
    """
    Name of the zip file containing your build files.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    ARN of the access role that allows Amazon GameLift to access your S3 bucket.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetEc2InboundPermission(dict):
    from_port: float = pulumi.output_property("fromPort")
    """
    Starting value for a range of allowed port numbers.
    """
    ip_range: str = pulumi.output_property("ipRange")
    """
    Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
    """
    to_port: float = pulumi.output_property("toPort")
    """
    Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `from_port`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetResourceCreationLimitPolicy(dict):
    new_game_sessions_per_creator: Optional[float] = pulumi.output_property("newGameSessionsPerCreator")
    """
    Maximum number of game sessions that an individual can create during the policy period.
    """
    policy_period_in_minutes: Optional[float] = pulumi.output_property("policyPeriodInMinutes")
    """
    Time span used in evaluating the resource creation limit policy.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetRuntimeConfiguration(dict):
    game_session_activation_timeout_seconds: Optional[float] = pulumi.output_property("gameSessionActivationTimeoutSeconds")
    """
    Maximum amount of time (in seconds) that a game session can remain in status `ACTIVATING`.
    """
    max_concurrent_game_session_activations: Optional[float] = pulumi.output_property("maxConcurrentGameSessionActivations")
    """
    Maximum number of game sessions with status `ACTIVATING` to allow on an instance simultaneously.
    """
    server_processes: Optional[List['outputs.FleetRuntimeConfigurationServerProcess']] = pulumi.output_property("serverProcesses")
    """
    Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetRuntimeConfigurationServerProcess(dict):
    concurrent_executions: float = pulumi.output_property("concurrentExecutions")
    """
    Number of server processes using this configuration to run concurrently on an instance.
    """
    launch_path: str = pulumi.output_property("launchPath")
    """
    Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
    """
    parameters: Optional[str] = pulumi.output_property("parameters")
    """
    Optional list of parameters to pass to the server executable on launch.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameSessionQueuePlayerLatencyPolicy(dict):
    maximum_individual_player_latency_milliseconds: float = pulumi.output_property("maximumIndividualPlayerLatencyMilliseconds")
    """
    Maximum latency value that is allowed for any player.
    """
    policy_duration_seconds: Optional[float] = pulumi.output_property("policyDurationSeconds")
    """
    Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


