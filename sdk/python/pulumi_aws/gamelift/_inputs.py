# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AliasRoutingStrategyArgs',
    'BuildStorageLocationArgs',
    'FleetEc2InboundPermissionArgs',
    'FleetResourceCreationLimitPolicyArgs',
    'FleetRuntimeConfigurationArgs',
    'FleetRuntimeConfigurationServerProcessArgs',
    'GameSessionQueuePlayerLatencyPolicyArgs',
]

@pulumi.input_type
class AliasRoutingStrategyArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
    """
    fleet_id: Optional[pulumi.Input[str]] = pulumi.input_property("fleetId")
    """
    ID of the Gamelift Fleet to point the alias to.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Message text to be used with the `TERMINAL` routing strategy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], fleet_id: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
        :param pulumi.Input[str] fleet_id: ID of the Gamelift Fleet to point the alias to.
        :param pulumi.Input[str] message: Message text to be used with the `TERMINAL` routing strategy.
        """
        __self__.type = type
        __self__.fleet_id = fleet_id
        __self__.message = message

@pulumi.input_type
class BuildStorageLocationArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Name of your S3 bucket.
    """
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    Name of the zip file containing your build files.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    ARN of the access role that allows Amazon GameLift to access your S3 bucket.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], key: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Name of your S3 bucket.
        :param pulumi.Input[str] key: Name of the zip file containing your build files.
        :param pulumi.Input[str] role_arn: ARN of the access role that allows Amazon GameLift to access your S3 bucket.
        """
        __self__.bucket = bucket
        __self__.key = key
        __self__.role_arn = role_arn

@pulumi.input_type
class FleetEc2InboundPermissionArgs:
    from_port: pulumi.Input[float] = pulumi.input_property("fromPort")
    """
    Starting value for a range of allowed port numbers.
    """
    ip_range: pulumi.Input[str] = pulumi.input_property("ipRange")
    """
    Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
    """
    to_port: pulumi.Input[float] = pulumi.input_property("toPort")
    """
    Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `from_port`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, from_port: pulumi.Input[float], ip_range: pulumi.Input[str], protocol: pulumi.Input[str], to_port: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] from_port: Starting value for a range of allowed port numbers.
        :param pulumi.Input[str] ip_range: Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
        :param pulumi.Input[str] protocol: Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
        :param pulumi.Input[float] to_port: Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `from_port`.
        """
        __self__.from_port = from_port
        __self__.ip_range = ip_range
        __self__.protocol = protocol
        __self__.to_port = to_port

@pulumi.input_type
class FleetResourceCreationLimitPolicyArgs:
    new_game_sessions_per_creator: Optional[pulumi.Input[float]] = pulumi.input_property("newGameSessionsPerCreator")
    """
    Maximum number of game sessions that an individual can create during the policy period.
    """
    policy_period_in_minutes: Optional[pulumi.Input[float]] = pulumi.input_property("policyPeriodInMinutes")
    """
    Time span used in evaluating the resource creation limit policy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, new_game_sessions_per_creator: Optional[pulumi.Input[float]] = None, policy_period_in_minutes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] new_game_sessions_per_creator: Maximum number of game sessions that an individual can create during the policy period.
        :param pulumi.Input[float] policy_period_in_minutes: Time span used in evaluating the resource creation limit policy.
        """
        __self__.new_game_sessions_per_creator = new_game_sessions_per_creator
        __self__.policy_period_in_minutes = policy_period_in_minutes

@pulumi.input_type
class FleetRuntimeConfigurationArgs:
    game_session_activation_timeout_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("gameSessionActivationTimeoutSeconds")
    """
    Maximum amount of time (in seconds) that a game session can remain in status `ACTIVATING`.
    """
    max_concurrent_game_session_activations: Optional[pulumi.Input[float]] = pulumi.input_property("maxConcurrentGameSessionActivations")
    """
    Maximum number of game sessions with status `ACTIVATING` to allow on an instance simultaneously.
    """
    server_processes: Optional[pulumi.Input[List[pulumi.Input['FleetRuntimeConfigurationServerProcessArgs']]]] = pulumi.input_property("serverProcesses")
    """
    Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, game_session_activation_timeout_seconds: Optional[pulumi.Input[float]] = None, max_concurrent_game_session_activations: Optional[pulumi.Input[float]] = None, server_processes: Optional[pulumi.Input[List[pulumi.Input['FleetRuntimeConfigurationServerProcessArgs']]]] = None) -> None:
        """
        :param pulumi.Input[float] game_session_activation_timeout_seconds: Maximum amount of time (in seconds) that a game session can remain in status `ACTIVATING`.
        :param pulumi.Input[float] max_concurrent_game_session_activations: Maximum number of game sessions with status `ACTIVATING` to allow on an instance simultaneously.
        :param pulumi.Input[List[pulumi.Input['FleetRuntimeConfigurationServerProcessArgs']]] server_processes: Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
        """
        __self__.game_session_activation_timeout_seconds = game_session_activation_timeout_seconds
        __self__.max_concurrent_game_session_activations = max_concurrent_game_session_activations
        __self__.server_processes = server_processes

@pulumi.input_type
class FleetRuntimeConfigurationServerProcessArgs:
    concurrent_executions: pulumi.Input[float] = pulumi.input_property("concurrentExecutions")
    """
    Number of server processes using this configuration to run concurrently on an instance.
    """
    launch_path: pulumi.Input[str] = pulumi.input_property("launchPath")
    """
    Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
    """
    parameters: Optional[pulumi.Input[str]] = pulumi.input_property("parameters")
    """
    Optional list of parameters to pass to the server executable on launch.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, concurrent_executions: pulumi.Input[float], launch_path: pulumi.Input[str], parameters: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] concurrent_executions: Number of server processes using this configuration to run concurrently on an instance.
        :param pulumi.Input[str] launch_path: Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
        :param pulumi.Input[str] parameters: Optional list of parameters to pass to the server executable on launch.
        """
        __self__.concurrent_executions = concurrent_executions
        __self__.launch_path = launch_path
        __self__.parameters = parameters

@pulumi.input_type
class GameSessionQueuePlayerLatencyPolicyArgs:
    maximum_individual_player_latency_milliseconds: pulumi.Input[float] = pulumi.input_property("maximumIndividualPlayerLatencyMilliseconds")
    """
    Maximum latency value that is allowed for any player.
    """
    policy_duration_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("policyDurationSeconds")
    """
    Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, maximum_individual_player_latency_milliseconds: pulumi.Input[float], policy_duration_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] maximum_individual_player_latency_milliseconds: Maximum latency value that is allowed for any player.
        :param pulumi.Input[float] policy_duration_seconds: Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
        """
        __self__.maximum_individual_player_latency_milliseconds = maximum_individual_player_latency_milliseconds
        __self__.policy_duration_seconds = policy_duration_seconds

