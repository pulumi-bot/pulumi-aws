# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PlanRule',
    'PlanRuleCopyAction',
    'PlanRuleCopyActionLifecycle',
    'PlanRuleLifecycle',
    'SelectionSelectionTag',
]

@pulumi.output_type
class PlanRule(dict):
    completion_window: Optional[float] = pulumi.output_property("completionWindow")
    """
    The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
    """
    copy_actions: Optional[List['outputs.PlanRuleCopyAction']] = pulumi.output_property("copyActions")
    """
    Configuration block(s) with copy operation settings. Detailed below.
    """
    lifecycle: Optional['outputs.PlanRuleLifecycle'] = pulumi.output_property("lifecycle")
    """
    The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
    """
    recovery_point_tags: Optional[Dict[str, str]] = pulumi.output_property("recoveryPointTags")
    """
    Metadata that you can assign to help organize the resources that you create.
    """
    rule_name: str = pulumi.output_property("ruleName")
    """
    An display name for a backup rule.
    """
    schedule: Optional[str] = pulumi.output_property("schedule")
    """
    A CRON expression specifying when AWS Backup initiates a backup job.
    """
    start_window: Optional[float] = pulumi.output_property("startWindow")
    """
    The amount of time in minutes before beginning a backup.
    """
    target_vault_name: str = pulumi.output_property("targetVaultName")
    """
    The name of a logical container where backups are stored.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanRuleCopyAction(dict):
    destination_vault_arn: str = pulumi.output_property("destinationVaultArn")
    """
    An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
    """
    lifecycle: Optional['outputs.PlanRuleCopyActionLifecycle'] = pulumi.output_property("lifecycle")
    """
    The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanRuleCopyActionLifecycle(dict):
    cold_storage_after: Optional[float] = pulumi.output_property("coldStorageAfter")
    """
    Specifies the number of days after creation that a recovery point is moved to cold storage.
    """
    delete_after: Optional[float] = pulumi.output_property("deleteAfter")
    """
    Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `cold_storage_after`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanRuleLifecycle(dict):
    cold_storage_after: Optional[float] = pulumi.output_property("coldStorageAfter")
    """
    Specifies the number of days after creation that a recovery point is moved to cold storage.
    """
    delete_after: Optional[float] = pulumi.output_property("deleteAfter")
    """
    Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `cold_storage_after`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectionSelectionTag(dict):
    key: str = pulumi.output_property("key")
    """
    The key in a key-value pair.
    """
    type: str = pulumi.output_property("type")
    """
    An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
    """
    value: str = pulumi.output_property("value")
    """
    The value in a key-value pair.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


