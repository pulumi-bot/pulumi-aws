# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PlanRuleArgs',
    'PlanRuleCopyActionArgs',
    'PlanRuleCopyActionLifecycleArgs',
    'PlanRuleLifecycleArgs',
    'SelectionSelectionTagArgs',
]

@pulumi.input_type
class PlanRuleArgs:
    def __init__(__self__, *,
                 rule_name: pulumi.Input[str],
                 target_vault_name: pulumi.Input[str],
                 completion_window: Optional[pulumi.Input[float]] = None,
                 copy_actions: Optional[pulumi.Input[List[pulumi.Input['PlanRuleCopyActionArgs']]]] = None,
                 lifecycle: Optional[pulumi.Input['PlanRuleLifecycleArgs']] = None,
                 recovery_point_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 start_window: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "target_vault_name", target_vault_name)
        if completion_window is not None:
            pulumi.set(__self__, "completion_window", completion_window)
        if copy_actions is not None:
            pulumi.set(__self__, "copy_actions", copy_actions)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if recovery_point_tags is not None:
            pulumi.set(__self__, "recovery_point_tags", recovery_point_tags)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if start_window is not None:
            pulumi.set(__self__, "start_window", start_window)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="targetVaultName")
    def target_vault_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_vault_name")

    @target_vault_name.setter
    def target_vault_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_vault_name", value)

    @property
    @pulumi.getter(name="completionWindow")
    def completion_window(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "completion_window")

    @completion_window.setter
    def completion_window(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "completion_window", value)

    @property
    @pulumi.getter(name="copyActions")
    def copy_actions(self) -> Optional[pulumi.Input[List[pulumi.Input['PlanRuleCopyActionArgs']]]]:
        return pulumi.get(self, "copy_actions")

    @copy_actions.setter
    def copy_actions(self, value: Optional[pulumi.Input[List[pulumi.Input['PlanRuleCopyActionArgs']]]]):
        pulumi.set(self, "copy_actions", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['PlanRuleLifecycleArgs']]:
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['PlanRuleLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="recoveryPointTags")
    def recovery_point_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "recovery_point_tags")

    @recovery_point_tags.setter
    def recovery_point_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "recovery_point_tags", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="startWindow")
    def start_window(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_window")

    @start_window.setter
    def start_window(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_window", value)


@pulumi.input_type
class PlanRuleCopyActionArgs:
    def __init__(__self__, *,
                 destination_vault_arn: pulumi.Input[str],
                 lifecycle: Optional[pulumi.Input['PlanRuleCopyActionLifecycleArgs']] = None):
        pulumi.set(__self__, "destination_vault_arn", destination_vault_arn)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)

    @property
    @pulumi.getter(name="destinationVaultArn")
    def destination_vault_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_vault_arn")

    @destination_vault_arn.setter
    def destination_vault_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_vault_arn", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['PlanRuleCopyActionLifecycleArgs']]:
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['PlanRuleCopyActionLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)


@pulumi.input_type
class PlanRuleCopyActionLifecycleArgs:
    def __init__(__self__, *,
                 cold_storage_after: Optional[pulumi.Input[float]] = None,
                 delete_after: Optional[pulumi.Input[float]] = None):
        if cold_storage_after is not None:
            pulumi.set(__self__, "cold_storage_after", cold_storage_after)
        if delete_after is not None:
            pulumi.set(__self__, "delete_after", delete_after)

    @property
    @pulumi.getter(name="coldStorageAfter")
    def cold_storage_after(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "cold_storage_after")

    @cold_storage_after.setter
    def cold_storage_after(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cold_storage_after", value)

    @property
    @pulumi.getter(name="deleteAfter")
    def delete_after(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "delete_after")

    @delete_after.setter
    def delete_after(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "delete_after", value)


@pulumi.input_type
class PlanRuleLifecycleArgs:
    def __init__(__self__, *,
                 cold_storage_after: Optional[pulumi.Input[float]] = None,
                 delete_after: Optional[pulumi.Input[float]] = None):
        if cold_storage_after is not None:
            pulumi.set(__self__, "cold_storage_after", cold_storage_after)
        if delete_after is not None:
            pulumi.set(__self__, "delete_after", delete_after)

    @property
    @pulumi.getter(name="coldStorageAfter")
    def cold_storage_after(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "cold_storage_after")

    @cold_storage_after.setter
    def cold_storage_after(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cold_storage_after", value)

    @property
    @pulumi.getter(name="deleteAfter")
    def delete_after(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "delete_after")

    @delete_after.setter
    def delete_after(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "delete_after", value)


@pulumi.input_type
class SelectionSelectionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


