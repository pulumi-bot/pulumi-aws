# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = [
    'GetAmiFilterArgs',
    'GetAmiIdsFilterArgs',
    'GetAutoscalingGroupsFilterArgs',
    'GetAvailabilityZoneFilterArgs',
    'GetAvailabilityZonesFilterArgs',
    'GetElasticIpFilterArgs',
    'GetPrefixListFilterArgs',
    'GetRegionsFilterArgs',
    'ProviderAssumeRoleArgs',
    'ProviderEndpointArgs',
    'ProviderIgnoreTagsArgs',
]

@pulumi.input_type
class GetAmiFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the AMI that was provided during image creation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the AMI that was provided during image creation.
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetAmiIdsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetAutoscalingGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the filter. The valid values are: `auto-scaling-group`, `key`, `value`, and `propagate-at-launch`.
        :param List[str] values: The value of the filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter. The valid values are: `auto-scaling-group`, `key`, `value`, and `propagate-at-launch`.
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        The value of the filter.
        """
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetAvailabilityZoneFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        :param List[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetAvailabilityZonesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        :param List[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetElasticIpFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetPrefixListFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the filter field. Valid values can be found in the [EC2 DescribePrefixLists API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePrefixLists.html).
        :param List[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribePrefixLists API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePrefixLists.html).
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class GetRegionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: List[str]):
        """
        :param str name: The name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
        :param List[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
        """
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    @values.setter
    def values(self, value: List[str]):
        ...


@pulumi.input_type
class ProviderAssumeRoleArgs:
    def __init__(__self__, *,
                 duration_seconds: Optional[pulumi.Input[float]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 policy_arns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 session_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transitive_tag_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policy_arns is not None:
            pulumi.set(__self__, "policy_arns", policy_arns)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if session_name is not None:
            pulumi.set(__self__, "session_name", session_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transitive_tag_keys is not None:
            pulumi.set(__self__, "transitive_tag_keys", transitive_tag_keys)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[pulumi.Input[float]]:
        ...

    @duration_seconds.setter
    def duration_seconds(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        ...

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        ...

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="policyArns")
    def policy_arns(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        ...

    @policy_arns.setter
    def policy_arns(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        ...

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @session_name.setter
    def session_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        ...

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="transitiveTagKeys")
    def transitive_tag_keys(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        ...

    @transitive_tag_keys.setter
    def transitive_tag_keys(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ProviderEndpointArgs:
    def __init__(__self__, *,
                 accessanalyzer: Optional[pulumi.Input[str]] = None,
                 acm: Optional[pulumi.Input[str]] = None,
                 acmpca: Optional[pulumi.Input[str]] = None,
                 amplify: Optional[pulumi.Input[str]] = None,
                 apigateway: Optional[pulumi.Input[str]] = None,
                 applicationautoscaling: Optional[pulumi.Input[str]] = None,
                 applicationinsights: Optional[pulumi.Input[str]] = None,
                 appmesh: Optional[pulumi.Input[str]] = None,
                 appstream: Optional[pulumi.Input[str]] = None,
                 appsync: Optional[pulumi.Input[str]] = None,
                 athena: Optional[pulumi.Input[str]] = None,
                 autoscaling: Optional[pulumi.Input[str]] = None,
                 autoscalingplans: Optional[pulumi.Input[str]] = None,
                 backup: Optional[pulumi.Input[str]] = None,
                 batch: Optional[pulumi.Input[str]] = None,
                 budgets: Optional[pulumi.Input[str]] = None,
                 cloud9: Optional[pulumi.Input[str]] = None,
                 cloudformation: Optional[pulumi.Input[str]] = None,
                 cloudfront: Optional[pulumi.Input[str]] = None,
                 cloudhsm: Optional[pulumi.Input[str]] = None,
                 cloudsearch: Optional[pulumi.Input[str]] = None,
                 cloudtrail: Optional[pulumi.Input[str]] = None,
                 cloudwatch: Optional[pulumi.Input[str]] = None,
                 cloudwatchevents: Optional[pulumi.Input[str]] = None,
                 cloudwatchlogs: Optional[pulumi.Input[str]] = None,
                 codeartifact: Optional[pulumi.Input[str]] = None,
                 codebuild: Optional[pulumi.Input[str]] = None,
                 codecommit: Optional[pulumi.Input[str]] = None,
                 codedeploy: Optional[pulumi.Input[str]] = None,
                 codepipeline: Optional[pulumi.Input[str]] = None,
                 cognitoidentity: Optional[pulumi.Input[str]] = None,
                 cognitoidp: Optional[pulumi.Input[str]] = None,
                 configservice: Optional[pulumi.Input[str]] = None,
                 cur: Optional[pulumi.Input[str]] = None,
                 dataexchange: Optional[pulumi.Input[str]] = None,
                 datapipeline: Optional[pulumi.Input[str]] = None,
                 datasync: Optional[pulumi.Input[str]] = None,
                 dax: Optional[pulumi.Input[str]] = None,
                 devicefarm: Optional[pulumi.Input[str]] = None,
                 directconnect: Optional[pulumi.Input[str]] = None,
                 dlm: Optional[pulumi.Input[str]] = None,
                 dms: Optional[pulumi.Input[str]] = None,
                 docdb: Optional[pulumi.Input[str]] = None,
                 ds: Optional[pulumi.Input[str]] = None,
                 dynamodb: Optional[pulumi.Input[str]] = None,
                 ec2: Optional[pulumi.Input[str]] = None,
                 ecr: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[str]] = None,
                 efs: Optional[pulumi.Input[str]] = None,
                 eks: Optional[pulumi.Input[str]] = None,
                 elasticache: Optional[pulumi.Input[str]] = None,
                 elasticbeanstalk: Optional[pulumi.Input[str]] = None,
                 elastictranscoder: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 emr: Optional[pulumi.Input[str]] = None,
                 es: Optional[pulumi.Input[str]] = None,
                 firehose: Optional[pulumi.Input[str]] = None,
                 fms: Optional[pulumi.Input[str]] = None,
                 forecast: Optional[pulumi.Input[str]] = None,
                 fsx: Optional[pulumi.Input[str]] = None,
                 gamelift: Optional[pulumi.Input[str]] = None,
                 glacier: Optional[pulumi.Input[str]] = None,
                 globalaccelerator: Optional[pulumi.Input[str]] = None,
                 glue: Optional[pulumi.Input[str]] = None,
                 greengrass: Optional[pulumi.Input[str]] = None,
                 guardduty: Optional[pulumi.Input[str]] = None,
                 iam: Optional[pulumi.Input[str]] = None,
                 imagebuilder: Optional[pulumi.Input[str]] = None,
                 inspector: Optional[pulumi.Input[str]] = None,
                 iot: Optional[pulumi.Input[str]] = None,
                 iotanalytics: Optional[pulumi.Input[str]] = None,
                 iotevents: Optional[pulumi.Input[str]] = None,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kinesis: Optional[pulumi.Input[str]] = None,
                 kinesisanalytics: Optional[pulumi.Input[str]] = None,
                 kinesisanalyticsv2: Optional[pulumi.Input[str]] = None,
                 kinesisvideo: Optional[pulumi.Input[str]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 lakeformation: Optional[pulumi.Input[str]] = None,
                 lambda_: Optional[pulumi.Input[str]] = None,
                 lexmodels: Optional[pulumi.Input[str]] = None,
                 licensemanager: Optional[pulumi.Input[str]] = None,
                 lightsail: Optional[pulumi.Input[str]] = None,
                 macie: Optional[pulumi.Input[str]] = None,
                 managedblockchain: Optional[pulumi.Input[str]] = None,
                 marketplacecatalog: Optional[pulumi.Input[str]] = None,
                 mediaconnect: Optional[pulumi.Input[str]] = None,
                 mediaconvert: Optional[pulumi.Input[str]] = None,
                 medialive: Optional[pulumi.Input[str]] = None,
                 mediapackage: Optional[pulumi.Input[str]] = None,
                 mediastore: Optional[pulumi.Input[str]] = None,
                 mediastoredata: Optional[pulumi.Input[str]] = None,
                 mq: Optional[pulumi.Input[str]] = None,
                 neptune: Optional[pulumi.Input[str]] = None,
                 networkmanager: Optional[pulumi.Input[str]] = None,
                 opsworks: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[str]] = None,
                 outposts: Optional[pulumi.Input[str]] = None,
                 personalize: Optional[pulumi.Input[str]] = None,
                 pinpoint: Optional[pulumi.Input[str]] = None,
                 pricing: Optional[pulumi.Input[str]] = None,
                 qldb: Optional[pulumi.Input[str]] = None,
                 quicksight: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[str]] = None,
                 rds: Optional[pulumi.Input[str]] = None,
                 redshift: Optional[pulumi.Input[str]] = None,
                 resourcegroups: Optional[pulumi.Input[str]] = None,
                 resourcegroupstaggingapi: Optional[pulumi.Input[str]] = None,
                 route53: Optional[pulumi.Input[str]] = None,
                 route53domains: Optional[pulumi.Input[str]] = None,
                 route53resolver: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None,
                 s3control: Optional[pulumi.Input[str]] = None,
                 sagemaker: Optional[pulumi.Input[str]] = None,
                 sdb: Optional[pulumi.Input[str]] = None,
                 secretsmanager: Optional[pulumi.Input[str]] = None,
                 securityhub: Optional[pulumi.Input[str]] = None,
                 serverlessrepo: Optional[pulumi.Input[str]] = None,
                 servicecatalog: Optional[pulumi.Input[str]] = None,
                 servicediscovery: Optional[pulumi.Input[str]] = None,
                 servicequotas: Optional[pulumi.Input[str]] = None,
                 ses: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[str]] = None,
                 sns: Optional[pulumi.Input[str]] = None,
                 sqs: Optional[pulumi.Input[str]] = None,
                 ssm: Optional[pulumi.Input[str]] = None,
                 stepfunctions: Optional[pulumi.Input[str]] = None,
                 storagegateway: Optional[pulumi.Input[str]] = None,
                 sts: Optional[pulumi.Input[str]] = None,
                 swf: Optional[pulumi.Input[str]] = None,
                 synthetics: Optional[pulumi.Input[str]] = None,
                 transfer: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 wafregional: Optional[pulumi.Input[str]] = None,
                 wafv2: Optional[pulumi.Input[str]] = None,
                 worklink: Optional[pulumi.Input[str]] = None,
                 workmail: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[str]] = None,
                 xray: Optional[pulumi.Input[str]] = None):
        if accessanalyzer is not None:
            pulumi.set(__self__, "accessanalyzer", accessanalyzer)
        if acm is not None:
            pulumi.set(__self__, "acm", acm)
        if acmpca is not None:
            pulumi.set(__self__, "acmpca", acmpca)
        if amplify is not None:
            pulumi.set(__self__, "amplify", amplify)
        if apigateway is not None:
            pulumi.set(__self__, "apigateway", apigateway)
        if applicationautoscaling is not None:
            pulumi.set(__self__, "applicationautoscaling", applicationautoscaling)
        if applicationinsights is not None:
            pulumi.set(__self__, "applicationinsights", applicationinsights)
        if appmesh is not None:
            pulumi.set(__self__, "appmesh", appmesh)
        if appstream is not None:
            pulumi.set(__self__, "appstream", appstream)
        if appsync is not None:
            pulumi.set(__self__, "appsync", appsync)
        if athena is not None:
            pulumi.set(__self__, "athena", athena)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if autoscalingplans is not None:
            pulumi.set(__self__, "autoscalingplans", autoscalingplans)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if batch is not None:
            pulumi.set(__self__, "batch", batch)
        if budgets is not None:
            pulumi.set(__self__, "budgets", budgets)
        if cloud9 is not None:
            pulumi.set(__self__, "cloud9", cloud9)
        if cloudformation is not None:
            pulumi.set(__self__, "cloudformation", cloudformation)
        if cloudfront is not None:
            pulumi.set(__self__, "cloudfront", cloudfront)
        if cloudhsm is not None:
            pulumi.set(__self__, "cloudhsm", cloudhsm)
        if cloudsearch is not None:
            pulumi.set(__self__, "cloudsearch", cloudsearch)
        if cloudtrail is not None:
            pulumi.set(__self__, "cloudtrail", cloudtrail)
        if cloudwatch is not None:
            pulumi.set(__self__, "cloudwatch", cloudwatch)
        if cloudwatchevents is not None:
            pulumi.set(__self__, "cloudwatchevents", cloudwatchevents)
        if cloudwatchlogs is not None:
            pulumi.set(__self__, "cloudwatchlogs", cloudwatchlogs)
        if codeartifact is not None:
            pulumi.set(__self__, "codeartifact", codeartifact)
        if codebuild is not None:
            pulumi.set(__self__, "codebuild", codebuild)
        if codecommit is not None:
            pulumi.set(__self__, "codecommit", codecommit)
        if codedeploy is not None:
            pulumi.set(__self__, "codedeploy", codedeploy)
        if codepipeline is not None:
            pulumi.set(__self__, "codepipeline", codepipeline)
        if cognitoidentity is not None:
            pulumi.set(__self__, "cognitoidentity", cognitoidentity)
        if cognitoidp is not None:
            pulumi.set(__self__, "cognitoidp", cognitoidp)
        if configservice is not None:
            pulumi.set(__self__, "configservice", configservice)
        if cur is not None:
            pulumi.set(__self__, "cur", cur)
        if dataexchange is not None:
            pulumi.set(__self__, "dataexchange", dataexchange)
        if datapipeline is not None:
            pulumi.set(__self__, "datapipeline", datapipeline)
        if datasync is not None:
            pulumi.set(__self__, "datasync", datasync)
        if dax is not None:
            pulumi.set(__self__, "dax", dax)
        if devicefarm is not None:
            pulumi.set(__self__, "devicefarm", devicefarm)
        if directconnect is not None:
            pulumi.set(__self__, "directconnect", directconnect)
        if dlm is not None:
            pulumi.set(__self__, "dlm", dlm)
        if dms is not None:
            pulumi.set(__self__, "dms", dms)
        if docdb is not None:
            pulumi.set(__self__, "docdb", docdb)
        if ds is not None:
            pulumi.set(__self__, "ds", ds)
        if dynamodb is not None:
            pulumi.set(__self__, "dynamodb", dynamodb)
        if ec2 is not None:
            pulumi.set(__self__, "ec2", ec2)
        if ecr is not None:
            pulumi.set(__self__, "ecr", ecr)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if efs is not None:
            pulumi.set(__self__, "efs", efs)
        if eks is not None:
            pulumi.set(__self__, "eks", eks)
        if elasticache is not None:
            pulumi.set(__self__, "elasticache", elasticache)
        if elasticbeanstalk is not None:
            pulumi.set(__self__, "elasticbeanstalk", elasticbeanstalk)
        if elastictranscoder is not None:
            pulumi.set(__self__, "elastictranscoder", elastictranscoder)
        if elb is not None:
            pulumi.set(__self__, "elb", elb)
        if emr is not None:
            pulumi.set(__self__, "emr", emr)
        if es is not None:
            pulumi.set(__self__, "es", es)
        if firehose is not None:
            pulumi.set(__self__, "firehose", firehose)
        if fms is not None:
            pulumi.set(__self__, "fms", fms)
        if forecast is not None:
            pulumi.set(__self__, "forecast", forecast)
        if fsx is not None:
            pulumi.set(__self__, "fsx", fsx)
        if gamelift is not None:
            pulumi.set(__self__, "gamelift", gamelift)
        if glacier is not None:
            pulumi.set(__self__, "glacier", glacier)
        if globalaccelerator is not None:
            pulumi.set(__self__, "globalaccelerator", globalaccelerator)
        if glue is not None:
            pulumi.set(__self__, "glue", glue)
        if greengrass is not None:
            pulumi.set(__self__, "greengrass", greengrass)
        if guardduty is not None:
            pulumi.set(__self__, "guardduty", guardduty)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if imagebuilder is not None:
            pulumi.set(__self__, "imagebuilder", imagebuilder)
        if inspector is not None:
            pulumi.set(__self__, "inspector", inspector)
        if iot is not None:
            pulumi.set(__self__, "iot", iot)
        if iotanalytics is not None:
            pulumi.set(__self__, "iotanalytics", iotanalytics)
        if iotevents is not None:
            pulumi.set(__self__, "iotevents", iotevents)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kinesis is not None:
            pulumi.set(__self__, "kinesis", kinesis)
        if kinesisanalytics is not None:
            pulumi.set(__self__, "kinesisanalytics", kinesisanalytics)
        if kinesisanalyticsv2 is not None:
            pulumi.set(__self__, "kinesisanalyticsv2", kinesisanalyticsv2)
        if kinesisvideo is not None:
            pulumi.set(__self__, "kinesisvideo", kinesisvideo)
        if kms is not None:
            pulumi.set(__self__, "kms", kms)
        if lakeformation is not None:
            pulumi.set(__self__, "lakeformation", lakeformation)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)
        if lexmodels is not None:
            pulumi.set(__self__, "lexmodels", lexmodels)
        if licensemanager is not None:
            pulumi.set(__self__, "licensemanager", licensemanager)
        if lightsail is not None:
            pulumi.set(__self__, "lightsail", lightsail)
        if macie is not None:
            pulumi.set(__self__, "macie", macie)
        if managedblockchain is not None:
            pulumi.set(__self__, "managedblockchain", managedblockchain)
        if marketplacecatalog is not None:
            pulumi.set(__self__, "marketplacecatalog", marketplacecatalog)
        if mediaconnect is not None:
            pulumi.set(__self__, "mediaconnect", mediaconnect)
        if mediaconvert is not None:
            pulumi.set(__self__, "mediaconvert", mediaconvert)
        if medialive is not None:
            pulumi.set(__self__, "medialive", medialive)
        if mediapackage is not None:
            pulumi.set(__self__, "mediapackage", mediapackage)
        if mediastore is not None:
            pulumi.set(__self__, "mediastore", mediastore)
        if mediastoredata is not None:
            pulumi.set(__self__, "mediastoredata", mediastoredata)
        if mq is not None:
            pulumi.set(__self__, "mq", mq)
        if neptune is not None:
            pulumi.set(__self__, "neptune", neptune)
        if networkmanager is not None:
            pulumi.set(__self__, "networkmanager", networkmanager)
        if opsworks is not None:
            pulumi.set(__self__, "opsworks", opsworks)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if outposts is not None:
            pulumi.set(__self__, "outposts", outposts)
        if personalize is not None:
            pulumi.set(__self__, "personalize", personalize)
        if pinpoint is not None:
            pulumi.set(__self__, "pinpoint", pinpoint)
        if pricing is not None:
            pulumi.set(__self__, "pricing", pricing)
        if qldb is not None:
            pulumi.set(__self__, "qldb", qldb)
        if quicksight is not None:
            pulumi.set(__self__, "quicksight", quicksight)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if resourcegroups is not None:
            pulumi.set(__self__, "resourcegroups", resourcegroups)
        if resourcegroupstaggingapi is not None:
            pulumi.set(__self__, "resourcegroupstaggingapi", resourcegroupstaggingapi)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if route53domains is not None:
            pulumi.set(__self__, "route53domains", route53domains)
        if route53resolver is not None:
            pulumi.set(__self__, "route53resolver", route53resolver)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if s3control is not None:
            pulumi.set(__self__, "s3control", s3control)
        if sagemaker is not None:
            pulumi.set(__self__, "sagemaker", sagemaker)
        if sdb is not None:
            pulumi.set(__self__, "sdb", sdb)
        if secretsmanager is not None:
            pulumi.set(__self__, "secretsmanager", secretsmanager)
        if securityhub is not None:
            pulumi.set(__self__, "securityhub", securityhub)
        if serverlessrepo is not None:
            pulumi.set(__self__, "serverlessrepo", serverlessrepo)
        if servicecatalog is not None:
            pulumi.set(__self__, "servicecatalog", servicecatalog)
        if servicediscovery is not None:
            pulumi.set(__self__, "servicediscovery", servicediscovery)
        if servicequotas is not None:
            pulumi.set(__self__, "servicequotas", servicequotas)
        if ses is not None:
            pulumi.set(__self__, "ses", ses)
        if shield is not None:
            pulumi.set(__self__, "shield", shield)
        if sns is not None:
            pulumi.set(__self__, "sns", sns)
        if sqs is not None:
            pulumi.set(__self__, "sqs", sqs)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if stepfunctions is not None:
            pulumi.set(__self__, "stepfunctions", stepfunctions)
        if storagegateway is not None:
            pulumi.set(__self__, "storagegateway", storagegateway)
        if sts is not None:
            pulumi.set(__self__, "sts", sts)
        if swf is not None:
            pulumi.set(__self__, "swf", swf)
        if synthetics is not None:
            pulumi.set(__self__, "synthetics", synthetics)
        if transfer is not None:
            pulumi.set(__self__, "transfer", transfer)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if wafregional is not None:
            pulumi.set(__self__, "wafregional", wafregional)
        if wafv2 is not None:
            pulumi.set(__self__, "wafv2", wafv2)
        if worklink is not None:
            pulumi.set(__self__, "worklink", worklink)
        if workmail is not None:
            pulumi.set(__self__, "workmail", workmail)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)
        if xray is not None:
            pulumi.set(__self__, "xray", xray)

    @property
    @pulumi.getter
    def accessanalyzer(self) -> Optional[pulumi.Input[str]]:
        ...

    @accessanalyzer.setter
    def accessanalyzer(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input[str]]:
        ...

    @acm.setter
    def acm(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def acmpca(self) -> Optional[pulumi.Input[str]]:
        ...

    @acmpca.setter
    def acmpca(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def amplify(self) -> Optional[pulumi.Input[str]]:
        ...

    @amplify.setter
    def amplify(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def apigateway(self) -> Optional[pulumi.Input[str]]:
        ...

    @apigateway.setter
    def apigateway(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def applicationautoscaling(self) -> Optional[pulumi.Input[str]]:
        ...

    @applicationautoscaling.setter
    def applicationautoscaling(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def applicationinsights(self) -> Optional[pulumi.Input[str]]:
        ...

    @applicationinsights.setter
    def applicationinsights(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def appmesh(self) -> Optional[pulumi.Input[str]]:
        ...

    @appmesh.setter
    def appmesh(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def appstream(self) -> Optional[pulumi.Input[str]]:
        ...

    @appstream.setter
    def appstream(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def appsync(self) -> Optional[pulumi.Input[str]]:
        ...

    @appsync.setter
    def appsync(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def athena(self) -> Optional[pulumi.Input[str]]:
        ...

    @athena.setter
    def athena(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input[str]]:
        ...

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def autoscalingplans(self) -> Optional[pulumi.Input[str]]:
        ...

    @autoscalingplans.setter
    def autoscalingplans(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        ...

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def batch(self) -> Optional[pulumi.Input[str]]:
        ...

    @batch.setter
    def batch(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def budgets(self) -> Optional[pulumi.Input[str]]:
        ...

    @budgets.setter
    def budgets(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloud9(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloud9.setter
    def cloud9(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudformation(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudformation.setter
    def cloudformation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudfront(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudfront.setter
    def cloudfront(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudhsm(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudhsm.setter
    def cloudhsm(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudsearch(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudsearch.setter
    def cloudsearch(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudwatch(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudwatch.setter
    def cloudwatch(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudwatchevents(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudwatchevents.setter
    def cloudwatchevents(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cloudwatchlogs(self) -> Optional[pulumi.Input[str]]:
        ...

    @cloudwatchlogs.setter
    def cloudwatchlogs(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def codeartifact(self) -> Optional[pulumi.Input[str]]:
        ...

    @codeartifact.setter
    def codeartifact(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def codebuild(self) -> Optional[pulumi.Input[str]]:
        ...

    @codebuild.setter
    def codebuild(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def codecommit(self) -> Optional[pulumi.Input[str]]:
        ...

    @codecommit.setter
    def codecommit(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def codedeploy(self) -> Optional[pulumi.Input[str]]:
        ...

    @codedeploy.setter
    def codedeploy(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def codepipeline(self) -> Optional[pulumi.Input[str]]:
        ...

    @codepipeline.setter
    def codepipeline(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cognitoidentity(self) -> Optional[pulumi.Input[str]]:
        ...

    @cognitoidentity.setter
    def cognitoidentity(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cognitoidp(self) -> Optional[pulumi.Input[str]]:
        ...

    @cognitoidp.setter
    def cognitoidp(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def configservice(self) -> Optional[pulumi.Input[str]]:
        ...

    @configservice.setter
    def configservice(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def cur(self) -> Optional[pulumi.Input[str]]:
        ...

    @cur.setter
    def cur(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dataexchange(self) -> Optional[pulumi.Input[str]]:
        ...

    @dataexchange.setter
    def dataexchange(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def datapipeline(self) -> Optional[pulumi.Input[str]]:
        ...

    @datapipeline.setter
    def datapipeline(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def datasync(self) -> Optional[pulumi.Input[str]]:
        ...

    @datasync.setter
    def datasync(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dax(self) -> Optional[pulumi.Input[str]]:
        ...

    @dax.setter
    def dax(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def devicefarm(self) -> Optional[pulumi.Input[str]]:
        ...

    @devicefarm.setter
    def devicefarm(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def directconnect(self) -> Optional[pulumi.Input[str]]:
        ...

    @directconnect.setter
    def directconnect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dlm(self) -> Optional[pulumi.Input[str]]:
        ...

    @dlm.setter
    def dlm(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dms(self) -> Optional[pulumi.Input[str]]:
        ...

    @dms.setter
    def dms(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def docdb(self) -> Optional[pulumi.Input[str]]:
        ...

    @docdb.setter
    def docdb(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ds(self) -> Optional[pulumi.Input[str]]:
        ...

    @ds.setter
    def ds(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dynamodb(self) -> Optional[pulumi.Input[str]]:
        ...

    @dynamodb.setter
    def dynamodb(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ec2(self) -> Optional[pulumi.Input[str]]:
        ...

    @ec2.setter
    def ec2(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ecr(self) -> Optional[pulumi.Input[str]]:
        ...

    @ecr.setter
    def ecr(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input[str]]:
        ...

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def efs(self) -> Optional[pulumi.Input[str]]:
        ...

    @efs.setter
    def efs(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def eks(self) -> Optional[pulumi.Input[str]]:
        ...

    @eks.setter
    def eks(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def elasticache(self) -> Optional[pulumi.Input[str]]:
        ...

    @elasticache.setter
    def elasticache(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def elasticbeanstalk(self) -> Optional[pulumi.Input[str]]:
        ...

    @elasticbeanstalk.setter
    def elasticbeanstalk(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def elastictranscoder(self) -> Optional[pulumi.Input[str]]:
        ...

    @elastictranscoder.setter
    def elastictranscoder(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input[str]]:
        ...

    @elb.setter
    def elb(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def emr(self) -> Optional[pulumi.Input[str]]:
        ...

    @emr.setter
    def emr(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def es(self) -> Optional[pulumi.Input[str]]:
        ...

    @es.setter
    def es(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def firehose(self) -> Optional[pulumi.Input[str]]:
        ...

    @firehose.setter
    def firehose(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def fms(self) -> Optional[pulumi.Input[str]]:
        ...

    @fms.setter
    def fms(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def forecast(self) -> Optional[pulumi.Input[str]]:
        ...

    @forecast.setter
    def forecast(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def fsx(self) -> Optional[pulumi.Input[str]]:
        ...

    @fsx.setter
    def fsx(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def gamelift(self) -> Optional[pulumi.Input[str]]:
        ...

    @gamelift.setter
    def gamelift(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def glacier(self) -> Optional[pulumi.Input[str]]:
        ...

    @glacier.setter
    def glacier(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def globalaccelerator(self) -> Optional[pulumi.Input[str]]:
        ...

    @globalaccelerator.setter
    def globalaccelerator(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def glue(self) -> Optional[pulumi.Input[str]]:
        ...

    @glue.setter
    def glue(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def greengrass(self) -> Optional[pulumi.Input[str]]:
        ...

    @greengrass.setter
    def greengrass(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def guardduty(self) -> Optional[pulumi.Input[str]]:
        ...

    @guardduty.setter
    def guardduty(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input[str]]:
        ...

    @iam.setter
    def iam(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def imagebuilder(self) -> Optional[pulumi.Input[str]]:
        ...

    @imagebuilder.setter
    def imagebuilder(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def inspector(self) -> Optional[pulumi.Input[str]]:
        ...

    @inspector.setter
    def inspector(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def iot(self) -> Optional[pulumi.Input[str]]:
        ...

    @iot.setter
    def iot(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def iotanalytics(self) -> Optional[pulumi.Input[str]]:
        ...

    @iotanalytics.setter
    def iotanalytics(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def iotevents(self) -> Optional[pulumi.Input[str]]:
        ...

    @iotevents.setter
    def iotevents(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        ...

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input[str]]:
        ...

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kinesisanalytics(self) -> Optional[pulumi.Input[str]]:
        ...

    @kinesisanalytics.setter
    def kinesisanalytics(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kinesisanalyticsv2(self) -> Optional[pulumi.Input[str]]:
        ...

    @kinesisanalyticsv2.setter
    def kinesisanalyticsv2(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kinesisvideo(self) -> Optional[pulumi.Input[str]]:
        ...

    @kinesisvideo.setter
    def kinesisvideo(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kms(self) -> Optional[pulumi.Input[str]]:
        ...

    @kms.setter
    def kms(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def lakeformation(self) -> Optional[pulumi.Input[str]]:
        ...

    @lakeformation.setter
    def lakeformation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input[str]]:
        ...

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def lexmodels(self) -> Optional[pulumi.Input[str]]:
        ...

    @lexmodels.setter
    def lexmodels(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def licensemanager(self) -> Optional[pulumi.Input[str]]:
        ...

    @licensemanager.setter
    def licensemanager(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def lightsail(self) -> Optional[pulumi.Input[str]]:
        ...

    @lightsail.setter
    def lightsail(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def macie(self) -> Optional[pulumi.Input[str]]:
        ...

    @macie.setter
    def macie(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def managedblockchain(self) -> Optional[pulumi.Input[str]]:
        ...

    @managedblockchain.setter
    def managedblockchain(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def marketplacecatalog(self) -> Optional[pulumi.Input[str]]:
        ...

    @marketplacecatalog.setter
    def marketplacecatalog(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mediaconnect(self) -> Optional[pulumi.Input[str]]:
        ...

    @mediaconnect.setter
    def mediaconnect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mediaconvert(self) -> Optional[pulumi.Input[str]]:
        ...

    @mediaconvert.setter
    def mediaconvert(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def medialive(self) -> Optional[pulumi.Input[str]]:
        ...

    @medialive.setter
    def medialive(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mediapackage(self) -> Optional[pulumi.Input[str]]:
        ...

    @mediapackage.setter
    def mediapackage(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mediastore(self) -> Optional[pulumi.Input[str]]:
        ...

    @mediastore.setter
    def mediastore(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mediastoredata(self) -> Optional[pulumi.Input[str]]:
        ...

    @mediastoredata.setter
    def mediastoredata(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mq(self) -> Optional[pulumi.Input[str]]:
        ...

    @mq.setter
    def mq(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def neptune(self) -> Optional[pulumi.Input[str]]:
        ...

    @neptune.setter
    def neptune(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def networkmanager(self) -> Optional[pulumi.Input[str]]:
        ...

    @networkmanager.setter
    def networkmanager(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def opsworks(self) -> Optional[pulumi.Input[str]]:
        ...

    @opsworks.setter
    def opsworks(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[str]]:
        ...

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def outposts(self) -> Optional[pulumi.Input[str]]:
        ...

    @outposts.setter
    def outposts(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def personalize(self) -> Optional[pulumi.Input[str]]:
        ...

    @personalize.setter
    def personalize(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def pinpoint(self) -> Optional[pulumi.Input[str]]:
        ...

    @pinpoint.setter
    def pinpoint(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def pricing(self) -> Optional[pulumi.Input[str]]:
        ...

    @pricing.setter
    def pricing(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def qldb(self) -> Optional[pulumi.Input[str]]:
        ...

    @qldb.setter
    def qldb(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def quicksight(self) -> Optional[pulumi.Input[str]]:
        ...

    @quicksight.setter
    def quicksight(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[str]]:
        ...

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input[str]]:
        ...

    @rds.setter
    def rds(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input[str]]:
        ...

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def resourcegroups(self) -> Optional[pulumi.Input[str]]:
        ...

    @resourcegroups.setter
    def resourcegroups(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def resourcegroupstaggingapi(self) -> Optional[pulumi.Input[str]]:
        ...

    @resourcegroupstaggingapi.setter
    def resourcegroupstaggingapi(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input[str]]:
        ...

    @route53.setter
    def route53(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def route53domains(self) -> Optional[pulumi.Input[str]]:
        ...

    @route53domains.setter
    def route53domains(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def route53resolver(self) -> Optional[pulumi.Input[str]]:
        ...

    @route53resolver.setter
    def route53resolver(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input[str]]:
        ...

    @s3.setter
    def s3(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def s3control(self) -> Optional[pulumi.Input[str]]:
        ...

    @s3control.setter
    def s3control(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sagemaker(self) -> Optional[pulumi.Input[str]]:
        ...

    @sagemaker.setter
    def sagemaker(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sdb(self) -> Optional[pulumi.Input[str]]:
        ...

    @sdb.setter
    def sdb(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def secretsmanager(self) -> Optional[pulumi.Input[str]]:
        ...

    @secretsmanager.setter
    def secretsmanager(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def securityhub(self) -> Optional[pulumi.Input[str]]:
        ...

    @securityhub.setter
    def securityhub(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def serverlessrepo(self) -> Optional[pulumi.Input[str]]:
        ...

    @serverlessrepo.setter
    def serverlessrepo(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def servicecatalog(self) -> Optional[pulumi.Input[str]]:
        ...

    @servicecatalog.setter
    def servicecatalog(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def servicediscovery(self) -> Optional[pulumi.Input[str]]:
        ...

    @servicediscovery.setter
    def servicediscovery(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def servicequotas(self) -> Optional[pulumi.Input[str]]:
        ...

    @servicequotas.setter
    def servicequotas(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ses(self) -> Optional[pulumi.Input[str]]:
        ...

    @ses.setter
    def ses(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def shield(self) -> Optional[pulumi.Input[str]]:
        ...

    @shield.setter
    def shield(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input[str]]:
        ...

    @sns.setter
    def sns(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input[str]]:
        ...

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ssm(self) -> Optional[pulumi.Input[str]]:
        ...

    @ssm.setter
    def ssm(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def stepfunctions(self) -> Optional[pulumi.Input[str]]:
        ...

    @stepfunctions.setter
    def stepfunctions(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def storagegateway(self) -> Optional[pulumi.Input[str]]:
        ...

    @storagegateway.setter
    def storagegateway(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sts(self) -> Optional[pulumi.Input[str]]:
        ...

    @sts.setter
    def sts(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def swf(self) -> Optional[pulumi.Input[str]]:
        ...

    @swf.setter
    def swf(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def synthetics(self) -> Optional[pulumi.Input[str]]:
        ...

    @synthetics.setter
    def synthetics(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def transfer(self) -> Optional[pulumi.Input[str]]:
        ...

    @transfer.setter
    def transfer(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        ...

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def wafregional(self) -> Optional[pulumi.Input[str]]:
        ...

    @wafregional.setter
    def wafregional(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def wafv2(self) -> Optional[pulumi.Input[str]]:
        ...

    @wafv2.setter
    def wafv2(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def worklink(self) -> Optional[pulumi.Input[str]]:
        ...

    @worklink.setter
    def worklink(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def workmail(self) -> Optional[pulumi.Input[str]]:
        ...

    @workmail.setter
    def workmail(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[str]]:
        ...

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def xray(self) -> Optional[pulumi.Input[str]]:
        ...

    @xray.setter
    def xray(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProviderIgnoreTagsArgs:
    def __init__(__self__, *,
                 key_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key_prefixes is not None:
            pulumi.set(__self__, "key_prefixes", key_prefixes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="keyPrefixes")
    def key_prefixes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        ...

    @key_prefixes.setter
    def key_prefixes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        ...

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


