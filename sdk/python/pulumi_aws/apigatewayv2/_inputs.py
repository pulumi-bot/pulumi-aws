# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApiCorsConfigurationArgs',
    'AuthorizerJwtConfigurationArgs',
    'DomainNameDomainNameConfigurationArgs',
    'StageAccessLogSettingsArgs',
    'StageDefaultRouteSettingsArgs',
    'StageRouteSettingArgs',
]

@pulumi.input_type
class ApiCorsConfigurationArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: Whether credentials are included in the CORS request.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: The set of allowed HTTP headers.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: The set of allowed HTTP methods.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: The set of allowed origins.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: The set of exposed HTTP headers.
        :param pulumi.Input[float] max_age: The number of seconds that the browser should cache preflight request results.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether credentials are included in the CORS request.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of allowed HTTP headers.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of allowed HTTP methods.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of allowed origins.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of exposed HTTP headers.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        The number of seconds that the browser should cache preflight request results.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AuthorizerJwtConfigurationArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] audiences: A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
        :param pulumi.Input[str] issuer: The base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `cognito.UserPool` resource.
        """
        pulumi.set(__self__, "audiences", audiences)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
        """
        ...

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `cognito.UserPool` resource.
        """
        ...

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DomainNameDomainNameConfigurationArgs:
    def __init__(__self__, *,
                 certificate_arn: pulumi.Input[str],
                 endpoint_type: pulumi.Input[str],
                 security_policy: pulumi.Input[str],
                 hosted_zone_id: Optional[pulumi.Input[str]] = None,
                 target_domain_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_arn: The ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source.
               Use the `acm.Certificate` resource to configure an ACM certificate.
        :param pulumi.Input[str] endpoint_type: The endpoint type. Valid values: `REGIONAL`.
        :param pulumi.Input[str] security_policy: The Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
        :param pulumi.Input[str] hosted_zone_id: The Amazon Route 53 Hosted Zone ID of the endpoint.
        :param pulumi.Input[str] target_domain_name: The target domain name.
        """
        pulumi.set(__self__, "certificateArn", certificate_arn)
        pulumi.set(__self__, "endpointType", endpoint_type)
        pulumi.set(__self__, "securityPolicy", security_policy)
        pulumi.set(__self__, "hostedZoneId", hosted_zone_id)
        pulumi.set(__self__, "targetDomainName", target_domain_name)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> pulumi.Input[str]:
        """
        The ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source.
        Use the `acm.Certificate` resource to configure an ACM certificate.
        """
        ...

    @certificate_arn.setter
    def certificate_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Input[str]:
        """
        The endpoint type. Valid values: `REGIONAL`.
        """
        ...

    @endpoint_type.setter
    def endpoint_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> pulumi.Input[str]:
        """
        The Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
        """
        ...

    @security_policy.setter
    def security_policy(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Route 53 Hosted Zone ID of the endpoint.
        """
        ...

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="targetDomainName")
    def target_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target domain name.
        """
        ...

    @target_domain_name.setter
    def target_domain_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class StageAccessLogSettingsArgs:
    def __init__(__self__, *,
                 destination_arn: pulumi.Input[str],
                 format: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination_arn: The ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
        :param pulumi.Input[str] format: A single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data, as specified by [selected $context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html).
        """
        pulumi.set(__self__, "destinationArn", destination_arn)
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
        """
        ...

    @destination_arn.setter
    def destination_arn(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        A single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data, as specified by [selected $context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html).
        """
        ...

    @format.setter
    def format(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class StageDefaultRouteSettingsArgs:
    def __init__(__self__, *,
                 data_trace_enabled: Optional[pulumi.Input[bool]] = None,
                 detailed_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 logging_level: Optional[pulumi.Input[str]] = None,
                 throttling_burst_limit: Optional[pulumi.Input[float]] = None,
                 throttling_rate_limit: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] data_trace_enabled: Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
               Defaults to `false`. Supported only for WebSocket APIs.
        :param pulumi.Input[bool] detailed_metrics_enabled: Whether detailed metrics are enabled for the default route. Defaults to `false`.
        :param pulumi.Input[str] logging_level: The logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
               Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs.
        :param pulumi.Input[float] throttling_burst_limit: The throttling burst limit for the default route.
        :param pulumi.Input[float] throttling_rate_limit: The throttling rate limit for the default route.
        """
        pulumi.set(__self__, "dataTraceEnabled", data_trace_enabled)
        pulumi.set(__self__, "detailedMetricsEnabled", detailed_metrics_enabled)
        pulumi.set(__self__, "loggingLevel", logging_level)
        pulumi.set(__self__, "throttlingBurstLimit", throttling_burst_limit)
        pulumi.set(__self__, "throttlingRateLimit", throttling_rate_limit)

    @property
    @pulumi.getter(name="dataTraceEnabled")
    def data_trace_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
        Defaults to `false`. Supported only for WebSocket APIs.
        """
        ...

    @data_trace_enabled.setter
    def data_trace_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="detailedMetricsEnabled")
    def detailed_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether detailed metrics are enabled for the default route. Defaults to `false`.
        """
        ...

    @detailed_metrics_enabled.setter
    def detailed_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[pulumi.Input[str]]:
        """
        The logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
        Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs.
        """
        ...

    @logging_level.setter
    def logging_level(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="throttlingBurstLimit")
    def throttling_burst_limit(self) -> Optional[pulumi.Input[float]]:
        """
        The throttling burst limit for the default route.
        """
        ...

    @throttling_burst_limit.setter
    def throttling_burst_limit(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="throttlingRateLimit")
    def throttling_rate_limit(self) -> Optional[pulumi.Input[float]]:
        """
        The throttling rate limit for the default route.
        """
        ...

    @throttling_rate_limit.setter
    def throttling_rate_limit(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class StageRouteSettingArgs:
    def __init__(__self__, *,
                 route_key: pulumi.Input[str],
                 data_trace_enabled: Optional[pulumi.Input[bool]] = None,
                 detailed_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 logging_level: Optional[pulumi.Input[str]] = None,
                 throttling_burst_limit: Optional[pulumi.Input[float]] = None,
                 throttling_rate_limit: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] route_key: Route key.
        :param pulumi.Input[bool] data_trace_enabled: Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
               Defaults to `false`. Supported only for WebSocket APIs.
        :param pulumi.Input[bool] detailed_metrics_enabled: Whether detailed metrics are enabled for the route. Defaults to `false`.
        :param pulumi.Input[str] logging_level: The logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
               Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs.
        :param pulumi.Input[float] throttling_burst_limit: The throttling burst limit for the route.
        :param pulumi.Input[float] throttling_rate_limit: The throttling rate limit for the route.
        """
        pulumi.set(__self__, "routeKey", route_key)
        pulumi.set(__self__, "dataTraceEnabled", data_trace_enabled)
        pulumi.set(__self__, "detailedMetricsEnabled", detailed_metrics_enabled)
        pulumi.set(__self__, "loggingLevel", logging_level)
        pulumi.set(__self__, "throttlingBurstLimit", throttling_burst_limit)
        pulumi.set(__self__, "throttlingRateLimit", throttling_rate_limit)

    @property
    @pulumi.getter(name="routeKey")
    def route_key(self) -> pulumi.Input[str]:
        """
        Route key.
        """
        ...

    @route_key.setter
    def route_key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="dataTraceEnabled")
    def data_trace_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
        Defaults to `false`. Supported only for WebSocket APIs.
        """
        ...

    @data_trace_enabled.setter
    def data_trace_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="detailedMetricsEnabled")
    def detailed_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether detailed metrics are enabled for the route. Defaults to `false`.
        """
        ...

    @detailed_metrics_enabled.setter
    def detailed_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[pulumi.Input[str]]:
        """
        The logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
        Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs.
        """
        ...

    @logging_level.setter
    def logging_level(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="throttlingBurstLimit")
    def throttling_burst_limit(self) -> Optional[pulumi.Input[float]]:
        """
        The throttling burst limit for the route.
        """
        ...

    @throttling_burst_limit.setter
    def throttling_burst_limit(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="throttlingRateLimit")
    def throttling_rate_limit(self) -> Optional[pulumi.Input[float]]:
        """
        The throttling rate limit for the route.
        """
        ...

    @throttling_rate_limit.setter
    def throttling_rate_limit(self, value: Optional[pulumi.Input[float]]):
        ...


