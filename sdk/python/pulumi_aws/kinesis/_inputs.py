# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AnalyticsApplicationCloudwatchLoggingOptionsArgs',
    'AnalyticsApplicationInputsArgs',
    'AnalyticsApplicationInputsKinesisFirehoseArgs',
    'AnalyticsApplicationInputsKinesisStreamArgs',
    'AnalyticsApplicationInputsParallelismArgs',
    'AnalyticsApplicationInputsProcessingConfigurationArgs',
    'AnalyticsApplicationInputsProcessingConfigurationLambdaArgs',
    'AnalyticsApplicationInputsSchemaArgs',
    'AnalyticsApplicationInputsSchemaRecordColumnArgs',
    'AnalyticsApplicationInputsSchemaRecordFormatArgs',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs',
    'AnalyticsApplicationInputsStartingPositionConfigurationArgs',
    'AnalyticsApplicationOutputArgs',
    'AnalyticsApplicationOutputKinesisFirehoseArgs',
    'AnalyticsApplicationOutputKinesisStreamArgs',
    'AnalyticsApplicationOutputLambdaArgs',
    'AnalyticsApplicationOutputSchemaArgs',
    'AnalyticsApplicationReferenceDataSourcesArgs',
    'AnalyticsApplicationReferenceDataSourcesS3Args',
    'AnalyticsApplicationReferenceDataSourcesSchemaArgs',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs',
    'FirehoseDeliveryStreamElasticsearchConfigurationArgs',
    'FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamKinesisSourceConfigurationArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamS3ConfigurationArgs',
    'FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamServerSideEncryptionArgs',
    'FirehoseDeliveryStreamSplunkConfigurationArgs',
    'FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs',
]

@pulumi.input_type
class AnalyticsApplicationCloudwatchLoggingOptionsArgs:
    log_stream_arn: pulumi.Input[str] = pulumi.input_property("logStreamArn")
    """
    The ARN of the CloudWatch Log Stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to send application messages.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_stream_arn: pulumi.Input[str], role_arn: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] log_stream_arn: The ARN of the CloudWatch Log Stream.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to send application messages.
        :param pulumi.Input[str] id: The ARN of the Kinesis Analytics Application.
        """
        __self__.log_stream_arn = log_stream_arn
        __self__.role_arn = role_arn
        __self__.id = id

@pulumi.input_type
class AnalyticsApplicationInputsArgs:
    name_prefix: pulumi.Input[str] = pulumi.input_property("namePrefix")
    """
    The Name Prefix to use when creating an in-application stream.
    """
    schema: pulumi.Input['AnalyticsApplicationInputsSchemaArgs'] = pulumi.input_property("schema")
    """
    The Schema format of the data in the streaming source. See Source Schema below for more details.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    kinesis_firehose: Optional[pulumi.Input['AnalyticsApplicationInputsKinesisFirehoseArgs']] = pulumi.input_property("kinesisFirehose")
    """
    The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
    See Kinesis Firehose below for more details.
    """
    kinesis_stream: Optional[pulumi.Input['AnalyticsApplicationInputsKinesisStreamArgs']] = pulumi.input_property("kinesisStream")
    """
    The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
    See Kinesis Stream below for more details.
    """
    parallelism: Optional[pulumi.Input['AnalyticsApplicationInputsParallelismArgs']] = pulumi.input_property("parallelism")
    """
    The number of Parallel in-application streams to create.
    See Parallelism below for more details.
    """
    processing_configuration: Optional[pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationArgs']] = pulumi.input_property("processingConfiguration")
    """
    The Processing Configuration to transform records as they are received from the stream.
    See Processing Configuration below for more details.
    """
    starting_position_configurations: Optional[pulumi.Input[List[pulumi.Input['AnalyticsApplicationInputsStartingPositionConfigurationArgs']]]] = pulumi.input_property("startingPositionConfigurations")
    stream_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("streamNames")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name_prefix: pulumi.Input[str], schema: pulumi.Input['AnalyticsApplicationInputsSchemaArgs'], id: Optional[pulumi.Input[str]] = None, kinesis_firehose: Optional[pulumi.Input['AnalyticsApplicationInputsKinesisFirehoseArgs']] = None, kinesis_stream: Optional[pulumi.Input['AnalyticsApplicationInputsKinesisStreamArgs']] = None, parallelism: Optional[pulumi.Input['AnalyticsApplicationInputsParallelismArgs']] = None, processing_configuration: Optional[pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationArgs']] = None, starting_position_configurations: Optional[pulumi.Input[List[pulumi.Input['AnalyticsApplicationInputsStartingPositionConfigurationArgs']]]] = None, stream_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name_prefix: The Name Prefix to use when creating an in-application stream.
        :param pulumi.Input['AnalyticsApplicationInputsSchemaArgs'] schema: The Schema format of the data in the streaming source. See Source Schema below for more details.
        :param pulumi.Input[str] id: The ARN of the Kinesis Analytics Application.
        :param pulumi.Input['AnalyticsApplicationInputsKinesisFirehoseArgs'] kinesis_firehose: The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
               See Kinesis Firehose below for more details.
        :param pulumi.Input['AnalyticsApplicationInputsKinesisStreamArgs'] kinesis_stream: The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
               See Kinesis Stream below for more details.
        :param pulumi.Input['AnalyticsApplicationInputsParallelismArgs'] parallelism: The number of Parallel in-application streams to create.
               See Parallelism below for more details.
        :param pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationArgs'] processing_configuration: The Processing Configuration to transform records as they are received from the stream.
               See Processing Configuration below for more details.
        """
        __self__.name_prefix = name_prefix
        __self__.schema = schema
        __self__.id = id
        __self__.kinesis_firehose = kinesis_firehose
        __self__.kinesis_stream = kinesis_stream
        __self__.parallelism = parallelism
        __self__.processing_configuration = processing_configuration
        __self__.starting_position_configurations = starting_position_configurations
        __self__.stream_names = stream_names

@pulumi.input_type
class AnalyticsApplicationInputsKinesisFirehoseArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Kinesis Firehose delivery stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Kinesis Firehose delivery stream.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the stream.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationInputsKinesisStreamArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Kinesis Stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Kinesis Stream.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the stream.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationInputsParallelismArgs:
    count: pulumi.Input[float] = pulumi.input_property("count")
    """
    The Count of streams.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, count: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] count: The Count of streams.
        """
        __self__.count = count

@pulumi.input_type
class AnalyticsApplicationInputsProcessingConfigurationArgs:
    lambda_: pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationLambdaArgs'] = pulumi.input_property("lambda")
    """
    The Lambda function configuration. See Lambda below for more details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, lambda_: pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationLambdaArgs']) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationInputsProcessingConfigurationLambdaArgs'] lambda_: The Lambda function configuration. See Lambda below for more details.
        """
        __self__.lambda_ = lambda_

@pulumi.input_type
class AnalyticsApplicationInputsProcessingConfigurationLambdaArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Lambda function.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the Lambda function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Lambda function.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the Lambda function.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationInputsSchemaArgs:
    record_columns: pulumi.Input[List[pulumi.Input['AnalyticsApplicationInputsSchemaRecordColumnArgs']]] = pulumi.input_property("recordColumns")
    """
    The Record Column mapping for the streaming source data element.
    See Record Columns below for more details.
    """
    record_format: pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatArgs'] = pulumi.input_property("recordFormat")
    """
    The Record Format and mapping information to schematize a record.
    See Record Format below for more details.
    """
    record_encoding: Optional[pulumi.Input[str]] = pulumi.input_property("recordEncoding")
    """
    The Encoding of the record in the streaming source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_columns: pulumi.Input[List[pulumi.Input['AnalyticsApplicationInputsSchemaRecordColumnArgs']]], record_format: pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatArgs'], record_encoding: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['AnalyticsApplicationInputsSchemaRecordColumnArgs']]] record_columns: The Record Column mapping for the streaming source data element.
               See Record Columns below for more details.
        :param pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatArgs'] record_format: The Record Format and mapping information to schematize a record.
               See Record Format below for more details.
        :param pulumi.Input[str] record_encoding: The Encoding of the record in the streaming source.
        """
        __self__.record_columns = record_columns
        __self__.record_format = record_format
        __self__.record_encoding = record_encoding

@pulumi.input_type
class AnalyticsApplicationInputsSchemaRecordColumnArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the column.
    """
    sql_type: pulumi.Input[str] = pulumi.input_property("sqlType")
    """
    The SQL Type of the column.
    """
    mapping: Optional[pulumi.Input[str]] = pulumi.input_property("mapping")
    """
    The Mapping reference to the data element.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], sql_type: pulumi.Input[str], mapping: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Name of the column.
        :param pulumi.Input[str] sql_type: The SQL Type of the column.
        :param pulumi.Input[str] mapping: The Mapping reference to the data element.
        """
        __self__.name = name
        __self__.sql_type = sql_type
        __self__.mapping = mapping

@pulumi.input_type
class AnalyticsApplicationInputsSchemaRecordFormatArgs:
    mapping_parameters: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs']] = pulumi.input_property("mappingParameters")
    """
    The Mapping Information for the record format.
    See Mapping Parameters below for more details.
    """
    record_format_type: Optional[pulumi.Input[str]] = pulumi.input_property("recordFormatType")
    """
    The type of Record Format. Can be `CSV` or `JSON`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mapping_parameters: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs']] = None, record_format_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs'] mapping_parameters: The Mapping Information for the record format.
               See Mapping Parameters below for more details.
        :param pulumi.Input[str] record_format_type: The type of Record Format. Can be `CSV` or `JSON`.
        """
        __self__.mapping_parameters = mapping_parameters
        __self__.record_format_type = record_format_type

@pulumi.input_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs:
    csv: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs']] = pulumi.input_property("csv")
    """
    Mapping information when the record format uses delimiters.
    See CSV Mapping Parameters below for more details.
    """
    json: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs']] = pulumi.input_property("json")
    """
    Mapping information when JSON is the record format on the streaming source.
    See JSON Mapping Parameters below for more details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, csv: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs']] = None, json: Optional[pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs']] = None) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs'] csv: Mapping information when the record format uses delimiters.
               See CSV Mapping Parameters below for more details.
        :param pulumi.Input['AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs'] json: Mapping information when JSON is the record format on the streaming source.
               See JSON Mapping Parameters below for more details.
        """
        __self__.csv = csv
        __self__.json = json

@pulumi.input_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs:
    record_column_delimiter: pulumi.Input[str] = pulumi.input_property("recordColumnDelimiter")
    """
    The Column Delimiter.
    """
    record_row_delimiter: pulumi.Input[str] = pulumi.input_property("recordRowDelimiter")
    """
    The Row Delimiter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_column_delimiter: pulumi.Input[str], record_row_delimiter: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] record_column_delimiter: The Column Delimiter.
        :param pulumi.Input[str] record_row_delimiter: The Row Delimiter.
        """
        __self__.record_column_delimiter = record_column_delimiter
        __self__.record_row_delimiter = record_row_delimiter

@pulumi.input_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs:
    record_row_path: pulumi.Input[str] = pulumi.input_property("recordRowPath")
    """
    Path to the top-level parent that contains the records.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_row_path: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] record_row_path: Path to the top-level parent that contains the records.
        """
        __self__.record_row_path = record_row_path

@pulumi.input_type
class AnalyticsApplicationInputsStartingPositionConfigurationArgs:
    starting_position: Optional[pulumi.Input[str]] = pulumi.input_property("startingPosition")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, starting_position: Optional[pulumi.Input[str]] = None) -> None:
        __self__.starting_position = starting_position

@pulumi.input_type
class AnalyticsApplicationOutputArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the in-application stream.
    """
    schema: pulumi.Input['AnalyticsApplicationOutputSchemaArgs'] = pulumi.input_property("schema")
    """
    The Schema format of the data written to the destination. See Destination Schema below for more details.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    kinesis_firehose: Optional[pulumi.Input['AnalyticsApplicationOutputKinesisFirehoseArgs']] = pulumi.input_property("kinesisFirehose")
    """
    The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesis_stream`.
    See Kinesis Firehose below for more details.
    """
    kinesis_stream: Optional[pulumi.Input['AnalyticsApplicationOutputKinesisStreamArgs']] = pulumi.input_property("kinesisStream")
    """
    The Kinesis Stream configuration for the destination stream. Conflicts with `kinesis_firehose`.
    See Kinesis Stream below for more details.
    """
    lambda_: Optional[pulumi.Input['AnalyticsApplicationOutputLambdaArgs']] = pulumi.input_property("lambda")
    """
    The Lambda function destination. See Lambda below for more details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], schema: pulumi.Input['AnalyticsApplicationOutputSchemaArgs'], id: Optional[pulumi.Input[str]] = None, kinesis_firehose: Optional[pulumi.Input['AnalyticsApplicationOutputKinesisFirehoseArgs']] = None, kinesis_stream: Optional[pulumi.Input['AnalyticsApplicationOutputKinesisStreamArgs']] = None, lambda_: Optional[pulumi.Input['AnalyticsApplicationOutputLambdaArgs']] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of the in-application stream.
        :param pulumi.Input['AnalyticsApplicationOutputSchemaArgs'] schema: The Schema format of the data written to the destination. See Destination Schema below for more details.
        :param pulumi.Input[str] id: The ARN of the Kinesis Analytics Application.
        :param pulumi.Input['AnalyticsApplicationOutputKinesisFirehoseArgs'] kinesis_firehose: The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesis_stream`.
               See Kinesis Firehose below for more details.
        :param pulumi.Input['AnalyticsApplicationOutputKinesisStreamArgs'] kinesis_stream: The Kinesis Stream configuration for the destination stream. Conflicts with `kinesis_firehose`.
               See Kinesis Stream below for more details.
        :param pulumi.Input['AnalyticsApplicationOutputLambdaArgs'] lambda_: The Lambda function destination. See Lambda below for more details.
        """
        __self__.name = name
        __self__.schema = schema
        __self__.id = id
        __self__.kinesis_firehose = kinesis_firehose
        __self__.kinesis_stream = kinesis_stream
        __self__.lambda_ = lambda_

@pulumi.input_type
class AnalyticsApplicationOutputKinesisFirehoseArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Kinesis Firehose delivery stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Kinesis Firehose delivery stream.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the stream.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationOutputKinesisStreamArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Kinesis Stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Kinesis Stream.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the stream.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationOutputLambdaArgs:
    resource_arn: pulumi.Input[str] = pulumi.input_property("resourceArn")
    """
    The ARN of the Lambda function.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to access the Lambda function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] resource_arn: The ARN of the Lambda function.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to access the Lambda function.
        """
        __self__.resource_arn = resource_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationOutputSchemaArgs:
    record_format_type: Optional[pulumi.Input[str]] = pulumi.input_property("recordFormatType")
    """
    The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_format_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] record_format_type: The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
        """
        __self__.record_format_type = record_format_type

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesArgs:
    s3: pulumi.Input['AnalyticsApplicationReferenceDataSourcesS3Args'] = pulumi.input_property("s3")
    """
    The S3 configuration for the reference data source. See S3 Reference below for more details.
    """
    schema: pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaArgs'] = pulumi.input_property("schema")
    """
    The Schema format of the data in the streaming source. See Source Schema below for more details.
    """
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    The in-application Table Name.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, s3: pulumi.Input['AnalyticsApplicationReferenceDataSourcesS3Args'], schema: pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaArgs'], table_name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesS3Args'] s3: The S3 configuration for the reference data source. See S3 Reference below for more details.
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaArgs'] schema: The Schema format of the data in the streaming source. See Source Schema below for more details.
        :param pulumi.Input[str] table_name: The in-application Table Name.
        :param pulumi.Input[str] id: The ARN of the Kinesis Analytics Application.
        """
        __self__.s3 = s3
        __self__.schema = schema
        __self__.table_name = table_name
        __self__.id = id

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesS3Args:
    bucket_arn: pulumi.Input[str] = pulumi.input_property("bucketArn")
    """
    The S3 Bucket ARN.
    """
    file_key: pulumi.Input[str] = pulumi.input_property("fileKey")
    """
    The File Key name containing reference data.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM Role used to send application messages.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_arn: pulumi.Input[str], file_key: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket_arn: The S3 Bucket ARN.
        :param pulumi.Input[str] file_key: The File Key name containing reference data.
        :param pulumi.Input[str] role_arn: The ARN of the IAM Role used to send application messages.
        """
        __self__.bucket_arn = bucket_arn
        __self__.file_key = file_key
        __self__.role_arn = role_arn

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaArgs:
    record_columns: pulumi.Input[List[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs']]] = pulumi.input_property("recordColumns")
    """
    The Record Column mapping for the streaming source data element.
    See Record Columns below for more details.
    """
    record_format: pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs'] = pulumi.input_property("recordFormat")
    """
    The Record Format and mapping information to schematize a record.
    See Record Format below for more details.
    """
    record_encoding: Optional[pulumi.Input[str]] = pulumi.input_property("recordEncoding")
    """
    The Encoding of the record in the streaming source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_columns: pulumi.Input[List[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs']]], record_format: pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs'], record_encoding: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs']]] record_columns: The Record Column mapping for the streaming source data element.
               See Record Columns below for more details.
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs'] record_format: The Record Format and mapping information to schematize a record.
               See Record Format below for more details.
        :param pulumi.Input[str] record_encoding: The Encoding of the record in the streaming source.
        """
        __self__.record_columns = record_columns
        __self__.record_format = record_format
        __self__.record_encoding = record_encoding

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the column.
    """
    sql_type: pulumi.Input[str] = pulumi.input_property("sqlType")
    """
    The SQL Type of the column.
    """
    mapping: Optional[pulumi.Input[str]] = pulumi.input_property("mapping")
    """
    The Mapping reference to the data element.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], sql_type: pulumi.Input[str], mapping: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Name of the column.
        :param pulumi.Input[str] sql_type: The SQL Type of the column.
        :param pulumi.Input[str] mapping: The Mapping reference to the data element.
        """
        __self__.name = name
        __self__.sql_type = sql_type
        __self__.mapping = mapping

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs:
    mapping_parameters: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs']] = pulumi.input_property("mappingParameters")
    """
    The Mapping Information for the record format.
    See Mapping Parameters below for more details.
    """
    record_format_type: Optional[pulumi.Input[str]] = pulumi.input_property("recordFormatType")
    """
    The type of Record Format. Can be `CSV` or `JSON`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mapping_parameters: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs']] = None, record_format_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs'] mapping_parameters: The Mapping Information for the record format.
               See Mapping Parameters below for more details.
        :param pulumi.Input[str] record_format_type: The type of Record Format. Can be `CSV` or `JSON`.
        """
        __self__.mapping_parameters = mapping_parameters
        __self__.record_format_type = record_format_type

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs:
    csv: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs']] = pulumi.input_property("csv")
    """
    Mapping information when the record format uses delimiters.
    See CSV Mapping Parameters below for more details.
    """
    json: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs']] = pulumi.input_property("json")
    """
    Mapping information when JSON is the record format on the streaming source.
    See JSON Mapping Parameters below for more details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, csv: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs']] = None, json: Optional[pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs']] = None) -> None:
        """
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs'] csv: Mapping information when the record format uses delimiters.
               See CSV Mapping Parameters below for more details.
        :param pulumi.Input['AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs'] json: Mapping information when JSON is the record format on the streaming source.
               See JSON Mapping Parameters below for more details.
        """
        __self__.csv = csv
        __self__.json = json

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs:
    record_column_delimiter: pulumi.Input[str] = pulumi.input_property("recordColumnDelimiter")
    """
    The Column Delimiter.
    """
    record_row_delimiter: pulumi.Input[str] = pulumi.input_property("recordRowDelimiter")
    """
    The Row Delimiter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_column_delimiter: pulumi.Input[str], record_row_delimiter: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] record_column_delimiter: The Column Delimiter.
        :param pulumi.Input[str] record_row_delimiter: The Row Delimiter.
        """
        __self__.record_column_delimiter = record_column_delimiter
        __self__.record_row_delimiter = record_row_delimiter

@pulumi.input_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs:
    record_row_path: pulumi.Input[str] = pulumi.input_property("recordRowPath")
    """
    Path to the top-level parent that contains the records.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, record_row_path: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] record_row_path: Path to the top-level parent that contains the records.
        """
        __self__.record_row_path = record_row_path

@pulumi.input_type
class FirehoseDeliveryStreamElasticsearchConfigurationArgs:
    domain_arn: pulumi.Input[str] = pulumi.input_property("domainArn")
    """
    The ARN of the Amazon ES domain.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig` after assuming `RoleARN`.  The pattern needs to be `arn:.*`.
    """
    index_name: pulumi.Input[str] = pulumi.input_property("indexName")
    """
    The Elasticsearch index name.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
    """
    buffering_interval: Optional[pulumi.Input[float]] = pulumi.input_property("bufferingInterval")
    """
    Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
    """
    buffering_size: Optional[pulumi.Input[float]] = pulumi.input_property("bufferingSize")
    """
    Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    index_rotation_period: Optional[pulumi.Input[str]] = pulumi.input_property("indexRotationPeriod")
    """
    The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
    """
    processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs']] = pulumi.input_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[pulumi.Input[float]] = pulumi.input_property("retryDuration")
    """
    After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    """
    s3_backup_mode: Optional[pulumi.Input[str]] = pulumi.input_property("s3BackupMode")
    """
    Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
    """
    type_name: Optional[pulumi.Input[str]] = pulumi.input_property("typeName")
    """
    The Elasticsearch type name with maximum length of 100 characters.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, domain_arn: pulumi.Input[str], index_name: pulumi.Input[str], role_arn: pulumi.Input[str], buffering_interval: Optional[pulumi.Input[float]] = None, buffering_size: Optional[pulumi.Input[float]] = None, cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs']] = None, index_rotation_period: Optional[pulumi.Input[str]] = None, processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs']] = None, retry_duration: Optional[pulumi.Input[float]] = None, s3_backup_mode: Optional[pulumi.Input[str]] = None, type_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] domain_arn: The ARN of the Amazon ES domain.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig` after assuming `RoleARN`.  The pattern needs to be `arn:.*`.
        :param pulumi.Input[str] index_name: The Elasticsearch index name.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
        :param pulumi.Input[float] buffering_interval: Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
        :param pulumi.Input[float] buffering_size: Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
        :param pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] index_rotation_period: The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
        :param pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs'] processing_configuration: The data processing configuration.  More details are given below.
        :param pulumi.Input[float] retry_duration: After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
        :param pulumi.Input[str] s3_backup_mode: Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
        :param pulumi.Input[str] type_name: The Elasticsearch type name with maximum length of 100 characters.
        """
        __self__.domain_arn = domain_arn
        __self__.index_name = index_name
        __self__.role_arn = role_arn
        __self__.buffering_interval = buffering_interval
        __self__.buffering_size = buffering_size
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.index_rotation_period = index_rotation_period
        __self__.processing_configuration = processing_configuration
        __self__.retry_duration = retry_duration
        __self__.s3_backup_mode = s3_backup_mode
        __self__.type_name = type_name

@pulumi.input_type
class FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs']]]] = pulumi.input_property("processors")
    """
    Array of data processors. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs']]]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables data processing.
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs']]] processors: Array of data processors. More details are given below
        """
        __self__.enabled = enabled
        __self__.processors = processors

@pulumi.input_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs']]]] = pulumi.input_property("parameters")
    """
    Array of processor parameters. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of processor. Valid Values: `Lambda`
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs']]] parameters: Array of processor parameters. More details are given below
        """
        __self__.type = type
        __self__.parameters = parameters

@pulumi.input_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs:
    parameter_name: pulumi.Input[str] = pulumi.input_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: pulumi.Input[str] = pulumi.input_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, parameter_name: pulumi.Input[str], parameter_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] parameter_name: Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        :param pulumi.Input[str] parameter_value: Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        __self__.parameter_name = parameter_name
        __self__.parameter_value = parameter_value

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationArgs:
    bucket_arn: pulumi.Input[str] = pulumi.input_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    buffer_interval: Optional[pulumi.Input[float]] = pulumi.input_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[pulumi.Input[float]] = pulumi.input_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[pulumi.Input[str]] = pulumi.input_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    data_format_conversion_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs']] = pulumi.input_property("dataFormatConversionConfiguration")
    """
    Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
    """
    error_output_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("errorOutputPrefix")
    """
    Prefix added to failed records before writing them to S3. This prefix appears immediately following the bucket name.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """
    processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs']] = pulumi.input_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    s3_backup_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs']] = pulumi.input_property("s3BackupConfiguration")
    """
    The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
    """
    s3_backup_mode: Optional[pulumi.Input[str]] = pulumi.input_property("s3BackupMode")
    """
    The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_arn: pulumi.Input[str], role_arn: pulumi.Input[str], buffer_interval: Optional[pulumi.Input[float]] = None, buffer_size: Optional[pulumi.Input[float]] = None, cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs']] = None, compression_format: Optional[pulumi.Input[str]] = None, data_format_conversion_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs']] = None, error_output_prefix: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None, processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs']] = None, s3_backup_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs']] = None, s3_backup_mode: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket_arn: The ARN of the S3 bucket
        :param pulumi.Input[str] role_arn: The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        :param pulumi.Input[float] buffer_interval: Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        :param pulumi.Input[float] buffer_size: Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
               We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] compression_format: The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs'] data_format_conversion_configuration: Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
        :param pulumi.Input[str] error_output_prefix: Prefix added to failed records before writing them to S3. This prefix appears immediately following the bucket name.
        :param pulumi.Input[str] kms_key_arn: Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
               be used.
        :param pulumi.Input[str] prefix: The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs'] processing_configuration: The data processing configuration.  More details are given below.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs'] s3_backup_configuration: The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
        :param pulumi.Input[str] s3_backup_mode: The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
        """
        __self__.bucket_arn = bucket_arn
        __self__.role_arn = role_arn
        __self__.buffer_interval = buffer_interval
        __self__.buffer_size = buffer_size
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.compression_format = compression_format
        __self__.data_format_conversion_configuration = data_format_conversion_configuration
        __self__.error_output_prefix = error_output_prefix
        __self__.kms_key_arn = kms_key_arn
        __self__.prefix = prefix
        __self__.processing_configuration = processing_configuration
        __self__.s3_backup_configuration = s3_backup_configuration
        __self__.s3_backup_mode = s3_backup_mode

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs:
    input_format_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs'] = pulumi.input_property("inputFormatConfiguration")
    """
    Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
    """
    output_format_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs'] = pulumi.input_property("outputFormatConfiguration")
    """
    Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
    """
    schema_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs'] = pulumi.input_property("schemaConfiguration")
    """
    Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, input_format_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs'], output_format_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs'], schema_configuration: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs'], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs'] input_format_configuration: Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs'] output_format_configuration: Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs'] schema_configuration: Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
        :param pulumi.Input[bool] enabled: Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
        """
        __self__.input_format_configuration = input_format_configuration
        __self__.output_format_configuration = output_format_configuration
        __self__.schema_configuration = schema_configuration
        __self__.enabled = enabled

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs:
    deserializer: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs'] = pulumi.input_property("deserializer")
    """
    Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, deserializer: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs']) -> None:
        """
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs'] deserializer: Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
        """
        __self__.deserializer = deserializer

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs:
    hive_json_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs']] = pulumi.input_property("hiveJsonSerDe")
    """
    Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
    """
    open_x_json_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs']] = pulumi.input_property("openXJsonSerDe")
    """
    Nested argument that specifies the OpenX SerDe. More details below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hive_json_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs']] = None, open_x_json_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs']] = None) -> None:
        """
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs'] hive_json_ser_de: Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs'] open_x_json_ser_de: Nested argument that specifies the OpenX SerDe. More details below.
        """
        __self__.hive_json_ser_de = hive_json_ser_de
        __self__.open_x_json_ser_de = open_x_json_ser_de

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs:
    timestamp_formats: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("timestampFormats")
    """
    A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, timestamp_formats: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] timestamp_formats: A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
        """
        __self__.timestamp_formats = timestamp_formats

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs:
    case_insensitive: Optional[pulumi.Input[bool]] = pulumi.input_property("caseInsensitive")
    """
    When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
    """
    column_to_json_key_mappings: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("columnToJsonKeyMappings")
    """
    A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
    """
    convert_dots_in_json_keys_to_underscores: Optional[pulumi.Input[bool]] = pulumi.input_property("convertDotsInJsonKeysToUnderscores")
    """
    When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, case_insensitive: Optional[pulumi.Input[bool]] = None, column_to_json_key_mappings: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, convert_dots_in_json_keys_to_underscores: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] case_insensitive: When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] column_to_json_key_mappings: A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
        :param pulumi.Input[bool] convert_dots_in_json_keys_to_underscores: When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to `false`.
        """
        __self__.case_insensitive = case_insensitive
        __self__.column_to_json_key_mappings = column_to_json_key_mappings
        __self__.convert_dots_in_json_keys_to_underscores = convert_dots_in_json_keys_to_underscores

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs:
    serializer: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs'] = pulumi.input_property("serializer")
    """
    Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, serializer: pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs']) -> None:
        """
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs'] serializer: Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
        """
        __self__.serializer = serializer

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs:
    orc_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs']] = pulumi.input_property("orcSerDe")
    """
    Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
    """
    parquet_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs']] = pulumi.input_property("parquetSerDe")
    """
    Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, orc_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs']] = None, parquet_ser_de: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs']] = None) -> None:
        """
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs'] orc_ser_de: Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs'] parquet_ser_de: Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
        """
        __self__.orc_ser_de = orc_ser_de
        __self__.parquet_ser_de = parquet_ser_de

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs:
    block_size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("blockSizeBytes")
    """
    The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    """
    bloom_filter_columns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("bloomFilterColumns")
    """
    A list of column names for which you want Kinesis Data Firehose to create bloom filters.
    """
    bloom_filter_false_positive_probability: Optional[pulumi.Input[float]] = pulumi.input_property("bloomFilterFalsePositiveProbability")
    """
    The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
    """
    compression: Optional[pulumi.Input[str]] = pulumi.input_property("compression")
    """
    The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
    """
    dictionary_key_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("dictionaryKeyThreshold")
    """
    A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
    """
    enable_padding: Optional[pulumi.Input[bool]] = pulumi.input_property("enablePadding")
    """
    Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
    """
    format_version: Optional[pulumi.Input[str]] = pulumi.input_property("formatVersion")
    """
    The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
    """
    padding_tolerance: Optional[pulumi.Input[float]] = pulumi.input_property("paddingTolerance")
    """
    A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enable_padding` is `false`.
    """
    row_index_stride: Optional[pulumi.Input[float]] = pulumi.input_property("rowIndexStride")
    """
    The number of rows between index entries. The default is `10000` and the minimum is `1000`.
    """
    stripe_size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("stripeSizeBytes")
    """
    The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, block_size_bytes: Optional[pulumi.Input[float]] = None, bloom_filter_columns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, bloom_filter_false_positive_probability: Optional[pulumi.Input[float]] = None, compression: Optional[pulumi.Input[str]] = None, dictionary_key_threshold: Optional[pulumi.Input[float]] = None, enable_padding: Optional[pulumi.Input[bool]] = None, format_version: Optional[pulumi.Input[str]] = None, padding_tolerance: Optional[pulumi.Input[float]] = None, row_index_stride: Optional[pulumi.Input[float]] = None, stripe_size_bytes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] block_size_bytes: The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        :param pulumi.Input[List[pulumi.Input[str]]] bloom_filter_columns: A list of column names for which you want Kinesis Data Firehose to create bloom filters.
        :param pulumi.Input[float] bloom_filter_false_positive_probability: The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
        :param pulumi.Input[str] compression: The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
        :param pulumi.Input[float] dictionary_key_threshold: A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
        :param pulumi.Input[bool] enable_padding: Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
        :param pulumi.Input[str] format_version: The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
        :param pulumi.Input[float] padding_tolerance: A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enable_padding` is `false`.
        :param pulumi.Input[float] row_index_stride: The number of rows between index entries. The default is `10000` and the minimum is `1000`.
        :param pulumi.Input[float] stripe_size_bytes: The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
        """
        __self__.block_size_bytes = block_size_bytes
        __self__.bloom_filter_columns = bloom_filter_columns
        __self__.bloom_filter_false_positive_probability = bloom_filter_false_positive_probability
        __self__.compression = compression
        __self__.dictionary_key_threshold = dictionary_key_threshold
        __self__.enable_padding = enable_padding
        __self__.format_version = format_version
        __self__.padding_tolerance = padding_tolerance
        __self__.row_index_stride = row_index_stride
        __self__.stripe_size_bytes = stripe_size_bytes

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs:
    block_size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("blockSizeBytes")
    """
    The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    """
    compression: Optional[pulumi.Input[str]] = pulumi.input_property("compression")
    """
    The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
    """
    enable_dictionary_compression: Optional[pulumi.Input[bool]] = pulumi.input_property("enableDictionaryCompression")
    """
    Indicates whether to enable dictionary compression.
    """
    max_padding_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("maxPaddingBytes")
    """
    The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
    """
    page_size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("pageSizeBytes")
    """
    The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
    """
    writer_version: Optional[pulumi.Input[str]] = pulumi.input_property("writerVersion")
    """
    Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, block_size_bytes: Optional[pulumi.Input[float]] = None, compression: Optional[pulumi.Input[str]] = None, enable_dictionary_compression: Optional[pulumi.Input[bool]] = None, max_padding_bytes: Optional[pulumi.Input[float]] = None, page_size_bytes: Optional[pulumi.Input[float]] = None, writer_version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] block_size_bytes: The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        :param pulumi.Input[str] compression: The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
        :param pulumi.Input[bool] enable_dictionary_compression: Indicates whether to enable dictionary compression.
        :param pulumi.Input[float] max_padding_bytes: The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
        :param pulumi.Input[float] page_size_bytes: The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
        :param pulumi.Input[str] writer_version: Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
        """
        __self__.block_size_bytes = block_size_bytes
        __self__.compression = compression
        __self__.enable_dictionary_compression = enable_dictionary_compression
        __self__.max_padding_bytes = max_padding_bytes
        __self__.page_size_bytes = page_size_bytes
        __self__.writer_version = writer_version

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    Specifies the name of the AWS Glue database that contains the schema for the output data.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    """
    catalog_id: Optional[pulumi.Input[str]] = pulumi.input_property("catalogId")
    """
    The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
    """
    region: Optional[pulumi.Input[str]] = pulumi.input_property("region")
    """
    If you don't specify an AWS Region, the default is the current region.
    """
    version_id: Optional[pulumi.Input[str]] = pulumi.input_property("versionId")
    """
    Specifies the table version for the output data schema. Defaults to `LATEST`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], role_arn: pulumi.Input[str], table_name: pulumi.Input[str], catalog_id: Optional[pulumi.Input[str]] = None, region: Optional[pulumi.Input[str]] = None, version_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] database_name: Specifies the name of the AWS Glue database that contains the schema for the output data.
        :param pulumi.Input[str] role_arn: The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        :param pulumi.Input[str] table_name: Specifies the AWS Glue table that contains the column information that constitutes your data schema.
        :param pulumi.Input[str] catalog_id: The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
        :param pulumi.Input[str] region: If you don't specify an AWS Region, the default is the current region.
        :param pulumi.Input[str] version_id: Specifies the table version for the output data schema. Defaults to `LATEST`.
        """
        __self__.database_name = database_name
        __self__.role_arn = role_arn
        __self__.table_name = table_name
        __self__.catalog_id = catalog_id
        __self__.region = region
        __self__.version_id = version_id

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs']]]] = pulumi.input_property("processors")
    """
    Array of data processors. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs']]]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables data processing.
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs']]] processors: Array of data processors. More details are given below
        """
        __self__.enabled = enabled
        __self__.processors = processors

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs']]]] = pulumi.input_property("parameters")
    """
    Array of processor parameters. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of processor. Valid Values: `Lambda`
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs']]] parameters: Array of processor parameters. More details are given below
        """
        __self__.type = type
        __self__.parameters = parameters

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs:
    parameter_name: pulumi.Input[str] = pulumi.input_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: pulumi.Input[str] = pulumi.input_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, parameter_name: pulumi.Input[str], parameter_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] parameter_name: Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        :param pulumi.Input[str] parameter_value: Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        __self__.parameter_name = parameter_name
        __self__.parameter_value = parameter_value

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs:
    bucket_arn: pulumi.Input[str] = pulumi.input_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    buffer_interval: Optional[pulumi.Input[float]] = pulumi.input_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[pulumi.Input[float]] = pulumi.input_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[pulumi.Input[str]] = pulumi.input_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_arn: pulumi.Input[str], role_arn: pulumi.Input[str], buffer_interval: Optional[pulumi.Input[float]] = None, buffer_size: Optional[pulumi.Input[float]] = None, cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs']] = None, compression_format: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket_arn: The ARN of the S3 bucket
        :param pulumi.Input[str] role_arn: The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        :param pulumi.Input[float] buffer_interval: Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        :param pulumi.Input[float] buffer_size: Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
               We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        :param pulumi.Input['FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] compression_format: The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        :param pulumi.Input[str] kms_key_arn: Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
               be used.
        :param pulumi.Input[str] prefix: The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        __self__.bucket_arn = bucket_arn
        __self__.role_arn = role_arn
        __self__.buffer_interval = buffer_interval
        __self__.buffer_size = buffer_size
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.compression_format = compression_format
        __self__.kms_key_arn = kms_key_arn
        __self__.prefix = prefix

@pulumi.input_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamKinesisSourceConfigurationArgs:
    kinesis_stream_arn: pulumi.Input[str] = pulumi.input_property("kinesisStreamArn")
    """
    The kinesis stream used as the source of the firehose delivery stream.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of the role that provides access to the source Kinesis stream.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kinesis_stream_arn: pulumi.Input[str], role_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] kinesis_stream_arn: The kinesis stream used as the source of the firehose delivery stream.
        :param pulumi.Input[str] role_arn: The ARN of the role that provides access to the source Kinesis stream.
        """
        __self__.kinesis_stream_arn = kinesis_stream_arn
        __self__.role_arn = role_arn

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationArgs:
    cluster_jdbcurl: pulumi.Input[str] = pulumi.input_property("clusterJdbcurl")
    """
    The jdbcurl of the redshift cluster.
    """
    data_table_name: pulumi.Input[str] = pulumi.input_property("dataTableName")
    """
    The name of the table in the redshift cluster that the s3 bucket will copy to.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password for the username above.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The arn of the role the stream assumes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    copy_options: Optional[pulumi.Input[str]] = pulumi.input_property("copyOptions")
    """
    Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
    """
    data_table_columns: Optional[pulumi.Input[str]] = pulumi.input_property("dataTableColumns")
    """
    The data table columns that will be targeted by the copy command.
    """
    processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs']] = pulumi.input_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[pulumi.Input[float]] = pulumi.input_property("retryDuration")
    """
    The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
    """
    s3_backup_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs']] = pulumi.input_property("s3BackupConfiguration")
    """
    The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
    """
    s3_backup_mode: Optional[pulumi.Input[str]] = pulumi.input_property("s3BackupMode")
    """
    The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cluster_jdbcurl: pulumi.Input[str], data_table_name: pulumi.Input[str], password: pulumi.Input[str], role_arn: pulumi.Input[str], username: pulumi.Input[str], cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs']] = None, copy_options: Optional[pulumi.Input[str]] = None, data_table_columns: Optional[pulumi.Input[str]] = None, processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs']] = None, retry_duration: Optional[pulumi.Input[float]] = None, s3_backup_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs']] = None, s3_backup_mode: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cluster_jdbcurl: The jdbcurl of the redshift cluster.
        :param pulumi.Input[str] data_table_name: The name of the table in the redshift cluster that the s3 bucket will copy to.
        :param pulumi.Input[str] password: The password for the username above.
        :param pulumi.Input[str] role_arn: The arn of the role the stream assumes.
        :param pulumi.Input[str] username: The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
        :param pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] copy_options: Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
        :param pulumi.Input[str] data_table_columns: The data table columns that will be targeted by the copy command.
        :param pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs'] processing_configuration: The data processing configuration.  More details are given below.
        :param pulumi.Input[float] retry_duration: The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        :param pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs'] s3_backup_configuration: The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
        :param pulumi.Input[str] s3_backup_mode: The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
        """
        __self__.cluster_jdbcurl = cluster_jdbcurl
        __self__.data_table_name = data_table_name
        __self__.password = password
        __self__.role_arn = role_arn
        __self__.username = username
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.copy_options = copy_options
        __self__.data_table_columns = data_table_columns
        __self__.processing_configuration = processing_configuration
        __self__.retry_duration = retry_duration
        __self__.s3_backup_configuration = s3_backup_configuration
        __self__.s3_backup_mode = s3_backup_mode

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs']]]] = pulumi.input_property("processors")
    """
    Array of data processors. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs']]]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables data processing.
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs']]] processors: Array of data processors. More details are given below
        """
        __self__.enabled = enabled
        __self__.processors = processors

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs']]]] = pulumi.input_property("parameters")
    """
    Array of processor parameters. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of processor. Valid Values: `Lambda`
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs']]] parameters: Array of processor parameters. More details are given below
        """
        __self__.type = type
        __self__.parameters = parameters

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs:
    parameter_name: pulumi.Input[str] = pulumi.input_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: pulumi.Input[str] = pulumi.input_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, parameter_name: pulumi.Input[str], parameter_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] parameter_name: Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        :param pulumi.Input[str] parameter_value: Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        __self__.parameter_name = parameter_name
        __self__.parameter_value = parameter_value

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs:
    bucket_arn: pulumi.Input[str] = pulumi.input_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    buffer_interval: Optional[pulumi.Input[float]] = pulumi.input_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[pulumi.Input[float]] = pulumi.input_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[pulumi.Input[str]] = pulumi.input_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_arn: pulumi.Input[str], role_arn: pulumi.Input[str], buffer_interval: Optional[pulumi.Input[float]] = None, buffer_size: Optional[pulumi.Input[float]] = None, cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs']] = None, compression_format: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket_arn: The ARN of the S3 bucket
        :param pulumi.Input[str] role_arn: The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        :param pulumi.Input[float] buffer_interval: Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        :param pulumi.Input[float] buffer_size: Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
               We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        :param pulumi.Input['FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] compression_format: The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        :param pulumi.Input[str] kms_key_arn: Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
               be used.
        :param pulumi.Input[str] prefix: The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        __self__.bucket_arn = bucket_arn
        __self__.role_arn = role_arn
        __self__.buffer_interval = buffer_interval
        __self__.buffer_size = buffer_size
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.compression_format = compression_format
        __self__.kms_key_arn = kms_key_arn
        __self__.prefix = prefix

@pulumi.input_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamS3ConfigurationArgs:
    bucket_arn: pulumi.Input[str] = pulumi.input_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    buffer_interval: Optional[pulumi.Input[float]] = pulumi.input_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[pulumi.Input[float]] = pulumi.input_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[pulumi.Input[str]] = pulumi.input_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_arn: pulumi.Input[str], role_arn: pulumi.Input[str], buffer_interval: Optional[pulumi.Input[float]] = None, buffer_size: Optional[pulumi.Input[float]] = None, cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsArgs']] = None, compression_format: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket_arn: The ARN of the S3 bucket
        :param pulumi.Input[str] role_arn: The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        :param pulumi.Input[float] buffer_interval: Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        :param pulumi.Input[float] buffer_size: Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
               We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        :param pulumi.Input['FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below
        :param pulumi.Input[str] compression_format: The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        :param pulumi.Input[str] kms_key_arn: Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
               be used.
        :param pulumi.Input[str] prefix: The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        __self__.bucket_arn = bucket_arn
        __self__.role_arn = role_arn
        __self__.buffer_interval = buffer_interval
        __self__.buffer_size = buffer_size
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.compression_format = compression_format
        __self__.kms_key_arn = kms_key_arn
        __self__.prefix = prefix

@pulumi.input_type
class FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamServerSideEncryptionArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Whether to enable encryption at rest. Default is `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Whether to enable encryption at rest. Default is `false`.
        """
        __self__.enabled = enabled

@pulumi.input_type
class FirehoseDeliveryStreamSplunkConfigurationArgs:
    hec_endpoint: pulumi.Input[str] = pulumi.input_property("hecEndpoint")
    """
    The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
    """
    hec_token: pulumi.Input[str] = pulumi.input_property("hecToken")
    """
    The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
    """
    cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs']] = pulumi.input_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below.
    """
    hec_acknowledgment_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("hecAcknowledgmentTimeout")
    """
    The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
    """
    hec_endpoint_type: Optional[pulumi.Input[str]] = pulumi.input_property("hecEndpointType")
    """
    The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
    """
    processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs']] = pulumi.input_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[pulumi.Input[float]] = pulumi.input_property("retryDuration")
    """
    After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    """
    s3_backup_mode: Optional[pulumi.Input[str]] = pulumi.input_property("s3BackupMode")
    """
    Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hec_endpoint: pulumi.Input[str], hec_token: pulumi.Input[str], cloudwatch_logging_options: Optional[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs']] = None, hec_acknowledgment_timeout: Optional[pulumi.Input[float]] = None, hec_endpoint_type: Optional[pulumi.Input[str]] = None, processing_configuration: Optional[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs']] = None, retry_duration: Optional[pulumi.Input[float]] = None, s3_backup_mode: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] hec_endpoint: The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        :param pulumi.Input[str] hec_token: The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        :param pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs'] cloudwatch_logging_options: The CloudWatch Logging Options for the delivery stream. More details are given below.
        :param pulumi.Input[float] hec_acknowledgment_timeout: The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
        :param pulumi.Input[str] hec_endpoint_type: The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
        :param pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs'] processing_configuration: The data processing configuration.  More details are given below.
        :param pulumi.Input[float] retry_duration: After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
        :param pulumi.Input[str] s3_backup_mode: Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
        """
        __self__.hec_endpoint = hec_endpoint
        __self__.hec_token = hec_token
        __self__.cloudwatch_logging_options = cloudwatch_logging_options
        __self__.hec_acknowledgment_timeout = hec_acknowledgment_timeout
        __self__.hec_endpoint_type = hec_endpoint_type
        __self__.processing_configuration = processing_configuration
        __self__.retry_duration = retry_duration
        __self__.s3_backup_mode = s3_backup_mode

@pulumi.input_type
class FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, log_group_name: Optional[pulumi.Input[str]] = None, log_stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables the logging. Defaults to `false`.
        :param pulumi.Input[str] log_group_name: The CloudWatch group name for logging. This value is required if `enabled` is true.
        :param pulumi.Input[str] log_stream_name: The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        __self__.enabled = enabled
        __self__.log_group_name = log_group_name
        __self__.log_stream_name = log_stream_name

@pulumi.input_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs']]]] = pulumi.input_property("processors")
    """
    Array of data processors. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, processors: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs']]]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Enables or disables data processing.
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs']]] processors: Array of data processors. More details are given below
        """
        __self__.enabled = enabled
        __self__.processors = processors

@pulumi.input_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs']]]] = pulumi.input_property("parameters")
    """
    Array of processor parameters. More details are given below
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], parameters: Optional[pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of processor. Valid Values: `Lambda`
        :param pulumi.Input[List[pulumi.Input['FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs']]] parameters: Array of processor parameters. More details are given below
        """
        __self__.type = type
        __self__.parameters = parameters

@pulumi.input_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs:
    parameter_name: pulumi.Input[str] = pulumi.input_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: pulumi.Input[str] = pulumi.input_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, parameter_name: pulumi.Input[str], parameter_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] parameter_name: Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        :param pulumi.Input[str] parameter_value: Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        __self__.parameter_name = parameter_name
        __self__.parameter_value = parameter_value

