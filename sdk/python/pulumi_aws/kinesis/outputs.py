# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AnalyticsApplicationCloudwatchLoggingOptions',
    'AnalyticsApplicationInputs',
    'AnalyticsApplicationInputsKinesisFirehose',
    'AnalyticsApplicationInputsKinesisStream',
    'AnalyticsApplicationInputsParallelism',
    'AnalyticsApplicationInputsProcessingConfiguration',
    'AnalyticsApplicationInputsProcessingConfigurationLambda',
    'AnalyticsApplicationInputsSchema',
    'AnalyticsApplicationInputsSchemaRecordColumn',
    'AnalyticsApplicationInputsSchemaRecordFormat',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParameters',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson',
    'AnalyticsApplicationInputsStartingPositionConfiguration',
    'AnalyticsApplicationOutput',
    'AnalyticsApplicationOutputKinesisFirehose',
    'AnalyticsApplicationOutputKinesisStream',
    'AnalyticsApplicationOutputLambda',
    'AnalyticsApplicationOutputSchema',
    'AnalyticsApplicationReferenceDataSources',
    'AnalyticsApplicationReferenceDataSourcesS3',
    'AnalyticsApplicationReferenceDataSourcesSchema',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson',
    'FirehoseDeliveryStreamElasticsearchConfiguration',
    'FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamExtendedS3Configuration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamKinesisSourceConfiguration',
    'FirehoseDeliveryStreamRedshiftConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamS3Configuration',
    'FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamServerSideEncryption',
    'FirehoseDeliveryStreamSplunkConfiguration',
    'FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter',
]

@pulumi.output_type
class AnalyticsApplicationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARN of the Kinesis Analytics Application.
        """
        ...

    @property
    @pulumi.getter(name="logStreamArn")
    def log_stream_arn(self) -> str:
        """
        The ARN of the CloudWatch Log Stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to send application messages.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputs(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARN of the Kinesis Analytics Application.
        """
        ...

    @property
    @pulumi.getter(name="kinesisFirehose")
    def kinesis_firehose(self) -> Optional['outputs.AnalyticsApplicationInputsKinesisFirehose']:
        """
        The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
        See Kinesis Firehose below for more details.
        """
        ...

    @property
    @pulumi.getter(name="kinesisStream")
    def kinesis_stream(self) -> Optional['outputs.AnalyticsApplicationInputsKinesisStream']:
        """
        The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
        See Kinesis Stream below for more details.
        """
        ...

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        """
        The Name Prefix to use when creating an in-application stream.
        """
        ...

    @property
    @pulumi.getter
    def parallelism(self) -> Optional['outputs.AnalyticsApplicationInputsParallelism']:
        """
        The number of Parallel in-application streams to create.
        See Parallelism below for more details.
        """
        ...

    @property
    @pulumi.getter(name="processingConfiguration")
    def processing_configuration(self) -> Optional['outputs.AnalyticsApplicationInputsProcessingConfiguration']:
        """
        The Processing Configuration to transform records as they are received from the stream.
        See Processing Configuration below for more details.
        """
        ...

    @property
    @pulumi.getter
    def schema(self) -> 'outputs.AnalyticsApplicationInputsSchema':
        """
        The Schema format of the data in the streaming source. See Source Schema below for more details.
        """
        ...

    @property
    @pulumi.getter(name="startingPositionConfigurations")
    def starting_position_configurations(self) -> Optional[List['outputs.AnalyticsApplicationInputsStartingPositionConfiguration']]:
        ...

    @property
    @pulumi.getter(name="streamNames")
    def stream_names(self) -> Optional[List[str]]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsKinesisFirehose(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Kinesis Firehose delivery stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the stream.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsKinesisStream(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Kinesis Stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the stream.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsParallelism(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        """
        The Count of streams.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsProcessingConfiguration(dict):
    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> 'outputs.AnalyticsApplicationInputsProcessingConfigurationLambda':
        """
        The Lambda function configuration. See Lambda below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsProcessingConfigurationLambda(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Lambda function.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the Lambda function.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchema(dict):
    @property
    @pulumi.getter(name="recordColumns")
    def record_columns(self) -> List['outputs.AnalyticsApplicationInputsSchemaRecordColumn']:
        """
        The Record Column mapping for the streaming source data element.
        See Record Columns below for more details.
        """
        ...

    @property
    @pulumi.getter(name="recordEncoding")
    def record_encoding(self) -> Optional[str]:
        """
        The Encoding of the record in the streaming source.
        """
        ...

    @property
    @pulumi.getter(name="recordFormat")
    def record_format(self) -> 'outputs.AnalyticsApplicationInputsSchemaRecordFormat':
        """
        The Record Format and mapping information to schematize a record.
        See Record Format below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordColumn(dict):
    @property
    @pulumi.getter
    def mapping(self) -> Optional[str]:
        """
        The Mapping reference to the data element.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the column.
        """
        ...

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> str:
        """
        The SQL Type of the column.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormat(dict):
    @property
    @pulumi.getter(name="mappingParameters")
    def mapping_parameters(self) -> Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParameters']:
        """
        The Mapping Information for the record format.
        See Mapping Parameters below for more details.
        """
        ...

    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> Optional[str]:
        """
        The type of Record Format. Can be `CSV` or `JSON`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParameters(dict):
    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv']:
        """
        Mapping information when the record format uses delimiters.
        See CSV Mapping Parameters below for more details.
        """
        ...

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson']:
        """
        Mapping information when JSON is the record format on the streaming source.
        See JSON Mapping Parameters below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv(dict):
    @property
    @pulumi.getter(name="recordColumnDelimiter")
    def record_column_delimiter(self) -> str:
        """
        The Column Delimiter.
        """
        ...

    @property
    @pulumi.getter(name="recordRowDelimiter")
    def record_row_delimiter(self) -> str:
        """
        The Row Delimiter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson(dict):
    @property
    @pulumi.getter(name="recordRowPath")
    def record_row_path(self) -> str:
        """
        Path to the top-level parent that contains the records.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsStartingPositionConfiguration(dict):
    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutput(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARN of the Kinesis Analytics Application.
        """
        ...

    @property
    @pulumi.getter(name="kinesisFirehose")
    def kinesis_firehose(self) -> Optional['outputs.AnalyticsApplicationOutputKinesisFirehose']:
        """
        The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesis_stream`.
        See Kinesis Firehose below for more details.
        """
        ...

    @property
    @pulumi.getter(name="kinesisStream")
    def kinesis_stream(self) -> Optional['outputs.AnalyticsApplicationOutputKinesisStream']:
        """
        The Kinesis Stream configuration for the destination stream. Conflicts with `kinesis_firehose`.
        See Kinesis Stream below for more details.
        """
        ...

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional['outputs.AnalyticsApplicationOutputLambda']:
        """
        The Lambda function destination. See Lambda below for more details.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the in-application stream.
        """
        ...

    @property
    @pulumi.getter
    def schema(self) -> 'outputs.AnalyticsApplicationOutputSchema':
        """
        The Schema format of the data written to the destination. See Destination Schema below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputKinesisFirehose(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Kinesis Firehose delivery stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the stream.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputKinesisStream(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Kinesis Stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the stream.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputLambda(dict):
    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The ARN of the Lambda function.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to access the Lambda function.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputSchema(dict):
    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> Optional[str]:
        """
        The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSources(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARN of the Kinesis Analytics Application.
        """
        ...

    @property
    @pulumi.getter
    def s3(self) -> 'outputs.AnalyticsApplicationReferenceDataSourcesS3':
        """
        The S3 configuration for the reference data source. See S3 Reference below for more details.
        """
        ...

    @property
    @pulumi.getter
    def schema(self) -> 'outputs.AnalyticsApplicationReferenceDataSourcesSchema':
        """
        The Schema format of the data in the streaming source. See Source Schema below for more details.
        """
        ...

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The in-application Table Name.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesS3(dict):
    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> str:
        """
        The S3 Bucket ARN.
        """
        ...

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> str:
        """
        The File Key name containing reference data.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM Role used to send application messages.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchema(dict):
    @property
    @pulumi.getter(name="recordColumns")
    def record_columns(self) -> List['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn']:
        """
        The Record Column mapping for the streaming source data element.
        See Record Columns below for more details.
        """
        ...

    @property
    @pulumi.getter(name="recordEncoding")
    def record_encoding(self) -> Optional[str]:
        """
        The Encoding of the record in the streaming source.
        """
        ...

    @property
    @pulumi.getter(name="recordFormat")
    def record_format(self) -> 'outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat':
        """
        The Record Format and mapping information to schematize a record.
        See Record Format below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn(dict):
    @property
    @pulumi.getter
    def mapping(self) -> Optional[str]:
        """
        The Mapping reference to the data element.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the column.
        """
        ...

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> str:
        """
        The SQL Type of the column.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat(dict):
    @property
    @pulumi.getter(name="mappingParameters")
    def mapping_parameters(self) -> Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters']:
        """
        The Mapping Information for the record format.
        See Mapping Parameters below for more details.
        """
        ...

    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> Optional[str]:
        """
        The type of Record Format. Can be `CSV` or `JSON`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters(dict):
    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv']:
        """
        Mapping information when the record format uses delimiters.
        See CSV Mapping Parameters below for more details.
        """
        ...

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson']:
        """
        Mapping information when JSON is the record format on the streaming source.
        See JSON Mapping Parameters below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv(dict):
    @property
    @pulumi.getter(name="recordColumnDelimiter")
    def record_column_delimiter(self) -> str:
        """
        The Column Delimiter.
        """
        ...

    @property
    @pulumi.getter(name="recordRowDelimiter")
    def record_row_delimiter(self) -> str:
        """
        The Row Delimiter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson(dict):
    @property
    @pulumi.getter(name="recordRowPath")
    def record_row_path(self) -> str:
        """
        Path to the top-level parent that contains the records.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfiguration(dict):
    @property
    @pulumi.getter(name="bufferingInterval")
    def buffering_interval(self) -> Optional[float]:
        """
        Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
        """
        ...

    @property
    @pulumi.getter(name="bufferingSize")
    def buffering_size(self) -> Optional[float]:
        """
        Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
        """
        ...

    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="domainArn")
    def domain_arn(self) -> str:
        """
        The ARN of the Amazon ES domain.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig` after assuming `RoleARN`.  The pattern needs to be `arn:.*`.
        """
        ...

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        """
        The Elasticsearch index name.
        """
        ...

    @property
    @pulumi.getter(name="indexRotationPeriod")
    def index_rotation_period(self) -> Optional[str]:
        """
        The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
        """
        ...

    @property
    @pulumi.getter(name="processingConfiguration")
    def processing_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration']:
        """
        The data processing configuration.  More details are given below.
        """
        ...

    @property
    @pulumi.getter(name="retryDuration")
    def retry_duration(self) -> Optional[float]:
        """
        After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupMode")
    def s3_backup_mode(self) -> Optional[str]:
        """
        Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
        """
        ...

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[str]:
        """
        The Elasticsearch type name with maximum length of 100 characters.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables data processing.
        """
        ...

    @property
    @pulumi.getter
    def processors(self) -> Optional[List['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor']]:
        """
        Array of data processors. More details are given below
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor(dict):
    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter']]:
        """
        Array of processor parameters. More details are given below
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of processor. Valid Values: `Lambda`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter(dict):
    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        """
        ...

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3Configuration(dict):
    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> str:
        """
        The ARN of the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="bufferInterval")
    def buffer_interval(self) -> Optional[float]:
        """
        Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        """
        ...

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[float]:
        """
        Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
        We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        """
        ...

    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[str]:
        """
        The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        """
        ...

    @property
    @pulumi.getter(name="dataFormatConversionConfiguration")
    def data_format_conversion_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration']:
        """
        Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
        """
        ...

    @property
    @pulumi.getter(name="errorOutputPrefix")
    def error_output_prefix(self) -> Optional[str]:
        """
        Prefix added to failed records before writing them to S3. This prefix appears immediately following the bucket name.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
        be used.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="processingConfiguration")
    def processing_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration']:
        """
        The data processing configuration.  More details are given below.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupConfiguration")
    def s3_backup_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration']:
        """
        The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupMode")
    def s3_backup_mode(self) -> Optional[str]:
        """
        The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
        """
        ...

    @property
    @pulumi.getter(name="inputFormatConfiguration")
    def input_format_configuration(self) -> 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration':
        """
        Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
        """
        ...

    @property
    @pulumi.getter(name="outputFormatConfiguration")
    def output_format_configuration(self) -> 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration':
        """
        Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
        """
        ...

    @property
    @pulumi.getter(name="schemaConfiguration")
    def schema_configuration(self) -> 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration':
        """
        Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration(dict):
    @property
    @pulumi.getter
    def deserializer(self) -> 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer':
        """
        Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer(dict):
    @property
    @pulumi.getter(name="hiveJsonSerDe")
    def hive_json_ser_de(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe']:
        """
        Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
        """
        ...

    @property
    @pulumi.getter(name="openXJsonSerDe")
    def open_xjson_ser_de(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe']:
        """
        Nested argument that specifies the OpenX SerDe. More details below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe(dict):
    @property
    @pulumi.getter(name="timestampFormats")
    def timestamp_formats(self) -> Optional[List[str]]:
        """
        A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe(dict):
    @property
    @pulumi.getter(name="caseInsensitive")
    def case_insensitive(self) -> Optional[bool]:
        """
        When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
        """
        ...

    @property
    @pulumi.getter(name="columnToJsonKeyMappings")
    def column_to_json_key_mappings(self) -> Optional[Mapping[str, str]]:
        """
        A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
        """
        ...

    @property
    @pulumi.getter(name="convertDotsInJsonKeysToUnderscores")
    def convert_dots_in_json_keys_to_underscores(self) -> Optional[bool]:
        """
        When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration(dict):
    @property
    @pulumi.getter
    def serializer(self) -> 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer':
        """
        Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer(dict):
    @property
    @pulumi.getter(name="orcSerDe")
    def orc_ser_de(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe']:
        """
        Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
        """
        ...

    @property
    @pulumi.getter(name="parquetSerDe")
    def parquet_ser_de(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe']:
        """
        Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe(dict):
    @property
    @pulumi.getter(name="blockSizeBytes")
    def block_size_bytes(self) -> Optional[float]:
        """
        The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        """
        ...

    @property
    @pulumi.getter(name="bloomFilterColumns")
    def bloom_filter_columns(self) -> Optional[List[str]]:
        """
        A list of column names for which you want Kinesis Data Firehose to create bloom filters.
        """
        ...

    @property
    @pulumi.getter(name="bloomFilterFalsePositiveProbability")
    def bloom_filter_false_positive_probability(self) -> Optional[float]:
        """
        The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
        """
        ...

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        """
        The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
        """
        ...

    @property
    @pulumi.getter(name="dictionaryKeyThreshold")
    def dictionary_key_threshold(self) -> Optional[float]:
        """
        A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
        """
        ...

    @property
    @pulumi.getter(name="enablePadding")
    def enable_padding(self) -> Optional[bool]:
        """
        Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
        """
        ...

    @property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> Optional[str]:
        """
        The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
        """
        ...

    @property
    @pulumi.getter(name="paddingTolerance")
    def padding_tolerance(self) -> Optional[float]:
        """
        A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enable_padding` is `false`.
        """
        ...

    @property
    @pulumi.getter(name="rowIndexStride")
    def row_index_stride(self) -> Optional[float]:
        """
        The number of rows between index entries. The default is `10000` and the minimum is `1000`.
        """
        ...

    @property
    @pulumi.getter(name="stripeSizeBytes")
    def stripe_size_bytes(self) -> Optional[float]:
        """
        The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe(dict):
    @property
    @pulumi.getter(name="blockSizeBytes")
    def block_size_bytes(self) -> Optional[float]:
        """
        The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        """
        ...

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        """
        The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
        """
        ...

    @property
    @pulumi.getter(name="enableDictionaryCompression")
    def enable_dictionary_compression(self) -> Optional[bool]:
        """
        Indicates whether to enable dictionary compression.
        """
        ...

    @property
    @pulumi.getter(name="maxPaddingBytes")
    def max_padding_bytes(self) -> Optional[float]:
        """
        The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
        """
        ...

    @property
    @pulumi.getter(name="pageSizeBytes")
    def page_size_bytes(self) -> Optional[float]:
        """
        The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
        """
        ...

    @property
    @pulumi.getter(name="writerVersion")
    def writer_version(self) -> Optional[str]:
        """
        Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration(dict):
    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        """
        The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
        """
        ...

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Specifies the name of the AWS Glue database that contains the schema for the output data.
        """
        ...

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        If you don't specify an AWS Region, the default is the current region.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        """
        ...

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Specifies the AWS Glue table that contains the column information that constitutes your data schema.
        """
        ...

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[str]:
        """
        Specifies the table version for the output data schema. Defaults to `LATEST`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables data processing.
        """
        ...

    @property
    @pulumi.getter
    def processors(self) -> Optional[List['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor']]:
        """
        Array of data processors. More details are given below
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor(dict):
    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter']]:
        """
        Array of processor parameters. More details are given below
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of processor. Valid Values: `Lambda`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter(dict):
    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        """
        ...

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration(dict):
    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> str:
        """
        The ARN of the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="bufferInterval")
    def buffer_interval(self) -> Optional[float]:
        """
        Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        """
        ...

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[float]:
        """
        Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
        We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        """
        ...

    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[str]:
        """
        The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
        be used.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamKinesisSourceConfiguration(dict):
    @property
    @pulumi.getter(name="kinesisStreamArn")
    def kinesis_stream_arn(self) -> str:
        """
        The kinesis stream used as the source of the firehose delivery stream.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of the role that provides access to the source Kinesis stream.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfiguration(dict):
    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="clusterJdbcurl")
    def cluster_jdbcurl(self) -> str:
        """
        The jdbcurl of the redshift cluster.
        """
        ...

    @property
    @pulumi.getter(name="copyOptions")
    def copy_options(self) -> Optional[str]:
        """
        Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
        """
        ...

    @property
    @pulumi.getter(name="dataTableColumns")
    def data_table_columns(self) -> Optional[str]:
        """
        The data table columns that will be targeted by the copy command.
        """
        ...

    @property
    @pulumi.getter(name="dataTableName")
    def data_table_name(self) -> str:
        """
        The name of the table in the redshift cluster that the s3 bucket will copy to.
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the username above.
        """
        ...

    @property
    @pulumi.getter(name="processingConfiguration")
    def processing_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration']:
        """
        The data processing configuration.  More details are given below.
        """
        ...

    @property
    @pulumi.getter(name="retryDuration")
    def retry_duration(self) -> Optional[float]:
        """
        The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The arn of the role the stream assumes.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupConfiguration")
    def s3_backup_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration']:
        """
        The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupMode")
    def s3_backup_mode(self) -> Optional[str]:
        """
        The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
        """
        ...

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables data processing.
        """
        ...

    @property
    @pulumi.getter
    def processors(self) -> Optional[List['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor']]:
        """
        Array of data processors. More details are given below
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor(dict):
    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter']]:
        """
        Array of processor parameters. More details are given below
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of processor. Valid Values: `Lambda`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter(dict):
    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        """
        ...

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration(dict):
    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> str:
        """
        The ARN of the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="bufferInterval")
    def buffer_interval(self) -> Optional[float]:
        """
        Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        """
        ...

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[float]:
        """
        Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
        We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        """
        ...

    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[str]:
        """
        The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
        be used.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamS3Configuration(dict):
    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> str:
        """
        The ARN of the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="bufferInterval")
    def buffer_interval(self) -> Optional[float]:
        """
        Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        """
        ...

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[float]:
        """
        Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
        We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
        """
        ...

    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below
        """
        ...

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[str]:
        """
        The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
        be used.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
        """
        ...

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamServerSideEncryption(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether to enable encryption at rest. Default is `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfiguration(dict):
    @property
    @pulumi.getter(name="cloudwatchLoggingOptions")
    def cloudwatch_logging_options(self) -> Optional['outputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions']:
        """
        The CloudWatch Logging Options for the delivery stream. More details are given below.
        """
        ...

    @property
    @pulumi.getter(name="hecAcknowledgmentTimeout")
    def hec_acknowledgment_timeout(self) -> Optional[float]:
        """
        The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
        """
        ...

    @property
    @pulumi.getter(name="hecEndpoint")
    def hec_endpoint(self) -> str:
        """
        The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        """
        ...

    @property
    @pulumi.getter(name="hecEndpointType")
    def hec_endpoint_type(self) -> Optional[str]:
        """
        The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
        """
        ...

    @property
    @pulumi.getter(name="hecToken")
    def hec_token(self) -> str:
        """
        The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        """
        ...

    @property
    @pulumi.getter(name="processingConfiguration")
    def processing_configuration(self) -> Optional['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration']:
        """
        The data processing configuration.  More details are given below.
        """
        ...

    @property
    @pulumi.getter(name="retryDuration")
    def retry_duration(self) -> Optional[float]:
        """
        After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
        """
        ...

    @property
    @pulumi.getter(name="s3BackupMode")
    def s3_backup_mode(self) -> Optional[str]:
        """
        Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables the logging. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        The CloudWatch group name for logging. This value is required if `enabled` is true.
        """
        ...

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[str]:
        """
        The CloudWatch log stream name for logging. This value is required if `enabled` is true.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables data processing.
        """
        ...

    @property
    @pulumi.getter
    def processors(self) -> Optional[List['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor']]:
        """
        Array of data processors. More details are given below
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor(dict):
    @property
    @pulumi.getter
    def parameters(self) -> Optional[List['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter']]:
        """
        Array of processor parameters. More details are given below
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of processor. Valid Values: `Lambda`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter(dict):
    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
        """
        ...

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


