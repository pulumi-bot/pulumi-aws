# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AnalyticsApplicationCloudwatchLoggingOptions',
    'AnalyticsApplicationInputs',
    'AnalyticsApplicationInputsKinesisFirehose',
    'AnalyticsApplicationInputsKinesisStream',
    'AnalyticsApplicationInputsParallelism',
    'AnalyticsApplicationInputsProcessingConfiguration',
    'AnalyticsApplicationInputsProcessingConfigurationLambda',
    'AnalyticsApplicationInputsSchema',
    'AnalyticsApplicationInputsSchemaRecordColumn',
    'AnalyticsApplicationInputsSchemaRecordFormat',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParameters',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv',
    'AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson',
    'AnalyticsApplicationInputsStartingPositionConfiguration',
    'AnalyticsApplicationOutput',
    'AnalyticsApplicationOutputKinesisFirehose',
    'AnalyticsApplicationOutputKinesisStream',
    'AnalyticsApplicationOutputLambda',
    'AnalyticsApplicationOutputSchema',
    'AnalyticsApplicationReferenceDataSources',
    'AnalyticsApplicationReferenceDataSourcesS3',
    'AnalyticsApplicationReferenceDataSourcesSchema',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv',
    'AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson',
    'FirehoseDeliveryStreamElasticsearchConfiguration',
    'FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamExtendedS3Configuration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe',
    'FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration',
    'FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamKinesisSourceConfiguration',
    'FirehoseDeliveryStreamRedshiftConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration',
    'FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamS3Configuration',
    'FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamServerSideEncryption',
    'FirehoseDeliveryStreamSplunkConfiguration',
    'FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor',
    'FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter',
]

@pulumi.output_type
class AnalyticsApplicationCloudwatchLoggingOptions(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    log_stream_arn: str = pulumi.output_property("logStreamArn")
    """
    The ARN of the CloudWatch Log Stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to send application messages.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputs(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    kinesis_firehose: Optional['outputs.AnalyticsApplicationInputsKinesisFirehose'] = pulumi.output_property("kinesisFirehose")
    """
    The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
    See Kinesis Firehose below for more details.
    """
    kinesis_stream: Optional['outputs.AnalyticsApplicationInputsKinesisStream'] = pulumi.output_property("kinesisStream")
    """
    The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
    See Kinesis Stream below for more details.
    """
    name_prefix: str = pulumi.output_property("namePrefix")
    """
    The Name Prefix to use when creating an in-application stream.
    """
    parallelism: Optional['outputs.AnalyticsApplicationInputsParallelism'] = pulumi.output_property("parallelism")
    """
    The number of Parallel in-application streams to create.
    See Parallelism below for more details.
    """
    processing_configuration: Optional['outputs.AnalyticsApplicationInputsProcessingConfiguration'] = pulumi.output_property("processingConfiguration")
    """
    The Processing Configuration to transform records as they are received from the stream.
    See Processing Configuration below for more details.
    """
    schema: 'outputs.AnalyticsApplicationInputsSchema' = pulumi.output_property("schema")
    """
    The Schema format of the data in the streaming source. See Source Schema below for more details.
    """
    starting_position_configurations: Optional[List['outputs.AnalyticsApplicationInputsStartingPositionConfiguration']] = pulumi.output_property("startingPositionConfigurations")
    stream_names: Optional[List[str]] = pulumi.output_property("streamNames")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsKinesisFirehose(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Kinesis Firehose delivery stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsKinesisStream(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Kinesis Stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsParallelism(dict):
    count: float = pulumi.output_property("count")
    """
    The Count of streams.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsProcessingConfiguration(dict):
    lambda_: 'outputs.AnalyticsApplicationInputsProcessingConfigurationLambda' = pulumi.output_property("lambda")
    """
    The Lambda function configuration. See Lambda below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsProcessingConfigurationLambda(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Lambda function.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the Lambda function.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchema(dict):
    record_columns: List['outputs.AnalyticsApplicationInputsSchemaRecordColumn'] = pulumi.output_property("recordColumns")
    """
    The Record Column mapping for the streaming source data element.
    See Record Columns below for more details.
    """
    record_encoding: Optional[str] = pulumi.output_property("recordEncoding")
    """
    The Encoding of the record in the streaming source.
    """
    record_format: 'outputs.AnalyticsApplicationInputsSchemaRecordFormat' = pulumi.output_property("recordFormat")
    """
    The Record Format and mapping information to schematize a record.
    See Record Format below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordColumn(dict):
    mapping: Optional[str] = pulumi.output_property("mapping")
    """
    The Mapping reference to the data element.
    """
    name: str = pulumi.output_property("name")
    """
    Name of the column.
    """
    sql_type: str = pulumi.output_property("sqlType")
    """
    The SQL Type of the column.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormat(dict):
    mapping_parameters: Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParameters'] = pulumi.output_property("mappingParameters")
    """
    The Mapping Information for the record format.
    See Mapping Parameters below for more details.
    """
    record_format_type: Optional[str] = pulumi.output_property("recordFormatType")
    """
    The type of Record Format. Can be `CSV` or `JSON`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParameters(dict):
    csv: Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv'] = pulumi.output_property("csv")
    """
    Mapping information when the record format uses delimiters.
    See CSV Mapping Parameters below for more details.
    """
    json: Optional['outputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson'] = pulumi.output_property("json")
    """
    Mapping information when JSON is the record format on the streaming source.
    See JSON Mapping Parameters below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv(dict):
    record_column_delimiter: str = pulumi.output_property("recordColumnDelimiter")
    """
    The Column Delimiter.
    """
    record_row_delimiter: str = pulumi.output_property("recordRowDelimiter")
    """
    The Row Delimiter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson(dict):
    record_row_path: str = pulumi.output_property("recordRowPath")
    """
    Path to the top-level parent that contains the records.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationInputsStartingPositionConfiguration(dict):
    starting_position: Optional[str] = pulumi.output_property("startingPosition")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutput(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    kinesis_firehose: Optional['outputs.AnalyticsApplicationOutputKinesisFirehose'] = pulumi.output_property("kinesisFirehose")
    """
    The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesis_stream`.
    See Kinesis Firehose below for more details.
    """
    kinesis_stream: Optional['outputs.AnalyticsApplicationOutputKinesisStream'] = pulumi.output_property("kinesisStream")
    """
    The Kinesis Stream configuration for the destination stream. Conflicts with `kinesis_firehose`.
    See Kinesis Stream below for more details.
    """
    lambda_: Optional['outputs.AnalyticsApplicationOutputLambda'] = pulumi.output_property("lambda")
    """
    The Lambda function destination. See Lambda below for more details.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the in-application stream.
    """
    schema: 'outputs.AnalyticsApplicationOutputSchema' = pulumi.output_property("schema")
    """
    The Schema format of the data written to the destination. See Destination Schema below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputKinesisFirehose(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Kinesis Firehose delivery stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputKinesisStream(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Kinesis Stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the stream.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputLambda(dict):
    resource_arn: str = pulumi.output_property("resourceArn")
    """
    The ARN of the Lambda function.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to access the Lambda function.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationOutputSchema(dict):
    record_format_type: Optional[str] = pulumi.output_property("recordFormatType")
    """
    The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSources(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ARN of the Kinesis Analytics Application.
    """
    s3: 'outputs.AnalyticsApplicationReferenceDataSourcesS3' = pulumi.output_property("s3")
    """
    The S3 configuration for the reference data source. See S3 Reference below for more details.
    """
    schema: 'outputs.AnalyticsApplicationReferenceDataSourcesSchema' = pulumi.output_property("schema")
    """
    The Schema format of the data in the streaming source. See Source Schema below for more details.
    """
    table_name: str = pulumi.output_property("tableName")
    """
    The in-application Table Name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesS3(dict):
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The S3 Bucket ARN.
    """
    file_key: str = pulumi.output_property("fileKey")
    """
    The File Key name containing reference data.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM Role used to send application messages.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchema(dict):
    record_columns: List['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn'] = pulumi.output_property("recordColumns")
    """
    The Record Column mapping for the streaming source data element.
    See Record Columns below for more details.
    """
    record_encoding: Optional[str] = pulumi.output_property("recordEncoding")
    """
    The Encoding of the record in the streaming source.
    """
    record_format: 'outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat' = pulumi.output_property("recordFormat")
    """
    The Record Format and mapping information to schematize a record.
    See Record Format below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn(dict):
    mapping: Optional[str] = pulumi.output_property("mapping")
    """
    The Mapping reference to the data element.
    """
    name: str = pulumi.output_property("name")
    """
    Name of the column.
    """
    sql_type: str = pulumi.output_property("sqlType")
    """
    The SQL Type of the column.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat(dict):
    mapping_parameters: Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters'] = pulumi.output_property("mappingParameters")
    """
    The Mapping Information for the record format.
    See Mapping Parameters below for more details.
    """
    record_format_type: Optional[str] = pulumi.output_property("recordFormatType")
    """
    The type of Record Format. Can be `CSV` or `JSON`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters(dict):
    csv: Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv'] = pulumi.output_property("csv")
    """
    Mapping information when the record format uses delimiters.
    See CSV Mapping Parameters below for more details.
    """
    json: Optional['outputs.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson'] = pulumi.output_property("json")
    """
    Mapping information when JSON is the record format on the streaming source.
    See JSON Mapping Parameters below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv(dict):
    record_column_delimiter: str = pulumi.output_property("recordColumnDelimiter")
    """
    The Column Delimiter.
    """
    record_row_delimiter: str = pulumi.output_property("recordRowDelimiter")
    """
    The Row Delimiter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson(dict):
    record_row_path: str = pulumi.output_property("recordRowPath")
    """
    Path to the top-level parent that contains the records.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfiguration(dict):
    buffering_interval: Optional[float] = pulumi.output_property("bufferingInterval")
    """
    Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
    """
    buffering_size: Optional[float] = pulumi.output_property("bufferingSize")
    """
    Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    """
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    domain_arn: str = pulumi.output_property("domainArn")
    """
    The ARN of the Amazon ES domain.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig` after assuming `RoleARN`.  The pattern needs to be `arn:.*`.
    """
    index_name: str = pulumi.output_property("indexName")
    """
    The Elasticsearch index name.
    """
    index_rotation_period: Optional[str] = pulumi.output_property("indexRotationPeriod")
    """
    The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
    """
    processing_configuration: Optional['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration'] = pulumi.output_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[float] = pulumi.output_property("retryDuration")
    """
    After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
    """
    s3_backup_mode: Optional[str] = pulumi.output_property("s3BackupMode")
    """
    Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
    """
    type_name: Optional[str] = pulumi.output_property("typeName")
    """
    The Elasticsearch type name with maximum length of 100 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[List['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor']] = pulumi.output_property("processors")
    """
    Array of data processors. More details are given below
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor(dict):
    parameters: Optional[List['outputs.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter']] = pulumi.output_property("parameters")
    """
    Array of processor parameters. More details are given below
    """
    type: str = pulumi.output_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter(dict):
    parameter_name: str = pulumi.output_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: str = pulumi.output_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3Configuration(dict):
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    buffer_interval: Optional[float] = pulumi.output_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[float] = pulumi.output_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[str] = pulumi.output_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    data_format_conversion_configuration: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration'] = pulumi.output_property("dataFormatConversionConfiguration")
    """
    Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
    """
    error_output_prefix: Optional[str] = pulumi.output_property("errorOutputPrefix")
    """
    Prefix added to failed records before writing them to S3. This prefix appears immediately following the bucket name.
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """
    processing_configuration: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration'] = pulumi.output_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    s3_backup_configuration: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration'] = pulumi.output_property("s3BackupConfiguration")
    """
    The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
    """
    s3_backup_mode: Optional[str] = pulumi.output_property("s3BackupMode")
    """
    The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
    """
    input_format_configuration: 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration' = pulumi.output_property("inputFormatConfiguration")
    """
    Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
    """
    output_format_configuration: 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration' = pulumi.output_property("outputFormatConfiguration")
    """
    Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
    """
    schema_configuration: 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration' = pulumi.output_property("schemaConfiguration")
    """
    Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration(dict):
    deserializer: 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer' = pulumi.output_property("deserializer")
    """
    Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer(dict):
    hive_json_ser_de: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe'] = pulumi.output_property("hiveJsonSerDe")
    """
    Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
    """
    open_x_json_ser_de: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe'] = pulumi.output_property("openXJsonSerDe")
    """
    Nested argument that specifies the OpenX SerDe. More details below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe(dict):
    timestamp_formats: Optional[List[str]] = pulumi.output_property("timestampFormats")
    """
    A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe(dict):
    case_insensitive: Optional[bool] = pulumi.output_property("caseInsensitive")
    """
    When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
    """
    column_to_json_key_mappings: Optional[Dict[str, str]] = pulumi.output_property("columnToJsonKeyMappings")
    """
    A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
    """
    convert_dots_in_json_keys_to_underscores: Optional[bool] = pulumi.output_property("convertDotsInJsonKeysToUnderscores")
    """
    When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration(dict):
    serializer: 'outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer' = pulumi.output_property("serializer")
    """
    Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer(dict):
    orc_ser_de: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe'] = pulumi.output_property("orcSerDe")
    """
    Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
    """
    parquet_ser_de: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe'] = pulumi.output_property("parquetSerDe")
    """
    Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe(dict):
    block_size_bytes: Optional[float] = pulumi.output_property("blockSizeBytes")
    """
    The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    """
    bloom_filter_columns: Optional[List[str]] = pulumi.output_property("bloomFilterColumns")
    """
    A list of column names for which you want Kinesis Data Firehose to create bloom filters.
    """
    bloom_filter_false_positive_probability: Optional[float] = pulumi.output_property("bloomFilterFalsePositiveProbability")
    """
    The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
    """
    compression: Optional[str] = pulumi.output_property("compression")
    """
    The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
    """
    dictionary_key_threshold: Optional[float] = pulumi.output_property("dictionaryKeyThreshold")
    """
    A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
    """
    enable_padding: Optional[bool] = pulumi.output_property("enablePadding")
    """
    Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
    """
    format_version: Optional[str] = pulumi.output_property("formatVersion")
    """
    The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
    """
    padding_tolerance: Optional[float] = pulumi.output_property("paddingTolerance")
    """
    A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enable_padding` is `false`.
    """
    row_index_stride: Optional[float] = pulumi.output_property("rowIndexStride")
    """
    The number of rows between index entries. The default is `10000` and the minimum is `1000`.
    """
    stripe_size_bytes: Optional[float] = pulumi.output_property("stripeSizeBytes")
    """
    The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe(dict):
    block_size_bytes: Optional[float] = pulumi.output_property("blockSizeBytes")
    """
    The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    """
    compression: Optional[str] = pulumi.output_property("compression")
    """
    The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
    """
    enable_dictionary_compression: Optional[bool] = pulumi.output_property("enableDictionaryCompression")
    """
    Indicates whether to enable dictionary compression.
    """
    max_padding_bytes: Optional[float] = pulumi.output_property("maxPaddingBytes")
    """
    The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
    """
    page_size_bytes: Optional[float] = pulumi.output_property("pageSizeBytes")
    """
    The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
    """
    writer_version: Optional[str] = pulumi.output_property("writerVersion")
    """
    Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration(dict):
    catalog_id: Optional[str] = pulumi.output_property("catalogId")
    """
    The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
    """
    database_name: str = pulumi.output_property("databaseName")
    """
    Specifies the name of the AWS Glue database that contains the schema for the output data.
    """
    region: Optional[str] = pulumi.output_property("region")
    """
    If you don't specify an AWS Region, the default is the current region.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """
    table_name: str = pulumi.output_property("tableName")
    """
    Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    """
    version_id: Optional[str] = pulumi.output_property("versionId")
    """
    Specifies the table version for the output data schema. Defaults to `LATEST`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[List['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor']] = pulumi.output_property("processors")
    """
    Array of data processors. More details are given below
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor(dict):
    parameters: Optional[List['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter']] = pulumi.output_property("parameters")
    """
    Array of processor parameters. More details are given below
    """
    type: str = pulumi.output_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter(dict):
    parameter_name: str = pulumi.output_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: str = pulumi.output_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration(dict):
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    buffer_interval: Optional[float] = pulumi.output_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[float] = pulumi.output_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[str] = pulumi.output_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamKinesisSourceConfiguration(dict):
    kinesis_stream_arn: str = pulumi.output_property("kinesisStreamArn")
    """
    The kinesis stream used as the source of the firehose delivery stream.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of the role that provides access to the source Kinesis stream.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfiguration(dict):
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    cluster_jdbcurl: str = pulumi.output_property("clusterJdbcurl")
    """
    The jdbcurl of the redshift cluster.
    """
    copy_options: Optional[str] = pulumi.output_property("copyOptions")
    """
    Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
    """
    data_table_columns: Optional[str] = pulumi.output_property("dataTableColumns")
    """
    The data table columns that will be targeted by the copy command.
    """
    data_table_name: str = pulumi.output_property("dataTableName")
    """
    The name of the table in the redshift cluster that the s3 bucket will copy to.
    """
    password: str = pulumi.output_property("password")
    """
    The password for the username above.
    """
    processing_configuration: Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration'] = pulumi.output_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[float] = pulumi.output_property("retryDuration")
    """
    The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The arn of the role the stream assumes.
    """
    s3_backup_configuration: Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration'] = pulumi.output_property("s3BackupConfiguration")
    """
    The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
    """
    s3_backup_mode: Optional[str] = pulumi.output_property("s3BackupMode")
    """
    The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
    """
    username: str = pulumi.output_property("username")
    """
    The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[List['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor']] = pulumi.output_property("processors")
    """
    Array of data processors. More details are given below
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor(dict):
    parameters: Optional[List['outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter']] = pulumi.output_property("parameters")
    """
    Array of processor parameters. More details are given below
    """
    type: str = pulumi.output_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter(dict):
    parameter_name: str = pulumi.output_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: str = pulumi.output_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration(dict):
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    buffer_interval: Optional[float] = pulumi.output_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[float] = pulumi.output_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[str] = pulumi.output_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamS3Configuration(dict):
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The ARN of the S3 bucket
    """
    buffer_interval: Optional[float] = pulumi.output_property("bufferInterval")
    """
    Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
    """
    buffer_size: Optional[float] = pulumi.output_property("bufferSize")
    """
    Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
    """
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below
    """
    compression_format: Optional[str] = pulumi.output_property("compressionFormat")
    """
    The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    be used.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamServerSideEncryption(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Whether to enable encryption at rest. Default is `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfiguration(dict):
    cloudwatch_logging_options: Optional['outputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions'] = pulumi.output_property("cloudwatchLoggingOptions")
    """
    The CloudWatch Logging Options for the delivery stream. More details are given below.
    """
    hec_acknowledgment_timeout: Optional[float] = pulumi.output_property("hecAcknowledgmentTimeout")
    """
    The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
    """
    hec_endpoint: str = pulumi.output_property("hecEndpoint")
    """
    The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
    """
    hec_endpoint_type: Optional[str] = pulumi.output_property("hecEndpointType")
    """
    The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
    """
    hec_token: str = pulumi.output_property("hecToken")
    """
    The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
    """
    processing_configuration: Optional['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration'] = pulumi.output_property("processingConfiguration")
    """
    The data processing configuration.  More details are given below.
    """
    retry_duration: Optional[float] = pulumi.output_property("retryDuration")
    """
    After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    """
    s3_backup_mode: Optional[str] = pulumi.output_property("s3BackupMode")
    """
    Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables the logging. Defaults to `false`.
    """
    log_group_name: Optional[str] = pulumi.output_property("logGroupName")
    """
    The CloudWatch group name for logging. This value is required if `enabled` is true.
    """
    log_stream_name: Optional[str] = pulumi.output_property("logStreamName")
    """
    The CloudWatch log stream name for logging. This value is required if `enabled` is true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enables or disables data processing.
    """
    processors: Optional[List['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor']] = pulumi.output_property("processors")
    """
    Array of data processors. More details are given below
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor(dict):
    parameters: Optional[List['outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter']] = pulumi.output_property("parameters")
    """
    Array of processor parameters. More details are given below
    """
    type: str = pulumi.output_property("type")
    """
    The type of processor. Valid Values: `Lambda`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter(dict):
    parameter_name: str = pulumi.output_property("parameterName")
    """
    Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
    """
    parameter_value: str = pulumi.output_property("parameterValue")
    """
    Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


