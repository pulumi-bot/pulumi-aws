# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ProjectArtifactsArgs',
    'ProjectCacheArgs',
    'ProjectEnvironmentArgs',
    'ProjectEnvironmentEnvironmentVariableArgs',
    'ProjectEnvironmentRegistryCredentialArgs',
    'ProjectLogsConfigArgs',
    'ProjectLogsConfigCloudwatchLogsArgs',
    'ProjectLogsConfigS3LogsArgs',
    'ProjectSecondaryArtifactArgs',
    'ProjectSecondarySourceArgs',
    'ProjectSecondarySourceAuthArgs',
    'ProjectSecondarySourceGitSubmodulesConfigArgs',
    'ProjectSourceArgs',
    'ProjectSourceAuthArgs',
    'ProjectSourceGitSubmodulesConfigArgs',
    'ProjectVpcConfigArgs',
    'WebhookFilterGroupArgs',
    'WebhookFilterGroupFilterArgs',
]

@pulumi.input_type
class ProjectArtifactsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 artifact_identifier: Optional[pulumi.Input[str]] = None,
                 encryption_disabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 override_artifact_name: Optional[pulumi.Input[bool]] = None,
                 packaging: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        :param pulumi.Input[str] artifact_identifier: The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        :param pulumi.Input[str] name: The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        :param pulumi.Input[str] namespace_type: The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        :param pulumi.Input[bool] override_artifact_name: If set to true, a name specified in the build spec file overrides the artifact name.
        :param pulumi.Input[str] packaging: The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        :param pulumi.Input[str] path: If `type` is set to `S3`, this is the path to the output artifact
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "artifactIdentifier", artifact_identifier)
        pulumi.set(__self__, "encryptionDisabled", encryption_disabled)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespaceType", namespace_type)
        pulumi.set(__self__, "overrideArtifactName", override_artifact_name)
        pulumi.set(__self__, "packaging", packaging)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="artifactIdentifier")
    def artifact_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        """
        ...

    @artifact_identifier.setter
    def artifact_identifier(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="encryptionDisabled")
    def encryption_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        """
        ...

    @encryption_disabled.setter
    def encryption_disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="namespaceType")
    def namespace_type(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        """
        ...

    @namespace_type.setter
    def namespace_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="overrideArtifactName")
    def override_artifact_name(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, a name specified in the build spec file overrides the artifact name.
        """
        ...

    @override_artifact_name.setter
    def override_artifact_name(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def packaging(self) -> Optional[pulumi.Input[str]]:
        """
        The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        """
        ...

    @packaging.setter
    def packaging(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        If `type` is set to `S3`, this is the path to the output artifact
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectCacheArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] location: The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
        :param pulumi.Input[List[pulumi.Input[str]]] modes: Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        :param pulumi.Input[str] type: The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "modes", modes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def modes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        """
        ...

    @modes.setter
    def modes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectEnvironmentArgs:
    def __init__(__self__, *,
                 compute_type: pulumi.Input[str],
                 image: pulumi.Input[str],
                 type: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]]] = None,
                 image_pull_credentials_type: Optional[pulumi.Input[str]] = None,
                 privileged_mode: Optional[pulumi.Input[bool]] = None,
                 registry_credential: Optional[pulumi.Input['ProjectEnvironmentRegistryCredentialArgs']] = None):
        """
        :param pulumi.Input[str] compute_type: Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        :param pulumi.Input[str] image: The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        :param pulumi.Input[str] type: The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
        :param pulumi.Input[str] certificate: The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        :param pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]] environment_variables: A set of environment variables to make available to builds for this build project.
        :param pulumi.Input[str] image_pull_credentials_type: The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        :param pulumi.Input[bool] privileged_mode: If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        :param pulumi.Input['ProjectEnvironmentRegistryCredentialArgs'] registry_credential: Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        """
        pulumi.set(__self__, "computeType", compute_type)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "environmentVariables", environment_variables)
        pulumi.set(__self__, "imagePullCredentialsType", image_pull_credentials_type)
        pulumi.set(__self__, "privilegedMode", privileged_mode)
        pulumi.set(__self__, "registryCredential", registry_credential)

    @property
    @pulumi.getter(name="computeType")
    def compute_type(self) -> pulumi.Input[str]:
        """
        Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        """
        ...

    @compute_type.setter
    def compute_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        """
        ...

    @image.setter
    def image(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]]]:
        """
        A set of environment variables to make available to builds for this build project.
        """
        ...

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]]]):
        ...

    @property
    @pulumi.getter(name="imagePullCredentialsType")
    def image_pull_credentials_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        """
        ...

    @image_pull_credentials_type.setter
    def image_pull_credentials_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="privilegedMode")
    def privileged_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        """
        ...

    @privileged_mode.setter
    def privileged_mode(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="registryCredential")
    def registry_credential(self) -> Optional[pulumi.Input['ProjectEnvironmentRegistryCredentialArgs']]:
        """
        Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        """
        ...

    @registry_credential.setter
    def registry_credential(self, value: Optional[pulumi.Input['ProjectEnvironmentRegistryCredentialArgs']]):
        ...


@pulumi.input_type
class ProjectEnvironmentEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The environment variable's name or key.
        :param pulumi.Input[str] value: The environment variable's value.
        :param pulumi.Input[str] type: The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The environment variable's name or key.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The environment variable's value.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectEnvironmentRegistryCredentialArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input[str],
                 credential_provider: pulumi.Input[str]):
        """
        :param pulumi.Input[str] credential: The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        :param pulumi.Input[str] credential_provider: The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        """
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "credentialProvider", credential_provider)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        """
        ...

    @credential.setter
    def credential(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="credentialProvider")
    def credential_provider(self) -> pulumi.Input[str]:
        """
        The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        """
        ...

    @credential_provider.setter
    def credential_provider(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ProjectLogsConfigArgs:
    def __init__(__self__, *,
                 cloudwatch_logs: Optional[pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs']] = None,
                 s3_logs: Optional[pulumi.Input['ProjectLogsConfigS3LogsArgs']] = None):
        """
        :param pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs'] cloudwatch_logs: Configuration for the builds to store logs to CloudWatch
        :param pulumi.Input['ProjectLogsConfigS3LogsArgs'] s3_logs: Configuration for the builds to store logs to S3.
        """
        pulumi.set(__self__, "cloudwatchLogs", cloudwatch_logs)
        pulumi.set(__self__, "s3Logs", s3_logs)

    @property
    @pulumi.getter(name="cloudwatchLogs")
    def cloudwatch_logs(self) -> Optional[pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs']]:
        """
        Configuration for the builds to store logs to CloudWatch
        """
        ...

    @cloudwatch_logs.setter
    def cloudwatch_logs(self, value: Optional[pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs']]):
        ...

    @property
    @pulumi.getter(name="s3Logs")
    def s3_logs(self) -> Optional[pulumi.Input['ProjectLogsConfigS3LogsArgs']]:
        """
        Configuration for the builds to store logs to S3.
        """
        ...

    @s3_logs.setter
    def s3_logs(self, value: Optional[pulumi.Input['ProjectLogsConfigS3LogsArgs']]):
        ...


@pulumi.input_type
class ProjectLogsConfigCloudwatchLogsArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_name: The group name of the logs in CloudWatch Logs.
        :param pulumi.Input[str] status: Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        :param pulumi.Input[str] stream_name: The stream name of the logs in CloudWatch Logs.
        """
        pulumi.set(__self__, "groupName", group_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "streamName", stream_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The group name of the logs in CloudWatch Logs.
        """
        ...

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[str]]:
        """
        The stream name of the logs in CloudWatch Logs.
        """
        ...

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectLogsConfigS3LogsArgs:
    def __init__(__self__, *,
                 encryption_disabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        :param pulumi.Input[str] status: Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
        """
        pulumi.set(__self__, "encryptionDisabled", encryption_disabled)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="encryptionDisabled")
    def encryption_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        """
        ...

    @encryption_disabled.setter
    def encryption_disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectSecondaryArtifactArgs:
    def __init__(__self__, *,
                 artifact_identifier: pulumi.Input[str],
                 type: pulumi.Input[str],
                 encryption_disabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 override_artifact_name: Optional[pulumi.Input[bool]] = None,
                 packaging: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] artifact_identifier: The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        :param pulumi.Input[str] type: The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
        :param pulumi.Input[str] name: The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        :param pulumi.Input[str] namespace_type: The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        :param pulumi.Input[bool] override_artifact_name: If set to true, a name specified in the build spec file overrides the artifact name.
        :param pulumi.Input[str] packaging: The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        :param pulumi.Input[str] path: If `type` is set to `S3`, this is the path to the output artifact
        """
        pulumi.set(__self__, "artifactIdentifier", artifact_identifier)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "encryptionDisabled", encryption_disabled)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespaceType", namespace_type)
        pulumi.set(__self__, "overrideArtifactName", override_artifact_name)
        pulumi.set(__self__, "packaging", packaging)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="artifactIdentifier")
    def artifact_identifier(self) -> pulumi.Input[str]:
        """
        The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        """
        ...

    @artifact_identifier.setter
    def artifact_identifier(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="encryptionDisabled")
    def encryption_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        """
        ...

    @encryption_disabled.setter
    def encryption_disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="namespaceType")
    def namespace_type(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        """
        ...

    @namespace_type.setter
    def namespace_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="overrideArtifactName")
    def override_artifact_name(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, a name specified in the build spec file overrides the artifact name.
        """
        ...

    @override_artifact_name.setter
    def override_artifact_name(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def packaging(self) -> Optional[pulumi.Input[str]]:
        """
        The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        """
        ...

    @packaging.setter
    def packaging(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        If `type` is set to `S3`, this is the path to the output artifact
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectSecondarySourceArgs:
    def __init__(__self__, *,
                 source_identifier: pulumi.Input[str],
                 type: pulumi.Input[str],
                 auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]]] = None,
                 buildspec: Optional[pulumi.Input[str]] = None,
                 git_clone_depth: Optional[pulumi.Input[float]] = None,
                 git_submodules_config: Optional[pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs']] = None,
                 insecure_ssl: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 report_build_status: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] source_identifier: The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        :param pulumi.Input[str] type: The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        :param pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]] auths: Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        :param pulumi.Input[str] buildspec: The build spec declaration to use for this build project's related builds.
        :param pulumi.Input[float] git_clone_depth: Truncate git history to this many commits.
        :param pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs'] git_submodules_config: Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        :param pulumi.Input[bool] insecure_ssl: Ignore SSL warnings when connecting to source control.
        :param pulumi.Input[str] location: The location of the source code from git or s3.
        :param pulumi.Input[bool] report_build_status: Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        """
        pulumi.set(__self__, "sourceIdentifier", source_identifier)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "auths", auths)
        pulumi.set(__self__, "buildspec", buildspec)
        pulumi.set(__self__, "gitCloneDepth", git_clone_depth)
        pulumi.set(__self__, "gitSubmodulesConfig", git_submodules_config)
        pulumi.set(__self__, "insecureSsl", insecure_ssl)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "reportBuildStatus", report_build_status)

    @property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> pulumi.Input[str]:
        """
        The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        """
        ...

    @source_identifier.setter
    def source_identifier(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]]]:
        """
        Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        """
        ...

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]]]):
        ...

    @property
    @pulumi.getter
    def buildspec(self) -> Optional[pulumi.Input[str]]:
        """
        The build spec declaration to use for this build project's related builds.
        """
        ...

    @buildspec.setter
    def buildspec(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="gitCloneDepth")
    def git_clone_depth(self) -> Optional[pulumi.Input[float]]:
        """
        Truncate git history to this many commits.
        """
        ...

    @git_clone_depth.setter
    def git_clone_depth(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="gitSubmodulesConfig")
    def git_submodules_config(self) -> Optional[pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs']]:
        """
        Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        """
        ...

    @git_submodules_config.setter
    def git_submodules_config(self, value: Optional[pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs']]):
        ...

    @property
    @pulumi.getter(name="insecureSsl")
    def insecure_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore SSL warnings when connecting to source control.
        """
        ...

    @insecure_ssl.setter
    def insecure_ssl(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the source code from git or s3.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="reportBuildStatus")
    def report_build_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        """
        ...

    @report_build_status.setter
    def report_build_status(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ProjectSecondarySourceAuthArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The authorization type to use. The only valid value is `OAUTH`
        :param pulumi.Input[str] resource: The resource value that applies to the specified authorization type.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The authorization type to use. The only valid value is `OAUTH`
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource value that applies to the specified authorization type.
        """
        ...

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectSecondarySourceGitSubmodulesConfigArgs:
    def __init__(__self__, *,
                 fetch_submodules: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] fetch_submodules: If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        pulumi.set(__self__, "fetchSubmodules", fetch_submodules)

    @property
    @pulumi.getter(name="fetchSubmodules")
    def fetch_submodules(self) -> pulumi.Input[bool]:
        """
        If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        ...

    @fetch_submodules.setter
    def fetch_submodules(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class ProjectSourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]]] = None,
                 buildspec: Optional[pulumi.Input[str]] = None,
                 git_clone_depth: Optional[pulumi.Input[float]] = None,
                 git_submodules_config: Optional[pulumi.Input['ProjectSourceGitSubmodulesConfigArgs']] = None,
                 insecure_ssl: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 report_build_status: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
        :param pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]] auths: Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        :param pulumi.Input[str] buildspec: The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
        :param pulumi.Input[float] git_clone_depth: Truncate git history to this many commits.
        :param pulumi.Input['ProjectSourceGitSubmodulesConfigArgs'] git_submodules_config: Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        :param pulumi.Input[bool] insecure_ssl: Ignore SSL warnings when connecting to source control.
        :param pulumi.Input[str] location: The location of the source code from git or s3.
        :param pulumi.Input[bool] report_build_status: Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "auths", auths)
        pulumi.set(__self__, "buildspec", buildspec)
        pulumi.set(__self__, "gitCloneDepth", git_clone_depth)
        pulumi.set(__self__, "gitSubmodulesConfig", git_submodules_config)
        pulumi.set(__self__, "insecureSsl", insecure_ssl)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "reportBuildStatus", report_build_status)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]]]:
        """
        Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        """
        ...

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]]]):
        ...

    @property
    @pulumi.getter
    def buildspec(self) -> Optional[pulumi.Input[str]]:
        """
        The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
        """
        ...

    @buildspec.setter
    def buildspec(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="gitCloneDepth")
    def git_clone_depth(self) -> Optional[pulumi.Input[float]]:
        """
        Truncate git history to this many commits.
        """
        ...

    @git_clone_depth.setter
    def git_clone_depth(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="gitSubmodulesConfig")
    def git_submodules_config(self) -> Optional[pulumi.Input['ProjectSourceGitSubmodulesConfigArgs']]:
        """
        Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        """
        ...

    @git_submodules_config.setter
    def git_submodules_config(self, value: Optional[pulumi.Input['ProjectSourceGitSubmodulesConfigArgs']]):
        ...

    @property
    @pulumi.getter(name="insecureSsl")
    def insecure_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore SSL warnings when connecting to source control.
        """
        ...

    @insecure_ssl.setter
    def insecure_ssl(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the source code from git or s3.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="reportBuildStatus")
    def report_build_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
        """
        ...

    @report_build_status.setter
    def report_build_status(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ProjectSourceAuthArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The authorization type to use. The only valid value is `OAUTH`
        :param pulumi.Input[str] resource: The resource value that applies to the specified authorization type.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The authorization type to use. The only valid value is `OAUTH`
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource value that applies to the specified authorization type.
        """
        ...

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ProjectSourceGitSubmodulesConfigArgs:
    def __init__(__self__, *,
                 fetch_submodules: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] fetch_submodules: If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        pulumi.set(__self__, "fetchSubmodules", fetch_submodules)

    @property
    @pulumi.getter(name="fetchSubmodules")
    def fetch_submodules(self) -> pulumi.Input[bool]:
        """
        If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        ...

    @fetch_submodules.setter
    def fetch_submodules(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class ProjectVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[List[pulumi.Input[str]]],
                 subnets: pulumi.Input[List[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str]):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] security_group_ids: The security group IDs to assign to running builds.
        :param pulumi.Input[List[pulumi.Input[str]]] subnets: The subnet IDs within which to run builds.
        :param pulumi.Input[str] vpc_id: The ID of the VPC within which to run builds.
        """
        pulumi.set(__self__, "securityGroupIds", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "vpcId", vpc_id)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The security group IDs to assign to running builds.
        """
        ...

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The subnet IDs within which to run builds.
        """
        ...

    @subnets.setter
    def subnets(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The ID of the VPC within which to run builds.
        """
        ...

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class WebhookFilterGroupArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]] filters: A webhook filter for the group. Filter blocks are documented below.
        """
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]]]:
        """
        A webhook filter for the group. Filter blocks are documented below.
        """
        ...

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]]]):
        ...


@pulumi.input_type
class WebhookFilterGroupFilterArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[str],
                 type: pulumi.Input[str],
                 exclude_matched_pattern: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] pattern: For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
        :param pulumi.Input[str] type: The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
        :param pulumi.Input[bool] exclude_matched_pattern: If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
        """
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "excludeMatchedPattern", exclude_matched_pattern)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        """
        For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
        """
        ...

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="excludeMatchedPattern")
    def exclude_matched_pattern(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
        """
        ...

    @exclude_matched_pattern.setter
    def exclude_matched_pattern(self, value: Optional[pulumi.Input[bool]]):
        ...


