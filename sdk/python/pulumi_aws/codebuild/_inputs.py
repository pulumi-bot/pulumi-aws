# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ProjectArtifactsArgs',
    'ProjectCacheArgs',
    'ProjectEnvironmentArgs',
    'ProjectEnvironmentEnvironmentVariableArgs',
    'ProjectEnvironmentRegistryCredentialArgs',
    'ProjectLogsConfigArgs',
    'ProjectLogsConfigCloudwatchLogsArgs',
    'ProjectLogsConfigS3LogsArgs',
    'ProjectSecondaryArtifactArgs',
    'ProjectSecondarySourceArgs',
    'ProjectSecondarySourceAuthArgs',
    'ProjectSecondarySourceGitSubmodulesConfigArgs',
    'ProjectSourceArgs',
    'ProjectSourceAuthArgs',
    'ProjectSourceGitSubmodulesConfigArgs',
    'ProjectVpcConfigArgs',
    'WebhookFilterGroupArgs',
    'WebhookFilterGroupFilterArgs',
]

@pulumi.input_type
class ProjectArtifactsArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
    """
    artifact_identifier: Optional[pulumi.Input[str]] = pulumi.input_property("artifactIdentifier")
    """
    The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
    """
    encryption_disabled: Optional[pulumi.Input[bool]] = pulumi.input_property("encryptionDisabled")
    """
    If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
    """
    namespace_type: Optional[pulumi.Input[str]] = pulumi.input_property("namespaceType")
    """
    The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
    """
    override_artifact_name: Optional[pulumi.Input[bool]] = pulumi.input_property("overrideArtifactName")
    """
    If set to true, a name specified in the build spec file overrides the artifact name.
    """
    packaging: Optional[pulumi.Input[str]] = pulumi.input_property("packaging")
    """
    The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    If `type` is set to `S3`, this is the path to the output artifact
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], artifact_identifier: Optional[pulumi.Input[str]] = None, encryption_disabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, namespace_type: Optional[pulumi.Input[str]] = None, override_artifact_name: Optional[pulumi.Input[bool]] = None, packaging: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        :param pulumi.Input[str] artifact_identifier: The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        :param pulumi.Input[str] name: The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        :param pulumi.Input[str] namespace_type: The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        :param pulumi.Input[bool] override_artifact_name: If set to true, a name specified in the build spec file overrides the artifact name.
        :param pulumi.Input[str] packaging: The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        :param pulumi.Input[str] path: If `type` is set to `S3`, this is the path to the output artifact
        """
        __self__.type = type
        __self__.artifact_identifier = artifact_identifier
        __self__.encryption_disabled = encryption_disabled
        __self__.location = location
        __self__.name = name
        __self__.namespace_type = namespace_type
        __self__.override_artifact_name = override_artifact_name
        __self__.packaging = packaging
        __self__.path = path

@pulumi.input_type
class ProjectCacheArgs:
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
    """
    modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("modes")
    """
    Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, location: Optional[pulumi.Input[str]] = None, modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] location: The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
        :param pulumi.Input[List[pulumi.Input[str]]] modes: Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        :param pulumi.Input[str] type: The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
        """
        __self__.location = location
        __self__.modes = modes
        __self__.type = type

@pulumi.input_type
class ProjectEnvironmentArgs:
    compute_type: pulumi.Input[str] = pulumi.input_property("computeType")
    """
    Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
    """
    image: pulumi.Input[str] = pulumi.input_property("image")
    """
    The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
    """
    environment_variables: Optional[pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]]] = pulumi.input_property("environmentVariables")
    """
    A set of environment variables to make available to builds for this build project.
    """
    image_pull_credentials_type: Optional[pulumi.Input[str]] = pulumi.input_property("imagePullCredentialsType")
    """
    The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
    """
    privileged_mode: Optional[pulumi.Input[bool]] = pulumi.input_property("privilegedMode")
    """
    If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
    """
    registry_credential: Optional[pulumi.Input['ProjectEnvironmentRegistryCredentialArgs']] = pulumi.input_property("registryCredential")
    """
    Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, compute_type: pulumi.Input[str], image: pulumi.Input[str], type: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, environment_variables: Optional[pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]]] = None, image_pull_credentials_type: Optional[pulumi.Input[str]] = None, privileged_mode: Optional[pulumi.Input[bool]] = None, registry_credential: Optional[pulumi.Input['ProjectEnvironmentRegistryCredentialArgs']] = None) -> None:
        """
        :param pulumi.Input[str] compute_type: Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        :param pulumi.Input[str] image: The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        :param pulumi.Input[str] type: The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
        :param pulumi.Input[str] certificate: The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        :param pulumi.Input[List[pulumi.Input['ProjectEnvironmentEnvironmentVariableArgs']]] environment_variables: A set of environment variables to make available to builds for this build project.
        :param pulumi.Input[str] image_pull_credentials_type: The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        :param pulumi.Input[bool] privileged_mode: If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        :param pulumi.Input['ProjectEnvironmentRegistryCredentialArgs'] registry_credential: Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        """
        __self__.compute_type = compute_type
        __self__.image = image
        __self__.type = type
        __self__.certificate = certificate
        __self__.environment_variables = environment_variables
        __self__.image_pull_credentials_type = image_pull_credentials_type
        __self__.privileged_mode = privileged_mode
        __self__.registry_credential = registry_credential

@pulumi.input_type
class ProjectEnvironmentEnvironmentVariableArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The environment variable's name or key.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The environment variable's value.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str], type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The environment variable's name or key.
        :param pulumi.Input[str] value: The environment variable's value.
        :param pulumi.Input[str] type: The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
        """
        __self__.name = name
        __self__.value = value
        __self__.type = type

@pulumi.input_type
class ProjectEnvironmentRegistryCredentialArgs:
    credential: pulumi.Input[str] = pulumi.input_property("credential")
    """
    The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
    """
    credential_provider: pulumi.Input[str] = pulumi.input_property("credentialProvider")
    """
    The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, credential: pulumi.Input[str], credential_provider: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] credential: The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        :param pulumi.Input[str] credential_provider: The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        """
        __self__.credential = credential
        __self__.credential_provider = credential_provider

@pulumi.input_type
class ProjectLogsConfigArgs:
    cloudwatch_logs: Optional[pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs']] = pulumi.input_property("cloudwatchLogs")
    """
    Configuration for the builds to store logs to CloudWatch
    """
    s3_logs: Optional[pulumi.Input['ProjectLogsConfigS3LogsArgs']] = pulumi.input_property("s3Logs")
    """
    Configuration for the builds to store logs to S3.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_logs: Optional[pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs']] = None, s3_logs: Optional[pulumi.Input['ProjectLogsConfigS3LogsArgs']] = None) -> None:
        """
        :param pulumi.Input['ProjectLogsConfigCloudwatchLogsArgs'] cloudwatch_logs: Configuration for the builds to store logs to CloudWatch
        :param pulumi.Input['ProjectLogsConfigS3LogsArgs'] s3_logs: Configuration for the builds to store logs to S3.
        """
        __self__.cloudwatch_logs = cloudwatch_logs
        __self__.s3_logs = s3_logs

@pulumi.input_type
class ProjectLogsConfigCloudwatchLogsArgs:
    group_name: Optional[pulumi.Input[str]] = pulumi.input_property("groupName")
    """
    The group name of the logs in CloudWatch Logs.
    """
    status: Optional[pulumi.Input[str]] = pulumi.input_property("status")
    """
    Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
    """
    stream_name: Optional[pulumi.Input[str]] = pulumi.input_property("streamName")
    """
    The stream name of the logs in CloudWatch Logs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, group_name: Optional[pulumi.Input[str]] = None, status: Optional[pulumi.Input[str]] = None, stream_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] group_name: The group name of the logs in CloudWatch Logs.
        :param pulumi.Input[str] status: Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        :param pulumi.Input[str] stream_name: The stream name of the logs in CloudWatch Logs.
        """
        __self__.group_name = group_name
        __self__.status = status
        __self__.stream_name = stream_name

@pulumi.input_type
class ProjectLogsConfigS3LogsArgs:
    encryption_disabled: Optional[pulumi.Input[bool]] = pulumi.input_property("encryptionDisabled")
    """
    If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
    """
    status: Optional[pulumi.Input[str]] = pulumi.input_property("status")
    """
    Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, encryption_disabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, status: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        :param pulumi.Input[str] status: Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
        """
        __self__.encryption_disabled = encryption_disabled
        __self__.location = location
        __self__.status = status

@pulumi.input_type
class ProjectSecondaryArtifactArgs:
    artifact_identifier: pulumi.Input[str] = pulumi.input_property("artifactIdentifier")
    """
    The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
    """
    encryption_disabled: Optional[pulumi.Input[bool]] = pulumi.input_property("encryptionDisabled")
    """
    If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
    """
    namespace_type: Optional[pulumi.Input[str]] = pulumi.input_property("namespaceType")
    """
    The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
    """
    override_artifact_name: Optional[pulumi.Input[bool]] = pulumi.input_property("overrideArtifactName")
    """
    If set to true, a name specified in the build spec file overrides the artifact name.
    """
    packaging: Optional[pulumi.Input[str]] = pulumi.input_property("packaging")
    """
    The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    If `type` is set to `S3`, this is the path to the output artifact
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_identifier: pulumi.Input[str], type: pulumi.Input[str], encryption_disabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, namespace_type: Optional[pulumi.Input[str]] = None, override_artifact_name: Optional[pulumi.Input[bool]] = None, packaging: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_identifier: The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        :param pulumi.Input[str] type: The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
        :param pulumi.Input[bool] encryption_disabled: If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        :param pulumi.Input[str] location: Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
        :param pulumi.Input[str] name: The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        :param pulumi.Input[str] namespace_type: The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        :param pulumi.Input[bool] override_artifact_name: If set to true, a name specified in the build spec file overrides the artifact name.
        :param pulumi.Input[str] packaging: The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        :param pulumi.Input[str] path: If `type` is set to `S3`, this is the path to the output artifact
        """
        __self__.artifact_identifier = artifact_identifier
        __self__.type = type
        __self__.encryption_disabled = encryption_disabled
        __self__.location = location
        __self__.name = name
        __self__.namespace_type = namespace_type
        __self__.override_artifact_name = override_artifact_name
        __self__.packaging = packaging
        __self__.path = path

@pulumi.input_type
class ProjectSecondarySourceArgs:
    source_identifier: pulumi.Input[str] = pulumi.input_property("sourceIdentifier")
    """
    The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
    """
    auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]]] = pulumi.input_property("auths")
    """
    Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
    """
    buildspec: Optional[pulumi.Input[str]] = pulumi.input_property("buildspec")
    """
    The build spec declaration to use for this build project's related builds.
    """
    git_clone_depth: Optional[pulumi.Input[float]] = pulumi.input_property("gitCloneDepth")
    """
    Truncate git history to this many commits.
    """
    git_submodules_config: Optional[pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs']] = pulumi.input_property("gitSubmodulesConfig")
    """
    Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
    """
    insecure_ssl: Optional[pulumi.Input[bool]] = pulumi.input_property("insecureSsl")
    """
    Ignore SSL warnings when connecting to source control.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    The location of the source code from git or s3.
    """
    report_build_status: Optional[pulumi.Input[bool]] = pulumi.input_property("reportBuildStatus")
    """
    Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, source_identifier: pulumi.Input[str], type: pulumi.Input[str], auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]]] = None, buildspec: Optional[pulumi.Input[str]] = None, git_clone_depth: Optional[pulumi.Input[float]] = None, git_submodules_config: Optional[pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs']] = None, insecure_ssl: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, report_build_status: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] source_identifier: The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        :param pulumi.Input[str] type: The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        :param pulumi.Input[List[pulumi.Input['ProjectSecondarySourceAuthArgs']]] auths: Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        :param pulumi.Input[str] buildspec: The build spec declaration to use for this build project's related builds.
        :param pulumi.Input[float] git_clone_depth: Truncate git history to this many commits.
        :param pulumi.Input['ProjectSecondarySourceGitSubmodulesConfigArgs'] git_submodules_config: Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        :param pulumi.Input[bool] insecure_ssl: Ignore SSL warnings when connecting to source control.
        :param pulumi.Input[str] location: The location of the source code from git or s3.
        :param pulumi.Input[bool] report_build_status: Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        """
        __self__.source_identifier = source_identifier
        __self__.type = type
        __self__.auths = auths
        __self__.buildspec = buildspec
        __self__.git_clone_depth = git_clone_depth
        __self__.git_submodules_config = git_submodules_config
        __self__.insecure_ssl = insecure_ssl
        __self__.location = location
        __self__.report_build_status = report_build_status

@pulumi.input_type
class ProjectSecondarySourceAuthArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The authorization type to use. The only valid value is `OAUTH`
    """
    resource: Optional[pulumi.Input[str]] = pulumi.input_property("resource")
    """
    The resource value that applies to the specified authorization type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], resource: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The authorization type to use. The only valid value is `OAUTH`
        :param pulumi.Input[str] resource: The resource value that applies to the specified authorization type.
        """
        __self__.type = type
        __self__.resource = resource

@pulumi.input_type
class ProjectSecondarySourceGitSubmodulesConfigArgs:
    fetch_submodules: pulumi.Input[bool] = pulumi.input_property("fetchSubmodules")
    """
    If set to true, fetches Git submodules for the AWS CodeBuild build project.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fetch_submodules: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] fetch_submodules: If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        __self__.fetch_submodules = fetch_submodules

@pulumi.input_type
class ProjectSourceArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
    """
    auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]]] = pulumi.input_property("auths")
    """
    Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
    """
    buildspec: Optional[pulumi.Input[str]] = pulumi.input_property("buildspec")
    """
    The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
    """
    git_clone_depth: Optional[pulumi.Input[float]] = pulumi.input_property("gitCloneDepth")
    """
    Truncate git history to this many commits.
    """
    git_submodules_config: Optional[pulumi.Input['ProjectSourceGitSubmodulesConfigArgs']] = pulumi.input_property("gitSubmodulesConfig")
    """
    Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
    """
    insecure_ssl: Optional[pulumi.Input[bool]] = pulumi.input_property("insecureSsl")
    """
    Ignore SSL warnings when connecting to source control.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    The location of the source code from git or s3.
    """
    report_build_status: Optional[pulumi.Input[bool]] = pulumi.input_property("reportBuildStatus")
    """
    Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], auths: Optional[pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]]] = None, buildspec: Optional[pulumi.Input[str]] = None, git_clone_depth: Optional[pulumi.Input[float]] = None, git_submodules_config: Optional[pulumi.Input['ProjectSourceGitSubmodulesConfigArgs']] = None, insecure_ssl: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, report_build_status: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
        :param pulumi.Input[List[pulumi.Input['ProjectSourceAuthArgs']]] auths: Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        :param pulumi.Input[str] buildspec: The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
        :param pulumi.Input[float] git_clone_depth: Truncate git history to this many commits.
        :param pulumi.Input['ProjectSourceGitSubmodulesConfigArgs'] git_submodules_config: Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
        :param pulumi.Input[bool] insecure_ssl: Ignore SSL warnings when connecting to source control.
        :param pulumi.Input[str] location: The location of the source code from git or s3.
        :param pulumi.Input[bool] report_build_status: Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
        """
        __self__.type = type
        __self__.auths = auths
        __self__.buildspec = buildspec
        __self__.git_clone_depth = git_clone_depth
        __self__.git_submodules_config = git_submodules_config
        __self__.insecure_ssl = insecure_ssl
        __self__.location = location
        __self__.report_build_status = report_build_status

@pulumi.input_type
class ProjectSourceAuthArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The authorization type to use. The only valid value is `OAUTH`
    """
    resource: Optional[pulumi.Input[str]] = pulumi.input_property("resource")
    """
    The resource value that applies to the specified authorization type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], resource: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The authorization type to use. The only valid value is `OAUTH`
        :param pulumi.Input[str] resource: The resource value that applies to the specified authorization type.
        """
        __self__.type = type
        __self__.resource = resource

@pulumi.input_type
class ProjectSourceGitSubmodulesConfigArgs:
    fetch_submodules: pulumi.Input[bool] = pulumi.input_property("fetchSubmodules")
    """
    If set to true, fetches Git submodules for the AWS CodeBuild build project.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fetch_submodules: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] fetch_submodules: If set to true, fetches Git submodules for the AWS CodeBuild build project.
        """
        __self__.fetch_submodules = fetch_submodules

@pulumi.input_type
class ProjectVpcConfigArgs:
    security_group_ids: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("securityGroupIds")
    """
    The security group IDs to assign to running builds.
    """
    subnets: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("subnets")
    """
    The subnet IDs within which to run builds.
    """
    vpc_id: pulumi.Input[str] = pulumi.input_property("vpcId")
    """
    The ID of the VPC within which to run builds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, security_group_ids: pulumi.Input[List[pulumi.Input[str]]], subnets: pulumi.Input[List[pulumi.Input[str]]], vpc_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] security_group_ids: The security group IDs to assign to running builds.
        :param pulumi.Input[List[pulumi.Input[str]]] subnets: The subnet IDs within which to run builds.
        :param pulumi.Input[str] vpc_id: The ID of the VPC within which to run builds.
        """
        __self__.security_group_ids = security_group_ids
        __self__.subnets = subnets
        __self__.vpc_id = vpc_id

@pulumi.input_type
class WebhookFilterGroupArgs:
    filters: Optional[pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]]] = pulumi.input_property("filters")
    """
    A webhook filter for the group. Filter blocks are documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filters: Optional[pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['WebhookFilterGroupFilterArgs']]] filters: A webhook filter for the group. Filter blocks are documented below.
        """
        __self__.filters = filters

@pulumi.input_type
class WebhookFilterGroupFilterArgs:
    pattern: pulumi.Input[str] = pulumi.input_property("pattern")
    """
    For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
    """
    exclude_matched_pattern: Optional[pulumi.Input[bool]] = pulumi.input_property("excludeMatchedPattern")
    """
    If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pattern: pulumi.Input[str], type: pulumi.Input[str], exclude_matched_pattern: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] pattern: For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
        :param pulumi.Input[str] type: The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
        :param pulumi.Input[bool] exclude_matched_pattern: If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
        """
        __self__.pattern = pattern
        __self__.type = type
        __self__.exclude_matched_pattern = exclude_matched_pattern

