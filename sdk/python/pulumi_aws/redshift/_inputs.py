# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterLoggingArgs',
    'ClusterSnapshotCopyArgs',
    'ParameterGroupParameterArgs',
    'SecurityGroupIngressArgs',
]

@pulumi.input_type
class ClusterLoggingArgs:
    enable: pulumi.Input[bool] = pulumi.input_property("enable")
    """
    Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
    """
    bucket_name: Optional[pulumi.Input[str]] = pulumi.input_property("bucketName")
    """
    The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
    For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
    """
    s3_key_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("s3KeyPrefix")
    """
    The prefix applied to the log file names.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enable: pulumi.Input[bool], bucket_name: Optional[pulumi.Input[str]] = None, s3_key_prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enable: Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
        :param pulumi.Input[str] bucket_name: The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
               For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
        :param pulumi.Input[str] s3_key_prefix: The prefix applied to the log file names.
        """
        __self__.enable = enable
        __self__.bucket_name = bucket_name
        __self__.s3_key_prefix = s3_key_prefix

@pulumi.input_type
class ClusterSnapshotCopyArgs:
    destination_region: pulumi.Input[str] = pulumi.input_property("destinationRegion")
    """
    The destination region that you want to copy snapshots to.
    """
    grant_name: Optional[pulumi.Input[str]] = pulumi.input_property("grantName")
    """
    The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
    """
    retention_period: Optional[pulumi.Input[float]] = pulumi.input_property("retentionPeriod")
    """
    The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, destination_region: pulumi.Input[str], grant_name: Optional[pulumi.Input[str]] = None, retention_period: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] destination_region: The destination region that you want to copy snapshots to.
        :param pulumi.Input[str] grant_name: The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        :param pulumi.Input[float] retention_period: The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
        """
        __self__.destination_region = destination_region
        __self__.grant_name = grant_name
        __self__.retention_period = retention_period

@pulumi.input_type
class ParameterGroupParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Redshift parameter.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The value of the Redshift parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the Redshift parameter.
        :param pulumi.Input[str] value: The value of the Redshift parameter.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class SecurityGroupIngressArgs:
    cidr: Optional[pulumi.Input[str]] = pulumi.input_property("cidr")
    """
    The CIDR block to accept
    """
    security_group_name: Optional[pulumi.Input[str]] = pulumi.input_property("securityGroupName")
    """
    The name of the security group to authorize
    """
    security_group_owner_id: Optional[pulumi.Input[str]] = pulumi.input_property("securityGroupOwnerId")
    """
    The owner Id of the security group provided
    by `security_group_name`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cidr: Optional[pulumi.Input[str]] = None, security_group_name: Optional[pulumi.Input[str]] = None, security_group_owner_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cidr: The CIDR block to accept
        :param pulumi.Input[str] security_group_name: The name of the security group to authorize
        :param pulumi.Input[str] security_group_owner_id: The owner Id of the security group provided
               by `security_group_name`.
        """
        __self__.cidr = cidr
        __self__.security_group_name = security_group_name
        __self__.security_group_owner_id = security_group_owner_id

