# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PolicyStepScalingPolicyConfigurationArgs',
    'PolicyStepScalingPolicyConfigurationStepAdjustmentArgs',
    'PolicyTargetTrackingScalingPolicyConfigurationArgs',
    'PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs',
    'PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs',
    'PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs',
    'ScheduledActionScalableTargetActionArgs',
]

@pulumi.input_type
class PolicyStepScalingPolicyConfigurationArgs:
    adjustment_type: Optional[pulumi.Input[str]] = pulumi.input_property("adjustmentType")
    """
    Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
    """
    cooldown: Optional[pulumi.Input[float]] = pulumi.input_property("cooldown")
    """
    The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    """
    metric_aggregation_type: Optional[pulumi.Input[str]] = pulumi.input_property("metricAggregationType")
    """
    The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    """
    min_adjustment_magnitude: Optional[pulumi.Input[float]] = pulumi.input_property("minAdjustmentMagnitude")
    """
    The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
    """
    step_adjustments: Optional[pulumi.Input[List[pulumi.Input['PolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]]] = pulumi.input_property("stepAdjustments")
    """
    A set of adjustments that manage scaling. These have the following structure:
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, adjustment_type: Optional[pulumi.Input[str]] = None, cooldown: Optional[pulumi.Input[float]] = None, metric_aggregation_type: Optional[pulumi.Input[str]] = None, min_adjustment_magnitude: Optional[pulumi.Input[float]] = None, step_adjustments: Optional[pulumi.Input[List[pulumi.Input['PolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] adjustment_type: Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        :param pulumi.Input[float] cooldown: The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        :param pulumi.Input[str] metric_aggregation_type: The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        :param pulumi.Input[float] min_adjustment_magnitude: The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        :param pulumi.Input[List[pulumi.Input['PolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]] step_adjustments: A set of adjustments that manage scaling. These have the following structure:
        """
        __self__.adjustment_type = adjustment_type
        __self__.cooldown = cooldown
        __self__.metric_aggregation_type = metric_aggregation_type
        __self__.min_adjustment_magnitude = min_adjustment_magnitude
        __self__.step_adjustments = step_adjustments

@pulumi.input_type
class PolicyStepScalingPolicyConfigurationStepAdjustmentArgs:
    scaling_adjustment: pulumi.Input[float] = pulumi.input_property("scalingAdjustment")
    """
    The number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
    """
    metric_interval_lower_bound: Optional[pulumi.Input[str]] = pulumi.input_property("metricIntervalLowerBound")
    """
    The lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
    """
    metric_interval_upper_bound: Optional[pulumi.Input[str]] = pulumi.input_property("metricIntervalUpperBound")
    """
    The upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, scaling_adjustment: pulumi.Input[float], metric_interval_lower_bound: Optional[pulumi.Input[str]] = None, metric_interval_upper_bound: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] scaling_adjustment: The number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
        :param pulumi.Input[str] metric_interval_lower_bound: The lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
        :param pulumi.Input[str] metric_interval_upper_bound: The upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
        """
        __self__.scaling_adjustment = scaling_adjustment
        __self__.metric_interval_lower_bound = metric_interval_lower_bound
        __self__.metric_interval_upper_bound = metric_interval_upper_bound

@pulumi.input_type
class PolicyTargetTrackingScalingPolicyConfigurationArgs:
    target_value: pulumi.Input[float] = pulumi.input_property("targetValue")
    """
    The target value for the metric.
    """
    customized_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs']] = pulumi.input_property("customizedMetricSpecification")
    """
    A custom CloudWatch metric. Documentation can be found  at: [AWS Customized Metric Specification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CustomizedMetricSpecification.html). See supported fields below.
    """
    disable_scale_in: Optional[pulumi.Input[bool]] = pulumi.input_property("disableScaleIn")
    """
    Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is `false`.
    """
    predefined_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs']] = pulumi.input_property("predefinedMetricSpecification")
    """
    A predefined metric. See supported fields below.
    """
    scale_in_cooldown: Optional[pulumi.Input[float]] = pulumi.input_property("scaleInCooldown")
    """
    The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    """
    scale_out_cooldown: Optional[pulumi.Input[float]] = pulumi.input_property("scaleOutCooldown")
    """
    The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_value: pulumi.Input[float], customized_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs']] = None, disable_scale_in: Optional[pulumi.Input[bool]] = None, predefined_metric_specification: Optional[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs']] = None, scale_in_cooldown: Optional[pulumi.Input[float]] = None, scale_out_cooldown: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] target_value: The target value for the metric.
        :param pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs'] customized_metric_specification: A custom CloudWatch metric. Documentation can be found  at: [AWS Customized Metric Specification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CustomizedMetricSpecification.html). See supported fields below.
        :param pulumi.Input[bool] disable_scale_in: Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is `false`.
        :param pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs'] predefined_metric_specification: A predefined metric. See supported fields below.
        :param pulumi.Input[float] scale_in_cooldown: The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
        :param pulumi.Input[float] scale_out_cooldown: The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
        """
        __self__.target_value = target_value
        __self__.customized_metric_specification = customized_metric_specification
        __self__.disable_scale_in = disable_scale_in
        __self__.predefined_metric_specification = predefined_metric_specification
        __self__.scale_in_cooldown = scale_in_cooldown
        __self__.scale_out_cooldown = scale_out_cooldown

@pulumi.input_type
class PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs:
    metric_name: pulumi.Input[str] = pulumi.input_property("metricName")
    """
    The name of the metric.
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    The namespace of the metric.
    """
    statistic: pulumi.Input[str] = pulumi.input_property("statistic")
    """
    The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
    """
    dimensions: Optional[pulumi.Input[List[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]]] = pulumi.input_property("dimensions")
    """
    Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    """
    unit: Optional[pulumi.Input[str]] = pulumi.input_property("unit")
    """
    The unit of the metric.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, metric_name: pulumi.Input[str], namespace: pulumi.Input[str], statistic: pulumi.Input[str], dimensions: Optional[pulumi.Input[List[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]]] = None, unit: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] metric_name: The name of the metric.
        :param pulumi.Input[str] namespace: The namespace of the metric.
        :param pulumi.Input[str] statistic: The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
        :param pulumi.Input[List[pulumi.Input['PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]] dimensions: Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
        :param pulumi.Input[str] unit: The unit of the metric.
        """
        __self__.metric_name = metric_name
        __self__.namespace = namespace
        __self__.statistic = statistic
        __self__.dimensions = dimensions
        __self__.unit = unit

@pulumi.input_type
class PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the policy.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    Value of the dimension.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the policy.
        :param pulumi.Input[str] value: Value of the dimension.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs:
    predefined_metric_type: pulumi.Input[str] = pulumi.input_property("predefinedMetricType")
    """
    The metric type.
    """
    resource_label: Optional[pulumi.Input[str]] = pulumi.input_property("resourceLabel")
    """
    Reserved for future use.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, predefined_metric_type: pulumi.Input[str], resource_label: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] predefined_metric_type: The metric type.
        :param pulumi.Input[str] resource_label: Reserved for future use.
        """
        __self__.predefined_metric_type = predefined_metric_type
        __self__.resource_label = resource_label

@pulumi.input_type
class ScheduledActionScalableTargetActionArgs:
    max_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("maxCapacity")
    """
    The maximum capacity.
    """
    min_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("minCapacity")
    """
    The minimum capacity.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_capacity: Optional[pulumi.Input[float]] = None, min_capacity: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] max_capacity: The maximum capacity.
        :param pulumi.Input[float] min_capacity: The minimum capacity.
        """
        __self__.max_capacity = max_capacity
        __self__.min_capacity = min_capacity

