# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AccessPointPosixUser',
    'AccessPointRootDirectory',
    'AccessPointRootDirectoryCreationInfo',
    'FileSystemLifecyclePolicy',
    'GetAccessPointPosixUser',
    'GetAccessPointRootDirectory',
    'GetAccessPointRootDirectoryCreationInfo',
    'GetFileSystemLifecyclePolicy',
]

@pulumi.output_type
class AccessPointPosixUser(dict):
    @property
    @pulumi.getter
    def gid(self) -> float:
        """
        The POSIX group ID used for all file system operations using this access point.
        """
        ...

    @property
    @pulumi.getter(name="secondaryGids")
    def secondary_gids(self) -> Optional[List[float]]:
        """
        Secondary POSIX group IDs used for all file system operations using this access point.
        """
        ...

    @property
    @pulumi.getter
    def uid(self) -> float:
        """
        The POSIX user ID used for all file system operations using this access point.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPointRootDirectory(dict):
    @property
    @pulumi.getter(name="creationInfo")
    def creation_info(self) -> Optional['outputs.AccessPointRootDirectoryCreationInfo']:
        """
        Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creation_info`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPointRootDirectoryCreationInfo(dict):
    @property
    @pulumi.getter(name="ownerGid")
    def owner_gid(self) -> float:
        """
        Specifies the POSIX group ID to apply to the `root_directory`.
        """
        ...

    @property
    @pulumi.getter(name="ownerUid")
    def owner_uid(self) -> float:
        """
        Specifies the POSIX user ID to apply to the `root_directory`.
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FileSystemLifecyclePolicy(dict):
    @property
    @pulumi.getter(name="transitionToIa")
    def transition_to_ia(self) -> str:
        """
        Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccessPointPosixUser(dict):
    @property
    @pulumi.getter
    def gid(self) -> float:
        """
        Group ID
        """
        ...

    @property
    @pulumi.getter(name="secondaryGids")
    def secondary_gids(self) -> List[float]:
        """
        Secondary group IDs
        """
        ...

    @property
    @pulumi.getter
    def uid(self) -> float:
        """
        User Id
        * `root_directory`- Single element list containing information on the directory on the Amazon EFS file system that the access point provides access to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccessPointRootDirectory(dict):
    @property
    @pulumi.getter(name="creationInfos")
    def creation_infos(self) -> List['outputs.GetAccessPointRootDirectoryCreationInfo']:
        """
        Single element list containing information on the creation permissions of the directory
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path exposed as the root directory
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccessPointRootDirectoryCreationInfo(dict):
    @property
    @pulumi.getter(name="ownerGid")
    def owner_gid(self) -> float:
        """
        POSIX owner group ID
        """
        ...

    @property
    @pulumi.getter(name="ownerUid")
    def owner_uid(self) -> float:
        """
        POSIX owner user ID
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        POSIX permissions mode
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFileSystemLifecyclePolicy(dict):
    @property
    @pulumi.getter(name="transitionToIa")
    def transition_to_ia(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


