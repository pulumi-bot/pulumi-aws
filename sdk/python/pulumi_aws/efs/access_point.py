# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['AccessPoint']


class AccessPoint(pulumi.CustomResource):
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    Amazon Resource Name of the access point.
    """
    file_system_arn: pulumi.Output[str] = pulumi.output_property("fileSystemArn")
    """
    Amazon Resource Name of the file system.
    """
    file_system_id: pulumi.Output[str] = pulumi.output_property("fileSystemId")
    """
    The ID of the file system for which the access point is intended.
    """
    owner_id: pulumi.Output[str] = pulumi.output_property("ownerId")
    posix_user: pulumi.Output[Optional['outputs.AccessPointPosixUser']] = pulumi.output_property("posixUser")
    """
    The operating system user and group applied to all file system requests made using the access point. See Posix User below.
    """
    root_directory: pulumi.Output['outputs.AccessPointRootDirectory'] = pulumi.output_property("rootDirectory")
    """
    Specifies the directory on the Amazon EFS file system that the access point provides access to. See Root Directory below.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    Key-value mapping of resource tags.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, file_system_id: Optional[pulumi.Input[str]] = None, posix_user: Optional[pulumi.Input[pulumi.InputType['AccessPointPosixUserArgs']]] = None, root_directory: Optional[pulumi.Input[pulumi.InputType['AccessPointRootDirectoryArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides an Elastic File System (EFS) access point.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.efs.AccessPoint("test", file_system_id=aws_efs_file_system["foo"]["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_system_id: The ID of the file system for which the access point is intended.
        :param pulumi.Input[pulumi.InputType['AccessPointPosixUserArgs']] posix_user: The operating system user and group applied to all file system requests made using the access point. See Posix User below.
        :param pulumi.Input[pulumi.InputType['AccessPointRootDirectoryArgs']] root_directory: Specifies the directory on the Amazon EFS file system that the access point provides access to. See Root Directory below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: Key-value mapping of resource tags.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if file_system_id is None:
                raise TypeError("Missing required property 'file_system_id'")
            __props__['file_system_id'] = file_system_id
            __props__['posix_user'] = posix_user
            __props__['root_directory'] = root_directory
            __props__['tags'] = tags
            __props__['arn'] = None
            __props__['file_system_arn'] = None
            __props__['owner_id'] = None
        super(AccessPoint, __self__).__init__(
            'aws:efs/accessPoint:AccessPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, arn: Optional[pulumi.Input[str]] = None, file_system_arn: Optional[pulumi.Input[str]] = None, file_system_id: Optional[pulumi.Input[str]] = None, owner_id: Optional[pulumi.Input[str]] = None, posix_user: Optional[pulumi.Input[pulumi.InputType['AccessPointPosixUserArgs']]] = None, root_directory: Optional[pulumi.Input[pulumi.InputType['AccessPointRootDirectoryArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> 'AccessPoint':
        """
        Get an existing AccessPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: Amazon Resource Name of the access point.
        :param pulumi.Input[str] file_system_arn: Amazon Resource Name of the file system.
        :param pulumi.Input[str] file_system_id: The ID of the file system for which the access point is intended.
        :param pulumi.Input[pulumi.InputType['AccessPointPosixUserArgs']] posix_user: The operating system user and group applied to all file system requests made using the access point. See Posix User below.
        :param pulumi.Input[pulumi.InputType['AccessPointRootDirectoryArgs']] root_directory: Specifies the directory on the Amazon EFS file system that the access point provides access to. See Root Directory below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: Key-value mapping of resource tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["file_system_arn"] = file_system_arn
        __props__["file_system_id"] = file_system_id
        __props__["owner_id"] = owner_id
        __props__["posix_user"] = posix_user
        __props__["root_directory"] = root_directory
        __props__["tags"] = tags
        return AccessPoint(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

