# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ConfigurationAggregatorAccountAggregationSourceArgs',
    'ConfigurationAggregatorOrganizationAggregationSourceArgs',
    'DeliveryChannelSnapshotDeliveryPropertiesArgs',
    'RecorderRecordingGroupArgs',
    'RuleScopeArgs',
    'RuleSourceArgs',
    'RuleSourceSourceDetailArgs',
]

@pulumi.input_type
class ConfigurationAggregatorAccountAggregationSourceArgs:
    account_ids: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("accountIds")
    """
    List of 12-digit account IDs of the account(s) being aggregated.
    """
    all_regions: Optional[pulumi.Input[bool]] = pulumi.input_property("allRegions")
    """
    If true, aggregate existing AWS Config regions and future regions.
    """
    regions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("regions")
    """
    List of source regions being aggregated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, account_ids: pulumi.Input[List[pulumi.Input[str]]], all_regions: Optional[pulumi.Input[bool]] = None, regions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] account_ids: List of 12-digit account IDs of the account(s) being aggregated.
        :param pulumi.Input[bool] all_regions: If true, aggregate existing AWS Config regions and future regions.
        :param pulumi.Input[List[pulumi.Input[str]]] regions: List of source regions being aggregated.
        """
        __self__.account_ids = account_ids
        __self__.all_regions = all_regions
        __self__.regions = regions

@pulumi.input_type
class ConfigurationAggregatorOrganizationAggregationSourceArgs:
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
    """
    all_regions: Optional[pulumi.Input[bool]] = pulumi.input_property("allRegions")
    """
    If true, aggregate existing AWS Config regions and future regions.
    """
    regions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("regions")
    """
    List of source regions being aggregated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, role_arn: pulumi.Input[str], all_regions: Optional[pulumi.Input[bool]] = None, regions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] role_arn: ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
        :param pulumi.Input[bool] all_regions: If true, aggregate existing AWS Config regions and future regions.
        :param pulumi.Input[List[pulumi.Input[str]]] regions: List of source regions being aggregated.
        """
        __self__.role_arn = role_arn
        __self__.all_regions = all_regions
        __self__.regions = regions

@pulumi.input_type
class DeliveryChannelSnapshotDeliveryPropertiesArgs:
    delivery_frequency: Optional[pulumi.Input[str]] = pulumi.input_property("deliveryFrequency")
    """
    - The frequency with which AWS Config recurringly delivers configuration snapshots.
    e.g. `One_Hour` or `Three_Hours`.
    Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, delivery_frequency: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] delivery_frequency: - The frequency with which AWS Config recurringly delivers configuration snapshots.
               e.g. `One_Hour` or `Three_Hours`.
               Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
        """
        __self__.delivery_frequency = delivery_frequency

@pulumi.input_type
class RecorderRecordingGroupArgs:
    all_supported: Optional[pulumi.Input[bool]] = pulumi.input_property("allSupported")
    """
    Specifies whether AWS Config records configuration changes
    for every supported type of regional resource (which includes any new type that will become supported in the future).
    Conflicts with `resource_types`. Defaults to `true`.
    """
    include_global_resource_types: Optional[pulumi.Input[bool]] = pulumi.input_property("includeGlobalResourceTypes")
    """
    Specifies whether AWS Config includes all supported types of *global resources*
    with the resources that it records. Requires `all_supported = true`. Conflicts with `resource_types`.
    """
    resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("resourceTypes")
    """
    A list that specifies the types of AWS resources for which
    AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`).
    See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, all_supported: Optional[pulumi.Input[bool]] = None, include_global_resource_types: Optional[pulumi.Input[bool]] = None, resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[bool] all_supported: Specifies whether AWS Config records configuration changes
               for every supported type of regional resource (which includes any new type that will become supported in the future).
               Conflicts with `resource_types`. Defaults to `true`.
        :param pulumi.Input[bool] include_global_resource_types: Specifies whether AWS Config includes all supported types of *global resources*
               with the resources that it records. Requires `all_supported = true`. Conflicts with `resource_types`.
        :param pulumi.Input[List[pulumi.Input[str]]] resource_types: A list that specifies the types of AWS resources for which
               AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`).
               See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
        """
        __self__.all_supported = all_supported
        __self__.include_global_resource_types = include_global_resource_types
        __self__.resource_types = resource_types

@pulumi.input_type
class RuleScopeArgs:
    compliance_resource_id: Optional[pulumi.Input[str]] = pulumi.input_property("complianceResourceId")
    """
    The IDs of the only AWS resource that you want to trigger an evaluation for the rule.
    If you specify a resource ID, you must specify one resource type for `compliance_resource_types`.
    """
    compliance_resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("complianceResourceTypes")
    """
    A list of resource types of only those AWS resources that you want to trigger an
    evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify
    a resource ID for `compliance_resource_id`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
    """
    tag_key: Optional[pulumi.Input[str]] = pulumi.input_property("tagKey")
    """
    The tag key that is applied to only those AWS resources that you want you
    want to trigger an evaluation for the rule.
    """
    tag_value: Optional[pulumi.Input[str]] = pulumi.input_property("tagValue")
    """
    The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, compliance_resource_id: Optional[pulumi.Input[str]] = None, compliance_resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, tag_key: Optional[pulumi.Input[str]] = None, tag_value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] compliance_resource_id: The IDs of the only AWS resource that you want to trigger an evaluation for the rule.
               If you specify a resource ID, you must specify one resource type for `compliance_resource_types`.
        :param pulumi.Input[List[pulumi.Input[str]]] compliance_resource_types: A list of resource types of only those AWS resources that you want to trigger an
               evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify
               a resource ID for `compliance_resource_id`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
        :param pulumi.Input[str] tag_key: The tag key that is applied to only those AWS resources that you want you
               want to trigger an evaluation for the rule.
        :param pulumi.Input[str] tag_value: The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
        """
        __self__.compliance_resource_id = compliance_resource_id
        __self__.compliance_resource_types = compliance_resource_types
        __self__.tag_key = tag_key
        __self__.tag_value = tag_value

@pulumi.input_type
class RuleSourceArgs:
    owner: pulumi.Input[str] = pulumi.input_property("owner")
    """
    Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the `lambda.Permission` resource.
    """
    source_identifier: pulumi.Input[str] = pulumi.input_property("sourceIdentifier")
    """
    For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `lambda.Function` resource.
    """
    source_details: Optional[pulumi.Input[List[pulumi.Input['RuleSourceSourceDetailArgs']]]] = pulumi.input_property("sourceDetails")
    """
    Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, owner: pulumi.Input[str], source_identifier: pulumi.Input[str], source_details: Optional[pulumi.Input[List[pulumi.Input['RuleSourceSourceDetailArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] owner: Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the `lambda.Permission` resource.
        :param pulumi.Input[str] source_identifier: For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `lambda.Function` resource.
        :param pulumi.Input[List[pulumi.Input['RuleSourceSourceDetailArgs']]] source_details: Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
        """
        __self__.owner = owner
        __self__.source_identifier = source_identifier
        __self__.source_details = source_details

@pulumi.input_type
class RuleSourceSourceDetailArgs:
    event_source: Optional[pulumi.Input[str]] = pulumi.input_property("eventSource")
    """
    The source of the event, such as an AWS service, that triggers AWS Config
    to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
    """
    maximum_execution_frequency: Optional[pulumi.Input[str]] = pulumi.input_property("maximumExecutionFrequency")
    """
    The frequency that you want AWS Config to run evaluations for a rule that
    is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
    """
    message_type: Optional[pulumi.Input[str]] = pulumi.input_property("messageType")
    """
    The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, event_source: Optional[pulumi.Input[str]] = None, maximum_execution_frequency: Optional[pulumi.Input[str]] = None, message_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] event_source: The source of the event, such as an AWS service, that triggers AWS Config
               to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
        :param pulumi.Input[str] maximum_execution_frequency: The frequency that you want AWS Config to run evaluations for a rule that
               is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        :param pulumi.Input[str] message_type: The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
        """
        __self__.event_source = event_source
        __self__.maximum_execution_frequency = maximum_execution_frequency
        __self__.message_type = message_type

