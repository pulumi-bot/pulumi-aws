# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'CertificateAuthorityCertificateAuthorityConfiguration',
    'CertificateAuthorityCertificateAuthorityConfigurationSubject',
    'CertificateAuthorityRevocationConfiguration',
    'CertificateAuthorityRevocationConfigurationCrlConfiguration',
    'GetCertificateAuthorityRevocationConfigurationResult',
    'GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult',
]

@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfiguration(dict):
    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> str:
        """
        Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        """
        ...

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> str:
        """
        Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        """
        ...

    @property
    @pulumi.getter
    def subject(self) -> 'outputs.CertificateAuthorityCertificateAuthorityConfigurationSubject':
        """
        Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfigurationSubject(dict):
    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        Fully qualified domain name (FQDN) associated with the certificate subject.
        """
        ...

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Two digit code that specifies the country in which the certificate subject located.
        """
        ...

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        """
        Disambiguating information for the certificate subject.
        """
        ...

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        """
        Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.
        """
        ...

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        """
        First name.
        """
        ...

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        """
        Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`.
        """
        ...

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        The locality (such as a city or town) in which the certificate subject is located.
        """
        ...

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        Legal name of the organization with which the certificate subject is affiliated.
        """
        ...

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        """
        A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.
        """
        ...

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        """
        Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.
        """
        ...

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State in which the subject of the certificate is located.
        """
        ...

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        """
        Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.
        """
        ...

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        A title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateAuthorityRevocationConfiguration(dict):
    @property
    @pulumi.getter(name="crlConfiguration")
    def crl_configuration(self) -> Optional['outputs.CertificateAuthorityRevocationConfigurationCrlConfiguration']:
        """
        Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateAuthorityRevocationConfigurationCrlConfiguration(dict):
    @property
    @pulumi.getter(name="customCname")
    def custom_cname(self) -> Optional[str]:
        """
        Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> float:
        """
        Number of days until a certificate expires. Must be between 1 and 5000.
        """
        ...

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[str]:
        """
        Name of the S3 bucket that contains the CRL. If you do not provide a value for the `custom_cname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateAuthorityRevocationConfigurationResult(dict):
    @property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> List['outputs.GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult']:
        ...


@pulumi.output_type
class GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult(dict):
    @property
    @pulumi.getter(name="customCname")
    def custom_cname(self) -> str:
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> float:
        ...

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        ...


