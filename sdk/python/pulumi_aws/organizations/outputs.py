# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'OrganizationAccount',
    'OrganizationNonMasterAccount',
    'OrganizationRoot',
    'OrganizationRootPolicyType',
    'OrganizationalUnitAccount',
    'GetOrganizationAccount',
    'GetOrganizationNonMasterAccount',
    'GetOrganizationRoot',
    'GetOrganizationRootPolicyType',
    'GetOrganizationalUnitsChildren',
]

@pulumi.output_type
class OrganizationAccount(dict):
    arn: Optional[str] = pulumi.output_property("arn")
    """
    ARN of the root
    """
    email: Optional[str] = pulumi.output_property("email")
    """
    Email of the account
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the policy type
    """
    status: Optional[str] = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrganizationNonMasterAccount(dict):
    arn: Optional[str] = pulumi.output_property("arn")
    """
    ARN of the root
    """
    email: Optional[str] = pulumi.output_property("email")
    """
    Email of the account
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the policy type
    """
    status: Optional[str] = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrganizationRoot(dict):
    arn: Optional[str] = pulumi.output_property("arn")
    """
    ARN of the root
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the policy type
    """
    policy_types: Optional[List['outputs.OrganizationRootPolicyType']] = pulumi.output_property("policyTypes")
    """
    List of policy types enabled for this root. All elements have these attributes:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrganizationRootPolicyType(dict):
    status: Optional[str] = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """
    type: Optional[str] = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrganizationalUnitAccount(dict):
    arn: Optional[str] = pulumi.output_property("arn")
    """
    ARN of the organizational unit
    """
    email: Optional[str] = pulumi.output_property("email")
    """
    Email of the account
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Identifier of the organization unit
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name for the organizational unit
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetOrganizationAccount(dict):
    arn: str = pulumi.output_property("arn")
    """
    ARN of the root
    """
    email: str = pulumi.output_property("email")
    """
    Email of the account
    """
    id: str = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: str = pulumi.output_property("name")
    """
    The name of the policy type
    """
    status: str = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetOrganizationNonMasterAccount(dict):
    arn: str = pulumi.output_property("arn")
    """
    ARN of the root
    """
    email: str = pulumi.output_property("email")
    """
    Email of the account
    """
    id: str = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: str = pulumi.output_property("name")
    """
    The name of the policy type
    """
    status: str = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetOrganizationRoot(dict):
    arn: str = pulumi.output_property("arn")
    """
    ARN of the root
    """
    id: str = pulumi.output_property("id")
    """
    Identifier of the root
    """
    name: str = pulumi.output_property("name")
    """
    The name of the policy type
    """
    policy_types: List['outputs.GetOrganizationRootPolicyType'] = pulumi.output_property("policyTypes")
    """
    List of policy types enabled for this root. All elements have these attributes:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetOrganizationRootPolicyType(dict):
    status: str = pulumi.output_property("status")
    """
    The status of the policy type as it relates to the associated root
    """
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetOrganizationalUnitsChildren(dict):
    arn: str = pulumi.output_property("arn")
    """
    ARN of the organizational unit
    """
    id: str = pulumi.output_property("id")
    """
    ID of the organizational unit
    """
    name: str = pulumi.output_property("name")
    """
    Name of the organizational unit
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


