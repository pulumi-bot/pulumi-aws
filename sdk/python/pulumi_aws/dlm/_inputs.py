# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'LifecyclePolicyPolicyDetailsArgs',
    'LifecyclePolicyPolicyDetailsScheduleArgs',
    'LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs',
    'LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs',
]

@pulumi.input_type
class LifecyclePolicyPolicyDetailsArgs:
    resource_types: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("resourceTypes")
    """
    A list of resource types that should be targeted by the lifecycle policy. `VOLUME` is currently the only allowed value.
    """
    schedules: pulumi.Input[List[pulumi.Input['LifecyclePolicyPolicyDetailsScheduleArgs']]] = pulumi.input_property("schedules")
    """
    See the `schedule` configuration block.
    """
    target_tags: pulumi.Input[Dict[str, pulumi.Input[str]]] = pulumi.input_property("targetTags")
    """
    A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_types: pulumi.Input[List[pulumi.Input[str]]], schedules: pulumi.Input[List[pulumi.Input['LifecyclePolicyPolicyDetailsScheduleArgs']]], target_tags: pulumi.Input[Dict[str, pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] resource_types: A list of resource types that should be targeted by the lifecycle policy. `VOLUME` is currently the only allowed value.
        :param pulumi.Input[List[pulumi.Input['LifecyclePolicyPolicyDetailsScheduleArgs']]] schedules: See the `schedule` configuration block.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] target_tags: A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted.
        """
        __self__.resource_types = resource_types
        __self__.schedules = schedules
        __self__.target_tags = target_tags

@pulumi.input_type
class LifecyclePolicyPolicyDetailsScheduleArgs:
    create_rule: pulumi.Input['LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs'] = pulumi.input_property("createRule")
    """
    See the `create_rule` block. Max of 1 per schedule.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name for the schedule.
    """
    retain_rule: pulumi.Input['LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs'] = pulumi.input_property("retainRule")
    """
    See the `retain_rule` block. Max of 1 per schedule.
    """
    copy_tags: Optional[pulumi.Input[bool]] = pulumi.input_property("copyTags")
    """
    Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
    """
    tags_to_add: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("tagsToAdd")
    """
    A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, create_rule: pulumi.Input['LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs'], name: pulumi.Input[str], retain_rule: pulumi.Input['LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs'], copy_tags: Optional[pulumi.Input[bool]] = None, tags_to_add: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input['LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs'] create_rule: See the `create_rule` block. Max of 1 per schedule.
        :param pulumi.Input[str] name: A name for the schedule.
        :param pulumi.Input['LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs'] retain_rule: See the `retain_rule` block. Max of 1 per schedule.
        :param pulumi.Input[bool] copy_tags: Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags_to_add: A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
        """
        __self__.create_rule = create_rule
        __self__.name = name
        __self__.retain_rule = retain_rule
        __self__.copy_tags = copy_tags
        __self__.tags_to_add = tags_to_add

@pulumi.input_type
class LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs:
    interval: pulumi.Input[float] = pulumi.input_property("interval")
    """
    How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values.
    """
    interval_unit: Optional[pulumi.Input[str]] = pulumi.input_property("intervalUnit")
    """
    The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value.
    """
    times: Optional[pulumi.Input[str]] = pulumi.input_property("times")
    """
    A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, interval: pulumi.Input[float], interval_unit: Optional[pulumi.Input[str]] = None, times: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] interval: How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values.
        :param pulumi.Input[str] interval_unit: The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value.
        :param pulumi.Input[str] times: A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
        """
        __self__.interval = interval
        __self__.interval_unit = interval_unit
        __self__.times = times

@pulumi.input_type
class LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs:
    count: pulumi.Input[float] = pulumi.input_property("count")
    """
    How many snapshots to keep. Must be an integer between 1 and 1000.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, count: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] count: How many snapshots to keep. Must be an integer between 1 and 1000.
        """
        __self__.count = count

