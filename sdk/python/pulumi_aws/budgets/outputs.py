# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'BudgetCostTypes',
    'BudgetNotification',
]

@pulumi.output_type
class BudgetCostTypes(dict):
    include_credit: Optional[bool] = pulumi.output_property("includeCredit")
    """
    A boolean value whether to include credits in the cost budget. Defaults to `true`
    """
    include_discount: Optional[bool] = pulumi.output_property("includeDiscount")
    """
    Specifies whether a budget includes discounts. Defaults to `true`
    """
    include_other_subscription: Optional[bool] = pulumi.output_property("includeOtherSubscription")
    """
    A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
    """
    include_recurring: Optional[bool] = pulumi.output_property("includeRecurring")
    """
    A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
    """
    include_refund: Optional[bool] = pulumi.output_property("includeRefund")
    """
    A boolean value whether to include refunds in the cost budget. Defaults to `true`
    """
    include_subscription: Optional[bool] = pulumi.output_property("includeSubscription")
    """
    A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
    """
    include_support: Optional[bool] = pulumi.output_property("includeSupport")
    """
    A boolean value whether to include support costs in the cost budget. Defaults to `true`
    """
    include_tax: Optional[bool] = pulumi.output_property("includeTax")
    """
    A boolean value whether to include tax in the cost budget. Defaults to `true`
    """
    include_upfront: Optional[bool] = pulumi.output_property("includeUpfront")
    """
    A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
    """
    use_amortized: Optional[bool] = pulumi.output_property("useAmortized")
    """
    Specifies whether a budget uses the amortized rate. Defaults to `false`
    """
    use_blended: Optional[bool] = pulumi.output_property("useBlended")
    """
    A boolean value whether to use blended costs in the cost budget. Defaults to `false`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BudgetNotification(dict):
    comparison_operator: str = pulumi.output_property("comparisonOperator")
    """
    (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
    """
    notification_type: str = pulumi.output_property("notificationType")
    """
    (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
    """
    subscriber_email_addresses: Optional[List[str]] = pulumi.output_property("subscriberEmailAddresses")
    """
    (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
    """
    subscriber_sns_topic_arns: Optional[List[str]] = pulumi.output_property("subscriberSnsTopicArns")
    """
    (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    (Required) Threshold when the notification should be sent.
    """
    threshold_type: str = pulumi.output_property("thresholdType")
    """
    (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


