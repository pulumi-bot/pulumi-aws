# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Budget']


class Budget(pulumi.CustomResource):
    account_id: pulumi.Output[str] = pulumi.output_property("accountId")
    """
    The ID of the target account for budget. Will use current user's account_id by default if omitted.
    """
    budget_type: pulumi.Output[str] = pulumi.output_property("budgetType")
    """
    Whether this budget tracks monetary cost or usage.
    """
    cost_filters: pulumi.Output[Dict[str, str]] = pulumi.output_property("costFilters")
    """
    Map of CostFilters key/value pairs to apply to the budget.
    """
    cost_types: pulumi.Output['outputs.BudgetCostTypes'] = pulumi.output_property("costTypes")
    """
    Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
    """
    limit_amount: pulumi.Output[str] = pulumi.output_property("limitAmount")
    """
    The amount of cost or usage being measured for a budget.
    """
    limit_unit: pulumi.Output[str] = pulumi.output_property("limitUnit")
    """
    The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The name of a budget. Unique within accounts.
    """
    name_prefix: pulumi.Output[str] = pulumi.output_property("namePrefix")
    """
    The prefix of the name of a budget. Unique within accounts.
    """
    notifications: pulumi.Output[Optional[List['outputs.BudgetNotification']]] = pulumi.output_property("notifications")
    """
    Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
    """
    time_period_end: pulumi.Output[Optional[str]] = pulumi.output_property("timePeriodEnd")
    """
    The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
    """
    time_period_start: pulumi.Output[str] = pulumi.output_property("timePeriodStart")
    """
    The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
    """
    time_unit: pulumi.Output[str] = pulumi.output_property("timeUnit")
    """
    The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, account_id: Optional[pulumi.Input[str]] = None, budget_type: Optional[pulumi.Input[str]] = None, cost_filters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, cost_types: Optional[pulumi.Input[pulumi.InputType['BudgetCostTypesArgs']]] = None, limit_amount: Optional[pulumi.Input[str]] = None, limit_unit: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, name_prefix: Optional[pulumi.Input[str]] = None, notifications: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BudgetNotificationArgs']]]]] = None, time_period_end: Optional[pulumi.Input[str]] = None, time_period_start: Optional[pulumi.Input[str]] = None, time_unit: Optional[pulumi.Input[str]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a budgets budget resource. Budgets use the cost visualisation provided by Cost Explorer to show you the status of your budgets, to provide forecasts of your estimated costs, and to track your AWS usage, including your free tier usage.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        ec2 = aws.budgets.Budget("ec2",
            budget_type="COST",
            cost_filters={
                "Service": "Amazon Elastic Compute Cloud - Compute",
            },
            limit_amount="1200",
            limit_unit="USD",
            notifications=[{
                "comparison_operator": "GREATER_THAN",
                "notification_type": "FORECASTED",
                "subscriberEmailAddresses": ["test@example.com"],
                "threshold": 100,
                "thresholdType": "PERCENTAGE",
            }],
            time_period_end="2087-06-15_00:00",
            time_period_start="2017-07-01_00:00",
            time_unit="MONTHLY")
        ```

        Create a budget for *$100*.

        ```python
        import pulumi
        import pulumi_aws as aws

        cost = aws.budgets.Budget("cost",
            budget_type="COST",
            limit_amount="100",
            limit_unit="USD")
        ```

        Create a budget for s3 with a limit of *3 GB* of storage.

        ```python
        import pulumi
        import pulumi_aws as aws

        s3 = aws.budgets.Budget("s3",
            budget_type="USAGE",
            limit_amount="3",
            limit_unit="GB")
        ```

        Create a Savings Plan Utilization Budget

        ```python
        import pulumi
        import pulumi_aws as aws

        savings_plan_utilization = aws.budgets.Budget("savingsPlanUtilization",
            budget_type="SAVINGS_PLANS_UTILIZATION",
            cost_types={
                "includeCredit": False,
                "includeDiscount": False,
                "includeOtherSubscription": False,
                "includeRecurring": False,
                "includeRefund": False,
                "includeSubscription": True,
                "includeSupport": False,
                "includeTax": False,
                "includeUpfront": False,
                "useBlended": False,
            },
            limit_amount="100.0",
            limit_unit="PERCENTAGE")
        ```

        Create a RI Utilization Budget

        ```python
        import pulumi
        import pulumi_aws as aws

        ri_utilization = aws.budgets.Budget("riUtilization",
            budget_type="RI_UTILIZATION",
            cost_filters={
                "Service": "Amazon Relational Database Service",
            },
            cost_types={
                "includeCredit": False,
                "includeDiscount": False,
                "includeOtherSubscription": False,
                "includeRecurring": False,
                "includeRefund": False,
                "includeSubscription": True,
                "includeSupport": False,
                "includeTax": False,
                "includeUpfront": False,
                "useBlended": False,
            },
            limit_amount="100.0",
            limit_unit="PERCENTAGE")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the target account for budget. Will use current user's account_id by default if omitted.
        :param pulumi.Input[str] budget_type: Whether this budget tracks monetary cost or usage.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] cost_filters: Map of CostFilters key/value pairs to apply to the budget.
        :param pulumi.Input[pulumi.InputType['BudgetCostTypesArgs']] cost_types: Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
        :param pulumi.Input[str] limit_amount: The amount of cost or usage being measured for a budget.
        :param pulumi.Input[str] limit_unit: The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
        :param pulumi.Input[str] name: The name of a budget. Unique within accounts.
        :param pulumi.Input[str] name_prefix: The prefix of the name of a budget. Unique within accounts.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BudgetNotificationArgs']]]] notifications: Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
        :param pulumi.Input[str] time_period_end: The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
        :param pulumi.Input[str] time_period_start: The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
        :param pulumi.Input[str] time_unit: The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['account_id'] = account_id
            if budget_type is None:
                raise TypeError("Missing required property 'budget_type'")
            __props__['budget_type'] = budget_type
            __props__['cost_filters'] = cost_filters
            __props__['cost_types'] = cost_types
            if limit_amount is None:
                raise TypeError("Missing required property 'limit_amount'")
            __props__['limit_amount'] = limit_amount
            if limit_unit is None:
                raise TypeError("Missing required property 'limit_unit'")
            __props__['limit_unit'] = limit_unit
            __props__['name'] = name
            __props__['name_prefix'] = name_prefix
            __props__['notifications'] = notifications
            __props__['time_period_end'] = time_period_end
            if time_period_start is None:
                raise TypeError("Missing required property 'time_period_start'")
            __props__['time_period_start'] = time_period_start
            if time_unit is None:
                raise TypeError("Missing required property 'time_unit'")
            __props__['time_unit'] = time_unit
        super(Budget, __self__).__init__(
            'aws:budgets/budget:Budget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, account_id: Optional[pulumi.Input[str]] = None, budget_type: Optional[pulumi.Input[str]] = None, cost_filters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, cost_types: Optional[pulumi.Input[pulumi.InputType['BudgetCostTypesArgs']]] = None, limit_amount: Optional[pulumi.Input[str]] = None, limit_unit: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, name_prefix: Optional[pulumi.Input[str]] = None, notifications: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BudgetNotificationArgs']]]]] = None, time_period_end: Optional[pulumi.Input[str]] = None, time_period_start: Optional[pulumi.Input[str]] = None, time_unit: Optional[pulumi.Input[str]] = None) -> 'Budget':
        """
        Get an existing Budget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the target account for budget. Will use current user's account_id by default if omitted.
        :param pulumi.Input[str] budget_type: Whether this budget tracks monetary cost or usage.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] cost_filters: Map of CostFilters key/value pairs to apply to the budget.
        :param pulumi.Input[pulumi.InputType['BudgetCostTypesArgs']] cost_types: Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
        :param pulumi.Input[str] limit_amount: The amount of cost or usage being measured for a budget.
        :param pulumi.Input[str] limit_unit: The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
        :param pulumi.Input[str] name: The name of a budget. Unique within accounts.
        :param pulumi.Input[str] name_prefix: The prefix of the name of a budget. Unique within accounts.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BudgetNotificationArgs']]]] notifications: Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
        :param pulumi.Input[str] time_period_end: The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
        :param pulumi.Input[str] time_period_start: The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
        :param pulumi.Input[str] time_unit: The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["budget_type"] = budget_type
        __props__["cost_filters"] = cost_filters
        __props__["cost_types"] = cost_types
        __props__["limit_amount"] = limit_amount
        __props__["limit_unit"] = limit_unit
        __props__["name"] = name
        __props__["name_prefix"] = name_prefix
        __props__["notifications"] = notifications
        __props__["time_period_end"] = time_period_end
        __props__["time_period_start"] = time_period_start
        __props__["time_unit"] = time_unit
        return Budget(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

