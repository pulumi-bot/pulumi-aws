# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'CatalogTablePartitionKey',
    'CatalogTableStorageDescriptor',
    'CatalogTableStorageDescriptorColumn',
    'CatalogTableStorageDescriptorSerDeInfo',
    'CatalogTableStorageDescriptorSkewedInfo',
    'CatalogTableStorageDescriptorSortColumn',
    'ClassifierCsvClassifier',
    'ClassifierGrokClassifier',
    'ClassifierJsonClassifier',
    'ClassifierXmlClassifier',
    'ConnectionPhysicalConnectionRequirements',
    'CrawlerCatalogTarget',
    'CrawlerDynamodbTarget',
    'CrawlerJdbcTarget',
    'CrawlerS3Target',
    'CrawlerSchemaChangePolicy',
    'JobCommand',
    'JobExecutionProperty',
    'JobNotificationProperty',
    'SecurityConfigurationEncryptionConfiguration',
    'SecurityConfigurationEncryptionConfigurationCloudwatchEncryption',
    'SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption',
    'SecurityConfigurationEncryptionConfigurationS3Encryption',
    'TriggerAction',
    'TriggerPredicate',
    'TriggerPredicateCondition',
    'GetScriptDagEdgeResult',
    'GetScriptDagNodeResult',
    'GetScriptDagNodeArgResult',
]

@pulumi.output_type
class CatalogTablePartitionKey(dict):
    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Free-form text comment.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SerDe.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The datatype of data in the Column.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CatalogTableStorageDescriptor(dict):
    @property
    @pulumi.getter(name="bucketColumns")
    def bucket_columns(self) -> Optional[List[str]]:
        """
        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
        """
        ...

    @property
    @pulumi.getter
    def columns(self) -> Optional[List['outputs.CatalogTableStorageDescriptorColumn']]:
        """
        A list of the Columns in the table.
        """
        ...

    @property
    @pulumi.getter
    def compressed(self) -> Optional[bool]:
        """
        True if the data in the table is compressed, or False if not.
        """
        ...

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[str]:
        """
        The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        """
        ...

    @property
    @pulumi.getter(name="numberOfBuckets")
    def number_of_buckets(self) -> Optional[float]:
        """
        Must be specified if the table contains any dimension columns.
        """
        ...

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[str]:
        """
        The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        """
        ...

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, str]]:
        """
        A map of initialization parameters for the SerDe, in key-value form.
        """
        ...

    @property
    @pulumi.getter(name="serDeInfo")
    def ser_de_info(self) -> Optional['outputs.CatalogTableStorageDescriptorSerDeInfo']:
        """
        Serialization/deserialization (SerDe) information.
        """
        ...

    @property
    @pulumi.getter(name="skewedInfo")
    def skewed_info(self) -> Optional['outputs.CatalogTableStorageDescriptorSkewedInfo']:
        """
        Information about values that appear very frequently in a column (skewed values).
        """
        ...

    @property
    @pulumi.getter(name="sortColumns")
    def sort_columns(self) -> Optional[List['outputs.CatalogTableStorageDescriptorSortColumn']]:
        """
        A list of Order objects specifying the sort order of each bucket in the table.
        """
        ...

    @property
    @pulumi.getter(name="storedAsSubDirectories")
    def stored_as_sub_directories(self) -> Optional[bool]:
        """
        True if the table data is stored in subdirectories, or False if not.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CatalogTableStorageDescriptorColumn(dict):
    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Free-form text comment.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SerDe.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The datatype of data in the Column.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CatalogTableStorageDescriptorSerDeInfo(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the SerDe.
        """
        ...

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, str]]:
        """
        A map of initialization parameters for the SerDe, in key-value form.
        """
        ...

    @property
    @pulumi.getter(name="serializationLibrary")
    def serialization_library(self) -> Optional[str]:
        """
        Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CatalogTableStorageDescriptorSkewedInfo(dict):
    @property
    @pulumi.getter(name="skewedColumnNames")
    def skewed_column_names(self) -> Optional[List[str]]:
        """
        A list of names of columns that contain skewed values.
        """
        ...

    @property
    @pulumi.getter(name="skewedColumnValueLocationMaps")
    def skewed_column_value_location_maps(self) -> Optional[Mapping[str, str]]:
        """
        A list of values that appear so frequently as to be considered skewed.
        """
        ...

    @property
    @pulumi.getter(name="skewedColumnValues")
    def skewed_column_values(self) -> Optional[List[str]]:
        """
        A map of skewed values to the columns that contain them.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CatalogTableStorageDescriptorSortColumn(dict):
    @property
    @pulumi.getter
    def column(self) -> str:
        """
        The name of the column.
        """
        ...

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> float:
        """
        Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClassifierCsvClassifier(dict):
    @property
    @pulumi.getter(name="allowSingleColumn")
    def allow_single_column(self) -> Optional[bool]:
        """
        Enables the processing of files that contain only one column.
        """
        ...

    @property
    @pulumi.getter(name="containsHeader")
    def contains_header(self) -> Optional[str]:
        """
        Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        """
        ...

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        """
        The delimiter used in the Csv to separate columns.
        """
        ...

    @property
    @pulumi.getter(name="disableValueTrimming")
    def disable_value_trimming(self) -> Optional[bool]:
        """
        Specifies whether to trim column values.
        """
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[List[str]]:
        """
        A list of strings representing column names.
        """
        ...

    @property
    @pulumi.getter(name="quoteSymbol")
    def quote_symbol(self) -> Optional[str]:
        """
        A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClassifierGrokClassifier(dict):
    @property
    @pulumi.getter
    def classification(self) -> str:
        """
        An identifier of the data format that the classifier matches.
        """
        ...

    @property
    @pulumi.getter(name="customPatterns")
    def custom_patterns(self) -> Optional[str]:
        """
        Custom grok patterns used by this classifier.
        """
        ...

    @property
    @pulumi.getter(name="grokPattern")
    def grok_pattern(self) -> str:
        """
        The grok pattern used by this classifier.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClassifierJsonClassifier(dict):
    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> str:
        """
        A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClassifierXmlClassifier(dict):
    @property
    @pulumi.getter
    def classification(self) -> str:
        """
        An identifier of the data format that the classifier matches.
        """
        ...

    @property
    @pulumi.getter(name="rowTag")
    def row_tag(self) -> str:
        """
        The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionPhysicalConnectionRequirements(dict):
    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
        """
        ...

    @property
    @pulumi.getter(name="securityGroupIdLists")
    def security_group_id_lists(self) -> Optional[List[str]]:
        """
        The security group ID list used by the connection.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet ID used by the connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CrawlerCatalogTarget(dict):
    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the Glue database to be synchronized.
        """
        ...

    @property
    @pulumi.getter
    def tables(self) -> List[str]:
        """
        A list of catalog tables to be synchronized.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CrawlerDynamodbTarget(dict):
    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The name of the DynamoDB table to crawl.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CrawlerJdbcTarget(dict):
    @property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> str:
        """
        The name of the connection to use to connect to the JDBC target.
        """
        ...

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List[str]]:
        """
        A list of glob patterns used to exclude from the crawl.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the JDBC target.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CrawlerS3Target(dict):
    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List[str]]:
        """
        A list of glob patterns used to exclude from the crawl.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The name of the DynamoDB table to crawl.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CrawlerSchemaChangePolicy(dict):
    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> Optional[str]:
        """
        The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
        """
        ...

    @property
    @pulumi.getter(name="updateBehavior")
    def update_behavior(self) -> Optional[str]:
        """
        The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobCommand(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `max_capacity` needs to be set if `pythonshell` is chosen.
        """
        ...

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> Optional[str]:
        """
        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
        """
        ...

    @property
    @pulumi.getter(name="scriptLocation")
    def script_location(self) -> str:
        """
        Specifies the S3 path to a script that executes a job.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobExecutionProperty(dict):
    @property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> Optional[float]:
        """
        The maximum number of concurrent runs allowed for a job. The default is 1.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobNotificationProperty(dict):
    @property
    @pulumi.getter(name="notifyDelayAfter")
    def notify_delay_after(self) -> Optional[float]:
        """
        After a job run starts, the number of minutes to wait before sending a job run delay notification.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityConfigurationEncryptionConfiguration(dict):
    @property
    @pulumi.getter(name="cloudwatchEncryption")
    def cloudwatch_encryption(self) -> 'outputs.SecurityConfigurationEncryptionConfigurationCloudwatchEncryption':
        ...

    @property
    @pulumi.getter(name="jobBookmarksEncryption")
    def job_bookmarks_encryption(self) -> 'outputs.SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption':
        ...

    @property
    @pulumi.getter(name="s3Encryption")
    def s3_encryption(self) -> 'outputs.SecurityConfigurationEncryptionConfigurationS3Encryption':
        """
        A `s3_encryption ` block as described below, which contains encryption configuration for S3 data.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityConfigurationEncryptionConfigurationCloudwatchEncryption(dict):
    @property
    @pulumi.getter(name="cloudwatchEncryptionMode")
    def cloudwatch_encryption_mode(self) -> Optional[str]:
        """
        Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption(dict):
    @property
    @pulumi.getter(name="jobBookmarksEncryptionMode")
    def job_bookmarks_encryption_mode(self) -> Optional[str]:
        """
        Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityConfigurationEncryptionConfigurationS3Encryption(dict):
    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        """
        ...

    @property
    @pulumi.getter(name="s3EncryptionMode")
    def s3_encryption_mode(self) -> Optional[str]:
        """
        Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerAction(dict):
    @property
    @pulumi.getter
    def arguments(self) -> Optional[Mapping[str, str]]:
        """
        Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
        """
        ...

    @property
    @pulumi.getter(name="crawlerName")
    def crawler_name(self) -> Optional[str]:
        """
        The name of the crawler to be executed. Conflicts with `job_name`.
        """
        ...

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        """
        The name of a job to be executed. Conflicts with `crawler_name`.
        """
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[float]:
        """
        The job run timeout in minutes. It overrides the timeout value of the job.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerPredicate(dict):
    @property
    @pulumi.getter
    def conditions(self) -> List['outputs.TriggerPredicateCondition']:
        """
        A list of the conditions that determine when the trigger will fire. Defined below.
        """
        ...

    @property
    @pulumi.getter
    def logical(self) -> Optional[str]:
        """
        How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerPredicateCondition(dict):
    @property
    @pulumi.getter(name="crawlState")
    def crawl_state(self) -> Optional[str]:
        """
        The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawler_name` must also be specified. Conflicts with `state`.
        """
        ...

    @property
    @pulumi.getter(name="crawlerName")
    def crawler_name(self) -> Optional[str]:
        """
        The name of the crawler to watch. If this is specified, `crawl_state` must also be specified. Conflicts with `job_name`.
        """
        ...

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        """
        The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawler_name`.
        """
        ...

    @property
    @pulumi.getter(name="logicalOperator")
    def logical_operator(self) -> Optional[str]:
        """
        A logical operator. Defaults to `EQUALS`.
        """
        ...

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScriptDagEdgeResult(dict):
    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The ID of the node at which the edge starts.
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The ID of the node at which the edge ends.
        """
        ...

    @property
    @pulumi.getter(name="targetParameter")
    def target_parameter(self) -> Optional[str]:
        """
        The target of the edge.
        """
        ...


@pulumi.output_type
class GetScriptDagNodeResult(dict):
    @property
    @pulumi.getter
    def args(self) -> List['outputs.GetScriptDagNodeArgResult']:
        """
        Nested configuration an argument or property of a node. Defined below.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A node identifier that is unique within the node's graph.
        """
        ...

    @property
    @pulumi.getter(name="lineNumber")
    def line_number(self) -> Optional[float]:
        """
        The line number of the node.
        """
        ...

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        The type of node this is.
        """
        ...


@pulumi.output_type
class GetScriptDagNodeArgResult(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the argument or property.
        """
        ...

    @property
    @pulumi.getter
    def param(self) -> Optional[bool]:
        """
        Boolean if the value is used as a parameter. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the argument or property.
        """
        ...


