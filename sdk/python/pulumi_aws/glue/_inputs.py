# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'CatalogTablePartitionKeyArgs',
    'CatalogTableStorageDescriptorArgs',
    'CatalogTableStorageDescriptorColumnArgs',
    'CatalogTableStorageDescriptorSerDeInfoArgs',
    'CatalogTableStorageDescriptorSkewedInfoArgs',
    'CatalogTableStorageDescriptorSortColumnArgs',
    'ClassifierCsvClassifierArgs',
    'ClassifierGrokClassifierArgs',
    'ClassifierJsonClassifierArgs',
    'ClassifierXmlClassifierArgs',
    'ConnectionPhysicalConnectionRequirementsArgs',
    'CrawlerCatalogTargetArgs',
    'CrawlerDynamodbTargetArgs',
    'CrawlerJdbcTargetArgs',
    'CrawlerS3TargetArgs',
    'CrawlerSchemaChangePolicyArgs',
    'JobCommandArgs',
    'JobExecutionPropertyArgs',
    'JobNotificationPropertyArgs',
    'SecurityConfigurationEncryptionConfigurationArgs',
    'SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs',
    'SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs',
    'SecurityConfigurationEncryptionConfigurationS3EncryptionArgs',
    'TriggerActionArgs',
    'TriggerPredicateArgs',
    'TriggerPredicateConditionArgs',
    'GetScriptDagEdgeArgs',
    'GetScriptDagNodeArgs',
    'GetScriptDagNodeArgArgs',
]

@pulumi.input_type
class CatalogTablePartitionKeyArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the SerDe.
    """
    comment: Optional[pulumi.Input[str]] = pulumi.input_property("comment")
    """
    Free-form text comment.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The datatype of data in the Column.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], comment: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Name of the SerDe.
        :param pulumi.Input[str] comment: Free-form text comment.
        :param pulumi.Input[str] type: The datatype of data in the Column.
        """
        __self__.name = name
        __self__.comment = comment
        __self__.type = type

@pulumi.input_type
class CatalogTableStorageDescriptorArgs:
    bucket_columns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("bucketColumns")
    """
    A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
    """
    columns: Optional[pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorColumnArgs']]]] = pulumi.input_property("columns")
    """
    A list of the Columns in the table.
    """
    compressed: Optional[pulumi.Input[bool]] = pulumi.input_property("compressed")
    """
    True if the data in the table is compressed, or False if not.
    """
    input_format: Optional[pulumi.Input[str]] = pulumi.input_property("inputFormat")
    """
    The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    """
    The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
    """
    number_of_buckets: Optional[pulumi.Input[float]] = pulumi.input_property("numberOfBuckets")
    """
    Must be specified if the table contains any dimension columns.
    """
    output_format: Optional[pulumi.Input[str]] = pulumi.input_property("outputFormat")
    """
    The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
    """
    parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("parameters")
    """
    A map of initialization parameters for the SerDe, in key-value form.
    """
    ser_de_info: Optional[pulumi.Input['CatalogTableStorageDescriptorSerDeInfoArgs']] = pulumi.input_property("serDeInfo")
    """
    Serialization/deserialization (SerDe) information.
    """
    skewed_info: Optional[pulumi.Input['CatalogTableStorageDescriptorSkewedInfoArgs']] = pulumi.input_property("skewedInfo")
    """
    Information about values that appear very frequently in a column (skewed values).
    """
    sort_columns: Optional[pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorSortColumnArgs']]]] = pulumi.input_property("sortColumns")
    """
    A list of Order objects specifying the sort order of each bucket in the table.
    """
    stored_as_sub_directories: Optional[pulumi.Input[bool]] = pulumi.input_property("storedAsSubDirectories")
    """
    True if the table data is stored in subdirectories, or False if not.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_columns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, columns: Optional[pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorColumnArgs']]]] = None, compressed: Optional[pulumi.Input[bool]] = None, input_format: Optional[pulumi.Input[str]] = None, location: Optional[pulumi.Input[str]] = None, number_of_buckets: Optional[pulumi.Input[float]] = None, output_format: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, ser_de_info: Optional[pulumi.Input['CatalogTableStorageDescriptorSerDeInfoArgs']] = None, skewed_info: Optional[pulumi.Input['CatalogTableStorageDescriptorSkewedInfoArgs']] = None, sort_columns: Optional[pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorSortColumnArgs']]]] = None, stored_as_sub_directories: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] bucket_columns: A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
        :param pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorColumnArgs']]] columns: A list of the Columns in the table.
        :param pulumi.Input[bool] compressed: True if the data in the table is compressed, or False if not.
        :param pulumi.Input[str] input_format: The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        :param pulumi.Input[str] location: The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        :param pulumi.Input[float] number_of_buckets: Must be specified if the table contains any dimension columns.
        :param pulumi.Input[str] output_format: The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of initialization parameters for the SerDe, in key-value form.
        :param pulumi.Input['CatalogTableStorageDescriptorSerDeInfoArgs'] ser_de_info: Serialization/deserialization (SerDe) information.
        :param pulumi.Input['CatalogTableStorageDescriptorSkewedInfoArgs'] skewed_info: Information about values that appear very frequently in a column (skewed values).
        :param pulumi.Input[List[pulumi.Input['CatalogTableStorageDescriptorSortColumnArgs']]] sort_columns: A list of Order objects specifying the sort order of each bucket in the table.
        :param pulumi.Input[bool] stored_as_sub_directories: True if the table data is stored in subdirectories, or False if not.
        """
        __self__.bucket_columns = bucket_columns
        __self__.columns = columns
        __self__.compressed = compressed
        __self__.input_format = input_format
        __self__.location = location
        __self__.number_of_buckets = number_of_buckets
        __self__.output_format = output_format
        __self__.parameters = parameters
        __self__.ser_de_info = ser_de_info
        __self__.skewed_info = skewed_info
        __self__.sort_columns = sort_columns
        __self__.stored_as_sub_directories = stored_as_sub_directories

@pulumi.input_type
class CatalogTableStorageDescriptorColumnArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the SerDe.
    """
    comment: Optional[pulumi.Input[str]] = pulumi.input_property("comment")
    """
    Free-form text comment.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The datatype of data in the Column.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], comment: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Name of the SerDe.
        :param pulumi.Input[str] comment: Free-form text comment.
        :param pulumi.Input[str] type: The datatype of data in the Column.
        """
        __self__.name = name
        __self__.comment = comment
        __self__.type = type

@pulumi.input_type
class CatalogTableStorageDescriptorSerDeInfoArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the SerDe.
    """
    parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("parameters")
    """
    A map of initialization parameters for the SerDe, in key-value form.
    """
    serialization_library: Optional[pulumi.Input[str]] = pulumi.input_property("serializationLibrary")
    """
    Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, serialization_library: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Name of the SerDe.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of initialization parameters for the SerDe, in key-value form.
        :param pulumi.Input[str] serialization_library: Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
        """
        __self__.name = name
        __self__.parameters = parameters
        __self__.serialization_library = serialization_library

@pulumi.input_type
class CatalogTableStorageDescriptorSkewedInfoArgs:
    skewed_column_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("skewedColumnNames")
    """
    A list of names of columns that contain skewed values.
    """
    skewed_column_value_location_maps: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("skewedColumnValueLocationMaps")
    """
    A list of values that appear so frequently as to be considered skewed.
    """
    skewed_column_values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("skewedColumnValues")
    """
    A map of skewed values to the columns that contain them.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, skewed_column_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, skewed_column_value_location_maps: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, skewed_column_values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] skewed_column_names: A list of names of columns that contain skewed values.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] skewed_column_value_location_maps: A list of values that appear so frequently as to be considered skewed.
        :param pulumi.Input[List[pulumi.Input[str]]] skewed_column_values: A map of skewed values to the columns that contain them.
        """
        __self__.skewed_column_names = skewed_column_names
        __self__.skewed_column_value_location_maps = skewed_column_value_location_maps
        __self__.skewed_column_values = skewed_column_values

@pulumi.input_type
class CatalogTableStorageDescriptorSortColumnArgs:
    column: pulumi.Input[str] = pulumi.input_property("column")
    """
    The name of the column.
    """
    sort_order: pulumi.Input[float] = pulumi.input_property("sortOrder")
    """
    Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, column: pulumi.Input[str], sort_order: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] column: The name of the column.
        :param pulumi.Input[float] sort_order: Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
        """
        __self__.column = column
        __self__.sort_order = sort_order

@pulumi.input_type
class ClassifierCsvClassifierArgs:
    allow_single_column: Optional[pulumi.Input[bool]] = pulumi.input_property("allowSingleColumn")
    """
    Enables the processing of files that contain only one column.
    """
    contains_header: Optional[pulumi.Input[str]] = pulumi.input_property("containsHeader")
    """
    Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
    """
    delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("delimiter")
    """
    The delimiter used in the Csv to separate columns.
    """
    disable_value_trimming: Optional[pulumi.Input[bool]] = pulumi.input_property("disableValueTrimming")
    """
    Specifies whether to trim column values.
    """
    headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("headers")
    """
    A list of strings representing column names.
    """
    quote_symbol: Optional[pulumi.Input[str]] = pulumi.input_property("quoteSymbol")
    """
    A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allow_single_column: Optional[pulumi.Input[bool]] = None, contains_header: Optional[pulumi.Input[str]] = None, delimiter: Optional[pulumi.Input[str]] = None, disable_value_trimming: Optional[pulumi.Input[bool]] = None, headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, quote_symbol: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] allow_single_column: Enables the processing of files that contain only one column.
        :param pulumi.Input[str] contains_header: Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        :param pulumi.Input[str] delimiter: The delimiter used in the Csv to separate columns.
        :param pulumi.Input[bool] disable_value_trimming: Specifies whether to trim column values.
        :param pulumi.Input[List[pulumi.Input[str]]] headers: A list of strings representing column names.
        :param pulumi.Input[str] quote_symbol: A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        """
        __self__.allow_single_column = allow_single_column
        __self__.contains_header = contains_header
        __self__.delimiter = delimiter
        __self__.disable_value_trimming = disable_value_trimming
        __self__.headers = headers
        __self__.quote_symbol = quote_symbol

@pulumi.input_type
class ClassifierGrokClassifierArgs:
    classification: pulumi.Input[str] = pulumi.input_property("classification")
    """
    An identifier of the data format that the classifier matches.
    """
    grok_pattern: pulumi.Input[str] = pulumi.input_property("grokPattern")
    """
    The grok pattern used by this classifier.
    """
    custom_patterns: Optional[pulumi.Input[str]] = pulumi.input_property("customPatterns")
    """
    Custom grok patterns used by this classifier.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, classification: pulumi.Input[str], grok_pattern: pulumi.Input[str], custom_patterns: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] classification: An identifier of the data format that the classifier matches.
        :param pulumi.Input[str] grok_pattern: The grok pattern used by this classifier.
        :param pulumi.Input[str] custom_patterns: Custom grok patterns used by this classifier.
        """
        __self__.classification = classification
        __self__.grok_pattern = grok_pattern
        __self__.custom_patterns = custom_patterns

@pulumi.input_type
class ClassifierJsonClassifierArgs:
    json_path: pulumi.Input[str] = pulumi.input_property("jsonPath")
    """
    A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, json_path: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] json_path: A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        """
        __self__.json_path = json_path

@pulumi.input_type
class ClassifierXmlClassifierArgs:
    classification: pulumi.Input[str] = pulumi.input_property("classification")
    """
    An identifier of the data format that the classifier matches.
    """
    row_tag: pulumi.Input[str] = pulumi.input_property("rowTag")
    """
    The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, classification: pulumi.Input[str], row_tag: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] classification: An identifier of the data format that the classifier matches.
        :param pulumi.Input[str] row_tag: The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
        """
        __self__.classification = classification
        __self__.row_tag = row_tag

@pulumi.input_type
class ConnectionPhysicalConnectionRequirementsArgs:
    availability_zone: Optional[pulumi.Input[str]] = pulumi.input_property("availabilityZone")
    """
    The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
    """
    security_group_id_lists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("securityGroupIdLists")
    """
    The security group ID list used by the connection.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The subnet ID used by the connection.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, availability_zone: Optional[pulumi.Input[str]] = None, security_group_id_lists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] availability_zone: The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
        :param pulumi.Input[List[pulumi.Input[str]]] security_group_id_lists: The security group ID list used by the connection.
        :param pulumi.Input[str] subnet_id: The subnet ID used by the connection.
        """
        __self__.availability_zone = availability_zone
        __self__.security_group_id_lists = security_group_id_lists
        __self__.subnet_id = subnet_id

@pulumi.input_type
class CrawlerCatalogTargetArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The name of the Glue database to be synchronized.
    """
    tables: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("tables")
    """
    A list of catalog tables to be synchronized.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], tables: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] database_name: The name of the Glue database to be synchronized.
        :param pulumi.Input[List[pulumi.Input[str]]] tables: A list of catalog tables to be synchronized.
        """
        __self__.database_name = database_name
        __self__.tables = tables

@pulumi.input_type
class CrawlerDynamodbTargetArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The name of the DynamoDB table to crawl.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] path: The name of the DynamoDB table to crawl.
        """
        __self__.path = path

@pulumi.input_type
class CrawlerJdbcTargetArgs:
    connection_name: pulumi.Input[str] = pulumi.input_property("connectionName")
    """
    The name of the connection to use to connect to the JDBC target.
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The path of the JDBC target.
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusions")
    """
    A list of glob patterns used to exclude from the crawl.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, connection_name: pulumi.Input[str], path: pulumi.Input[str], exclusions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] connection_name: The name of the connection to use to connect to the JDBC target.
        :param pulumi.Input[str] path: The path of the JDBC target.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusions: A list of glob patterns used to exclude from the crawl.
        """
        __self__.connection_name = connection_name
        __self__.path = path
        __self__.exclusions = exclusions

@pulumi.input_type
class CrawlerS3TargetArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The name of the DynamoDB table to crawl.
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusions")
    """
    A list of glob patterns used to exclude from the crawl.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], exclusions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] path: The name of the DynamoDB table to crawl.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusions: A list of glob patterns used to exclude from the crawl.
        """
        __self__.path = path
        __self__.exclusions = exclusions

@pulumi.input_type
class CrawlerSchemaChangePolicyArgs:
    delete_behavior: Optional[pulumi.Input[str]] = pulumi.input_property("deleteBehavior")
    """
    The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
    """
    update_behavior: Optional[pulumi.Input[str]] = pulumi.input_property("updateBehavior")
    """
    The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, delete_behavior: Optional[pulumi.Input[str]] = None, update_behavior: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] delete_behavior: The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
        :param pulumi.Input[str] update_behavior: The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
        """
        __self__.delete_behavior = delete_behavior
        __self__.update_behavior = update_behavior

@pulumi.input_type
class JobCommandArgs:
    script_location: pulumi.Input[str] = pulumi.input_property("scriptLocation")
    """
    Specifies the S3 path to a script that executes a job.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `max_capacity` needs to be set if `pythonshell` is chosen.
    """
    python_version: Optional[pulumi.Input[str]] = pulumi.input_property("pythonVersion")
    """
    The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, script_location: pulumi.Input[str], name: Optional[pulumi.Input[str]] = None, python_version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] script_location: Specifies the S3 path to a script that executes a job.
        :param pulumi.Input[str] name: The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `max_capacity` needs to be set if `pythonshell` is chosen.
        :param pulumi.Input[str] python_version: The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
        """
        __self__.script_location = script_location
        __self__.name = name
        __self__.python_version = python_version

@pulumi.input_type
class JobExecutionPropertyArgs:
    max_concurrent_runs: Optional[pulumi.Input[float]] = pulumi.input_property("maxConcurrentRuns")
    """
    The maximum number of concurrent runs allowed for a job. The default is 1.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_concurrent_runs: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] max_concurrent_runs: The maximum number of concurrent runs allowed for a job. The default is 1.
        """
        __self__.max_concurrent_runs = max_concurrent_runs

@pulumi.input_type
class JobNotificationPropertyArgs:
    notify_delay_after: Optional[pulumi.Input[float]] = pulumi.input_property("notifyDelayAfter")
    """
    After a job run starts, the number of minutes to wait before sending a job run delay notification.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, notify_delay_after: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] notify_delay_after: After a job run starts, the number of minutes to wait before sending a job run delay notification.
        """
        __self__.notify_delay_after = notify_delay_after

@pulumi.input_type
class SecurityConfigurationEncryptionConfigurationArgs:
    cloudwatch_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs'] = pulumi.input_property("cloudwatchEncryption")
    job_bookmarks_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs'] = pulumi.input_property("jobBookmarksEncryption")
    s3_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationS3EncryptionArgs'] = pulumi.input_property("s3Encryption")
    """
    A `s3_encryption ` block as described below, which contains encryption configuration for S3 data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs'], job_bookmarks_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs'], s3_encryption: pulumi.Input['SecurityConfigurationEncryptionConfigurationS3EncryptionArgs']) -> None:
        """
        :param pulumi.Input['SecurityConfigurationEncryptionConfigurationS3EncryptionArgs'] s3_encryption: A `s3_encryption ` block as described below, which contains encryption configuration for S3 data.
        """
        __self__.cloudwatch_encryption = cloudwatch_encryption
        __self__.job_bookmarks_encryption = job_bookmarks_encryption
        __self__.s3_encryption = s3_encryption

@pulumi.input_type
class SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs:
    cloudwatch_encryption_mode: Optional[pulumi.Input[str]] = pulumi.input_property("cloudwatchEncryptionMode")
    """
    Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_encryption_mode: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cloudwatch_encryption_mode: Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
        :param pulumi.Input[str] kms_key_arn: Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        """
        __self__.cloudwatch_encryption_mode = cloudwatch_encryption_mode
        __self__.kms_key_arn = kms_key_arn

@pulumi.input_type
class SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs:
    job_bookmarks_encryption_mode: Optional[pulumi.Input[str]] = pulumi.input_property("jobBookmarksEncryptionMode")
    """
    Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, job_bookmarks_encryption_mode: Optional[pulumi.Input[str]] = None, kms_key_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] job_bookmarks_encryption_mode: Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
        :param pulumi.Input[str] kms_key_arn: Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        """
        __self__.job_bookmarks_encryption_mode = job_bookmarks_encryption_mode
        __self__.kms_key_arn = kms_key_arn

@pulumi.input_type
class SecurityConfigurationEncryptionConfigurationS3EncryptionArgs:
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """
    s3_encryption_mode: Optional[pulumi.Input[str]] = pulumi.input_property("s3EncryptionMode")
    """
    Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kms_key_arn: Optional[pulumi.Input[str]] = None, s3_encryption_mode: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] kms_key_arn: Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
        :param pulumi.Input[str] s3_encryption_mode: Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
        """
        __self__.kms_key_arn = kms_key_arn
        __self__.s3_encryption_mode = s3_encryption_mode

@pulumi.input_type
class TriggerActionArgs:
    arguments: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("arguments")
    """
    Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
    """
    crawler_name: Optional[pulumi.Input[str]] = pulumi.input_property("crawlerName")
    """
    The name of the crawler to be executed. Conflicts with `job_name`.
    """
    job_name: Optional[pulumi.Input[str]] = pulumi.input_property("jobName")
    """
    The name of a job to be executed. Conflicts with `crawler_name`.
    """
    timeout: Optional[pulumi.Input[float]] = pulumi.input_property("timeout")
    """
    The job run timeout in minutes. It overrides the timeout value of the job.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, arguments: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, crawler_name: Optional[pulumi.Input[str]] = None, job_name: Optional[pulumi.Input[str]] = None, timeout: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] arguments: Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
        :param pulumi.Input[str] crawler_name: The name of the crawler to be executed. Conflicts with `job_name`.
        :param pulumi.Input[str] job_name: The name of a job to be executed. Conflicts with `crawler_name`.
        :param pulumi.Input[float] timeout: The job run timeout in minutes. It overrides the timeout value of the job.
        """
        __self__.arguments = arguments
        __self__.crawler_name = crawler_name
        __self__.job_name = job_name
        __self__.timeout = timeout

@pulumi.input_type
class TriggerPredicateArgs:
    conditions: pulumi.Input[List[pulumi.Input['TriggerPredicateConditionArgs']]] = pulumi.input_property("conditions")
    """
    A list of the conditions that determine when the trigger will fire. Defined below.
    """
    logical: Optional[pulumi.Input[str]] = pulumi.input_property("logical")
    """
    How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: pulumi.Input[List[pulumi.Input['TriggerPredicateConditionArgs']]], logical: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['TriggerPredicateConditionArgs']]] conditions: A list of the conditions that determine when the trigger will fire. Defined below.
        :param pulumi.Input[str] logical: How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
        """
        __self__.conditions = conditions
        __self__.logical = logical

@pulumi.input_type
class TriggerPredicateConditionArgs:
    crawl_state: Optional[pulumi.Input[str]] = pulumi.input_property("crawlState")
    """
    The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawler_name` must also be specified. Conflicts with `state`.
    """
    crawler_name: Optional[pulumi.Input[str]] = pulumi.input_property("crawlerName")
    """
    The name of the crawler to watch. If this is specified, `crawl_state` must also be specified. Conflicts with `job_name`.
    """
    job_name: Optional[pulumi.Input[str]] = pulumi.input_property("jobName")
    """
    The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawler_name`.
    """
    logical_operator: Optional[pulumi.Input[str]] = pulumi.input_property("logicalOperator")
    """
    A logical operator. Defaults to `EQUALS`.
    """
    state: Optional[pulumi.Input[str]] = pulumi.input_property("state")
    """
    The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, crawl_state: Optional[pulumi.Input[str]] = None, crawler_name: Optional[pulumi.Input[str]] = None, job_name: Optional[pulumi.Input[str]] = None, logical_operator: Optional[pulumi.Input[str]] = None, state: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] crawl_state: The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawler_name` must also be specified. Conflicts with `state`.
        :param pulumi.Input[str] crawler_name: The name of the crawler to watch. If this is specified, `crawl_state` must also be specified. Conflicts with `job_name`.
        :param pulumi.Input[str] job_name: The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawler_name`.
        :param pulumi.Input[str] logical_operator: A logical operator. Defaults to `EQUALS`.
        :param pulumi.Input[str] state: The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
        """
        __self__.crawl_state = crawl_state
        __self__.crawler_name = crawler_name
        __self__.job_name = job_name
        __self__.logical_operator = logical_operator
        __self__.state = state

@pulumi.input_type
class GetScriptDagEdgeArgs:
    source: str = pulumi.input_property("source")
    """
    The ID of the node at which the edge starts.
    """
    target: str = pulumi.input_property("target")
    """
    The ID of the node at which the edge ends.
    """
    target_parameter: Optional[str] = pulumi.input_property("targetParameter")
    """
    The target of the edge.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, source: str, target: str, target_parameter: Optional[str] = None) -> None:
        """
        :param str source: The ID of the node at which the edge starts.
        :param str target: The ID of the node at which the edge ends.
        :param str target_parameter: The target of the edge.
        """
        __self__.source = source
        __self__.target = target
        __self__.target_parameter = target_parameter

@pulumi.input_type
class GetScriptDagNodeArgs:
    args: List['GetScriptDagNodeArgArgs'] = pulumi.input_property("args")
    """
    Nested configuration an argument or property of a node. Defined below.
    """
    id: str = pulumi.input_property("id")
    """
    A node identifier that is unique within the node's graph.
    """
    node_type: str = pulumi.input_property("nodeType")
    """
    The type of node this is.
    """
    line_number: Optional[float] = pulumi.input_property("lineNumber")
    """
    The line number of the node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, args: List['GetScriptDagNodeArgArgs'], id: str, node_type: str, line_number: Optional[float] = None) -> None:
        """
        :param List['GetScriptDagNodeArgArgs'] args: Nested configuration an argument or property of a node. Defined below.
        :param str id: A node identifier that is unique within the node's graph.
        :param str node_type: The type of node this is.
        :param float line_number: The line number of the node.
        """
        __self__.args = args
        __self__.id = id
        __self__.node_type = node_type
        __self__.line_number = line_number

@pulumi.input_type
class GetScriptDagNodeArgArgs:
    name: str = pulumi.input_property("name")
    """
    The name of the argument or property.
    """
    value: str = pulumi.input_property("value")
    """
    The value of the argument or property.
    """
    param: Optional[bool] = pulumi.input_property("param")
    """
    Boolean if the value is used as a parameter. Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: str, value: str, param: Optional[bool] = None) -> None:
        """
        :param str name: The name of the argument or property.
        :param str value: The value of the argument or property.
        :param bool param: Boolean if the value is used as a parameter. Defaults to `false`.
        """
        __self__.name = name
        __self__.value = value
        __self__.param = param

