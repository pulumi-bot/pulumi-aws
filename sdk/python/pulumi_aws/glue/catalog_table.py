# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CatalogTable']


class CatalogTable(pulumi.CustomResource):
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    The ARN of the Glue Table.
    """
    catalog_id: pulumi.Output[str] = pulumi.output_property("catalogId")
    """
    ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
    """
    database_name: pulumi.Output[str] = pulumi.output_property("databaseName")
    """
    Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
    """
    description: pulumi.Output[Optional[str]] = pulumi.output_property("description")
    """
    Description of the table.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    Name of the SerDe.
    """
    owner: pulumi.Output[Optional[str]] = pulumi.output_property("owner")
    """
    Owner of the table.
    """
    parameters: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("parameters")
    """
    A map of initialization parameters for the SerDe, in key-value form.
    """
    partition_keys: pulumi.Output[Optional[List['outputs.CatalogTablePartitionKey']]] = pulumi.output_property("partitionKeys")
    """
    A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
    """
    retention: pulumi.Output[Optional[float]] = pulumi.output_property("retention")
    """
    Retention time for this table.
    """
    storage_descriptor: pulumi.Output[Optional['outputs.CatalogTableStorageDescriptor']] = pulumi.output_property("storageDescriptor")
    """
    A storage descriptor object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
    """
    table_type: pulumi.Output[Optional[str]] = pulumi.output_property("tableType")
    """
    The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
    """
    view_expanded_text: pulumi.Output[Optional[str]] = pulumi.output_property("viewExpandedText")
    """
    If the table is a view, the expanded text of the view; otherwise null.
    """
    view_original_text: pulumi.Output[Optional[str]] = pulumi.output_property("viewOriginalText")
    """
    If the table is a view, the original text of the view; otherwise null.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, catalog_id: Optional[pulumi.Input[str]] = None, database_name: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, owner: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, partition_keys: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['CatalogTablePartitionKeyArgs']]]]] = None, retention: Optional[pulumi.Input[float]] = None, storage_descriptor: Optional[pulumi.Input[pulumi.InputType['CatalogTableStorageDescriptorArgs']]] = None, table_type: Optional[pulumi.Input[str]] = None, view_expanded_text: Optional[pulumi.Input[str]] = None, view_original_text: Optional[pulumi.Input[str]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a Glue Catalog Table Resource. You can refer to the [Glue Developer Guide](http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html) for a full explanation of the Glue Data Catalog functionality.

        ## Example Usage
        ### Basic Table

        ```python
        import pulumi
        import pulumi_aws as aws

        aws_glue_catalog_table = aws.glue.CatalogTable("awsGlueCatalogTable",
            database_name="MyCatalogDatabase",
            name="MyCatalogTable")
        ```
        ### Parquet Table for Athena

        ```python
        import pulumi
        import pulumi_aws as aws

        aws_glue_catalog_table = aws.glue.CatalogTable("awsGlueCatalogTable",
            database_name="MyCatalogDatabase",
            name="MyCatalogTable",
            parameters={
                "EXTERNAL": "TRUE",
                "parquet.compression": "SNAPPY",
            },
            storage_descriptor={
                "columns": [
                    {
                        "name": "my_string",
                        "type": "string",
                    },
                    {
                        "name": "my_double",
                        "type": "double",
                    },
                    {
                        "comment": "",
                        "name": "my_date",
                        "type": "date",
                    },
                    {
                        "comment": "",
                        "name": "my_bigint",
                        "type": "bigint",
                    },
                    {
                        "comment": "",
                        "name": "my_struct",
                        "type": "struct<my_nested_string:string>",
                    },
                ],
                "inputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
                "location": "s3://my-bucket/event-streams/my-stream",
                "outputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
                "serDeInfo": {
                    "name": "my-stream",
                    "parameters": {
                        "serialization.format": 1,
                    },
                    "serializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
                },
            },
            table_type="EXTERNAL_TABLE")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog_id: ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
        :param pulumi.Input[str] database_name: Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        :param pulumi.Input[str] description: Description of the table.
        :param pulumi.Input[str] name: Name of the SerDe.
        :param pulumi.Input[str] owner: Owner of the table.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of initialization parameters for the SerDe, in key-value form.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['CatalogTablePartitionKeyArgs']]]] partition_keys: A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
        :param pulumi.Input[float] retention: Retention time for this table.
        :param pulumi.Input[pulumi.InputType['CatalogTableStorageDescriptorArgs']] storage_descriptor: A storage descriptor object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
        :param pulumi.Input[str] table_type: The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        :param pulumi.Input[str] view_expanded_text: If the table is a view, the expanded text of the view; otherwise null.
        :param pulumi.Input[str] view_original_text: If the table is a view, the original text of the view; otherwise null.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['catalog_id'] = catalog_id
            if database_name is None:
                raise TypeError("Missing required property 'database_name'")
            __props__['database_name'] = database_name
            __props__['description'] = description
            __props__['name'] = name
            __props__['owner'] = owner
            __props__['parameters'] = parameters
            __props__['partition_keys'] = partition_keys
            __props__['retention'] = retention
            __props__['storage_descriptor'] = storage_descriptor
            __props__['table_type'] = table_type
            __props__['view_expanded_text'] = view_expanded_text
            __props__['view_original_text'] = view_original_text
            __props__['arn'] = None
        super(CatalogTable, __self__).__init__(
            'aws:glue/catalogTable:CatalogTable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, arn: Optional[pulumi.Input[str]] = None, catalog_id: Optional[pulumi.Input[str]] = None, database_name: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, owner: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, partition_keys: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['CatalogTablePartitionKeyArgs']]]]] = None, retention: Optional[pulumi.Input[float]] = None, storage_descriptor: Optional[pulumi.Input[pulumi.InputType['CatalogTableStorageDescriptorArgs']]] = None, table_type: Optional[pulumi.Input[str]] = None, view_expanded_text: Optional[pulumi.Input[str]] = None, view_original_text: Optional[pulumi.Input[str]] = None) -> 'CatalogTable':
        """
        Get an existing CatalogTable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The ARN of the Glue Table.
        :param pulumi.Input[str] catalog_id: ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
        :param pulumi.Input[str] database_name: Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        :param pulumi.Input[str] description: Description of the table.
        :param pulumi.Input[str] name: Name of the SerDe.
        :param pulumi.Input[str] owner: Owner of the table.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of initialization parameters for the SerDe, in key-value form.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['CatalogTablePartitionKeyArgs']]]] partition_keys: A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
        :param pulumi.Input[float] retention: Retention time for this table.
        :param pulumi.Input[pulumi.InputType['CatalogTableStorageDescriptorArgs']] storage_descriptor: A storage descriptor object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
        :param pulumi.Input[str] table_type: The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        :param pulumi.Input[str] view_expanded_text: If the table is a view, the expanded text of the view; otherwise null.
        :param pulumi.Input[str] view_original_text: If the table is a view, the original text of the view; otherwise null.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["catalog_id"] = catalog_id
        __props__["database_name"] = database_name
        __props__["description"] = description
        __props__["name"] = name
        __props__["owner"] = owner
        __props__["parameters"] = parameters
        __props__["partition_keys"] = partition_keys
        __props__["retention"] = retention
        __props__["storage_descriptor"] = storage_descriptor
        __props__["table_type"] = table_type
        __props__["view_expanded_text"] = view_expanded_text
        __props__["view_original_text"] = view_original_text
        return CatalogTable(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

