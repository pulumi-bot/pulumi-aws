# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AssociationOutputLocation',
    'AssociationTarget',
    'DocumentAttachmentsSource',
    'DocumentParameter',
    'MaintenanceWindowTargetTarget',
    'MaintenanceWindowTaskLoggingInfo',
    'MaintenanceWindowTaskTarget',
    'MaintenanceWindowTaskTaskInvocationParameters',
    'MaintenanceWindowTaskTaskInvocationParametersAutomationParameters',
    'MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter',
    'MaintenanceWindowTaskTaskInvocationParametersLambdaParameters',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter',
    'MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters',
    'MaintenanceWindowTaskTaskParameter',
    'PatchBaselineApprovalRule',
    'PatchBaselineApprovalRulePatchFilter',
    'PatchBaselineGlobalFilter',
    'ResourceDataSyncS3Destination',
]

@pulumi.output_type
class AssociationOutputLocation(dict):
    s3_bucket_name: str = pulumi.output_property("s3BucketName")
    """
    The S3 bucket name.
    """
    s3_key_prefix: Optional[str] = pulumi.output_property("s3KeyPrefix")
    """
    The S3 bucket prefix. Results stored in the root if not configured.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AssociationTarget(dict):
    key: str = pulumi.output_property("key")
    """
    Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of instance IDs or tag values. AWS currently limits this list size to one value.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DocumentAttachmentsSource(dict):
    key: str = pulumi.output_property("key")
    """
    The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the document attachment file
    """
    values: List[str] = pulumi.output_property("values")
    """
    The value describing the location of an attachment to a document
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DocumentParameter(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the document.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the document.
    """
    type: Optional[str] = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTargetTarget(dict):
    key: str = pulumi.output_property("key")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskLoggingInfo(dict):
    s3_bucket_name: str = pulumi.output_property("s3BucketName")
    s3_bucket_prefix: Optional[str] = pulumi.output_property("s3BucketPrefix")
    s3_region: str = pulumi.output_property("s3Region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTarget(dict):
    key: str = pulumi.output_property("key")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParameters(dict):
    automation_parameters: Optional['outputs.MaintenanceWindowTaskTaskInvocationParametersAutomationParameters'] = pulumi.output_property("automationParameters")
    """
    The parameters for an AUTOMATION task type. Documented below.
    """
    lambda_parameters: Optional['outputs.MaintenanceWindowTaskTaskInvocationParametersLambdaParameters'] = pulumi.output_property("lambdaParameters")
    """
    The parameters for a LAMBDA task type. Documented below.
    """
    run_command_parameters: Optional['outputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters'] = pulumi.output_property("runCommandParameters")
    """
    The parameters for a RUN_COMMAND task type. Documented below.
    """
    step_functions_parameters: Optional['outputs.MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters'] = pulumi.output_property("stepFunctionsParameters")
    """
    The parameters for a STEP_FUNCTIONS task type. Documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersAutomationParameters(dict):
    document_version: Optional[str] = pulumi.output_property("documentVersion")
    """
    The version of an Automation document to use during task execution.
    """
    parameters: Optional[List['outputs.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter']] = pulumi.output_property("parameters")
    """
    The parameters for the RUN_COMMAND task execution. Documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter(dict):
    name: str = pulumi.output_property("name")
    """
    The parameter name.
    """
    values: List[str] = pulumi.output_property("values")
    """
    The array of strings.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersLambdaParameters(dict):
    client_context: Optional[str] = pulumi.output_property("clientContext")
    """
    Pass client-specific information to the Lambda function that you are invoking.
    """
    payload: Optional[str] = pulumi.output_property("payload")
    """
    JSON to provide to your Lambda function as input.
    """
    qualifier: Optional[str] = pulumi.output_property("qualifier")
    """
    Specify a Lambda function version or alias name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters(dict):
    comment: Optional[str] = pulumi.output_property("comment")
    """
    Information about the command(s) to execute.
    """
    document_hash: Optional[str] = pulumi.output_property("documentHash")
    """
    The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    """
    document_hash_type: Optional[str] = pulumi.output_property("documentHashType")
    """
    SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
    """
    notification_config: Optional['outputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig'] = pulumi.output_property("notificationConfig")
    """
    Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
    """
    output_s3_bucket: Optional[str] = pulumi.output_property("outputS3Bucket")
    """
    The name of the Amazon S3 bucket.
    """
    output_s3_key_prefix: Optional[str] = pulumi.output_property("outputS3KeyPrefix")
    """
    The Amazon S3 bucket subfolder.
    """
    parameters: Optional[List['outputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter']] = pulumi.output_property("parameters")
    """
    The parameters for the RUN_COMMAND task execution. Documented below.
    """
    service_role_arn: Optional[str] = pulumi.output_property("serviceRoleArn")
    """
    The IAM service role to assume during task execution.
    """
    timeout_seconds: Optional[float] = pulumi.output_property("timeoutSeconds")
    """
    If this time is reached and the command has not already started executing, it doesn't run.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig(dict):
    notification_arn: Optional[str] = pulumi.output_property("notificationArn")
    """
    An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    """
    notification_events: Optional[List[str]] = pulumi.output_property("notificationEvents")
    """
    The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
    """
    notification_type: Optional[str] = pulumi.output_property("notificationType")
    """
    When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter(dict):
    name: str = pulumi.output_property("name")
    """
    The parameter name.
    """
    values: List[str] = pulumi.output_property("values")
    """
    The array of strings.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters(dict):
    input: Optional[str] = pulumi.output_property("input")
    """
    The inputs for the STEP_FUNCTION task.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the STEP_FUNCTION task.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MaintenanceWindowTaskTaskParameter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the maintenance window task.
    """
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchBaselineApprovalRule(dict):
    approve_after_days: float = pulumi.output_property("approveAfterDays")
    """
    The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 100.
    """
    compliance_level: Optional[str] = pulumi.output_property("complianceLevel")
    """
    Defines the compliance level for patches approved by this rule. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
    """
    enable_non_security: Optional[bool] = pulumi.output_property("enableNonSecurity")
    """
    Boolean enabling the application of non-security updates. The default value is 'false'. Valid for Linux instances only.
    """
    patch_filters: List['outputs.PatchBaselineApprovalRulePatchFilter'] = pulumi.output_property("patchFilters")
    """
    The patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid Keys are `PATCH_SET | PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchBaselineApprovalRulePatchFilter(dict):
    key: str = pulumi.output_property("key")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchBaselineGlobalFilter(dict):
    key: str = pulumi.output_property("key")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceDataSyncS3Destination(dict):
    bucket_name: str = pulumi.output_property("bucketName")
    """
    Name of S3 bucket where the aggregated data is stored.
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    ARN of an encryption key for a destination in Amazon S3.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Prefix for the bucket.
    """
    region: str = pulumi.output_property("region")
    """
    Region with the bucket targeted by the Resource Data Sync.
    """
    sync_format: Optional[str] = pulumi.output_property("syncFormat")
    """
    A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


