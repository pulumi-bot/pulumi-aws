# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AssociationOutputLocationArgs',
    'AssociationTargetArgs',
    'DocumentAttachmentsSourceArgs',
    'DocumentParameterArgs',
    'MaintenanceWindowTargetTargetArgs',
    'MaintenanceWindowTaskLoggingInfoArgs',
    'MaintenanceWindowTaskTargetArgs',
    'MaintenanceWindowTaskTaskInvocationParametersArgs',
    'MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs',
    'MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs',
    'MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs',
    'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs',
    'MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs',
    'MaintenanceWindowTaskTaskParameterArgs',
    'PatchBaselineApprovalRuleArgs',
    'PatchBaselineApprovalRulePatchFilterArgs',
    'PatchBaselineGlobalFilterArgs',
    'ResourceDataSyncS3DestinationArgs',
]

@pulumi.input_type
class AssociationOutputLocationArgs:
    s3_bucket_name: pulumi.Input[str] = pulumi.input_property("s3BucketName")
    """
    The S3 bucket name.
    """
    s3_key_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("s3KeyPrefix")
    """
    The S3 bucket prefix. Results stored in the root if not configured.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, s3_bucket_name: pulumi.Input[str], s3_key_prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] s3_bucket_name: The S3 bucket name.
        :param pulumi.Input[str] s3_key_prefix: The S3 bucket prefix. Results stored in the root if not configured.
        """
        __self__.s3_bucket_name = s3_bucket_name
        __self__.s3_key_prefix = s3_key_prefix

@pulumi.input_type
class AssociationTargetArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    A list of instance IDs or tag values. AWS currently limits this list size to one value.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] key: Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
        :param pulumi.Input[List[pulumi.Input[str]]] values: A list of instance IDs or tag values. AWS currently limits this list size to one value.
        """
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class DocumentAttachmentsSourceArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    The value describing the location of an attachment to a document
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the document attachment file
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]], name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] key: The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
        :param pulumi.Input[List[pulumi.Input[str]]] values: The value describing the location of an attachment to a document
        :param pulumi.Input[str] name: The name of the document attachment file
        """
        __self__.key = key
        __self__.values = values
        __self__.name = name

@pulumi.input_type
class DocumentParameterArgs:
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    The description of the document.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the document.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] description: The description of the document.
        :param pulumi.Input[str] name: The name of the document.
        """
        __self__.default_value = default_value
        __self__.description = description
        __self__.name = name
        __self__.type = type

@pulumi.input_type
class MaintenanceWindowTargetTargetArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class MaintenanceWindowTaskLoggingInfoArgs:
    s3_bucket_name: pulumi.Input[str] = pulumi.input_property("s3BucketName")
    s3_region: pulumi.Input[str] = pulumi.input_property("s3Region")
    s3_bucket_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("s3BucketPrefix")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, s3_bucket_name: pulumi.Input[str], s3_region: pulumi.Input[str], s3_bucket_prefix: Optional[pulumi.Input[str]] = None) -> None:
        __self__.s3_bucket_name = s3_bucket_name
        __self__.s3_region = s3_region
        __self__.s3_bucket_prefix = s3_bucket_prefix

@pulumi.input_type
class MaintenanceWindowTaskTargetArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersArgs:
    automation_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs']] = pulumi.input_property("automationParameters")
    """
    The parameters for an AUTOMATION task type. Documented below.
    """
    lambda_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs']] = pulumi.input_property("lambdaParameters")
    """
    The parameters for a LAMBDA task type. Documented below.
    """
    run_command_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs']] = pulumi.input_property("runCommandParameters")
    """
    The parameters for a RUN_COMMAND task type. Documented below.
    """
    step_functions_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs']] = pulumi.input_property("stepFunctionsParameters")
    """
    The parameters for a STEP_FUNCTIONS task type. Documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, automation_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs']] = None, lambda_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs']] = None, run_command_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs']] = None, step_functions_parameters: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs']] = None) -> None:
        """
        :param pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs'] automation_parameters: The parameters for an AUTOMATION task type. Documented below.
        :param pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs'] lambda_parameters: The parameters for a LAMBDA task type. Documented below.
        :param pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs'] run_command_parameters: The parameters for a RUN_COMMAND task type. Documented below.
        :param pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs'] step_functions_parameters: The parameters for a STEP_FUNCTIONS task type. Documented below.
        """
        __self__.automation_parameters = automation_parameters
        __self__.lambda_parameters = lambda_parameters
        __self__.run_command_parameters = run_command_parameters
        __self__.step_functions_parameters = step_functions_parameters

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs:
    document_version: Optional[pulumi.Input[str]] = pulumi.input_property("documentVersion")
    """
    The version of an Automation document to use during task execution.
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs']]]] = pulumi.input_property("parameters")
    """
    The parameters for the RUN_COMMAND task execution. Documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, document_version: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] document_version: The version of an Automation document to use during task execution.
        :param pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs']]] parameters: The parameters for the RUN_COMMAND task execution. Documented below.
        """
        __self__.document_version = document_version
        __self__.parameters = parameters

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The parameter name.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    The array of strings.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] name: The parameter name.
        :param pulumi.Input[List[pulumi.Input[str]]] values: The array of strings.
        """
        __self__.name = name
        __self__.values = values

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs:
    client_context: Optional[pulumi.Input[str]] = pulumi.input_property("clientContext")
    """
    Pass client-specific information to the Lambda function that you are invoking.
    """
    payload: Optional[pulumi.Input[str]] = pulumi.input_property("payload")
    """
    JSON to provide to your Lambda function as input.
    """
    qualifier: Optional[pulumi.Input[str]] = pulumi.input_property("qualifier")
    """
    Specify a Lambda function version or alias name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, client_context: Optional[pulumi.Input[str]] = None, payload: Optional[pulumi.Input[str]] = None, qualifier: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] client_context: Pass client-specific information to the Lambda function that you are invoking.
        :param pulumi.Input[str] payload: JSON to provide to your Lambda function as input.
        :param pulumi.Input[str] qualifier: Specify a Lambda function version or alias name.
        """
        __self__.client_context = client_context
        __self__.payload = payload
        __self__.qualifier = qualifier

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs:
    comment: Optional[pulumi.Input[str]] = pulumi.input_property("comment")
    """
    Information about the command(s) to execute.
    """
    document_hash: Optional[pulumi.Input[str]] = pulumi.input_property("documentHash")
    """
    The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    """
    document_hash_type: Optional[pulumi.Input[str]] = pulumi.input_property("documentHashType")
    """
    SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
    """
    notification_config: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs']] = pulumi.input_property("notificationConfig")
    """
    Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
    """
    output_s3_bucket: Optional[pulumi.Input[str]] = pulumi.input_property("outputS3Bucket")
    """
    The name of the Amazon S3 bucket.
    """
    output_s3_key_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("outputS3KeyPrefix")
    """
    The Amazon S3 bucket subfolder.
    """
    parameters: Optional[pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs']]]] = pulumi.input_property("parameters")
    """
    The parameters for the RUN_COMMAND task execution. Documented below.
    """
    service_role_arn: Optional[pulumi.Input[str]] = pulumi.input_property("serviceRoleArn")
    """
    The IAM service role to assume during task execution.
    """
    timeout_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("timeoutSeconds")
    """
    If this time is reached and the command has not already started executing, it doesn't run.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, comment: Optional[pulumi.Input[str]] = None, document_hash: Optional[pulumi.Input[str]] = None, document_hash_type: Optional[pulumi.Input[str]] = None, notification_config: Optional[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs']] = None, output_s3_bucket: Optional[pulumi.Input[str]] = None, output_s3_key_prefix: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs']]]] = None, service_role_arn: Optional[pulumi.Input[str]] = None, timeout_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] comment: Information about the command(s) to execute.
        :param pulumi.Input[str] document_hash: The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
        :param pulumi.Input[str] document_hash_type: SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
        :param pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs'] notification_config: Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
        :param pulumi.Input[str] output_s3_bucket: The name of the Amazon S3 bucket.
        :param pulumi.Input[str] output_s3_key_prefix: The Amazon S3 bucket subfolder.
        :param pulumi.Input[List[pulumi.Input['MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs']]] parameters: The parameters for the RUN_COMMAND task execution. Documented below.
        :param pulumi.Input[str] service_role_arn: The IAM service role to assume during task execution.
        :param pulumi.Input[float] timeout_seconds: If this time is reached and the command has not already started executing, it doesn't run.
        """
        __self__.comment = comment
        __self__.document_hash = document_hash
        __self__.document_hash_type = document_hash_type
        __self__.notification_config = notification_config
        __self__.output_s3_bucket = output_s3_bucket
        __self__.output_s3_key_prefix = output_s3_key_prefix
        __self__.parameters = parameters
        __self__.service_role_arn = service_role_arn
        __self__.timeout_seconds = timeout_seconds

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs:
    notification_arn: Optional[pulumi.Input[str]] = pulumi.input_property("notificationArn")
    """
    An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    """
    notification_events: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("notificationEvents")
    """
    The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
    """
    notification_type: Optional[pulumi.Input[str]] = pulumi.input_property("notificationType")
    """
    When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, notification_arn: Optional[pulumi.Input[str]] = None, notification_events: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, notification_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] notification_arn: An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        :param pulumi.Input[List[pulumi.Input[str]]] notification_events: The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
        :param pulumi.Input[str] notification_type: When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
        """
        __self__.notification_arn = notification_arn
        __self__.notification_events = notification_events
        __self__.notification_type = notification_type

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The parameter name.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    The array of strings.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] name: The parameter name.
        :param pulumi.Input[List[pulumi.Input[str]]] values: The array of strings.
        """
        __self__.name = name
        __self__.values = values

@pulumi.input_type
class MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs:
    input: Optional[pulumi.Input[str]] = pulumi.input_property("input")
    """
    The inputs for the STEP_FUNCTION task.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the STEP_FUNCTION task.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, input: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] input: The inputs for the STEP_FUNCTION task.
        :param pulumi.Input[str] name: The name of the STEP_FUNCTION task.
        """
        __self__.input = input
        __self__.name = name

@pulumi.input_type
class MaintenanceWindowTaskTaskParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the maintenance window task.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[str] name: The name of the maintenance window task.
        """
        __self__.name = name
        __self__.values = values

@pulumi.input_type
class PatchBaselineApprovalRuleArgs:
    approve_after_days: pulumi.Input[float] = pulumi.input_property("approveAfterDays")
    """
    The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 100.
    """
    patch_filters: pulumi.Input[List[pulumi.Input['PatchBaselineApprovalRulePatchFilterArgs']]] = pulumi.input_property("patchFilters")
    """
    The patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid Keys are `PATCH_SET | PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
    """
    compliance_level: Optional[pulumi.Input[str]] = pulumi.input_property("complianceLevel")
    """
    Defines the compliance level for patches approved by this rule. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
    """
    enable_non_security: Optional[pulumi.Input[bool]] = pulumi.input_property("enableNonSecurity")
    """
    Boolean enabling the application of non-security updates. The default value is 'false'. Valid for Linux instances only.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, approve_after_days: pulumi.Input[float], patch_filters: pulumi.Input[List[pulumi.Input['PatchBaselineApprovalRulePatchFilterArgs']]], compliance_level: Optional[pulumi.Input[str]] = None, enable_non_security: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[float] approve_after_days: The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 100.
        :param pulumi.Input[List[pulumi.Input['PatchBaselineApprovalRulePatchFilterArgs']]] patch_filters: The patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid Keys are `PATCH_SET | PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
        :param pulumi.Input[str] compliance_level: Defines the compliance level for patches approved by this rule. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        :param pulumi.Input[bool] enable_non_security: Boolean enabling the application of non-security updates. The default value is 'false'. Valid for Linux instances only.
        """
        __self__.approve_after_days = approve_after_days
        __self__.patch_filters = patch_filters
        __self__.compliance_level = compliance_level
        __self__.enable_non_security = enable_non_security

@pulumi.input_type
class PatchBaselineApprovalRulePatchFilterArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class PatchBaselineGlobalFilterArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class ResourceDataSyncS3DestinationArgs:
    bucket_name: pulumi.Input[str] = pulumi.input_property("bucketName")
    """
    Name of S3 bucket where the aggregated data is stored.
    """
    region: pulumi.Input[str] = pulumi.input_property("region")
    """
    Region with the bucket targeted by the Resource Data Sync.
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    ARN of an encryption key for a destination in Amazon S3.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    Prefix for the bucket.
    """
    sync_format: Optional[pulumi.Input[str]] = pulumi.input_property("syncFormat")
    """
    A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket_name: pulumi.Input[str], region: pulumi.Input[str], kms_key_arn: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None, sync_format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket_name: Name of S3 bucket where the aggregated data is stored.
        :param pulumi.Input[str] region: Region with the bucket targeted by the Resource Data Sync.
        :param pulumi.Input[str] kms_key_arn: ARN of an encryption key for a destination in Amazon S3.
        :param pulumi.Input[str] prefix: Prefix for the bucket.
        :param pulumi.Input[str] sync_format: A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
        """
        __self__.bucket_name = bucket_name
        __self__.region = region
        __self__.kms_key_arn = kms_key_arn
        __self__.prefix = prefix
        __self__.sync_format = sync_format

