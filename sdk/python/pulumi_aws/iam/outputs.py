# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GetGroupUser',
    'GetPolicyDocumentStatement',
    'GetPolicyDocumentStatementCondition',
    'GetPolicyDocumentStatementNotPrincipal',
    'GetPolicyDocumentStatementPrincipal',
]

@pulumi.output_type
class GetGroupUser(dict):
    arn: str = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) specifying the iam user.
    """
    path: str = pulumi.output_property("path")
    """
    The path to the iam user.
    """
    user_id: str = pulumi.output_property("userId")
    """
    The stable and unique string identifying the iam user.
    """
    user_name: str = pulumi.output_property("userName")
    """
    The name of the iam user.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyDocumentStatement(dict):
    actions: Optional[List[str]] = pulumi.output_property("actions")
    """
    A list of actions that this statement either allows
    or denies. For example, ``["ec2:RunInstances", "s3:*"]``.
    """
    conditions: Optional[List['outputs.GetPolicyDocumentStatementCondition']] = pulumi.output_property("conditions")
    """
    A nested configuration block (described below)
    that defines a further, possibly-service-specific condition that constrains
    whether this statement applies.
    """
    effect: Optional[str] = pulumi.output_property("effect")
    """
    Either "Allow" or "Deny", to specify whether this
    statement allows or denies the given actions. The default is "Allow".
    """
    not_actions: Optional[List[str]] = pulumi.output_property("notActions")
    """
    A list of actions that this statement does *not*
    apply to. Used to apply a policy statement to all actions *except* those
    listed.
    """
    not_principals: Optional[List['outputs.GetPolicyDocumentStatementNotPrincipal']] = pulumi.output_property("notPrincipals")
    """
    Like `principals` except gives resources that
    the statement does *not* apply to.
    """
    not_resources: Optional[List[str]] = pulumi.output_property("notResources")
    """
    A list of resource ARNs that this statement
    does *not* apply to. Used to apply a policy statement to all resources
    *except* those listed.
    """
    principals: Optional[List['outputs.GetPolicyDocumentStatementPrincipal']] = pulumi.output_property("principals")
    """
    A nested configuration block (described below)
    specifying a resource (or resource pattern) to which this statement applies.
    """
    resources: Optional[List[str]] = pulumi.output_property("resources")
    """
    A list of resource ARNs that this statement applies
    to. This is required by AWS if used for an IAM policy.
    """
    sid: Optional[str] = pulumi.output_property("sid")
    """
    An ID for the policy statement.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyDocumentStatementCondition(dict):
    test: str = pulumi.output_property("test")
    """
    The name of the
    [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)
    to evaluate.
    """
    values: List[str] = pulumi.output_property("values")
    """
    The values to evaluate the condition against. If multiple
    values are provided, the condition matches if at least one of them applies.
    (That is, the tests are combined with the "OR" boolean operation.)
    """
    variable: str = pulumi.output_property("variable")
    """
    The name of a
    [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)
    to apply the condition to. Context variables may either be standard AWS
    variables starting with `aws:`, or service-specific variables prefixed with
    the service name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyDocumentStatementNotPrincipal(dict):
    identifiers: List[str] = pulumi.output_property("identifiers")
    """
    List of identifiers for principals. When `type`
    is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
    """
    type: str = pulumi.output_property("type")
    """
    The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyDocumentStatementPrincipal(dict):
    identifiers: List[str] = pulumi.output_property("identifiers")
    """
    List of identifiers for principals. When `type`
    is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
    """
    type: str = pulumi.output_property("type")
    """
    The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


