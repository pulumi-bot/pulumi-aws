# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GetPolicyDocumentStatementArgs',
    'GetPolicyDocumentStatementConditionArgs',
    'GetPolicyDocumentStatementNotPrincipalArgs',
    'GetPolicyDocumentStatementPrincipalArgs',
]

@pulumi.input_type
class GetPolicyDocumentStatementArgs:
    actions: Optional[List[str]] = pulumi.input_property("actions")
    """
    A list of actions that this statement either allows
    or denies. For example, ``["ec2:RunInstances", "s3:*"]``.
    """
    conditions: Optional[List['GetPolicyDocumentStatementConditionArgs']] = pulumi.input_property("conditions")
    """
    A nested configuration block (described below)
    that defines a further, possibly-service-specific condition that constrains
    whether this statement applies.
    """
    effect: Optional[str] = pulumi.input_property("effect")
    """
    Either "Allow" or "Deny", to specify whether this
    statement allows or denies the given actions. The default is "Allow".
    """
    not_actions: Optional[List[str]] = pulumi.input_property("notActions")
    """
    A list of actions that this statement does *not*
    apply to. Used to apply a policy statement to all actions *except* those
    listed.
    """
    not_principals: Optional[List['GetPolicyDocumentStatementNotPrincipalArgs']] = pulumi.input_property("notPrincipals")
    """
    Like `principals` except gives resources that
    the statement does *not* apply to.
    """
    not_resources: Optional[List[str]] = pulumi.input_property("notResources")
    """
    A list of resource ARNs that this statement
    does *not* apply to. Used to apply a policy statement to all resources
    *except* those listed.
    """
    principals: Optional[List['GetPolicyDocumentStatementPrincipalArgs']] = pulumi.input_property("principals")
    """
    A nested configuration block (described below)
    specifying a resource (or resource pattern) to which this statement applies.
    """
    resources: Optional[List[str]] = pulumi.input_property("resources")
    """
    A list of resource ARNs that this statement applies
    to. This is required by AWS if used for an IAM policy.
    """
    sid: Optional[str] = pulumi.input_property("sid")
    """
    An ID for the policy statement.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, actions: Optional[List[str]] = None, conditions: Optional[List['GetPolicyDocumentStatementConditionArgs']] = None, effect: Optional[str] = None, not_actions: Optional[List[str]] = None, not_principals: Optional[List['GetPolicyDocumentStatementNotPrincipalArgs']] = None, not_resources: Optional[List[str]] = None, principals: Optional[List['GetPolicyDocumentStatementPrincipalArgs']] = None, resources: Optional[List[str]] = None, sid: Optional[str] = None) -> None:
        """
        :param List[str] actions: A list of actions that this statement either allows
               or denies. For example, ``["ec2:RunInstances", "s3:*"]``.
        :param List['GetPolicyDocumentStatementConditionArgs'] conditions: A nested configuration block (described below)
               that defines a further, possibly-service-specific condition that constrains
               whether this statement applies.
        :param str effect: Either "Allow" or "Deny", to specify whether this
               statement allows or denies the given actions. The default is "Allow".
        :param List[str] not_actions: A list of actions that this statement does *not*
               apply to. Used to apply a policy statement to all actions *except* those
               listed.
        :param List['GetPolicyDocumentStatementNotPrincipalArgs'] not_principals: Like `principals` except gives resources that
               the statement does *not* apply to.
        :param List[str] not_resources: A list of resource ARNs that this statement
               does *not* apply to. Used to apply a policy statement to all resources
               *except* those listed.
        :param List['GetPolicyDocumentStatementPrincipalArgs'] principals: A nested configuration block (described below)
               specifying a resource (or resource pattern) to which this statement applies.
        :param List[str] resources: A list of resource ARNs that this statement applies
               to. This is required by AWS if used for an IAM policy.
        :param str sid: An ID for the policy statement.
        """
        __self__.actions = actions
        __self__.conditions = conditions
        __self__.effect = effect
        __self__.not_actions = not_actions
        __self__.not_principals = not_principals
        __self__.not_resources = not_resources
        __self__.principals = principals
        __self__.resources = resources
        __self__.sid = sid

@pulumi.input_type
class GetPolicyDocumentStatementConditionArgs:
    test: str = pulumi.input_property("test")
    """
    The name of the
    [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)
    to evaluate.
    """
    values: List[str] = pulumi.input_property("values")
    """
    The values to evaluate the condition against. If multiple
    values are provided, the condition matches if at least one of them applies.
    (That is, the tests are combined with the "OR" boolean operation.)
    """
    variable: str = pulumi.input_property("variable")
    """
    The name of a
    [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)
    to apply the condition to. Context variables may either be standard AWS
    variables starting with `aws:`, or service-specific variables prefixed with
    the service name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, test: str, values: List[str], variable: str) -> None:
        """
        :param str test: The name of the
               [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)
               to evaluate.
        :param List[str] values: The values to evaluate the condition against. If multiple
               values are provided, the condition matches if at least one of them applies.
               (That is, the tests are combined with the "OR" boolean operation.)
        :param str variable: The name of a
               [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)
               to apply the condition to. Context variables may either be standard AWS
               variables starting with `aws:`, or service-specific variables prefixed with
               the service name.
        """
        __self__.test = test
        __self__.values = values
        __self__.variable = variable

@pulumi.input_type
class GetPolicyDocumentStatementNotPrincipalArgs:
    identifiers: List[str] = pulumi.input_property("identifiers")
    """
    List of identifiers for principals. When `type`
    is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
    """
    type: str = pulumi.input_property("type")
    """
    The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identifiers: List[str], type: str) -> None:
        """
        :param List[str] identifiers: List of identifiers for principals. When `type`
               is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
        :param str type: The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
        """
        __self__.identifiers = identifiers
        __self__.type = type

@pulumi.input_type
class GetPolicyDocumentStatementPrincipalArgs:
    identifiers: List[str] = pulumi.input_property("identifiers")
    """
    List of identifiers for principals. When `type`
    is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
    """
    type: str = pulumi.input_property("type")
    """
    The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identifiers: List[str], type: str) -> None:
        """
        :param List[str] identifiers: List of identifiers for principals. When `type`
               is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
        :param str type: The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
        """
        __self__.identifiers = identifiers
        __self__.type = type

