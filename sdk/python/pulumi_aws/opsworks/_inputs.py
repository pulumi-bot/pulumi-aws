# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApplicationAppSourceArgs',
    'ApplicationEnvironmentArgs',
    'ApplicationSslConfigurationArgs',
    'CustomLayerEbsVolumeArgs',
    'GangliaLayerEbsVolumeArgs',
    'HaproxyLayerEbsVolumeArgs',
    'InstanceEbsBlockDeviceArgs',
    'InstanceEphemeralBlockDeviceArgs',
    'InstanceRootBlockDeviceArgs',
    'JavaAppLayerEbsVolumeArgs',
    'MemcachedLayerEbsVolumeArgs',
    'MysqlLayerEbsVolumeArgs',
    'NodejsAppLayerEbsVolumeArgs',
    'PhpAppLayerEbsVolumeArgs',
    'RailsAppLayerEbsVolumeArgs',
    'StackCustomCookbooksSourceArgs',
    'StaticWebLayerEbsVolumeArgs',
]

@pulumi.input_type
class ApplicationAppSourceArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of source to use. For example, "archive".
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
    """
    revision: Optional[pulumi.Input[str]] = pulumi.input_property("revision")
    """
    For sources that are version-aware, the revision to use.
    """
    ssh_key: Optional[pulumi.Input[str]] = pulumi.input_property("sshKey")
    """
    SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
    """
    url: Optional[pulumi.Input[str]] = pulumi.input_property("url")
    """
    The URL where the app resource can be found.
    """
    username: Optional[pulumi.Input[str]] = pulumi.input_property("username")
    """
    Username to use when authenticating to the source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, revision: Optional[pulumi.Input[str]] = None, ssh_key: Optional[pulumi.Input[str]] = None, url: Optional[pulumi.Input[str]] = None, username: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of source to use. For example, "archive".
        :param pulumi.Input[str] password: Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] revision: For sources that are version-aware, the revision to use.
        :param pulumi.Input[str] ssh_key: SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] url: The URL where the app resource can be found.
        :param pulumi.Input[str] username: Username to use when authenticating to the source.
        """
        __self__.type = type
        __self__.password = password
        __self__.revision = revision
        __self__.ssh_key = ssh_key
        __self__.url = url
        __self__.username = username

@pulumi.input_type
class ApplicationEnvironmentArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    Variable name.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    Variable value.
    """
    secure: Optional[pulumi.Input[bool]] = pulumi.input_property("secure")
    """
    Set visibility of the variable value to `true` or `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], value: pulumi.Input[str], secure: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] key: Variable name.
        :param pulumi.Input[str] value: Variable value.
        :param pulumi.Input[bool] secure: Set visibility of the variable value to `true` or `false`.
        """
        __self__.key = key
        __self__.value = value
        __self__.secure = secure

@pulumi.input_type
class ApplicationSslConfigurationArgs:
    certificate: pulumi.Input[str] = pulumi.input_property("certificate")
    """
    The contents of the certificate's domain.crt file.
    """
    private_key: pulumi.Input[str] = pulumi.input_property("privateKey")
    """
    The private key; the contents of the certificate's domain.key file.
    """
    chain: Optional[pulumi.Input[str]] = pulumi.input_property("chain")
    """
    Can be used to specify an intermediate certificate authority key or client authentication.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, certificate: pulumi.Input[str], private_key: pulumi.Input[str], chain: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] certificate: The contents of the certificate's domain.crt file.
        :param pulumi.Input[str] private_key: The private key; the contents of the certificate's domain.key file.
        :param pulumi.Input[str] chain: Can be used to specify an intermediate certificate authority key or client authentication.
        """
        __self__.certificate = certificate
        __self__.private_key = private_key
        __self__.chain = chain

@pulumi.input_type
class CustomLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    """
    Encrypt the volume.
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[bool] encrypted: Encrypt the volume.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class GangliaLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class HaproxyLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class InstanceEbsBlockDeviceArgs:
    device_name: pulumi.Input[str] = pulumi.input_property("deviceName")
    delete_on_termination: Optional[pulumi.Input[bool]] = pulumi.input_property("deleteOnTermination")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    snapshot_id: Optional[pulumi.Input[str]] = pulumi.input_property("snapshotId")
    volume_size: Optional[pulumi.Input[float]] = pulumi.input_property("volumeSize")
    volume_type: Optional[pulumi.Input[str]] = pulumi.input_property("volumeType")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, device_name: pulumi.Input[str], delete_on_termination: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, snapshot_id: Optional[pulumi.Input[str]] = None, volume_size: Optional[pulumi.Input[float]] = None, volume_type: Optional[pulumi.Input[str]] = None) -> None:
        __self__.device_name = device_name
        __self__.delete_on_termination = delete_on_termination
        __self__.iops = iops
        __self__.snapshot_id = snapshot_id
        __self__.volume_size = volume_size
        __self__.volume_type = volume_type

@pulumi.input_type
class InstanceEphemeralBlockDeviceArgs:
    device_name: pulumi.Input[str] = pulumi.input_property("deviceName")
    virtual_name: pulumi.Input[str] = pulumi.input_property("virtualName")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, device_name: pulumi.Input[str], virtual_name: pulumi.Input[str]) -> None:
        __self__.device_name = device_name
        __self__.virtual_name = virtual_name

@pulumi.input_type
class InstanceRootBlockDeviceArgs:
    delete_on_termination: Optional[pulumi.Input[bool]] = pulumi.input_property("deleteOnTermination")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    volume_size: Optional[pulumi.Input[float]] = pulumi.input_property("volumeSize")
    volume_type: Optional[pulumi.Input[str]] = pulumi.input_property("volumeType")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, delete_on_termination: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, volume_size: Optional[pulumi.Input[float]] = None, volume_type: Optional[pulumi.Input[str]] = None) -> None:
        __self__.delete_on_termination = delete_on_termination
        __self__.iops = iops
        __self__.volume_size = volume_size
        __self__.volume_type = volume_type

@pulumi.input_type
class JavaAppLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class MemcachedLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class MysqlLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class NodejsAppLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class PhpAppLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class RailsAppLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

@pulumi.input_type
class StackCustomCookbooksSourceArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of source to use. For example, "archive".
    """
    url: pulumi.Input[str] = pulumi.input_property("url")
    """
    The URL where the cookbooks resource can be found.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
    """
    revision: Optional[pulumi.Input[str]] = pulumi.input_property("revision")
    """
    For sources that are version-aware, the revision to use.
    """
    ssh_key: Optional[pulumi.Input[str]] = pulumi.input_property("sshKey")
    """
    SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
    """
    username: Optional[pulumi.Input[str]] = pulumi.input_property("username")
    """
    Username to use when authenticating to the source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], url: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, revision: Optional[pulumi.Input[str]] = None, ssh_key: Optional[pulumi.Input[str]] = None, username: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type of source to use. For example, "archive".
        :param pulumi.Input[str] url: The URL where the cookbooks resource can be found.
        :param pulumi.Input[str] password: Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] revision: For sources that are version-aware, the revision to use.
        :param pulumi.Input[str] ssh_key: SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
        :param pulumi.Input[str] username: Username to use when authenticating to the source.
        """
        __self__.type = type
        __self__.url = url
        __self__.password = password
        __self__.revision = revision
        __self__.ssh_key = ssh_key
        __self__.username = username

@pulumi.input_type
class StaticWebLayerEbsVolumeArgs:
    mount_point: pulumi.Input[str] = pulumi.input_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: pulumi.Input[float] = pulumi.input_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    size: pulumi.Input[float] = pulumi.input_property("size")
    """
    The size of the volume in gigabytes.
    """
    encrypted: Optional[pulumi.Input[bool]] = pulumi.input_property("encrypted")
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    raid_level: Optional[pulumi.Input[str]] = pulumi.input_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_point: pulumi.Input[str], number_of_disks: pulumi.Input[float], size: pulumi.Input[float], encrypted: Optional[pulumi.Input[bool]] = None, iops: Optional[pulumi.Input[float]] = None, raid_level: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mount_point: The path to mount the EBS volume on the layer's instances.
        :param pulumi.Input[float] number_of_disks: The number of disks to use for the EBS volume.
        :param pulumi.Input[float] size: The size of the volume in gigabytes.
        :param pulumi.Input[float] iops: For PIOPS volumes, the IOPS per disk.
        :param pulumi.Input[str] raid_level: The RAID level to use for the volume.
        :param pulumi.Input[str] type: The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
        """
        __self__.mount_point = mount_point
        __self__.number_of_disks = number_of_disks
        __self__.size = size
        __self__.encrypted = encrypted
        __self__.iops = iops
        __self__.raid_level = raid_level
        __self__.type = type

