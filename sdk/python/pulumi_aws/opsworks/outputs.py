# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApplicationAppSource',
    'ApplicationEnvironment',
    'ApplicationSslConfiguration',
    'CustomLayerEbsVolume',
    'GangliaLayerEbsVolume',
    'HaproxyLayerEbsVolume',
    'InstanceEbsBlockDevice',
    'InstanceEphemeralBlockDevice',
    'InstanceRootBlockDevice',
    'JavaAppLayerEbsVolume',
    'MemcachedLayerEbsVolume',
    'MysqlLayerEbsVolume',
    'NodejsAppLayerEbsVolume',
    'PhpAppLayerEbsVolume',
    'RailsAppLayerEbsVolume',
    'StackCustomCookbooksSource',
    'StaticWebLayerEbsVolume',
]

@pulumi.output_type
class ApplicationAppSource(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
    """
    revision: Optional[str] = pulumi.output_property("revision")
    """
    For sources that are version-aware, the revision to use.
    """
    ssh_key: Optional[str] = pulumi.output_property("sshKey")
    """
    SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
    """
    type: str = pulumi.output_property("type")
    """
    The type of source to use. For example, "archive".
    """
    url: Optional[str] = pulumi.output_property("url")
    """
    The URL where the app resource can be found.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    Username to use when authenticating to the source.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationEnvironment(dict):
    key: str = pulumi.output_property("key")
    """
    Variable name.
    """
    secure: Optional[bool] = pulumi.output_property("secure")
    """
    Set visibility of the variable value to `true` or `false`.
    """
    value: str = pulumi.output_property("value")
    """
    Variable value.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSslConfiguration(dict):
    certificate: str = pulumi.output_property("certificate")
    """
    The contents of the certificate's domain.crt file.
    """
    chain: Optional[str] = pulumi.output_property("chain")
    """
    Can be used to specify an intermediate certificate authority key or client authentication.
    """
    private_key: str = pulumi.output_property("privateKey")
    """
    The private key; the contents of the certificate's domain.key file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CustomLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Encrypt the volume.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GangliaLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HaproxyLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    device_name: str = pulumi.output_property("deviceName")
    iops: Optional[float] = pulumi.output_property("iops")
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    virtual_name: str = pulumi.output_property("virtualName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceRootBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    iops: Optional[float] = pulumi.output_property("iops")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JavaAppLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MemcachedLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MysqlLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodejsAppLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PhpAppLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RailsAppLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackCustomCookbooksSource(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
    """
    revision: Optional[str] = pulumi.output_property("revision")
    """
    For sources that are version-aware, the revision to use.
    """
    ssh_key: Optional[str] = pulumi.output_property("sshKey")
    """
    SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
    """
    type: str = pulumi.output_property("type")
    """
    The type of source to use. For example, "archive".
    """
    url: str = pulumi.output_property("url")
    """
    The URL where the cookbooks resource can be found.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    Username to use when authenticating to the source.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StaticWebLayerEbsVolume(dict):
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    """
    For PIOPS volumes, the IOPS per disk.
    """
    mount_point: str = pulumi.output_property("mountPoint")
    """
    The path to mount the EBS volume on the layer's instances.
    """
    number_of_disks: float = pulumi.output_property("numberOfDisks")
    """
    The number of disks to use for the EBS volume.
    """
    raid_level: Optional[str] = pulumi.output_property("raidLevel")
    """
    The RAID level to use for the volume.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the volume in gigabytes.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


