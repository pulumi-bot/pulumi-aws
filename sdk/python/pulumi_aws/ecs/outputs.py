# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'CapacityProviderAutoScalingGroupProvider',
    'CapacityProviderAutoScalingGroupProviderManagedScaling',
    'ClusterDefaultCapacityProviderStrategy',
    'ClusterSetting',
    'ServiceCapacityProviderStrategy',
    'ServiceDeploymentController',
    'ServiceLoadBalancer',
    'ServiceNetworkConfiguration',
    'ServiceOrderedPlacementStrategy',
    'ServicePlacementConstraint',
    'ServiceServiceRegistries',
    'TaskDefinitionInferenceAccelerator',
    'TaskDefinitionPlacementConstraint',
    'TaskDefinitionProxyConfiguration',
    'TaskDefinitionVolume',
    'TaskDefinitionVolumeDockerVolumeConfiguration',
    'TaskDefinitionVolumeEfsVolumeConfiguration',
    'TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig',
    'GetClusterSetting',
]

@pulumi.output_type
class CapacityProviderAutoScalingGroupProvider(dict):
    auto_scaling_group_arn: str = pulumi.output_property("autoScalingGroupArn")
    """
    - The Amazon Resource Name (ARN) of the associated auto scaling group.
    """
    managed_scaling: Optional['outputs.CapacityProviderAutoScalingGroupProviderManagedScaling'] = pulumi.output_property("managedScaling")
    """
    - Nested argument defining the parameters of the auto scaling. Defined below.
    """
    managed_termination_protection: Optional[str] = pulumi.output_property("managedTerminationProtection")
    """
    - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CapacityProviderAutoScalingGroupProviderManagedScaling(dict):
    maximum_scaling_step_size: Optional[float] = pulumi.output_property("maximumScalingStepSize")
    """
    The maximum step adjustment size. A number between 1 and 10,000.
    """
    minimum_scaling_step_size: Optional[float] = pulumi.output_property("minimumScalingStepSize")
    """
    The minimum step adjustment size. A number between 1 and 10,000.
    """
    status: Optional[str] = pulumi.output_property("status")
    """
    Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
    """
    target_capacity: Optional[float] = pulumi.output_property("targetCapacity")
    """
    The target utilization for the capacity provider. A number between 1 and 100.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDefaultCapacityProviderStrategy(dict):
    base: Optional[float] = pulumi.output_property("base")
    """
    The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
    """
    capacity_provider: str = pulumi.output_property("capacityProvider")
    """
    The short name of the capacity provider.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    The relative percentage of the total number of launched tasks that should use the specified capacity provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSetting(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the setting to manage. Valid values: `containerInsights`.
    """
    value: str = pulumi.output_property("value")
    """
    The value to assign to the setting. Value values are `enabled` and `disabled`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceCapacityProviderStrategy(dict):
    base: Optional[float] = pulumi.output_property("base")
    """
    The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
    """
    capacity_provider: str = pulumi.output_property("capacityProvider")
    """
    The short name of the capacity provider.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    The relative percentage of the total number of launched tasks that should use the specified capacity provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceDeploymentController(dict):
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceLoadBalancer(dict):
    container_name: str = pulumi.output_property("containerName")
    """
    The name of the container to associate with the load balancer (as it appears in a container definition).
    """
    container_port: float = pulumi.output_property("containerPort")
    """
    The port on the container to associate with the load balancer.
    """
    elb_name: Optional[str] = pulumi.output_property("elbName")
    """
    The name of the ELB (Classic) to associate with the service.
    """
    target_group_arn: Optional[str] = pulumi.output_property("targetGroupArn")
    """
    The ARN of the Load Balancer target group to associate with the service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceNetworkConfiguration(dict):
    assign_public_ip: Optional[bool] = pulumi.output_property("assignPublicIp")
    """
    Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
    """
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    """
    The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    """
    subnets: List[str] = pulumi.output_property("subnets")
    """
    The subnets associated with the task or service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceOrderedPlacementStrategy(dict):
    field: Optional[str] = pulumi.output_property("field")
    """
    For the `spread` placement strategy, valid values are `instanceId` (or `host`,
    which has the same effect), or any platform or custom attribute that is applied to a container instance.
    For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
    needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
    """
    type: str = pulumi.output_property("type")
    """
    The type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePlacementConstraint(dict):
    expression: Optional[str] = pulumi.output_property("expression")
    """
    Cluster Query Language expression to apply to the constraint. Does not need to be specified
    for the `distinctInstance` type.
    For more information, see [Cluster Query Language in the Amazon EC2 Container
    Service Developer
    Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
    """
    type: str = pulumi.output_property("type")
    """
    The type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceServiceRegistries(dict):
    container_name: Optional[str] = pulumi.output_property("containerName")
    """
    The container name value, already specified in the task definition, to be used for your service discovery service.
    """
    container_port: Optional[float] = pulumi.output_property("containerPort")
    """
    The port value, already specified in the task definition, to be used for your service discovery service.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The port value used if your Service Discovery service specified an SRV record.
    """
    registry_arn: str = pulumi.output_property("registryArn")
    """
    The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionInferenceAccelerator(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
    """
    device_type: str = pulumi.output_property("deviceType")
    """
    The Elastic Inference accelerator type to use.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionPlacementConstraint(dict):
    expression: Optional[str] = pulumi.output_property("expression")
    """
    Cluster Query Language expression to apply to the constraint.
    For more information, see [Cluster Query Language in the Amazon EC2 Container
    Service Developer
    Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
    """
    type: str = pulumi.output_property("type")
    """
    The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionProxyConfiguration(dict):
    container_name: str = pulumi.output_property("containerName")
    """
    The name of the container that will serve as the App Mesh proxy.
    """
    properties: Optional[Dict[str, str]] = pulumi.output_property("properties")
    """
    The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionVolume(dict):
    docker_volume_configuration: Optional['outputs.TaskDefinitionVolumeDockerVolumeConfiguration'] = pulumi.output_property("dockerVolumeConfiguration")
    """
    Used to configure a docker volume
    """
    efs_volume_configuration: Optional['outputs.TaskDefinitionVolumeEfsVolumeConfiguration'] = pulumi.output_property("efsVolumeConfiguration")
    """
    Used to configure a EFS volume.
    """
    host_path: Optional[str] = pulumi.output_property("hostPath")
    """
    The path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the volume. This name is referenced in the `sourceVolume`
    parameter of container definition in the `mountPoints` section.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionVolumeDockerVolumeConfiguration(dict):
    autoprovision: Optional[bool] = pulumi.output_property("autoprovision")
    """
    If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
    """
    driver: Optional[str] = pulumi.output_property("driver")
    """
    The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
    """
    driver_opts: Optional[Dict[str, str]] = pulumi.output_property("driverOpts")
    """
    A map of Docker driver specific options.
    """
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    """
    A map of custom metadata to add to your Docker volume.
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionVolumeEfsVolumeConfiguration(dict):
    authorization_config: Optional['outputs.TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig'] = pulumi.output_property("authorizationConfig")
    """
    The authorization configuration details for the Amazon EFS file system.
    """
    file_system_id: str = pulumi.output_property("fileSystemId")
    """
    The ID of the EFS File System.
    """
    root_directory: Optional[str] = pulumi.output_property("rootDirectory")
    """
    The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorization_config`.
    """
    transit_encryption: Optional[str] = pulumi.output_property("transitEncryption")
    """
    Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
    """
    transit_encryption_port: Optional[float] = pulumi.output_property("transitEncryptionPort")
    """
    The port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig(dict):
    access_point_id: Optional[str] = pulumi.output_property("accessPointId")
    """
    The access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
    """
    iam: Optional[str] = pulumi.output_property("iam")
    """
    Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterSetting(dict):
    name: str = pulumi.output_property("name")
    value: str = pulumi.output_property("value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


