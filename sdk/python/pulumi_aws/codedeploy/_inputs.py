# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DeploymentConfigMinimumHealthyHostsArgs',
    'DeploymentConfigTrafficRoutingConfigArgs',
    'DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs',
    'DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs',
    'DeploymentGroupAlarmConfigurationArgs',
    'DeploymentGroupAutoRollbackConfigurationArgs',
    'DeploymentGroupBlueGreenDeploymentConfigArgs',
    'DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs',
    'DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs',
    'DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs',
    'DeploymentGroupDeploymentStyleArgs',
    'DeploymentGroupEc2TagFilterArgs',
    'DeploymentGroupEc2TagSetArgs',
    'DeploymentGroupEc2TagSetEc2TagFilterArgs',
    'DeploymentGroupEcsServiceArgs',
    'DeploymentGroupLoadBalancerInfoArgs',
    'DeploymentGroupLoadBalancerInfoElbInfoArgs',
    'DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs',
    'DeploymentGroupOnPremisesInstanceTagFilterArgs',
    'DeploymentGroupTriggerConfigurationArgs',
]

@pulumi.input_type
class DeploymentConfigMinimumHealthyHostsArgs:
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
    """
    value: Optional[pulumi.Input[float]] = pulumi.input_property("value")
    """
    The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
    a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
    deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
    When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] type: The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
        :param pulumi.Input[float] value: The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
               a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
               deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
               When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
        """
        __self__.type = type
        __self__.value = value

@pulumi.input_type
class DeploymentConfigTrafficRoutingConfigArgs:
    time_based_canary: Optional[pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs']] = pulumi.input_property("timeBasedCanary")
    """
    The time based canary configuration information. If `type` is `TimeBasedLinear`, use `time_based_linear` instead.
    """
    time_based_linear: Optional[pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs']] = pulumi.input_property("timeBasedLinear")
    """
    The time based linear configuration information. If `type` is `TimeBasedCanary`, use `time_based_canary` instead.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, time_based_canary: Optional[pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs']] = None, time_based_linear: Optional[pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs']] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs'] time_based_canary: The time based canary configuration information. If `type` is `TimeBasedLinear`, use `time_based_linear` instead.
        :param pulumi.Input['DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs'] time_based_linear: The time based linear configuration information. If `type` is `TimeBasedCanary`, use `time_based_canary` instead.
        :param pulumi.Input[str] type: Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
        """
        __self__.time_based_canary = time_based_canary
        __self__.time_based_linear = time_based_linear
        __self__.type = type

@pulumi.input_type
class DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs:
    interval: Optional[pulumi.Input[float]] = pulumi.input_property("interval")
    """
    The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
    """
    percentage: Optional[pulumi.Input[float]] = pulumi.input_property("percentage")
    """
    The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, interval: Optional[pulumi.Input[float]] = None, percentage: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] interval: The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
        :param pulumi.Input[float] percentage: The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
        """
        __self__.interval = interval
        __self__.percentage = percentage

@pulumi.input_type
class DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs:
    interval: Optional[pulumi.Input[float]] = pulumi.input_property("interval")
    """
    The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
    """
    percentage: Optional[pulumi.Input[float]] = pulumi.input_property("percentage")
    """
    The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, interval: Optional[pulumi.Input[float]] = None, percentage: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] interval: The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
        :param pulumi.Input[float] percentage: The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
        """
        __self__.interval = interval
        __self__.percentage = percentage

@pulumi.input_type
class DeploymentGroupAlarmConfigurationArgs:
    alarms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("alarms")
    """
    A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    """
    ignore_poll_alarm_failure: Optional[pulumi.Input[bool]] = pulumi.input_property("ignorePollAlarmFailure")
    """
    Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
    * `true`: The deployment will proceed even if alarm status information can't be retrieved.
    * `false`: The deployment will stop if alarm status information can't be retrieved.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, alarms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, enabled: Optional[pulumi.Input[bool]] = None, ignore_poll_alarm_failure: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] alarms: A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        :param pulumi.Input[bool] enabled: Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
        :param pulumi.Input[bool] ignore_poll_alarm_failure: Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
               * `true`: The deployment will proceed even if alarm status information can't be retrieved.
               * `false`: The deployment will stop if alarm status information can't be retrieved.
        """
        __self__.alarms = alarms
        __self__.enabled = enabled
        __self__.ignore_poll_alarm_failure = ignore_poll_alarm_failure

@pulumi.input_type
class DeploymentGroupAutoRollbackConfigurationArgs:
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
    """
    events: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("events")
    """
    The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: Optional[pulumi.Input[bool]] = None, events: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        :param pulumi.Input[List[pulumi.Input[str]]] events: The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
        """
        __self__.enabled = enabled
        __self__.events = events

@pulumi.input_type
class DeploymentGroupBlueGreenDeploymentConfigArgs:
    deployment_ready_option: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs']] = pulumi.input_property("deploymentReadyOption")
    """
    Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
    """
    green_fleet_provisioning_option: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs']] = pulumi.input_property("greenFleetProvisioningOption")
    """
    Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
    """
    terminate_blue_instances_on_deployment_success: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs']] = pulumi.input_property("terminateBlueInstancesOnDeploymentSuccess")
    """
    Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, deployment_ready_option: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs']] = None, green_fleet_provisioning_option: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs']] = None, terminate_blue_instances_on_deployment_success: Optional[pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs']] = None) -> None:
        """
        :param pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs'] deployment_ready_option: Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        :param pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs'] green_fleet_provisioning_option: Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        :param pulumi.Input['DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs'] terminate_blue_instances_on_deployment_success: Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
        """
        __self__.deployment_ready_option = deployment_ready_option
        __self__.green_fleet_provisioning_option = green_fleet_provisioning_option
        __self__.terminate_blue_instances_on_deployment_success = terminate_blue_instances_on_deployment_success

@pulumi.input_type
class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs:
    action_on_timeout: Optional[pulumi.Input[str]] = pulumi.input_property("actionOnTimeout")
    """
    When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
    * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
    * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
    """
    wait_time_in_minutes: Optional[pulumi.Input[float]] = pulumi.input_property("waitTimeInMinutes")
    """
    The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action_on_timeout: Optional[pulumi.Input[str]] = None, wait_time_in_minutes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] action_on_timeout: When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
               * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
               * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
        :param pulumi.Input[float] wait_time_in_minutes: The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        """
        __self__.action_on_timeout = action_on_timeout
        __self__.wait_time_in_minutes = wait_time_in_minutes

@pulumi.input_type
class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs:
    action: Optional[pulumi.Input[str]] = pulumi.input_property("action")
    """
    The method used to add instances to a replacement environment.
    * `DISCOVER_EXISTING`: Use instances that already exist or will be created manually.
    * `COPY_AUTO_SCALING_GROUP`: Use settings from a specified **Auto Scaling** group to define and create instances in a new Auto Scaling group. _Exactly one Auto Scaling group must be specified_ when selecting `COPY_AUTO_SCALING_GROUP`. Use `autoscaling_groups` to specify the Auto Scaling group.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] action: The method used to add instances to a replacement environment.
               * `DISCOVER_EXISTING`: Use instances that already exist or will be created manually.
               * `COPY_AUTO_SCALING_GROUP`: Use settings from a specified **Auto Scaling** group to define and create instances in a new Auto Scaling group. _Exactly one Auto Scaling group must be specified_ when selecting `COPY_AUTO_SCALING_GROUP`. Use `autoscaling_groups` to specify the Auto Scaling group.
        """
        __self__.action = action

@pulumi.input_type
class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs:
    action: Optional[pulumi.Input[str]] = pulumi.input_property("action")
    """
    The action to take on instances in the original environment after a successful blue/green deployment.
    * `TERMINATE`: Instances are terminated after a specified wait time.
    * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
    """
    termination_wait_time_in_minutes: Optional[pulumi.Input[float]] = pulumi.input_property("terminationWaitTimeInMinutes")
    """
    The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: Optional[pulumi.Input[str]] = None, termination_wait_time_in_minutes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] action: The action to take on instances in the original environment after a successful blue/green deployment.
               * `TERMINATE`: Instances are terminated after a specified wait time.
               * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        :param pulumi.Input[float] termination_wait_time_in_minutes: The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        """
        __self__.action = action
        __self__.termination_wait_time_in_minutes = termination_wait_time_in_minutes

@pulumi.input_type
class DeploymentGroupDeploymentStyleArgs:
    deployment_option: Optional[pulumi.Input[str]] = pulumi.input_property("deploymentOption")
    """
    Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
    """
    deployment_type: Optional[pulumi.Input[str]] = pulumi.input_property("deploymentType")
    """
    Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, deployment_option: Optional[pulumi.Input[str]] = None, deployment_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] deployment_option: Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        :param pulumi.Input[str] deployment_type: Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
        """
        __self__.deployment_option = deployment_option
        __self__.deployment_type = deployment_type

@pulumi.input_type
class DeploymentGroupEc2TagFilterArgs:
    key: Optional[pulumi.Input[str]] = pulumi.input_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The value of the tag filter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] key: The key of the tag filter.
        :param pulumi.Input[str] type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param pulumi.Input[str] value: The value of the tag filter.
        """
        __self__.key = key
        __self__.type = type
        __self__.value = value

@pulumi.input_type
class DeploymentGroupEc2TagSetArgs:
    ec2_tag_filters: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupEc2TagSetEc2TagFilterArgs']]]] = pulumi.input_property("ec2TagFilters")
    """
    Tag filters associated with the deployment group. See the AWS docs for details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ec2_tag_filters: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupEc2TagSetEc2TagFilterArgs']]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['DeploymentGroupEc2TagSetEc2TagFilterArgs']]] ec2_tag_filters: Tag filters associated with the deployment group. See the AWS docs for details.
        """
        __self__.ec2_tag_filters = ec2_tag_filters

@pulumi.input_type
class DeploymentGroupEc2TagSetEc2TagFilterArgs:
    key: Optional[pulumi.Input[str]] = pulumi.input_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The value of the tag filter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] key: The key of the tag filter.
        :param pulumi.Input[str] type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param pulumi.Input[str] value: The value of the tag filter.
        """
        __self__.key = key
        __self__.type = type
        __self__.value = value

@pulumi.input_type
class DeploymentGroupEcsServiceArgs:
    cluster_name: pulumi.Input[str] = pulumi.input_property("clusterName")
    """
    The name of the ECS cluster.
    """
    service_name: pulumi.Input[str] = pulumi.input_property("serviceName")
    """
    The name of the ECS service.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cluster_name: pulumi.Input[str], service_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] cluster_name: The name of the ECS cluster.
        :param pulumi.Input[str] service_name: The name of the ECS service.
        """
        __self__.cluster_name = cluster_name
        __self__.service_name = service_name

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoArgs:
    elb_infos: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoElbInfoArgs']]]] = pulumi.input_property("elbInfos")
    """
    The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
    """
    target_group_infos: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs']]]] = pulumi.input_property("targetGroupInfos")
    """
    The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
    """
    target_group_pair_info: Optional[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs']] = pulumi.input_property("targetGroupPairInfo")
    """
    The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, elb_infos: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoElbInfoArgs']]]] = None, target_group_infos: Optional[pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs']]]] = None, target_group_pair_info: Optional[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs']] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoElbInfoArgs']]] elb_infos: The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        :param pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs']]] target_group_infos: The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        :param pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs'] target_group_pair_info: The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        """
        __self__.elb_infos = elb_infos
        __self__.target_group_infos = target_group_infos
        __self__.target_group_pair_info = target_group_pair_info

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoElbInfoArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        __self__.name = name

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        __self__.name = name

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs:
    prod_traffic_route: pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs'] = pulumi.input_property("prodTrafficRoute")
    """
    Configuration block for the production traffic route (documented below).
    """
    target_groups: pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs']]] = pulumi.input_property("targetGroups")
    """
    Configuration blocks for a target group within a target group pair (documented below).
    """
    test_traffic_route: Optional[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs']] = pulumi.input_property("testTrafficRoute")
    """
    Configuration block for the test traffic route (documented below).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, prod_traffic_route: pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs'], target_groups: pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs']]], test_traffic_route: Optional[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs']] = None) -> None:
        """
        :param pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs'] prod_traffic_route: Configuration block for the production traffic route (documented below).
        :param pulumi.Input[List[pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs']]] target_groups: Configuration blocks for a target group within a target group pair (documented below).
        :param pulumi.Input['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs'] test_traffic_route: Configuration block for the test traffic route (documented below).
        """
        __self__.prod_traffic_route = prod_traffic_route
        __self__.target_groups = target_groups
        __self__.test_traffic_route = test_traffic_route

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs:
    listener_arns: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("listenerArns")
    """
    List of Amazon Resource Names (ARNs) of the load balancer listeners.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, listener_arns: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] listener_arns: List of Amazon Resource Names (ARNs) of the load balancer listeners.
        """
        __self__.listener_arns = listener_arns

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the target group.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: Name of the target group.
        """
        __self__.name = name

@pulumi.input_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs:
    listener_arns: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("listenerArns")
    """
    List of Amazon Resource Names (ARNs) of the load balancer listeners.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, listener_arns: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] listener_arns: List of Amazon Resource Names (ARNs) of the load balancer listeners.
        """
        __self__.listener_arns = listener_arns

@pulumi.input_type
class DeploymentGroupOnPremisesInstanceTagFilterArgs:
    key: Optional[pulumi.Input[str]] = pulumi.input_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The value of the tag filter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] key: The key of the tag filter.
        :param pulumi.Input[str] type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param pulumi.Input[str] value: The value of the tag filter.
        """
        __self__.key = key
        __self__.type = type
        __self__.value = value

@pulumi.input_type
class DeploymentGroupTriggerConfigurationArgs:
    trigger_events: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("triggerEvents")
    """
    The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
    """
    trigger_name: pulumi.Input[str] = pulumi.input_property("triggerName")
    """
    The name of the notification trigger.
    """
    trigger_target_arn: pulumi.Input[str] = pulumi.input_property("triggerTargetArn")
    """
    The ARN of the SNS topic through which notifications are sent.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, trigger_events: pulumi.Input[List[pulumi.Input[str]]], trigger_name: pulumi.Input[str], trigger_target_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] trigger_events: The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
        :param pulumi.Input[str] trigger_name: The name of the notification trigger.
        :param pulumi.Input[str] trigger_target_arn: The ARN of the SNS topic through which notifications are sent.
        """
        __self__.trigger_events = trigger_events
        __self__.trigger_name = trigger_name
        __self__.trigger_target_arn = trigger_target_arn

