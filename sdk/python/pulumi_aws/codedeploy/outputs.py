# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DeploymentConfigMinimumHealthyHosts',
    'DeploymentConfigTrafficRoutingConfig',
    'DeploymentConfigTrafficRoutingConfigTimeBasedCanary',
    'DeploymentConfigTrafficRoutingConfigTimeBasedLinear',
    'DeploymentGroupAlarmConfiguration',
    'DeploymentGroupAutoRollbackConfiguration',
    'DeploymentGroupBlueGreenDeploymentConfig',
    'DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption',
    'DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption',
    'DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess',
    'DeploymentGroupDeploymentStyle',
    'DeploymentGroupEc2TagFilter',
    'DeploymentGroupEc2TagSet',
    'DeploymentGroupEc2TagSetEc2TagFilter',
    'DeploymentGroupEcsService',
    'DeploymentGroupLoadBalancerInfo',
    'DeploymentGroupLoadBalancerInfoElbInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute',
    'DeploymentGroupOnPremisesInstanceTagFilter',
    'DeploymentGroupTriggerConfiguration',
]

@pulumi.output_type
class DeploymentConfigMinimumHealthyHosts(dict):
    type: Optional[str] = pulumi.output_property("type")
    """
    The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
    """
    value: Optional[float] = pulumi.output_property("value")
    """
    The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
    a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
    deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
    When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfig(dict):
    time_based_canary: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedCanary'] = pulumi.output_property("timeBasedCanary")
    """
    The time based canary configuration information. If `type` is `TimeBasedLinear`, use `time_based_linear` instead.
    """
    time_based_linear: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedLinear'] = pulumi.output_property("timeBasedLinear")
    """
    The time based linear configuration information. If `type` is `TimeBasedCanary`, use `time_based_canary` instead.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfigTimeBasedCanary(dict):
    interval: Optional[float] = pulumi.output_property("interval")
    """
    The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfigTimeBasedLinear(dict):
    interval: Optional[float] = pulumi.output_property("interval")
    """
    The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupAlarmConfiguration(dict):
    alarms: Optional[List[str]] = pulumi.output_property("alarms")
    """
    A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
    """
    ignore_poll_alarm_failure: Optional[bool] = pulumi.output_property("ignorePollAlarmFailure")
    """
    Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
    * `true`: The deployment will proceed even if alarm status information can't be retrieved.
    * `false`: The deployment will stop if alarm status information can't be retrieved.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupAutoRollbackConfiguration(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
    """
    events: Optional[List[str]] = pulumi.output_property("events")
    """
    The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfig(dict):
    deployment_ready_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption'] = pulumi.output_property("deploymentReadyOption")
    """
    Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
    """
    green_fleet_provisioning_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption'] = pulumi.output_property("greenFleetProvisioningOption")
    """
    Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
    """
    terminate_blue_instances_on_deployment_success: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess'] = pulumi.output_property("terminateBlueInstancesOnDeploymentSuccess")
    """
    Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption(dict):
    action_on_timeout: Optional[str] = pulumi.output_property("actionOnTimeout")
    """
    When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
    * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
    * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
    """
    wait_time_in_minutes: Optional[float] = pulumi.output_property("waitTimeInMinutes")
    """
    The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption(dict):
    action: Optional[str] = pulumi.output_property("action")
    """
    The method used to add instances to a replacement environment.
    * `DISCOVER_EXISTING`: Use instances that already exist or will be created manually.
    * `COPY_AUTO_SCALING_GROUP`: Use settings from a specified **Auto Scaling** group to define and create instances in a new Auto Scaling group. _Exactly one Auto Scaling group must be specified_ when selecting `COPY_AUTO_SCALING_GROUP`. Use `autoscaling_groups` to specify the Auto Scaling group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess(dict):
    action: Optional[str] = pulumi.output_property("action")
    """
    The action to take on instances in the original environment after a successful blue/green deployment.
    * `TERMINATE`: Instances are terminated after a specified wait time.
    * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
    """
    termination_wait_time_in_minutes: Optional[float] = pulumi.output_property("terminationWaitTimeInMinutes")
    """
    The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupDeploymentStyle(dict):
    deployment_option: Optional[str] = pulumi.output_property("deploymentOption")
    """
    Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
    """
    deployment_type: Optional[str] = pulumi.output_property("deploymentType")
    """
    Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupEc2TagFilter(dict):
    key: Optional[str] = pulumi.output_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    The value of the tag filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupEc2TagSet(dict):
    ec2_tag_filters: Optional[List['outputs.DeploymentGroupEc2TagSetEc2TagFilter']] = pulumi.output_property("ec2TagFilters")
    """
    Tag filters associated with the deployment group. See the AWS docs for details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupEc2TagSetEc2TagFilter(dict):
    key: Optional[str] = pulumi.output_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    The value of the tag filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupEcsService(dict):
    cluster_name: str = pulumi.output_property("clusterName")
    """
    The name of the ECS cluster.
    """
    service_name: str = pulumi.output_property("serviceName")
    """
    The name of the ECS service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfo(dict):
    elb_infos: Optional[List['outputs.DeploymentGroupLoadBalancerInfoElbInfo']] = pulumi.output_property("elbInfos")
    """
    The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
    """
    target_group_infos: Optional[List['outputs.DeploymentGroupLoadBalancerInfoTargetGroupInfo']] = pulumi.output_property("targetGroupInfos")
    """
    The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
    """
    target_group_pair_info: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo'] = pulumi.output_property("targetGroupPairInfo")
    """
    The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoElbInfo(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupInfo(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfo(dict):
    prod_traffic_route: 'outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute' = pulumi.output_property("prodTrafficRoute")
    """
    Configuration block for the production traffic route (documented below).
    """
    target_groups: List['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup'] = pulumi.output_property("targetGroups")
    """
    Configuration blocks for a target group within a target group pair (documented below).
    """
    test_traffic_route: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute'] = pulumi.output_property("testTrafficRoute")
    """
    Configuration block for the test traffic route (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute(dict):
    listener_arns: List[str] = pulumi.output_property("listenerArns")
    """
    List of Amazon Resource Names (ARNs) of the load balancer listeners.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the target group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute(dict):
    listener_arns: List[str] = pulumi.output_property("listenerArns")
    """
    List of Amazon Resource Names (ARNs) of the load balancer listeners.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupOnPremisesInstanceTagFilter(dict):
    key: Optional[str] = pulumi.output_property("key")
    """
    The key of the tag filter.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    The value of the tag filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DeploymentGroupTriggerConfiguration(dict):
    trigger_events: List[str] = pulumi.output_property("triggerEvents")
    """
    The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
    """
    trigger_name: str = pulumi.output_property("triggerName")
    """
    The name of the notification trigger.
    """
    trigger_target_arn: str = pulumi.output_property("triggerTargetArn")
    """
    The ARN of the SNS topic through which notifications are sent.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


