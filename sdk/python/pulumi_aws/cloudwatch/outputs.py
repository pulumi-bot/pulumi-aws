# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'EventPermissionCondition',
    'EventTargetBatchTarget',
    'EventTargetEcsTarget',
    'EventTargetEcsTargetNetworkConfiguration',
    'EventTargetInputTransformer',
    'EventTargetKinesisTarget',
    'EventTargetRunCommandTarget',
    'EventTargetSqsTarget',
    'LogMetricFilterMetricTransformation',
    'MetricAlarmMetricQuery',
    'MetricAlarmMetricQueryMetric',
]

@pulumi.output_type
class EventPermissionCondition(dict):
    key: str = pulumi.output_property("key")
    """
    Key for the condition. Valid values: `aws:PrincipalOrgID`.
    """
    type: str = pulumi.output_property("type")
    """
    Type of condition. Value values: `StringEquals`.
    """
    value: str = pulumi.output_property("value")
    """
    Value for the key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetBatchTarget(dict):
    array_size: Optional[float] = pulumi.output_property("arraySize")
    """
    The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
    """
    job_attempts: Optional[float] = pulumi.output_property("jobAttempts")
    """
    The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
    """
    job_definition: str = pulumi.output_property("jobDefinition")
    """
    The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
    """
    job_name: str = pulumi.output_property("jobName")
    """
    The name to use for this execution of the job, if the target is an AWS Batch job.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetEcsTarget(dict):
    group: Optional[str] = pulumi.output_property("group")
    """
    Specifies an ECS task group for the task. The maximum length is 255 characters.
    """
    launch_type: Optional[str] = pulumi.output_property("launchType")
    """
    Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
    """
    network_configuration: Optional['outputs.EventTargetEcsTargetNetworkConfiguration'] = pulumi.output_property("networkConfiguration")
    """
    Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
    """
    platform_version: Optional[str] = pulumi.output_property("platformVersion")
    """
    Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
    """
    task_count: Optional[float] = pulumi.output_property("taskCount")
    """
    The number of tasks to create based on the TaskDefinition. The default is 1.
    """
    task_definition_arn: str = pulumi.output_property("taskDefinitionArn")
    """
    The ARN of the task definition to use if the event target is an Amazon ECS cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetEcsTargetNetworkConfiguration(dict):
    assign_public_ip: Optional[bool] = pulumi.output_property("assignPublicIp")
    """
    Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
    """
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    """
    The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    """
    subnets: List[str] = pulumi.output_property("subnets")
    """
    The subnets associated with the task or service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetInputTransformer(dict):
    input_paths: Optional[Dict[str, str]] = pulumi.output_property("inputPaths")
    """
    Key value pairs specified in the form of JSONPath (for example, time = $.time)
    """
    input_template: str = pulumi.output_property("inputTemplate")
    """
    Structure containing the template body.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetKinesisTarget(dict):
    partition_key_path: Optional[str] = pulumi.output_property("partitionKeyPath")
    """
    The JSON path to be extracted from the event and used as the partition key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetRunCommandTarget(dict):
    key: str = pulumi.output_property("key")
    """
    Can be either `tag:tag-key` or `InstanceIds`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventTargetSqsTarget(dict):
    message_group_id: Optional[str] = pulumi.output_property("messageGroupId")
    """
    The FIFO message group ID to use as the target.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LogMetricFilterMetricTransformation(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The value to emit when a filter pattern does not match a log event.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
    """
    namespace: str = pulumi.output_property("namespace")
    """
    The destination namespace of the CloudWatch metric.
    """
    value: str = pulumi.output_property("value")
    """
    What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlarmMetricQuery(dict):
    expression: Optional[str] = pulumi.output_property("expression")
    """
    The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
    """
    id: str = pulumi.output_property("id")
    """
    A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
    """
    label: Optional[str] = pulumi.output_property("label")
    """
    A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
    """
    metric: Optional['outputs.MetricAlarmMetricQueryMetric'] = pulumi.output_property("metric")
    """
    The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
    """
    return_data: Optional[bool] = pulumi.output_property("returnData")
    """
    Specify exactly one `metric_query` to be `true` to use that `metric_query` result as the alarm.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlarmMetricQueryMetric(dict):
    dimensions: Optional[Dict[str, str]] = pulumi.output_property("dimensions")
    """
    The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
    """
    metric_name: str = pulumi.output_property("metricName")
    """
    The name for this metric.
    See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
    """
    namespace: Optional[str] = pulumi.output_property("namespace")
    """
    The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
    See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
    """
    period: float = pulumi.output_property("period")
    """
    The period in seconds over which the specified `stat` is applied.
    """
    stat: str = pulumi.output_property("stat")
    """
    The statistic to apply to this metric.
    Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
    """
    unit: Optional[str] = pulumi.output_property("unit")
    """
    The unit for this metric.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


