# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['MetricAlarm']


class MetricAlarm(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions_enabled: Optional[pulumi.Input[bool]] = None,
                 alarm_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 alarm_description: Optional[pulumi.Input[str]] = None,
                 comparison_operator: Optional[pulumi.Input[str]] = None,
                 datapoints_to_alarm: Optional[pulumi.Input[float]] = None,
                 dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 evaluate_low_sample_count_percentiles: Optional[pulumi.Input[str]] = None,
                 evaluation_periods: Optional[pulumi.Input[float]] = None,
                 extended_statistic: Optional[pulumi.Input[str]] = None,
                 insufficient_data_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 metric_queries: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MetricAlarmMetricQueryArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 ok_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 period: Optional[pulumi.Input[float]] = None,
                 statistic: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 threshold_metric_id: Optional[pulumi.Input[str]] = None,
                 treat_missing_data: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a MetricAlarm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['actions_enabled'] = actions_enabled
            __props__['alarm_actions'] = alarm_actions
            __props__['alarm_description'] = alarm_description
            if comparison_operator is None:
                raise TypeError("Missing required property 'comparison_operator'")
            __props__['comparison_operator'] = comparison_operator
            __props__['datapoints_to_alarm'] = datapoints_to_alarm
            __props__['dimensions'] = dimensions
            __props__['evaluate_low_sample_count_percentiles'] = evaluate_low_sample_count_percentiles
            if evaluation_periods is None:
                raise TypeError("Missing required property 'evaluation_periods'")
            __props__['evaluation_periods'] = evaluation_periods
            __props__['extended_statistic'] = extended_statistic
            __props__['insufficient_data_actions'] = insufficient_data_actions
            __props__['metric_name'] = metric_name
            __props__['metric_queries'] = metric_queries
            __props__['name'] = name
            __props__['namespace'] = namespace
            __props__['ok_actions'] = ok_actions
            __props__['period'] = period
            __props__['statistic'] = statistic
            __props__['tags'] = tags
            __props__['threshold'] = threshold
            __props__['threshold_metric_id'] = threshold_metric_id
            __props__['treat_missing_data'] = treat_missing_data
            __props__['unit'] = unit
            __props__['arn'] = None
        super(MetricAlarm, __self__).__init__(
            'aws:cloudwatch/metricAlarm:MetricAlarm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions_enabled: Optional[pulumi.Input[bool]] = None,
            alarm_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            alarm_description: Optional[pulumi.Input[str]] = None,
            arn: Optional[pulumi.Input[str]] = None,
            comparison_operator: Optional[pulumi.Input[str]] = None,
            datapoints_to_alarm: Optional[pulumi.Input[float]] = None,
            dimensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            evaluate_low_sample_count_percentiles: Optional[pulumi.Input[str]] = None,
            evaluation_periods: Optional[pulumi.Input[float]] = None,
            extended_statistic: Optional[pulumi.Input[str]] = None,
            insufficient_data_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            metric_name: Optional[pulumi.Input[str]] = None,
            metric_queries: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MetricAlarmMetricQueryArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            ok_actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            period: Optional[pulumi.Input[float]] = None,
            statistic: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            threshold: Optional[pulumi.Input[float]] = None,
            threshold_metric_id: Optional[pulumi.Input[str]] = None,
            treat_missing_data: Optional[pulumi.Input[str]] = None,
            unit: Optional[pulumi.Input[str]] = None) -> 'MetricAlarm':
        """
        Get an existing MetricAlarm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["actions_enabled"] = actions_enabled
        __props__["alarm_actions"] = alarm_actions
        __props__["alarm_description"] = alarm_description
        __props__["arn"] = arn
        __props__["comparison_operator"] = comparison_operator
        __props__["datapoints_to_alarm"] = datapoints_to_alarm
        __props__["dimensions"] = dimensions
        __props__["evaluate_low_sample_count_percentiles"] = evaluate_low_sample_count_percentiles
        __props__["evaluation_periods"] = evaluation_periods
        __props__["extended_statistic"] = extended_statistic
        __props__["insufficient_data_actions"] = insufficient_data_actions
        __props__["metric_name"] = metric_name
        __props__["metric_queries"] = metric_queries
        __props__["name"] = name
        __props__["namespace"] = namespace
        __props__["ok_actions"] = ok_actions
        __props__["period"] = period
        __props__["statistic"] = statistic
        __props__["tags"] = tags
        __props__["threshold"] = threshold
        __props__["threshold_metric_id"] = threshold_metric_id
        __props__["treat_missing_data"] = treat_missing_data
        __props__["unit"] = unit
        return MetricAlarm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionsEnabled")
    def actions_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "actions_enabled")

    @property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> pulumi.Output[Optional[List[str]]]:
        return pulumi.get(self, "alarm_actions")

    @property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "alarm_description")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Output[str]:
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="datapointsToAlarm")
    def datapoints_to_alarm(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "datapoints_to_alarm")

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="evaluateLowSampleCountPercentiles")
    def evaluate_low_sample_count_percentiles(self) -> pulumi.Output[str]:
        return pulumi.get(self, "evaluate_low_sample_count_percentiles")

    @property
    @pulumi.getter(name="evaluationPeriods")
    def evaluation_periods(self) -> pulumi.Output[float]:
        return pulumi.get(self, "evaluation_periods")

    @property
    @pulumi.getter(name="extendedStatistic")
    def extended_statistic(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "extended_statistic")

    @property
    @pulumi.getter(name="insufficientDataActions")
    def insufficient_data_actions(self) -> pulumi.Output[Optional[List[str]]]:
        return pulumi.get(self, "insufficient_data_actions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricQueries")
    def metric_queries(self) -> pulumi.Output[Optional[List['outputs.MetricAlarmMetricQuery']]]:
        return pulumi.get(self, "metric_queries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="okActions")
    def ok_actions(self) -> pulumi.Output[Optional[List[str]]]:
        return pulumi.get(self, "ok_actions")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def statistic(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdMetricId")
    def threshold_metric_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "threshold_metric_id")

    @property
    @pulumi.getter(name="treatMissingData")
    def treat_missing_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "treat_missing_data")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "unit")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

