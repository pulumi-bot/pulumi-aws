# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Pipeline']


class Pipeline(pulumi.CustomResource):
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    The codepipeline ARN.
    """
    artifact_store: pulumi.Output['outputs.PipelineArtifactStore'] = pulumi.output_property("artifactStore")
    """
    One or more artifact_store blocks. Artifact stores are documented below.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The name of the pipeline.
    """
    role_arn: pulumi.Output[str] = pulumi.output_property("roleArn")
    """
    A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
    """
    stages: pulumi.Output[List['outputs.PipelineStage']] = pulumi.output_property("stages")
    """
    A stage block. Stages are documented below.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    A map of tags to assign to the resource.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, artifact_store: Optional[pulumi.Input[pulumi.InputType['PipelineArtifactStoreArgs']]] = None, name: Optional[pulumi.Input[str]] = None, role_arn: Optional[pulumi.Input[str]] = None, stages: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PipelineStageArgs']]]]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a CodePipeline.

        > **NOTE on `codepipeline.Pipeline`:** - the `GITHUB_TOKEN` environment variable must be set if the GitHub provider is specified.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        codepipeline_bucket = aws.s3.Bucket("codepipelineBucket", acl="private")
        codepipeline_role = aws.iam.Role("codepipelineRole", assume_role_policy=\"\"\"{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }

        \"\"\")
        codepipeline_policy = aws.iam.RolePolicy("codepipelinePolicy",
            policy=pulumi.Output.all(codepipeline_bucket.arn, codepipeline_bucket.arn).apply(lambda codepipelineBucketArn, codepipelineBucketArn1: f\"\"\"{{
          "Version": "2012-10-17",
          "Statement": [
            {{
              "Effect":"Allow",
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:GetBucketVersioning",
                "s3:PutObject"
              ],
              "Resource": [
                "{codepipeline_bucket_arn}",
                "{codepipeline_bucket_arn1}/*"
              ]
            }},
            {{
              "Effect": "Allow",
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild"
              ],
              "Resource": "*"
            }}
          ]
        }}

        \"\"\"),
            role=codepipeline_role.id)
        s3kmskey = aws.kms.get_alias(name="alias/myKmsKey")
        codepipeline = aws.codepipeline.Pipeline("codepipeline",
            artifact_store={
                "encryption_key": {
                    "id": s3kmskey.arn,
                    "type": "KMS",
                },
                "location": codepipeline_bucket.bucket,
                "type": "S3",
            },
            role_arn=codepipeline_role.arn,
            stages=[
                {
                    "actions": [{
                        "category": "Source",
                        "configuration": {
                            "Branch": "master",
                            "Owner": "my-organization",
                            "Repo": "test",
                        },
                        "name": "Source",
                        "outputArtifacts": ["source_output"],
                        "owner": "ThirdParty",
                        "provider": "GitHub",
                        "version": "1",
                    }],
                    "name": "Source",
                },
                {
                    "actions": [{
                        "category": "Build",
                        "configuration": {
                            "ProjectName": "test",
                        },
                        "inputArtifacts": ["source_output"],
                        "name": "Build",
                        "outputArtifacts": ["build_output"],
                        "owner": "AWS",
                        "provider": "CodeBuild",
                        "version": "1",
                    }],
                    "name": "Build",
                },
                {
                    "actions": [{
                        "category": "Deploy",
                        "configuration": {
                            "ActionMode": "REPLACE_ON_FAILURE",
                            "Capabilities": "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM",
                            "OutputFileName": "CreateStackOutput.json",
                            "StackName": "MyStack",
                            "TemplatePath": "build_output::sam-templated.yaml",
                        },
                        "inputArtifacts": ["build_output"],
                        "name": "Deploy",
                        "owner": "AWS",
                        "provider": "CloudFormation",
                        "version": "1",
                    }],
                    "name": "Deploy",
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['PipelineArtifactStoreArgs']] artifact_store: One or more artifact_store blocks. Artifact stores are documented below.
        :param pulumi.Input[str] name: The name of the pipeline.
        :param pulumi.Input[str] role_arn: A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PipelineStageArgs']]]] stages: A stage block. Stages are documented below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if artifact_store is None:
                raise TypeError("Missing required property 'artifact_store'")
            __props__['artifact_store'] = artifact_store
            __props__['name'] = name
            if role_arn is None:
                raise TypeError("Missing required property 'role_arn'")
            __props__['role_arn'] = role_arn
            if stages is None:
                raise TypeError("Missing required property 'stages'")
            __props__['stages'] = stages
            __props__['tags'] = tags
            __props__['arn'] = None
        super(Pipeline, __self__).__init__(
            'aws:codepipeline/pipeline:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, arn: Optional[pulumi.Input[str]] = None, artifact_store: Optional[pulumi.Input[pulumi.InputType['PipelineArtifactStoreArgs']]] = None, name: Optional[pulumi.Input[str]] = None, role_arn: Optional[pulumi.Input[str]] = None, stages: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PipelineStageArgs']]]]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The codepipeline ARN.
        :param pulumi.Input[pulumi.InputType['PipelineArtifactStoreArgs']] artifact_store: One or more artifact_store blocks. Artifact stores are documented below.
        :param pulumi.Input[str] name: The name of the pipeline.
        :param pulumi.Input[str] role_arn: A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PipelineStageArgs']]]] stages: A stage block. Stages are documented below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["artifact_store"] = artifact_store
        __props__["name"] = name
        __props__["role_arn"] = role_arn
        __props__["stages"] = stages
        __props__["tags"] = tags
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

