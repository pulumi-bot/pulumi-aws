# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PipelineArtifactStoreArgs',
    'PipelineArtifactStoreEncryptionKeyArgs',
    'PipelineStageArgs',
    'PipelineStageActionArgs',
    'WebhookAuthenticationConfigurationArgs',
    'WebhookFilterArgs',
]

@pulumi.input_type
class PipelineArtifactStoreArgs:
    location: pulumi.Input[str] = pulumi.input_property("location")
    """
    The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of the artifact store, such as Amazon S3
    """
    encryption_key: Optional[pulumi.Input['PipelineArtifactStoreEncryptionKeyArgs']] = pulumi.input_property("encryptionKey")
    """
    The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryption_key` block is documented below.
    """
    region: Optional[pulumi.Input[str]] = pulumi.input_property("region")
    """
    The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, location: pulumi.Input[str], type: pulumi.Input[str], encryption_key: Optional[pulumi.Input['PipelineArtifactStoreEncryptionKeyArgs']] = None, region: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] location: The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
        :param pulumi.Input[str] type: The type of the artifact store, such as Amazon S3
        :param pulumi.Input['PipelineArtifactStoreEncryptionKeyArgs'] encryption_key: The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryption_key` block is documented below.
        :param pulumi.Input[str] region: The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
        """
        __self__.location = location
        __self__.type = type
        __self__.encryption_key = encryption_key
        __self__.region = region

@pulumi.input_type
class PipelineArtifactStoreEncryptionKeyArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The KMS key ARN or ID
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of key; currently only `KMS` is supported
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] id: The KMS key ARN or ID
        :param pulumi.Input[str] type: The type of key; currently only `KMS` is supported
        """
        __self__.id = id
        __self__.type = type

@pulumi.input_type
class PipelineStageArgs:
    actions: pulumi.Input[List[pulumi.Input['PipelineStageActionArgs']]] = pulumi.input_property("actions")
    """
    The action(s) to include in the stage. Defined as an `action` block below
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the stage.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, actions: pulumi.Input[List[pulumi.Input['PipelineStageActionArgs']]], name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['PipelineStageActionArgs']]] actions: The action(s) to include in the stage. Defined as an `action` block below
        :param pulumi.Input[str] name: The name of the stage.
        """
        __self__.actions = actions
        __self__.name = name

@pulumi.input_type
class PipelineStageActionArgs:
    category: pulumi.Input[str] = pulumi.input_property("category")
    """
    A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The action declaration's name.
    """
    owner: pulumi.Input[str] = pulumi.input_property("owner")
    """
    The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
    """
    provider: pulumi.Input[str] = pulumi.input_property("provider")
    """
    The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy.
    """
    version: pulumi.Input[str] = pulumi.input_property("version")
    """
    A string that identifies the action type.
    """
    configuration: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("configuration")
    """
    A Map of the action declaration's configuration. Find out more about configuring action configurations in the [Reference Pipeline Structure documentation](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements).
    """
    input_artifacts: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("inputArtifacts")
    """
    A list of artifact names to be worked on.
    """
    namespace: Optional[pulumi.Input[str]] = pulumi.input_property("namespace")
    """
    The namespace all output variables will be accessed from.
    """
    output_artifacts: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("outputArtifacts")
    """
    A list of artifact names to output. Output artifact names must be unique within a pipeline.
    """
    region: Optional[pulumi.Input[str]] = pulumi.input_property("region")
    """
    The region in which to run the action.
    """
    role_arn: Optional[pulumi.Input[str]] = pulumi.input_property("roleArn")
    """
    The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
    """
    run_order: Optional[pulumi.Input[float]] = pulumi.input_property("runOrder")
    """
    The order in which actions are run.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, category: pulumi.Input[str], name: pulumi.Input[str], owner: pulumi.Input[str], provider: pulumi.Input[str], version: pulumi.Input[str], configuration: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, input_artifacts: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, namespace: Optional[pulumi.Input[str]] = None, output_artifacts: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, region: Optional[pulumi.Input[str]] = None, role_arn: Optional[pulumi.Input[str]] = None, run_order: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] category: A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
        :param pulumi.Input[str] name: The action declaration's name.
        :param pulumi.Input[str] owner: The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
        :param pulumi.Input[str] provider: The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy.
        :param pulumi.Input[str] version: A string that identifies the action type.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] configuration: A Map of the action declaration's configuration. Find out more about configuring action configurations in the [Reference Pipeline Structure documentation](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements).
        :param pulumi.Input[List[pulumi.Input[str]]] input_artifacts: A list of artifact names to be worked on.
        :param pulumi.Input[str] namespace: The namespace all output variables will be accessed from.
        :param pulumi.Input[List[pulumi.Input[str]]] output_artifacts: A list of artifact names to output. Output artifact names must be unique within a pipeline.
        :param pulumi.Input[str] region: The region in which to run the action.
        :param pulumi.Input[str] role_arn: The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
        :param pulumi.Input[float] run_order: The order in which actions are run.
        """
        __self__.category = category
        __self__.name = name
        __self__.owner = owner
        __self__.provider = provider
        __self__.version = version
        __self__.configuration = configuration
        __self__.input_artifacts = input_artifacts
        __self__.namespace = namespace
        __self__.output_artifacts = output_artifacts
        __self__.region = region
        __self__.role_arn = role_arn
        __self__.run_order = run_order

@pulumi.input_type
class WebhookAuthenticationConfigurationArgs:
    allowed_ip_range: Optional[pulumi.Input[str]] = pulumi.input_property("allowedIpRange")
    """
    A valid CIDR block for `IP` filtering. Required for `IP`.
    """
    secret_token: Optional[pulumi.Input[str]] = pulumi.input_property("secretToken")
    """
    The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`'s `configuration` block. Required for `GITHUB_HMAC`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_ip_range: Optional[pulumi.Input[str]] = None, secret_token: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] allowed_ip_range: A valid CIDR block for `IP` filtering. Required for `IP`.
        :param pulumi.Input[str] secret_token: The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`'s `configuration` block. Required for `GITHUB_HMAC`.
        """
        __self__.allowed_ip_range = allowed_ip_range
        __self__.secret_token = secret_token

@pulumi.input_type
class WebhookFilterArgs:
    json_path: pulumi.Input[str] = pulumi.input_property("jsonPath")
    """
    The [JSON path](https://github.com/json-path/JsonPath) to filter on.
    """
    match_equals: pulumi.Input[str] = pulumi.input_property("matchEquals")
    """
    The value to match on (e.g. `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, json_path: pulumi.Input[str], match_equals: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] json_path: The [JSON path](https://github.com/json-path/JsonPath) to filter on.
        :param pulumi.Input[str] match_equals: The value to match on (e.g. `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
        """
        __self__.json_path = json_path
        __self__.match_equals = match_equals

