# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PipelineContentConfigArgs',
    'PipelineContentConfigPermissionArgs',
    'PipelineNotificationsArgs',
    'PipelineThumbnailConfigArgs',
    'PipelineThumbnailConfigPermissionArgs',
    'PresetAudioArgs',
    'PresetAudioCodecOptionsArgs',
    'PresetThumbnailsArgs',
    'PresetVideoArgs',
    'PresetVideoWatermarkArgs',
]

@pulumi.input_type
class PipelineContentConfigArgs:
    bucket: Optional[pulumi.Input[str]] = pulumi.input_property("bucket")
    """
    The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
    """
    storage_class: Optional[pulumi.Input[str]] = pulumi.input_property("storageClass")
    """
    The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: Optional[pulumi.Input[str]] = None, storage_class: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
        :param pulumi.Input[str] storage_class: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
        """
        __self__.bucket = bucket
        __self__.storage_class = storage_class

@pulumi.input_type
class PipelineContentConfigPermissionArgs:
    accesses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("accesses")
    """
    The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
    """
    grantee: Optional[pulumi.Input[str]] = pulumi.input_property("grantee")
    """
    The AWS user or group that you want to have access to transcoded files and playlists.
    """
    grantee_type: Optional[pulumi.Input[str]] = pulumi.input_property("granteeType")
    """
    Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, accesses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, grantee: Optional[pulumi.Input[str]] = None, grantee_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] accesses: The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
        :param pulumi.Input[str] grantee: The AWS user or group that you want to have access to transcoded files and playlists.
        :param pulumi.Input[str] grantee_type: Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
        """
        __self__.accesses = accesses
        __self__.grantee = grantee
        __self__.grantee_type = grantee_type

@pulumi.input_type
class PipelineNotificationsArgs:
    completed: Optional[pulumi.Input[str]] = pulumi.input_property("completed")
    """
    The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
    """
    error: Optional[pulumi.Input[str]] = pulumi.input_property("error")
    """
    The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
    """
    progressing: Optional[pulumi.Input[str]] = pulumi.input_property("progressing")
    """
    The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
    """
    warning: Optional[pulumi.Input[str]] = pulumi.input_property("warning")
    """
    The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, completed: Optional[pulumi.Input[str]] = None, error: Optional[pulumi.Input[str]] = None, progressing: Optional[pulumi.Input[str]] = None, warning: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] completed: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
        :param pulumi.Input[str] error: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
        :param pulumi.Input[str] progressing: The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
        :param pulumi.Input[str] warning: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
        """
        __self__.completed = completed
        __self__.error = error
        __self__.progressing = progressing
        __self__.warning = warning

@pulumi.input_type
class PipelineThumbnailConfigArgs:
    bucket: Optional[pulumi.Input[str]] = pulumi.input_property("bucket")
    """
    The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
    """
    storage_class: Optional[pulumi.Input[str]] = pulumi.input_property("storageClass")
    """
    The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: Optional[pulumi.Input[str]] = None, storage_class: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket: The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
        :param pulumi.Input[str] storage_class: The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
        """
        __self__.bucket = bucket
        __self__.storage_class = storage_class

@pulumi.input_type
class PipelineThumbnailConfigPermissionArgs:
    accesses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("accesses")
    """
    The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
    """
    grantee: Optional[pulumi.Input[str]] = pulumi.input_property("grantee")
    """
    The AWS user or group that you want to have access to thumbnail files.
    """
    grantee_type: Optional[pulumi.Input[str]] = pulumi.input_property("granteeType")
    """
    Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, accesses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, grantee: Optional[pulumi.Input[str]] = None, grantee_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] accesses: The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
        :param pulumi.Input[str] grantee: The AWS user or group that you want to have access to thumbnail files.
        :param pulumi.Input[str] grantee_type: Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
        """
        __self__.accesses = accesses
        __self__.grantee = grantee
        __self__.grantee_type = grantee_type

@pulumi.input_type
class PresetAudioArgs:
    audio_packing_mode: Optional[pulumi.Input[str]] = pulumi.input_property("audioPackingMode")
    """
    The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
    """
    bit_rate: Optional[pulumi.Input[str]] = pulumi.input_property("bitRate")
    """
    The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
    """
    channels: Optional[pulumi.Input[str]] = pulumi.input_property("channels")
    """
    The number of audio channels in the output file
    """
    codec: Optional[pulumi.Input[str]] = pulumi.input_property("codec")
    """
    The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
    """
    sample_rate: Optional[pulumi.Input[str]] = pulumi.input_property("sampleRate")
    """
    The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, audio_packing_mode: Optional[pulumi.Input[str]] = None, bit_rate: Optional[pulumi.Input[str]] = None, channels: Optional[pulumi.Input[str]] = None, codec: Optional[pulumi.Input[str]] = None, sample_rate: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] audio_packing_mode: The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
        :param pulumi.Input[str] bit_rate: The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
        :param pulumi.Input[str] channels: The number of audio channels in the output file
        :param pulumi.Input[str] codec: The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
        :param pulumi.Input[str] sample_rate: The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
        """
        __self__.audio_packing_mode = audio_packing_mode
        __self__.bit_rate = bit_rate
        __self__.channels = channels
        __self__.codec = codec
        __self__.sample_rate = sample_rate

@pulumi.input_type
class PresetAudioCodecOptionsArgs:
    bit_depth: Optional[pulumi.Input[str]] = pulumi.input_property("bitDepth")
    """
    The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
    """
    bit_order: Optional[pulumi.Input[str]] = pulumi.input_property("bitOrder")
    """
    The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
    """
    profile: Optional[pulumi.Input[str]] = pulumi.input_property("profile")
    """
    If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
    """
    signed: Optional[pulumi.Input[str]] = pulumi.input_property("signed")
    """
    Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bit_depth: Optional[pulumi.Input[str]] = None, bit_order: Optional[pulumi.Input[str]] = None, profile: Optional[pulumi.Input[str]] = None, signed: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bit_depth: The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
        :param pulumi.Input[str] bit_order: The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
        :param pulumi.Input[str] profile: If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
        :param pulumi.Input[str] signed: Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
        """
        __self__.bit_depth = bit_depth
        __self__.bit_order = bit_order
        __self__.profile = profile
        __self__.signed = signed

@pulumi.input_type
class PresetThumbnailsArgs:
    aspect_ratio: Optional[pulumi.Input[str]] = pulumi.input_property("aspectRatio")
    """
    The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    The format of thumbnails, if any. Valid formats are jpg and png.
    """
    interval: Optional[pulumi.Input[str]] = pulumi.input_property("interval")
    """
    The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
    """
    max_height: Optional[pulumi.Input[str]] = pulumi.input_property("maxHeight")
    """
    The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
    """
    max_width: Optional[pulumi.Input[str]] = pulumi.input_property("maxWidth")
    """
    The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
    """
    padding_policy: Optional[pulumi.Input[str]] = pulumi.input_property("paddingPolicy")
    """
    When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
    """
    resolution: Optional[pulumi.Input[str]] = pulumi.input_property("resolution")
    """
    The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `max_width`, `max_height`, `sizing_policy`, and `padding_policy` instead of `resolution` and `aspect_ratio`. The two groups of settings are mutually exclusive. Do not use them together)
    """
    sizing_policy: Optional[pulumi.Input[str]] = pulumi.input_property("sizingPolicy")
    """
    A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, aspect_ratio: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None, interval: Optional[pulumi.Input[str]] = None, max_height: Optional[pulumi.Input[str]] = None, max_width: Optional[pulumi.Input[str]] = None, padding_policy: Optional[pulumi.Input[str]] = None, resolution: Optional[pulumi.Input[str]] = None, sizing_policy: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] aspect_ratio: The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
        :param pulumi.Input[str] format: The format of thumbnails, if any. Valid formats are jpg and png.
        :param pulumi.Input[str] interval: The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
        :param pulumi.Input[str] max_height: The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
        :param pulumi.Input[str] max_width: The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
        :param pulumi.Input[str] padding_policy: When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
        :param pulumi.Input[str] resolution: The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `max_width`, `max_height`, `sizing_policy`, and `padding_policy` instead of `resolution` and `aspect_ratio`. The two groups of settings are mutually exclusive. Do not use them together)
        :param pulumi.Input[str] sizing_policy: A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
        """
        __self__.aspect_ratio = aspect_ratio
        __self__.format = format
        __self__.interval = interval
        __self__.max_height = max_height
        __self__.max_width = max_width
        __self__.padding_policy = padding_policy
        __self__.resolution = resolution
        __self__.sizing_policy = sizing_policy

@pulumi.input_type
class PresetVideoArgs:
    aspect_ratio: Optional[pulumi.Input[str]] = pulumi.input_property("aspectRatio")
    """
    The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
    """
    bit_rate: Optional[pulumi.Input[str]] = pulumi.input_property("bitRate")
    """
    The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
    """
    codec: Optional[pulumi.Input[str]] = pulumi.input_property("codec")
    """
    The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
    """
    display_aspect_ratio: Optional[pulumi.Input[str]] = pulumi.input_property("displayAspectRatio")
    """
    The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
    """
    fixed_gop: Optional[pulumi.Input[str]] = pulumi.input_property("fixedGop")
    """
    Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
    """
    frame_rate: Optional[pulumi.Input[str]] = pulumi.input_property("frameRate")
    """
    The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
    """
    keyframes_max_dist: Optional[pulumi.Input[str]] = pulumi.input_property("keyframesMaxDist")
    """
    The maximum number of frames between key frames. Not applicable for containers of type gif.
    """
    max_frame_rate: Optional[pulumi.Input[str]] = pulumi.input_property("maxFrameRate")
    """
    If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
    """
    max_height: Optional[pulumi.Input[str]] = pulumi.input_property("maxHeight")
    """
    The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
    """
    max_width: Optional[pulumi.Input[str]] = pulumi.input_property("maxWidth")
    """
    The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
    """
    padding_policy: Optional[pulumi.Input[str]] = pulumi.input_property("paddingPolicy")
    """
    When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
    """
    resolution: Optional[pulumi.Input[str]] = pulumi.input_property("resolution")
    """
    The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
    """
    sizing_policy: Optional[pulumi.Input[str]] = pulumi.input_property("sizingPolicy")
    """
    A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, aspect_ratio: Optional[pulumi.Input[str]] = None, bit_rate: Optional[pulumi.Input[str]] = None, codec: Optional[pulumi.Input[str]] = None, display_aspect_ratio: Optional[pulumi.Input[str]] = None, fixed_gop: Optional[pulumi.Input[str]] = None, frame_rate: Optional[pulumi.Input[str]] = None, keyframes_max_dist: Optional[pulumi.Input[str]] = None, max_frame_rate: Optional[pulumi.Input[str]] = None, max_height: Optional[pulumi.Input[str]] = None, max_width: Optional[pulumi.Input[str]] = None, padding_policy: Optional[pulumi.Input[str]] = None, resolution: Optional[pulumi.Input[str]] = None, sizing_policy: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] aspect_ratio: The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        :param pulumi.Input[str] bit_rate: The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        :param pulumi.Input[str] codec: The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        :param pulumi.Input[str] display_aspect_ratio: The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
        :param pulumi.Input[str] fixed_gop: Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
        :param pulumi.Input[str] frame_rate: The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
        :param pulumi.Input[str] keyframes_max_dist: The maximum number of frames between key frames. Not applicable for containers of type gif.
        :param pulumi.Input[str] max_frame_rate: If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
        :param pulumi.Input[str] max_height: The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
        :param pulumi.Input[str] max_width: The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
        :param pulumi.Input[str] padding_policy: When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        :param pulumi.Input[str] resolution: The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        :param pulumi.Input[str] sizing_policy: A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
        """
        __self__.aspect_ratio = aspect_ratio
        __self__.bit_rate = bit_rate
        __self__.codec = codec
        __self__.display_aspect_ratio = display_aspect_ratio
        __self__.fixed_gop = fixed_gop
        __self__.frame_rate = frame_rate
        __self__.keyframes_max_dist = keyframes_max_dist
        __self__.max_frame_rate = max_frame_rate
        __self__.max_height = max_height
        __self__.max_width = max_width
        __self__.padding_policy = padding_policy
        __self__.resolution = resolution
        __self__.sizing_policy = sizing_policy

@pulumi.input_type
class PresetVideoWatermarkArgs:
    horizontal_align: Optional[pulumi.Input[str]] = pulumi.input_property("horizontalAlign")
    """
    The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
    """
    horizontal_offset: Optional[pulumi.Input[str]] = pulumi.input_property("horizontalOffset")
    """
    The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
    """
    max_height: Optional[pulumi.Input[str]] = pulumi.input_property("maxHeight")
    """
    The maximum height of the watermark.
    """
    max_width: Optional[pulumi.Input[str]] = pulumi.input_property("maxWidth")
    """
    The maximum width of the watermark.
    """
    opacity: Optional[pulumi.Input[str]] = pulumi.input_property("opacity")
    """
    A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
    """
    sizing_policy: Optional[pulumi.Input[str]] = pulumi.input_property("sizingPolicy")
    """
    A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
    """
    target: Optional[pulumi.Input[str]] = pulumi.input_property("target")
    """
    A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
    """
    vertical_align: Optional[pulumi.Input[str]] = pulumi.input_property("verticalAlign")
    """
    The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
    """
    vertical_offset: Optional[pulumi.Input[str]] = pulumi.input_property("verticalOffset")
    """
    The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, horizontal_align: Optional[pulumi.Input[str]] = None, horizontal_offset: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, max_height: Optional[pulumi.Input[str]] = None, max_width: Optional[pulumi.Input[str]] = None, opacity: Optional[pulumi.Input[str]] = None, sizing_policy: Optional[pulumi.Input[str]] = None, target: Optional[pulumi.Input[str]] = None, vertical_align: Optional[pulumi.Input[str]] = None, vertical_offset: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] horizontal_align: The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
        :param pulumi.Input[str] horizontal_offset: The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
        :param pulumi.Input[str] id: A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
        :param pulumi.Input[str] max_height: The maximum height of the watermark.
        :param pulumi.Input[str] max_width: The maximum width of the watermark.
        :param pulumi.Input[str] opacity: A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
        :param pulumi.Input[str] sizing_policy: A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        :param pulumi.Input[str] target: A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
        :param pulumi.Input[str] vertical_align: The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
        :param pulumi.Input[str] vertical_offset: The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
        """
        __self__.horizontal_align = horizontal_align
        __self__.horizontal_offset = horizontal_offset
        __self__.id = id
        __self__.max_height = max_height
        __self__.max_width = max_width
        __self__.opacity = opacity
        __self__.sizing_policy = sizing_policy
        __self__.target = target
        __self__.vertical_align = vertical_align
        __self__.vertical_offset = vertical_offset

