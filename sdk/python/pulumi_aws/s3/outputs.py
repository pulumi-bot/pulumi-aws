# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AccessPointPublicAccessBlockConfiguration',
    'AccessPointVpcConfiguration',
    'AnalyticsConfigurationFilter',
    'AnalyticsConfigurationStorageClassAnalysis',
    'AnalyticsConfigurationStorageClassAnalysisDataExport',
    'AnalyticsConfigurationStorageClassAnalysisDataExportDestination',
    'AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination',
    'BucketCorsRule',
    'BucketGrant',
    'BucketLifecycleRule',
    'BucketLifecycleRuleExpiration',
    'BucketLifecycleRuleNoncurrentVersionExpiration',
    'BucketLifecycleRuleNoncurrentVersionTransition',
    'BucketLifecycleRuleTransition',
    'BucketLogging',
    'BucketMetricFilter',
    'BucketNotificationLambdaFunction',
    'BucketNotificationQueue',
    'BucketNotificationTopic',
    'BucketObjectLockConfiguration',
    'BucketObjectLockConfigurationRule',
    'BucketObjectLockConfigurationRuleDefaultRetention',
    'BucketReplicationConfiguration',
    'BucketReplicationConfigurationRule',
    'BucketReplicationConfigurationRuleDestination',
    'BucketReplicationConfigurationRuleDestinationAccessControlTranslation',
    'BucketReplicationConfigurationRuleFilter',
    'BucketReplicationConfigurationRuleSourceSelectionCriteria',
    'BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects',
    'BucketServerSideEncryptionConfiguration',
    'BucketServerSideEncryptionConfigurationRule',
    'BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault',
    'BucketVersioning',
    'BucketWebsite',
    'InventoryDestination',
    'InventoryDestinationBucket',
    'InventoryDestinationBucketEncryption',
    'InventoryDestinationBucketEncryptionSseKms',
    'InventoryDestinationBucketEncryptionSseS3',
    'InventoryFilter',
    'InventorySchedule',
]

@pulumi.output_type
class AccessPointPublicAccessBlockConfiguration(dict):
    block_public_acls: Optional[bool] = pulumi.output_property("blockPublicAcls")
    """
    Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
    * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
    * PUT Object calls fail if the request includes a public ACL.
    * PUT Bucket calls fail if the request includes a public ACL.
    """
    block_public_policy: Optional[bool] = pulumi.output_property("blockPublicPolicy")
    """
    Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
    * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
    """
    ignore_public_acls: Optional[bool] = pulumi.output_property("ignorePublicAcls")
    """
    Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
    * Ignore all public ACLs on buckets in this account and any objects that they contain.
    """
    restrict_public_buckets: Optional[bool] = pulumi.output_property("restrictPublicBuckets")
    """
    Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
    * Only the bucket owner and AWS Services can access buckets with public policies.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPointVpcConfiguration(dict):
    vpc_id: str = pulumi.output_property("vpcId")
    """
    This access point will only allow connections from the specified VPC ID.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsConfigurationFilter(dict):
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object prefix for filtering.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    Set of object tags for filtering.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsConfigurationStorageClassAnalysis(dict):
    data_export: 'outputs.AnalyticsConfigurationStorageClassAnalysisDataExport' = pulumi.output_property("dataExport")
    """
    Data export configuration (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsConfigurationStorageClassAnalysisDataExport(dict):
    destination: 'outputs.AnalyticsConfigurationStorageClassAnalysisDataExportDestination' = pulumi.output_property("destination")
    """
    Specifies the destination for the exported analytics data (documented below).
    """
    output_schema_version: Optional[str] = pulumi.output_property("outputSchemaVersion")
    """
    The schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsConfigurationStorageClassAnalysisDataExportDestination(dict):
    s3_bucket_destination: 'outputs.AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination' = pulumi.output_property("s3BucketDestination")
    """
    Analytics data export currently only supports an S3 bucket destination (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination(dict):
    bucket_account_id: Optional[str] = pulumi.output_property("bucketAccountId")
    """
    The account ID that owns the destination bucket.
    """
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The ARN of the destination bucket.
    """
    format: Optional[str] = pulumi.output_property("format")
    """
    The output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object prefix for filtering.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketCorsRule(dict):
    allowed_headers: Optional[List[str]] = pulumi.output_property("allowedHeaders")
    """
    Specifies which headers are allowed.
    """
    allowed_methods: List[str] = pulumi.output_property("allowedMethods")
    """
    Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
    """
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    Specifies which origins are allowed.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies expose header in the response.
    """
    max_age_seconds: Optional[float] = pulumi.output_property("maxAgeSeconds")
    """
    Specifies time in seconds that browser can cache the response for a preflight request.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketGrant(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
    """
    permissions: List[str] = pulumi.output_property("permissions")
    """
    List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
    """
    type: str = pulumi.output_property("type")
    """
    - Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
    """
    uri: Optional[str] = pulumi.output_property("uri")
    """
    Uri address to grant for. Used only when `type` is `Group`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLifecycleRule(dict):
    abort_incomplete_multipart_upload_days: Optional[float] = pulumi.output_property("abortIncompleteMultipartUploadDays")
    """
    Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Specifies lifecycle rule status.
    """
    expiration: Optional['outputs.BucketLifecycleRuleExpiration'] = pulumi.output_property("expiration")
    """
    Specifies a period in the object's expire (documented below).
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Unique identifier for the rule.
    """
    noncurrent_version_expiration: Optional['outputs.BucketLifecycleRuleNoncurrentVersionExpiration'] = pulumi.output_property("noncurrentVersionExpiration")
    """
    Specifies when noncurrent object versions expire (documented below).
    """
    noncurrent_version_transitions: Optional[List['outputs.BucketLifecycleRuleNoncurrentVersionTransition']] = pulumi.output_property("noncurrentVersionTransitions")
    """
    Specifies when noncurrent object versions transitions (documented below).
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object key prefix identifying one or more objects to which the rule applies.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    Specifies object tags key and value.
    """
    transitions: Optional[List['outputs.BucketLifecycleRuleTransition']] = pulumi.output_property("transitions")
    """
    Specifies a period in the object's transitions (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLifecycleRuleExpiration(dict):
    date: Optional[str] = pulumi.output_property("date")
    """
    Specifies the date after which you want the corresponding action to take effect.
    """
    days: Optional[float] = pulumi.output_property("days")
    """
    Specifies the number of days after object creation when the specific rule action takes effect.
    """
    expired_object_delete_marker: Optional[bool] = pulumi.output_property("expiredObjectDeleteMarker")
    """
    On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLifecycleRuleNoncurrentVersionExpiration(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    Specifies the number of days noncurrent object versions expire.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLifecycleRuleNoncurrentVersionTransition(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    Specifies the number of days noncurrent object versions transition.
    """
    storage_class: str = pulumi.output_property("storageClass")
    """
    Specifies the Amazon S3 storage class to which you want the noncurrent object versions to transition. Can be `ONEZONE_IA`, `STANDARD_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLifecycleRuleTransition(dict):
    date: Optional[str] = pulumi.output_property("date")
    """
    Specifies the date after which you want the corresponding action to take effect.
    """
    days: Optional[float] = pulumi.output_property("days")
    """
    Specifies the number of days after object creation when the specific rule action takes effect.
    """
    storage_class: str = pulumi.output_property("storageClass")
    """
    Specifies the Amazon S3 storage class to which you want the object to transition. Can be `ONEZONE_IA`, `STANDARD_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketLogging(dict):
    target_bucket: str = pulumi.output_property("targetBucket")
    """
    The name of the bucket that will receive the log objects.
    """
    target_prefix: Optional[str] = pulumi.output_property("targetPrefix")
    """
    To specify a key prefix for log objects.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketMetricFilter(dict):
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object prefix for filtering (singular).
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    Object tags for filtering (up to 10).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketNotificationLambdaFunction(dict):
    events: List[str] = pulumi.output_property("events")
    """
    Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
    """
    filter_prefix: Optional[str] = pulumi.output_property("filterPrefix")
    """
    Specifies object key name prefix.
    """
    filter_suffix: Optional[str] = pulumi.output_property("filterSuffix")
    """
    Specifies object key name suffix.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies unique identifier for each of the notification configurations.
    """
    lambda_function_arn: Optional[str] = pulumi.output_property("lambdaFunctionArn")
    """
    Specifies Amazon Lambda function ARN.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketNotificationQueue(dict):
    events: List[str] = pulumi.output_property("events")
    """
    Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
    """
    filter_prefix: Optional[str] = pulumi.output_property("filterPrefix")
    """
    Specifies object key name prefix.
    """
    filter_suffix: Optional[str] = pulumi.output_property("filterSuffix")
    """
    Specifies object key name suffix.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies unique identifier for each of the notification configurations.
    """
    queue_arn: str = pulumi.output_property("queueArn")
    """
    Specifies Amazon SQS queue ARN.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketNotificationTopic(dict):
    events: List[str] = pulumi.output_property("events")
    """
    Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
    """
    filter_prefix: Optional[str] = pulumi.output_property("filterPrefix")
    """
    Specifies object key name prefix.
    """
    filter_suffix: Optional[str] = pulumi.output_property("filterSuffix")
    """
    Specifies object key name suffix.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies unique identifier for each of the notification configurations.
    """
    topic_arn: str = pulumi.output_property("topicArn")
    """
    Specifies Amazon SNS topic ARN.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketObjectLockConfiguration(dict):
    object_lock_enabled: str = pulumi.output_property("objectLockEnabled")
    """
    Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
    """
    rule: Optional['outputs.BucketObjectLockConfigurationRule'] = pulumi.output_property("rule")
    """
    The Object Lock rule in place for this bucket.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketObjectLockConfigurationRule(dict):
    default_retention: 'outputs.BucketObjectLockConfigurationRuleDefaultRetention' = pulumi.output_property("defaultRetention")
    """
    The default retention period that you want to apply to new objects placed in this bucket.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketObjectLockConfigurationRuleDefaultRetention(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    The number of days that you want to specify for the default retention period.
    """
    mode: str = pulumi.output_property("mode")
    """
    The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
    """
    years: Optional[float] = pulumi.output_property("years")
    """
    The number of years that you want to specify for the default retention period.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfiguration(dict):
    role: str = pulumi.output_property("role")
    """
    The ARN of the IAM role for Amazon S3 to assume when replicating the objects.
    """
    rules: List['outputs.BucketReplicationConfigurationRule'] = pulumi.output_property("rules")
    """
    Specifies the rules managing the replication (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRule(dict):
    destination: 'outputs.BucketReplicationConfigurationRuleDestination' = pulumi.output_property("destination")
    """
    Specifies the destination for the rule (documented below).
    """
    filter: Optional['outputs.BucketReplicationConfigurationRuleFilter'] = pulumi.output_property("filter")
    """
    Filter that identifies subset of objects to which the replication rule applies (documented below).
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Unique identifier for the rule.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object keyname prefix identifying one or more objects to which the rule applies.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    is optional (with a default value of `0`) but must be unique between multiple rules
    """
    source_selection_criteria: Optional['outputs.BucketReplicationConfigurationRuleSourceSelectionCriteria'] = pulumi.output_property("sourceSelectionCriteria")
    """
    Specifies special object selection criteria (documented below).
    """
    status: str = pulumi.output_property("status")
    """
    The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRuleDestination(dict):
    access_control_translation: Optional['outputs.BucketReplicationConfigurationRuleDestinationAccessControlTranslation'] = pulumi.output_property("accessControlTranslation")
    """
    Specifies the overrides to use for object owners on replication. Must be used in conjunction with `account_id` owner override configuration.
    """
    account_id: Optional[str] = pulumi.output_property("accountId")
    """
    The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `access_control_translation` override configuration.
    """
    bucket: str = pulumi.output_property("bucket")
    """
    The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
    """
    replica_kms_key_id: Optional[str] = pulumi.output_property("replicaKmsKeyId")
    """
    Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
    `sse_kms_encrypted_objects` source selection criteria.
    """
    storage_class: Optional[str] = pulumi.output_property("storageClass")
    """
    The class of storage used to store the object. Can be `STANDARD`, `REDUCED_REDUNDANCY`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRuleDestinationAccessControlTranslation(dict):
    owner: str = pulumi.output_property("owner")
    """
    The override value for the owner on replicated objects. Currently only `Destination` is supported.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRuleFilter(dict):
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Object keyname prefix that identifies subset of objects to which the rule applies.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    A map of tags that identifies subset of objects to which the rule applies.
    The rule applies only to objects having all the tags in its tagset.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRuleSourceSelectionCriteria(dict):
    sse_kms_encrypted_objects: Optional['outputs.BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects'] = pulumi.output_property("sseKmsEncryptedObjects")
    """
    Match SSE-KMS encrypted objects (documented below). If specified, `replica_kms_key_id`
    in `destination` must be specified as well.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Boolean which indicates if this criteria is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketServerSideEncryptionConfiguration(dict):
    rule: 'outputs.BucketServerSideEncryptionConfigurationRule' = pulumi.output_property("rule")
    """
    A single object for server-side encryption by default configuration. (documented below)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketServerSideEncryptionConfigurationRule(dict):
    apply_server_side_encryption_by_default: 'outputs.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault' = pulumi.output_property("applyServerSideEncryptionByDefault")
    """
    A single object for setting server-side encryption by default. (documented below)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault(dict):
    kms_master_key_id: Optional[str] = pulumi.output_property("kmsMasterKeyId")
    """
    The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sse_algorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sse_algorithm` is `aws:kms`.
    """
    sse_algorithm: str = pulumi.output_property("sseAlgorithm")
    """
    The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketVersioning(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
    """
    mfa_delete: Optional[bool] = pulumi.output_property("mfaDelete")
    """
    Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BucketWebsite(dict):
    error_document: Optional[str] = pulumi.output_property("errorDocument")
    """
    An absolute path to the document to return in case of a 4XX error.
    """
    index_document: Optional[str] = pulumi.output_property("indexDocument")
    """
    Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
    """
    redirect_all_requests_to: Optional[str] = pulumi.output_property("redirectAllRequestsTo")
    """
    A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
    """
    routing_rules: Optional[str] = pulumi.output_property("routingRules")
    """
    A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
    describing redirect behavior and when redirects are applied.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventoryDestination(dict):
    bucket: 'outputs.InventoryDestinationBucket' = pulumi.output_property("bucket")
    """
    The S3 bucket configuration where inventory results are published (documented below).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventoryDestinationBucket(dict):
    account_id: Optional[str] = pulumi.output_property("accountId")
    """
    The ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
    """
    bucket_arn: str = pulumi.output_property("bucketArn")
    """
    The Amazon S3 bucket ARN of the destination.
    """
    encryption: Optional['outputs.InventoryDestinationBucketEncryption'] = pulumi.output_property("encryption")
    """
    Contains the type of server-side encryption to use to encrypt the inventory (documented below).
    """
    format: str = pulumi.output_property("format")
    """
    Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The prefix that is prepended to all inventory results.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventoryDestinationBucketEncryption(dict):
    sse_kms: Optional['outputs.InventoryDestinationBucketEncryptionSseKms'] = pulumi.output_property("sseKms")
    """
    Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
    """
    sse_s3: Optional['outputs.InventoryDestinationBucketEncryptionSseS3'] = pulumi.output_property("sseS3")
    """
    Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventoryDestinationBucketEncryptionSseKms(dict):
    key_id: str = pulumi.output_property("keyId")
    """
    The ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventoryDestinationBucketEncryptionSseS3(dict):
    pass

@pulumi.output_type
class InventoryFilter(dict):
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The prefix that an object must have to be included in the inventory results.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InventorySchedule(dict):
    frequency: str = pulumi.output_property("frequency")
    """
    Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


