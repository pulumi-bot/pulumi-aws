# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Bucket']


class Bucket(pulumi.CustomResource):
    acceleration_status: pulumi.Output[str] = pulumi.output_property("accelerationStatus")
    """
    Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
    """
    acl: pulumi.Output[Optional[str]] = pulumi.output_property("acl")
    """
    The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Defaults to "private".  Conflicts with `grant`.
    """
    arn: pulumi.Output[str] = pulumi.output_property("arn")
    """
    The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
    """
    bucket: pulumi.Output[str] = pulumi.output_property("bucket")
    """
    The name of the bucket. If omitted, this provider will assign a random, unique name.
    """
    bucket_domain_name: pulumi.Output[str] = pulumi.output_property("bucketDomainName")
    """
    The bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
    """
    bucket_prefix: pulumi.Output[Optional[str]] = pulumi.output_property("bucketPrefix")
    """
    Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
    """
    bucket_regional_domain_name: pulumi.Output[str] = pulumi.output_property("bucketRegionalDomainName")
    """
    The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
    """
    cors_rules: pulumi.Output[Optional[List['outputs.BucketCorsRule']]] = pulumi.output_property("corsRules")
    """
    A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
    """
    force_destroy: pulumi.Output[Optional[bool]] = pulumi.output_property("forceDestroy")
    """
    A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
    """
    grants: pulumi.Output[Optional[List['outputs.BucketGrant']]] = pulumi.output_property("grants")
    """
    An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
    """
    hosted_zone_id: pulumi.Output[str] = pulumi.output_property("hostedZoneId")
    """
    The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
    """
    lifecycle_rules: pulumi.Output[Optional[List['outputs.BucketLifecycleRule']]] = pulumi.output_property("lifecycleRules")
    """
    A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
    """
    loggings: pulumi.Output[Optional[List['outputs.BucketLogging']]] = pulumi.output_property("loggings")
    """
    A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
    """
    object_lock_configuration: pulumi.Output[Optional['outputs.BucketObjectLockConfiguration']] = pulumi.output_property("objectLockConfiguration")
    """
    A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
    """
    policy: pulumi.Output[Optional[str]] = pulumi.output_property("policy")
    """
    A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
    """
    region: pulumi.Output[str] = pulumi.output_property("region")
    """
    If specified, the AWS region this bucket should reside in. Otherwise, the region used by the callee.
    """
    replication_configuration: pulumi.Output[Optional['outputs.BucketReplicationConfiguration']] = pulumi.output_property("replicationConfiguration")
    """
    A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
    """
    request_payer: pulumi.Output[str] = pulumi.output_property("requestPayer")
    """
    Specifies who should bear the cost of Amazon S3 data transfer.
    Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
    the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
    developer guide for more information.
    """
    server_side_encryption_configuration: pulumi.Output[Optional['outputs.BucketServerSideEncryptionConfiguration']] = pulumi.output_property("serverSideEncryptionConfiguration")
    """
    A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    A mapping of tags to assign to the bucket.
    """
    versioning: pulumi.Output['outputs.BucketVersioning'] = pulumi.output_property("versioning")
    """
    A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
    """
    website: pulumi.Output[Optional['outputs.BucketWebsite']] = pulumi.output_property("website")
    """
    A website object (documented below).
    """
    website_domain: pulumi.Output[str] = pulumi.output_property("websiteDomain")
    """
    The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
    """
    website_endpoint: pulumi.Output[str] = pulumi.output_property("websiteEndpoint")
    """
    The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, acceleration_status: Optional[pulumi.Input[str]] = None, acl: Optional[pulumi.Input[str]] = None, arn: Optional[pulumi.Input[str]] = None, bucket: Optional[pulumi.Input[str]] = None, bucket_prefix: Optional[pulumi.Input[str]] = None, cors_rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]]] = None, force_destroy: Optional[pulumi.Input[bool]] = None, grants: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketGrantArgs']]]]] = None, hosted_zone_id: Optional[pulumi.Input[str]] = None, lifecycle_rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]]] = None, loggings: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLoggingArgs']]]]] = None, object_lock_configuration: Optional[pulumi.Input[pulumi.InputType['BucketObjectLockConfigurationArgs']]] = None, policy: Optional[pulumi.Input[str]] = None, region: Optional[pulumi.Input[str]] = None, replication_configuration: Optional[pulumi.Input[pulumi.InputType['BucketReplicationConfigurationArgs']]] = None, request_payer: Optional[pulumi.Input[str]] = None, server_side_encryption_configuration: Optional[pulumi.Input[pulumi.InputType['BucketServerSideEncryptionConfigurationArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, versioning: Optional[pulumi.Input[pulumi.InputType['BucketVersioningArgs']]] = None, website: Optional[pulumi.Input[pulumi.InputType['BucketWebsiteArgs']]] = None, website_domain: Optional[pulumi.Input[str]] = None, website_endpoint: Optional[pulumi.Input[str]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides a S3 bucket resource.

        ## Example Usage
        ### Private Bucket w/ Tags

        ```python
        import pulumi
        import pulumi_aws as aws

        bucket = aws.s3.Bucket("bucket",
            acl="private",
            tags={
                "Environment": "Dev",
                "Name": "My bucket",
            })
        ```
        ### Static Website Hosting

        ```python
        import pulumi
        import pulumi_aws as aws

        bucket = aws.s3.Bucket("bucket",
            acl="public-read",
            policy=(lambda path: open(path).read())("policy.json"),
            website={
                "errorDocument": "error.html",
                "indexDocument": "index.html",
                "routingRules": \"\"\"[{
            "Condition": {
                "KeyPrefixEquals": "docs/"
            },
            "Redirect": {
                "ReplaceKeyPrefixWith": "documents/"
            }
        }]

        \"\"\",
            })
        ```
        ### Using CORS

        ```python
        import pulumi
        import pulumi_aws as aws

        bucket = aws.s3.Bucket("bucket",
            acl="public-read",
            cors_rules=[{
                "allowedHeaders": ["*"],
                "allowedMethods": [
                    "PUT",
                    "POST",
                ],
                "allowedOrigins": ["https://s3-website-test.mydomain.com"],
                "exposeHeaders": ["ETag"],
                "maxAgeSeconds": 3000,
            }])
        ```
        ### Using versioning

        ```python
        import pulumi
        import pulumi_aws as aws

        bucket = aws.s3.Bucket("bucket",
            acl="private",
            versioning={
                "enabled": True,
            })
        ```
        ### Enable Logging

        ```python
        import pulumi
        import pulumi_aws as aws

        log_bucket = aws.s3.Bucket("logBucket", acl="log-delivery-write")
        bucket = aws.s3.Bucket("bucket",
            acl="private",
            loggings=[{
                "targetBucket": log_bucket.id,
                "targetPrefix": "log/",
            }])
        ```
        ### Using object lifecycle

        ```python
        import pulumi
        import pulumi_aws as aws

        bucket = aws.s3.Bucket("bucket",
            acl="private",
            lifecycle_rules=[
                {
                    "enabled": True,
                    "expiration": {
                        "days": 90,
                    },
                    "id": "log",
                    "prefix": "log/",
                    "tags": {
                        "autoclean": "true",
                        "rule": "log",
                    },
                    "transitions": [
                        {
                            "days": 30,
                            "storage_class": "STANDARD_IA",
                        },
                        {
                            "days": 60,
                            "storage_class": "GLACIER",
                        },
                    ],
                },
                {
                    "enabled": True,
                    "expiration": {
                        "date": "2016-01-12",
                    },
                    "id": "tmp",
                    "prefix": "tmp/",
                },
            ])
        versioning_bucket = aws.s3.Bucket("versioningBucket",
            acl="private",
            lifecycle_rules=[{
                "enabled": True,
                "noncurrentVersionExpiration": {
                    "days": 90,
                },
                "noncurrentVersionTransitions": [
                    {
                        "days": 30,
                        "storage_class": "STANDARD_IA",
                    },
                    {
                        "days": 60,
                        "storage_class": "GLACIER",
                    },
                ],
                "prefix": "config/",
            }],
            versioning={
                "enabled": True,
            })
        ```
        ### Using replication configuration

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_pulumi as pulumi

        central = pulumi.providers.Aws("central", region="eu-central-1")
        replication_role = aws.iam.Role("replicationRole", assume_role_policy=\"\"\"{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Effect": "Allow",
              "Sid": ""
            }
          ]
        }

        \"\"\")
        destination = aws.s3.Bucket("destination",
            region="eu-west-1",
            versioning={
                "enabled": True,
            })
        bucket = aws.s3.Bucket("bucket",
            acl="private",
            region="eu-central-1",
            replication_configuration={
                "role": replication_role.arn,
                "rules": [{
                    "destination": {
                        "bucket": destination.arn,
                        "storage_class": "STANDARD",
                    },
                    "id": "foobar",
                    "prefix": "foo",
                    "status": "Enabled",
                }],
            },
            versioning={
                "enabled": True,
            },
            opts=ResourceOptions(provider="aws.central"))
        replication_policy = aws.iam.Policy("replicationPolicy", policy=pulumi.Output.all(bucket.arn, bucket.arn, destination.arn).apply(lambda bucketArn, bucketArn1, destinationArn: f\"\"\"{{
          "Version": "2012-10-17",
          "Statement": [
            {{
              "Action": [
                "s3:GetReplicationConfiguration",
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": [
                "{bucket_arn}"
              ]
            }},
            {{
              "Action": [
                "s3:GetObjectVersion",
                "s3:GetObjectVersionAcl"
              ],
              "Effect": "Allow",
              "Resource": [
                "{bucket_arn1}/*"
              ]
            }},
            {{
              "Action": [
                "s3:ReplicateObject",
                "s3:ReplicateDelete"
              ],
              "Effect": "Allow",
              "Resource": "{destination_arn}/*"
            }}
          ]
        }}

        \"\"\"))
        replication_role_policy_attachment = aws.iam.RolePolicyAttachment("replicationRolePolicyAttachment",
            policy_arn=replication_policy.arn,
            role=replication_role.name)
        ```
        ### Enable Default Server Side Encryption

        ```python
        import pulumi
        import pulumi_aws as aws

        mykey = aws.kms.Key("mykey",
            deletion_window_in_days=10,
            description="This key is used to encrypt bucket objects")
        mybucket = aws.s3.Bucket("mybucket", server_side_encryption_configuration={
            "rule": {
                "applyServerSideEncryptionByDefault": {
                    "kms_master_key_id": mykey.arn,
                    "sseAlgorithm": "aws:kms",
                },
            },
        })
        ```
        ### Using ACL policy grants

        ```python
        import pulumi
        import pulumi_aws as aws

        current_user = aws.get_canonical_user_id()
        bucket = aws.s3.Bucket("bucket", grants=[
            {
                "id": current_user.id,
                "permissions": ["FULL_CONTROL"],
                "type": "CanonicalUser",
            },
            {
                "permissions": [
                    "READ",
                    "WRITE",
                ],
                "type": "Group",
                "uri": "http://acs.amazonaws.com/groups/s3/LogDelivery",
            },
        ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acceleration_status: Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
        :param pulumi.Input[str] acl: The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Defaults to "private".  Conflicts with `grant`.
        :param pulumi.Input[str] arn: The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
        :param pulumi.Input[str] bucket: The name of the bucket. If omitted, this provider will assign a random, unique name.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketGrantArgs']]]] grants: An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
        :param pulumi.Input[str] hosted_zone_id: The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLoggingArgs']]]] loggings: A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
        :param pulumi.Input[pulumi.InputType['BucketObjectLockConfigurationArgs']] object_lock_configuration: A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
        :param pulumi.Input[str] policy: A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
        :param pulumi.Input[str] region: If specified, the AWS region this bucket should reside in. Otherwise, the region used by the callee.
        :param pulumi.Input[pulumi.InputType['BucketReplicationConfigurationArgs']] replication_configuration: A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
        :param pulumi.Input[str] request_payer: Specifies who should bear the cost of Amazon S3 data transfer.
               Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
               the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
               developer guide for more information.
        :param pulumi.Input[pulumi.InputType['BucketServerSideEncryptionConfigurationArgs']] server_side_encryption_configuration: A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the bucket.
        :param pulumi.Input[pulumi.InputType['BucketVersioningArgs']] versioning: A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
        :param pulumi.Input[pulumi.InputType['BucketWebsiteArgs']] website: A website object (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acceleration_status'] = acceleration_status
            __props__['acl'] = acl
            __props__['arn'] = arn
            __props__['bucket'] = bucket
            __props__['bucket_prefix'] = bucket_prefix
            __props__['cors_rules'] = cors_rules
            __props__['force_destroy'] = force_destroy
            __props__['grants'] = grants
            __props__['hosted_zone_id'] = hosted_zone_id
            __props__['lifecycle_rules'] = lifecycle_rules
            __props__['loggings'] = loggings
            __props__['object_lock_configuration'] = object_lock_configuration
            __props__['policy'] = policy
            __props__['region'] = region
            __props__['replication_configuration'] = replication_configuration
            __props__['request_payer'] = request_payer
            __props__['server_side_encryption_configuration'] = server_side_encryption_configuration
            __props__['tags'] = tags
            __props__['versioning'] = versioning
            __props__['website'] = website
            __props__['website_domain'] = website_domain
            __props__['website_endpoint'] = website_endpoint
            __props__['bucket_domain_name'] = None
            __props__['bucket_regional_domain_name'] = None
        super(Bucket, __self__).__init__(
            'aws:s3/bucket:Bucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, acceleration_status: Optional[pulumi.Input[str]] = None, acl: Optional[pulumi.Input[str]] = None, arn: Optional[pulumi.Input[str]] = None, bucket: Optional[pulumi.Input[str]] = None, bucket_domain_name: Optional[pulumi.Input[str]] = None, bucket_prefix: Optional[pulumi.Input[str]] = None, bucket_regional_domain_name: Optional[pulumi.Input[str]] = None, cors_rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]]] = None, force_destroy: Optional[pulumi.Input[bool]] = None, grants: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketGrantArgs']]]]] = None, hosted_zone_id: Optional[pulumi.Input[str]] = None, lifecycle_rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]]] = None, loggings: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLoggingArgs']]]]] = None, object_lock_configuration: Optional[pulumi.Input[pulumi.InputType['BucketObjectLockConfigurationArgs']]] = None, policy: Optional[pulumi.Input[str]] = None, region: Optional[pulumi.Input[str]] = None, replication_configuration: Optional[pulumi.Input[pulumi.InputType['BucketReplicationConfigurationArgs']]] = None, request_payer: Optional[pulumi.Input[str]] = None, server_side_encryption_configuration: Optional[pulumi.Input[pulumi.InputType['BucketServerSideEncryptionConfigurationArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, versioning: Optional[pulumi.Input[pulumi.InputType['BucketVersioningArgs']]] = None, website: Optional[pulumi.Input[pulumi.InputType['BucketWebsiteArgs']]] = None, website_domain: Optional[pulumi.Input[str]] = None, website_endpoint: Optional[pulumi.Input[str]] = None) -> 'Bucket':
        """
        Get an existing Bucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acceleration_status: Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
        :param pulumi.Input[str] acl: The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Defaults to "private".  Conflicts with `grant`.
        :param pulumi.Input[str] arn: The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
        :param pulumi.Input[str] bucket: The name of the bucket. If omitted, this provider will assign a random, unique name.
        :param pulumi.Input[str] bucket_domain_name: The bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
        :param pulumi.Input[str] bucket_regional_domain_name: The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketGrantArgs']]]] grants: An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
        :param pulumi.Input[str] hosted_zone_id: The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['BucketLoggingArgs']]]] loggings: A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
        :param pulumi.Input[pulumi.InputType['BucketObjectLockConfigurationArgs']] object_lock_configuration: A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
        :param pulumi.Input[str] policy: A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
        :param pulumi.Input[str] region: If specified, the AWS region this bucket should reside in. Otherwise, the region used by the callee.
        :param pulumi.Input[pulumi.InputType['BucketReplicationConfigurationArgs']] replication_configuration: A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
        :param pulumi.Input[str] request_payer: Specifies who should bear the cost of Amazon S3 data transfer.
               Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
               the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
               developer guide for more information.
        :param pulumi.Input[pulumi.InputType['BucketServerSideEncryptionConfigurationArgs']] server_side_encryption_configuration: A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the bucket.
        :param pulumi.Input[pulumi.InputType['BucketVersioningArgs']] versioning: A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
        :param pulumi.Input[pulumi.InputType['BucketWebsiteArgs']] website: A website object (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acceleration_status"] = acceleration_status
        __props__["acl"] = acl
        __props__["arn"] = arn
        __props__["bucket"] = bucket
        __props__["bucket_domain_name"] = bucket_domain_name
        __props__["bucket_prefix"] = bucket_prefix
        __props__["bucket_regional_domain_name"] = bucket_regional_domain_name
        __props__["cors_rules"] = cors_rules
        __props__["force_destroy"] = force_destroy
        __props__["grants"] = grants
        __props__["hosted_zone_id"] = hosted_zone_id
        __props__["lifecycle_rules"] = lifecycle_rules
        __props__["loggings"] = loggings
        __props__["object_lock_configuration"] = object_lock_configuration
        __props__["policy"] = policy
        __props__["region"] = region
        __props__["replication_configuration"] = replication_configuration
        __props__["request_payer"] = request_payer
        __props__["server_side_encryption_configuration"] = server_side_encryption_configuration
        __props__["tags"] = tags
        __props__["versioning"] = versioning
        __props__["website"] = website
        __props__["website_domain"] = website_domain
        __props__["website_endpoint"] = website_endpoint
        return Bucket(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

