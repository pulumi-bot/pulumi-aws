# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Record']


class Record(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordAliasArgs']]]]] = None,
                 allow_overwrite: Optional[pulumi.Input[bool]] = None,
                 failover_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordFailoverRoutingPolicyArgs']]]]] = None,
                 geolocation_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordGeolocationRoutingPolicyArgs']]]]] = None,
                 health_check_id: Optional[pulumi.Input[str]] = None,
                 latency_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordLatencyRoutingPolicyArgs']]]]] = None,
                 multivalue_answer_routing_policy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 records: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 set_identifier: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weighted_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordWeightedRoutingPolicyArgs']]]]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Record resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['aliases'] = aliases
            __props__['allow_overwrite'] = allow_overwrite
            __props__['failover_routing_policies'] = failover_routing_policies
            __props__['geolocation_routing_policies'] = geolocation_routing_policies
            __props__['health_check_id'] = health_check_id
            __props__['latency_routing_policies'] = latency_routing_policies
            __props__['multivalue_answer_routing_policy'] = multivalue_answer_routing_policy
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['records'] = records
            __props__['set_identifier'] = set_identifier
            __props__['ttl'] = ttl
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['weighted_routing_policies'] = weighted_routing_policies
            if zone_id is None:
                raise TypeError("Missing required property 'zone_id'")
            __props__['zone_id'] = zone_id
            __props__['fqdn'] = None
        super(Record, __self__).__init__(
            'aws:route53/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aliases: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordAliasArgs']]]]] = None,
            allow_overwrite: Optional[pulumi.Input[bool]] = None,
            failover_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordFailoverRoutingPolicyArgs']]]]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            geolocation_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordGeolocationRoutingPolicyArgs']]]]] = None,
            health_check_id: Optional[pulumi.Input[str]] = None,
            latency_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordLatencyRoutingPolicyArgs']]]]] = None,
            multivalue_answer_routing_policy: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            records: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            set_identifier: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[float]] = None,
            type: Optional[pulumi.Input[str]] = None,
            weighted_routing_policies: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RecordWeightedRoutingPolicyArgs']]]]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["aliases"] = aliases
        __props__["allow_overwrite"] = allow_overwrite
        __props__["failover_routing_policies"] = failover_routing_policies
        __props__["fqdn"] = fqdn
        __props__["geolocation_routing_policies"] = geolocation_routing_policies
        __props__["health_check_id"] = health_check_id
        __props__["latency_routing_policies"] = latency_routing_policies
        __props__["multivalue_answer_routing_policy"] = multivalue_answer_routing_policy
        __props__["name"] = name
        __props__["records"] = records
        __props__["set_identifier"] = set_identifier
        __props__["ttl"] = ttl
        __props__["type"] = type
        __props__["weighted_routing_policies"] = weighted_routing_policies
        __props__["zone_id"] = zone_id
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Output[Optional[List['outputs.RecordAlias']]]:
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="allowOverwrite")
    def allow_overwrite(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "allow_overwrite")

    @property
    @pulumi.getter(name="failoverRoutingPolicies")
    def failover_routing_policies(self) -> pulumi.Output[Optional[List['outputs.RecordFailoverRoutingPolicy']]]:
        return pulumi.get(self, "failover_routing_policies")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="geolocationRoutingPolicies")
    def geolocation_routing_policies(self) -> pulumi.Output[Optional[List['outputs.RecordGeolocationRoutingPolicy']]]:
        return pulumi.get(self, "geolocation_routing_policies")

    @property
    @pulumi.getter(name="healthCheckId")
    def health_check_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "health_check_id")

    @property
    @pulumi.getter(name="latencyRoutingPolicies")
    def latency_routing_policies(self) -> pulumi.Output[Optional[List['outputs.RecordLatencyRoutingPolicy']]]:
        return pulumi.get(self, "latency_routing_policies")

    @property
    @pulumi.getter(name="multivalueAnswerRoutingPolicy")
    def multivalue_answer_routing_policy(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "multivalue_answer_routing_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def records(self) -> pulumi.Output[Optional[List[str]]]:
        return pulumi.get(self, "records")

    @property
    @pulumi.getter(name="setIdentifier")
    def set_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "set_identifier")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="weightedRoutingPolicies")
    def weighted_routing_policies(self) -> pulumi.Output[Optional[List['outputs.RecordWeightedRoutingPolicy']]]:
        return pulumi.get(self, "weighted_routing_policies")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "zone_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

