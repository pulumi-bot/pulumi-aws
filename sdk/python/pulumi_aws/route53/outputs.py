# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'RecordAlias',
    'RecordFailoverRoutingPolicy',
    'RecordGeolocationRoutingPolicy',
    'RecordLatencyRoutingPolicy',
    'RecordWeightedRoutingPolicy',
    'ResolverEndpointIpAddress',
    'ResolverRuleTargetIp',
    'ZoneVpc',
]

@pulumi.output_type
class RecordAlias(dict):
    evaluate_target_health: bool = pulumi.output_property("evaluateTargetHealth")
    """
    Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
    """
    name: str = pulumi.output_property("name")
    """
    DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
    """
    zone_id: str = pulumi.output_property("zoneId")
    """
    Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecordFailoverRoutingPolicy(dict):
    type: str = pulumi.output_property("type")
    """
    `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecordGeolocationRoutingPolicy(dict):
    continent: Optional[str] = pulumi.output_property("continent")
    """
    A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
    """
    country: Optional[str] = pulumi.output_property("country")
    """
    A two-character country code or `*` to indicate a default resource record set.
    """
    subdivision: Optional[str] = pulumi.output_property("subdivision")
    """
    A subdivision code for a country.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecordLatencyRoutingPolicy(dict):
    region: str = pulumi.output_property("region")
    """
    An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RecordWeightedRoutingPolicy(dict):
    weight: float = pulumi.output_property("weight")
    """
    A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResolverEndpointIpAddress(dict):
    ip: Optional[str] = pulumi.output_property("ip")
    """
    The IP address in the subnet that you want to use for DNS queries.
    """
    ip_id: Optional[str] = pulumi.output_property("ipId")
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ID of the subnet that contains the IP address.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResolverRuleTargetIp(dict):
    ip: str = pulumi.output_property("ip")
    """
    One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The port at `ip` that you want to forward DNS queries to. Default value is `53`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ZoneVpc(dict):
    vpc_id: str = pulumi.output_property("vpcId")
    """
    ID of the VPC to associate.
    """
    vpc_region: Optional[str] = pulumi.output_property("vpcRegion")
    """
    Region of the VPC to associate. Defaults to AWS provider region.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


