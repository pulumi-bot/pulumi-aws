# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AmiCopyEbsBlockDevice',
    'AmiCopyEphemeralBlockDevice',
    'AmiEbsBlockDevice',
    'AmiEphemeralBlockDevice',
    'AmiFromInstanceEbsBlockDevice',
    'AmiFromInstanceEphemeralBlockDevice',
    'DefaultNetworkAclEgress',
    'DefaultNetworkAclIngress',
    'DefaultRouteTableRoute',
    'DefaultSecurityGroupEgress',
    'DefaultSecurityGroupIngress',
    'FleetLaunchTemplateConfig',
    'FleetLaunchTemplateConfigLaunchTemplateSpecification',
    'FleetLaunchTemplateConfigOverride',
    'FleetOnDemandOptions',
    'FleetSpotOptions',
    'FleetTargetCapacitySpecification',
    'InstanceCreditSpecification',
    'InstanceEbsBlockDevice',
    'InstanceEphemeralBlockDevice',
    'InstanceMetadataOptions',
    'InstanceNetworkInterface',
    'InstanceRootBlockDevice',
    'LaunchConfigurationEbsBlockDevice',
    'LaunchConfigurationEphemeralBlockDevice',
    'LaunchConfigurationRootBlockDevice',
    'LaunchTemplateBlockDeviceMapping',
    'LaunchTemplateBlockDeviceMappingEbs',
    'LaunchTemplateCapacityReservationSpecification',
    'LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget',
    'LaunchTemplateCpuOptions',
    'LaunchTemplateCreditSpecification',
    'LaunchTemplateElasticGpuSpecification',
    'LaunchTemplateElasticInferenceAccelerator',
    'LaunchTemplateHibernationOptions',
    'LaunchTemplateIamInstanceProfile',
    'LaunchTemplateInstanceMarketOptions',
    'LaunchTemplateInstanceMarketOptionsSpotOptions',
    'LaunchTemplateLicenseSpecification',
    'LaunchTemplateMetadataOptions',
    'LaunchTemplateMonitoring',
    'LaunchTemplateNetworkInterface',
    'LaunchTemplatePlacement',
    'LaunchTemplateTagSpecification',
    'NetworkAclEgress',
    'NetworkAclIngress',
    'NetworkInterfaceAttachment',
    'PeeringConnectionOptionsAccepter',
    'PeeringConnectionOptionsRequester',
    'RouteTableRoute',
    'SecurityGroupEgress',
    'SecurityGroupIngress',
    'SpotFleetRequestLaunchSpecification',
    'SpotFleetRequestLaunchSpecificationEbsBlockDevice',
    'SpotFleetRequestLaunchSpecificationEphemeralBlockDevice',
    'SpotFleetRequestLaunchSpecificationRootBlockDevice',
    'SpotFleetRequestLaunchTemplateConfig',
    'SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification',
    'SpotFleetRequestLaunchTemplateConfigOverride',
    'SpotInstanceRequestCreditSpecification',
    'SpotInstanceRequestEbsBlockDevice',
    'SpotInstanceRequestEphemeralBlockDevice',
    'SpotInstanceRequestMetadataOptions',
    'SpotInstanceRequestNetworkInterface',
    'SpotInstanceRequestRootBlockDevice',
    'TrafficMirrorFilterRuleDestinationPortRange',
    'TrafficMirrorFilterRuleSourcePortRange',
    'VpcEndpointDnsEntry',
    'VpcPeeringConnectionAccepter',
    'VpcPeeringConnectionAccepterAccepter',
    'VpcPeeringConnectionAccepterRequester',
    'VpcPeeringConnectionRequester',
    'VpnConnectionRoute',
    'VpnConnectionVgwTelemetry',
    'GetCoipPoolFilter',
    'GetCoipPoolsFilter',
    'GetCustomerGatewayFilter',
    'GetInstanceCreditSpecification',
    'GetInstanceEbsBlockDevice',
    'GetInstanceEphemeralBlockDevice',
    'GetInstanceFilter',
    'GetInstanceMetadataOption',
    'GetInstanceRootBlockDevice',
    'GetInstanceTypeOfferingFilter',
    'GetInstanceTypeOfferingsFilter',
    'GetInstancesFilter',
    'GetInternetGatewayAttachment',
    'GetInternetGatewayFilter',
    'GetLaunchConfigurationEbsBlockDevice',
    'GetLaunchConfigurationEphemeralBlockDevice',
    'GetLaunchConfigurationRootBlockDevice',
    'GetLaunchTemplateBlockDeviceMapping',
    'GetLaunchTemplateBlockDeviceMappingEb',
    'GetLaunchTemplateCreditSpecification',
    'GetLaunchTemplateElasticGpuSpecification',
    'GetLaunchTemplateFilter',
    'GetLaunchTemplateHibernationOption',
    'GetLaunchTemplateIamInstanceProfile',
    'GetLaunchTemplateInstanceMarketOption',
    'GetLaunchTemplateInstanceMarketOptionSpotOption',
    'GetLaunchTemplateMetadataOption',
    'GetLaunchTemplateMonitoring',
    'GetLaunchTemplateNetworkInterface',
    'GetLaunchTemplatePlacement',
    'GetLaunchTemplateTagSpecification',
    'GetLocalGatewayFilter',
    'GetLocalGatewayRouteTableFilter',
    'GetLocalGatewayRouteTablesFilter',
    'GetLocalGatewayVirtualInterfaceFilter',
    'GetLocalGatewayVirtualInterfaceGroupFilter',
    'GetLocalGatewayVirtualInterfaceGroupsFilter',
    'GetLocalGatewaysFilter',
    'GetNatGatewayFilter',
    'GetNetworkAclsFilter',
    'GetNetworkInterfaceAssociation',
    'GetNetworkInterfaceAttachment',
    'GetNetworkInterfaceFilter',
    'GetNetworkInterfacesFilter',
    'GetRouteTableAssociation',
    'GetRouteTableFilter',
    'GetRouteTableRoute',
    'GetRouteTablesFilter',
    'GetSecurityGroupFilter',
    'GetSecurityGroupsFilter',
    'GetSubnetFilter',
    'GetSubnetIdsFilter',
    'GetVpcCidrBlockAssociation',
    'GetVpcDhcpOptionsFilter',
    'GetVpcEndpointDnsEntry',
    'GetVpcEndpointFilter',
    'GetVpcEndpointServiceFilter',
    'GetVpcFilter',
    'GetVpcPeeringConnectionFilter',
    'GetVpcsFilter',
    'GetVpnGatewayFilter',
]

@pulumi.output_type
class AmiCopyEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Boolean controlling whether the EBS volumes created to
    support each created instance will be deleted once that instance is terminated.
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    Number of I/O operations per second the
    created volumes will support.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The id of an EBS snapshot that will be used to initialize the created
    EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
    snapshot.
    """
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of created volumes in GiB.
    If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
    as the selected snapshot.
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of EBS volume to create. Can be one of "standard" (the
    default), "io1" or "gp2".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiCopyEphemeralBlockDevice(dict):
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    A name for the ephemeral device, of the form "ephemeralN" where
    *N* is a volume number starting from zero.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Boolean controlling whether the EBS volumes created to
    support each created instance will be deleted once that instance is terminated.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    Number of I/O operations per second the
    created volumes will support.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The id of an EBS snapshot that will be used to initialize the created
    EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
    snapshot.
    """
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of created volumes in GiB.
    If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
    as the selected snapshot.
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of EBS volume to create. Can be one of "standard" (the
    default), "io1" or "gp2".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    virtual_name: str = pulumi.output_property("virtualName")
    """
    A name for the ephemeral device, of the form "ephemeralN" where
    *N* is a volume number starting from zero.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiFromInstanceEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Boolean controlling whether the EBS volumes created to
    support each created instance will be deleted once that instance is terminated.
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    Number of I/O operations per second the
    created volumes will support.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The id of an EBS snapshot that will be used to initialize the created
    EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
    snapshot.
    """
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of created volumes in GiB.
    If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
    as the selected snapshot.
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of EBS volume to create. Can be one of "standard" (the
    default), "io1" or "gp2".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiFromInstanceEphemeralBlockDevice(dict):
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The path at which the device is exposed to created instances.
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    A name for the ephemeral device, of the form "ephemeralN" where
    *N* is a volume number starting from zero.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultNetworkAclEgress(dict):
    action: str = pulumi.output_property("action")
    """
    The action to take.
    """
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block to match. This must be a
    valid network mask.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The from port to match.
    """
    icmp_code: Optional[float] = pulumi.output_property("icmpCode")
    """
    The ICMP type code to be used. Default 0.
    """
    icmp_type: Optional[float] = pulumi.output_property("icmpType")
    """
    The ICMP type to be used. Default 0.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The IPv6 CIDR block.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol to match. If using the -1 'all'
    protocol, you must specify a from and to port of 0.
    """
    rule_no: float = pulumi.output_property("ruleNo")
    """
    The rule number. Used for ordering.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The to port to match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultNetworkAclIngress(dict):
    action: str = pulumi.output_property("action")
    """
    The action to take.
    """
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block to match. This must be a
    valid network mask.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The from port to match.
    """
    icmp_code: Optional[float] = pulumi.output_property("icmpCode")
    """
    The ICMP type code to be used. Default 0.
    """
    icmp_type: Optional[float] = pulumi.output_property("icmpType")
    """
    The ICMP type to be used. Default 0.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The IPv6 CIDR block.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol to match. If using the -1 'all'
    protocol, you must specify a from and to port of 0.
    """
    rule_no: float = pulumi.output_property("ruleNo")
    """
    The rule number. Used for ordering.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The to port to match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultRouteTableRoute(dict):
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block of the route.
    """
    egress_only_gateway_id: Optional[str] = pulumi.output_property("egressOnlyGatewayId")
    """
    Identifier of a VPC Egress Only Internet Gateway.
    """
    gateway_id: Optional[str] = pulumi.output_property("gatewayId")
    """
    Identifier of a VPC internet gateway or a virtual private gateway.
    """
    instance_id: Optional[str] = pulumi.output_property("instanceId")
    """
    Identifier of an EC2 instance.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The Ipv6 CIDR block of the route
    """
    nat_gateway_id: Optional[str] = pulumi.output_property("natGatewayId")
    """
    Identifier of a VPC NAT gateway.
    """
    network_interface_id: Optional[str] = pulumi.output_property("networkInterfaceId")
    """
    Identifier of an EC2 network interface.
    """
    transit_gateway_id: Optional[str] = pulumi.output_property("transitGatewayId")
    """
    Identifier of an EC2 Transit Gateway.
    """
    vpc_peering_connection_id: Optional[str] = pulumi.output_property("vpcPeeringConnectionId")
    """
    Identifier of a VPC peering connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultSecurityGroupEgress(dict):
    cidr_blocks: Optional[List[str]] = pulumi.output_property("cidrBlocks")
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the security group
    """
    from_port: float = pulumi.output_property("fromPort")
    ipv6_cidr_blocks: Optional[List[str]] = pulumi.output_property("ipv6CidrBlocks")
    prefix_list_ids: Optional[List[str]] = pulumi.output_property("prefixListIds")
    protocol: str = pulumi.output_property("protocol")
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    self: Optional[bool] = pulumi.output_property("self")
    to_port: float = pulumi.output_property("toPort")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultSecurityGroupIngress(dict):
    cidr_blocks: Optional[List[str]] = pulumi.output_property("cidrBlocks")
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the security group
    """
    from_port: float = pulumi.output_property("fromPort")
    ipv6_cidr_blocks: Optional[List[str]] = pulumi.output_property("ipv6CidrBlocks")
    prefix_list_ids: Optional[List[str]] = pulumi.output_property("prefixListIds")
    protocol: str = pulumi.output_property("protocol")
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    self: Optional[bool] = pulumi.output_property("self")
    to_port: float = pulumi.output_property("toPort")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfig(dict):
    launch_template_specification: 'outputs.FleetLaunchTemplateConfigLaunchTemplateSpecification' = pulumi.output_property("launchTemplateSpecification")
    """
    Nested argument containing EC2 Launch Template to use. Defined below.
    """
    overrides: Optional[List['outputs.FleetLaunchTemplateConfigOverride']] = pulumi.output_property("overrides")
    """
    Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfigLaunchTemplateSpecification(dict):
    launch_template_id: Optional[str] = pulumi.output_property("launchTemplateId")
    """
    ID of the launch template.
    """
    launch_template_name: Optional[str] = pulumi.output_property("launchTemplateName")
    """
    Name of the launch template.
    """
    version: str = pulumi.output_property("version")
    """
    Version number of the launch template.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfigOverride(dict):
    availability_zone: Optional[str] = pulumi.output_property("availabilityZone")
    """
    Availability Zone in which to launch the instances.
    """
    instance_type: Optional[str] = pulumi.output_property("instanceType")
    """
    Instance type.
    """
    max_price: Optional[str] = pulumi.output_property("maxPrice")
    """
    Maximum price per unit hour that you are willing to pay for a Spot Instance.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    Priority for the launch template override. If `on_demand_options` `allocation_strategy` is set to `prioritized`, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    ID of the subnet in which to launch the instances.
    """
    weighted_capacity: Optional[float] = pulumi.output_property("weightedCapacity")
    """
    Number of units provided by the specified instance type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetOnDemandOptions(dict):
    allocation_strategy: Optional[str] = pulumi.output_property("allocationStrategy")
    """
    How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetSpotOptions(dict):
    allocation_strategy: Optional[str] = pulumi.output_property("allocationStrategy")
    """
    How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
    """
    instance_interruption_behavior: Optional[str] = pulumi.output_property("instanceInterruptionBehavior")
    """
    Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
    """
    instance_pools_to_use_count: Optional[float] = pulumi.output_property("instancePoolsToUseCount")
    """
    Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetTargetCapacitySpecification(dict):
    default_target_capacity_type: str = pulumi.output_property("defaultTargetCapacityType")
    """
    Default target capacity type. Valid values: `on-demand`, `spot`.
    """
    on_demand_target_capacity: Optional[float] = pulumi.output_property("onDemandTargetCapacity")
    """
    The number of On-Demand units to request.
    """
    spot_target_capacity: Optional[float] = pulumi.output_property("spotTargetCapacity")
    """
    The number of Spot units to request.
    """
    total_target_capacity: float = pulumi.output_property("totalTargetCapacity")
    """
    The number of units to request, filled using `default_target_capacity_type`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceCreditSpecification(dict):
    cpu_credits: Optional[str] = pulumi.output_property("cpuCredits")
    """
    The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether the volume should be destroyed
    on instance termination (Default: `true`).
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The name of the device to mount.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Enables [EBS
    encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    on the volume (Default: `false`). Cannot be used with `snapshot_id`. Must be configured to perform drift detection.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The amount of provisioned
    [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
    This must be set with a `volume_type` of `"io1"`.
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The Snapshot ID to mount.
    """
    volume_id: Optional[str] = pulumi.output_property("volumeId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of the volume in gibibytes (GiB).
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of volume. Can be `"standard"`, `"gp2"`,
    or `"io1"`. (Default: `"gp2"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The name of the block device to mount on the instance.
    """
    no_device: Optional[bool] = pulumi.output_property("noDevice")
    """
    Suppresses the specified device included in the AMI's block device mapping.
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    The [Instance Store Device
    Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
    (e.g. `"ephemeral0"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceMetadataOptions(dict):
    http_endpoint: Optional[str] = pulumi.output_property("httpEndpoint")
    """
    Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
    """
    http_put_response_hop_limit: Optional[float] = pulumi.output_property("httpPutResponseHopLimit")
    """
    The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
    """
    http_tokens: Optional[str] = pulumi.output_property("httpTokens")
    """
    Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceNetworkInterface(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
    """
    device_index: float = pulumi.output_property("deviceIndex")
    """
    The integer index of the network interface attachment. Limited by instance type.
    """
    network_interface_id: str = pulumi.output_property("networkInterfaceId")
    """
    The ID of the network interface to attach.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceRootBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether the volume should be destroyed
    on instance termination (Default: `true`).
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The name of the device to mount.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The amount of provisioned
    [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
    This is only valid for `volume_type` of `"io1"`, and must be specified if
    using that type
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    """
    volume_id: Optional[str] = pulumi.output_property("volumeId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of the volume in gibibytes (GiB).
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"sc1"`, or `"st1"`. (Default: `"standard"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    device_name: str = pulumi.output_property("deviceName")
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    no_device: Optional[bool] = pulumi.output_property("noDevice")
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    virtual_name: str = pulumi.output_property("virtualName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationRootBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateBlockDeviceMapping(dict):
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The name of the device to mount.
    """
    ebs: Optional['outputs.LaunchTemplateBlockDeviceMappingEbs'] = pulumi.output_property("ebs")
    """
    Configure EBS volume properties.
    """
    no_device: Optional[str] = pulumi.output_property("noDevice")
    """
    Suppresses the specified device included in the AMI's block device mapping.
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    The [Instance Store Device
    Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
    (e.g. `"ephemeral0"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateBlockDeviceMappingEbs(dict):
    delete_on_termination: Optional[str] = pulumi.output_property("deleteOnTermination")
    """
    Whether the volume should be destroyed on instance termination. Defaults to `false` if not set. See [Preserving Amazon EBS Volumes on Instance Termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination) for more information.
    """
    encrypted: Optional[str] = pulumi.output_property("encrypted")
    """
    Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    on the volume (Default: `false`). Cannot be used with `snapshot_id`.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The amount of provisioned
    [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
    This must be set with a `volume_type` of `"io1"`.
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume.
    `encrypted` must be set to `true` when this is set.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The Snapshot ID to mount.
    """
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of the volume in gigabytes.
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of volume. Can be `"standard"`, `"gp2"`, or `"io1"`. (Default: `"standard"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCapacityReservationSpecification(dict):
    capacity_reservation_preference: Optional[str] = pulumi.output_property("capacityReservationPreference")
    """
    Indicates the instance's Capacity Reservation preferences. Can be `open` or `none`. (Default `none`).
    """
    capacity_reservation_target: Optional['outputs.LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget'] = pulumi.output_property("capacityReservationTarget")
    """
    Used to target a specific Capacity Reservation:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget(dict):
    capacity_reservation_id: Optional[str] = pulumi.output_property("capacityReservationId")
    """
    The ID of the Capacity Reservation to target.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCpuOptions(dict):
    core_count: Optional[float] = pulumi.output_property("coreCount")
    """
    The number of CPU cores for the instance.
    """
    threads_per_core: Optional[float] = pulumi.output_property("threadsPerCore")
    """
    The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1.
    Otherwise, specify the default value of 2.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCreditSpecification(dict):
    cpu_credits: Optional[str] = pulumi.output_property("cpuCredits")
    """
    The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateElasticGpuSpecification(dict):
    type: str = pulumi.output_property("type")
    """
    The [Elastic GPU Type](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-gpus.html#elastic-gpus-basics)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateElasticInferenceAccelerator(dict):
    type: str = pulumi.output_property("type")
    """
    Accelerator type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateHibernationOptions(dict):
    configured: bool = pulumi.output_property("configured")
    """
    If set to `true`, the launched EC2 instance will hibernation enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateIamInstanceProfile(dict):
    arn: Optional[str] = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) of the instance profile.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the instance profile.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateInstanceMarketOptions(dict):
    market_type: Optional[str] = pulumi.output_property("marketType")
    """
    The market type. Can be `spot`.
    """
    spot_options: Optional['outputs.LaunchTemplateInstanceMarketOptionsSpotOptions'] = pulumi.output_property("spotOptions")
    """
    The options for [Spot Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateInstanceMarketOptionsSpotOptions(dict):
    block_duration_minutes: Optional[float] = pulumi.output_property("blockDurationMinutes")
    """
    The required duration in minutes. This value must be a multiple of 60.
    """
    instance_interruption_behavior: Optional[str] = pulumi.output_property("instanceInterruptionBehavior")
    """
    The behavior when a Spot Instance is interrupted. Can be `hibernate`,
    `stop`, or `terminate`. (Default: `terminate`).
    """
    max_price: Optional[str] = pulumi.output_property("maxPrice")
    """
    The maximum hourly price you're willing to pay for the Spot Instances.
    """
    spot_instance_type: Optional[str] = pulumi.output_property("spotInstanceType")
    """
    The Spot Instance request type. Can be `one-time`, or `persistent`.
    """
    valid_until: Optional[str] = pulumi.output_property("validUntil")
    """
    The end date of the request.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateLicenseSpecification(dict):
    license_configuration_arn: str = pulumi.output_property("licenseConfigurationArn")
    """
    ARN of the license configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateMetadataOptions(dict):
    http_endpoint: Optional[str] = pulumi.output_property("httpEndpoint")
    """
    Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
    """
    http_put_response_hop_limit: Optional[float] = pulumi.output_property("httpPutResponseHopLimit")
    """
    The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
    """
    http_tokens: Optional[str] = pulumi.output_property("httpTokens")
    """
    Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateMonitoring(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    If `true`, the launched EC2 instance will have detailed monitoring enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateNetworkInterface(dict):
    associate_public_ip_address: Optional[str] = pulumi.output_property("associatePublicIpAddress")
    """
    Associate a public ip address with the network interface.  Boolean value.
    """
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether the network interface should be destroyed on instance termination. Defaults to `false` if not set.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of the network interface.
    """
    device_index: Optional[float] = pulumi.output_property("deviceIndex")
    """
    The integer index of the network interface attachment.
    """
    ipv4_address_count: Optional[float] = pulumi.output_property("ipv4AddressCount")
    """
    The number of secondary private IPv4 addresses to assign to a network interface. Conflicts with `ipv4_addresses`
    """
    ipv4_addresses: Optional[List[str]] = pulumi.output_property("ipv4Addresses")
    """
    One or more private IPv4 addresses to associate. Conflicts with `ipv4_address_count`
    """
    ipv6_address_count: Optional[float] = pulumi.output_property("ipv6AddressCount")
    """
    The number of IPv6 addresses to assign to a network interface. Conflicts with `ipv6_addresses`
    """
    ipv6_addresses: Optional[List[str]] = pulumi.output_property("ipv6Addresses")
    """
    One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Conflicts with `ipv6_address_count`
    """
    network_interface_id: Optional[str] = pulumi.output_property("networkInterfaceId")
    """
    The ID of the network interface to attach.
    """
    private_ip_address: Optional[str] = pulumi.output_property("privateIpAddress")
    """
    The primary private IPv4 address.
    """
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    """
    A list of security group IDs to associate.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The VPC Subnet ID to associate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplatePlacement(dict):
    affinity: Optional[str] = pulumi.output_property("affinity")
    """
    The affinity setting for an instance on a Dedicated Host.
    """
    availability_zone: Optional[str] = pulumi.output_property("availabilityZone")
    """
    The Availability Zone for the instance.
    """
    group_name: Optional[str] = pulumi.output_property("groupName")
    """
    The name of the placement group for the instance.
    """
    host_id: Optional[str] = pulumi.output_property("hostId")
    """
    The ID of the Dedicated Host for the instance.
    """
    partition_number: Optional[float] = pulumi.output_property("partitionNumber")
    """
    The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
    """
    spread_domain: Optional[str] = pulumi.output_property("spreadDomain")
    """
    Reserved for future use.
    """
    tenancy: Optional[str] = pulumi.output_property("tenancy")
    """
    The tenancy of the instance (if the instance is running in a VPC). Can be `default`, `dedicated`, or `host`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateTagSpecification(dict):
    resource_type: Optional[str] = pulumi.output_property("resourceType")
    """
    The type of resource to tag. Valid values are `instance` and `volume`.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    A map of tags to assign to the resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkAclEgress(dict):
    action: str = pulumi.output_property("action")
    """
    The action to take.
    """
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block to match. This must be a
    valid network mask.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The from port to match.
    """
    icmp_code: Optional[float] = pulumi.output_property("icmpCode")
    """
    The ICMP type code to be used. Default 0.
    """
    icmp_type: Optional[float] = pulumi.output_property("icmpType")
    """
    The ICMP type to be used. Default 0.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The IPv6 CIDR block.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol to match. If using the -1 'all'
    protocol, you must specify a from and to port of 0.
    """
    rule_no: float = pulumi.output_property("ruleNo")
    """
    The rule number. Used for ordering.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The to port to match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkAclIngress(dict):
    action: str = pulumi.output_property("action")
    """
    The action to take.
    """
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block to match. This must be a
    valid network mask.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The from port to match.
    """
    icmp_code: Optional[float] = pulumi.output_property("icmpCode")
    """
    The ICMP type code to be used. Default 0.
    """
    icmp_type: Optional[float] = pulumi.output_property("icmpType")
    """
    The ICMP type to be used. Default 0.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The IPv6 CIDR block.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol to match. If using the -1 'all'
    protocol, you must specify a from and to port of 0.
    """
    rule_no: float = pulumi.output_property("ruleNo")
    """
    The rule number. Used for ordering.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The to port to match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkInterfaceAttachment(dict):
    attachment_id: Optional[str] = pulumi.output_property("attachmentId")
    device_index: float = pulumi.output_property("deviceIndex")
    """
    Integer to define the devices index.
    """
    instance: str = pulumi.output_property("instance")
    """
    ID of the instance to attach to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PeeringConnectionOptionsAccepter(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Allow a local linked EC2-Classic instance to communicate
    with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
    to the remote VPC. This option is not supported for inter-region VPC peering.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Allow a local VPC to resolve public DNS hostnames to
    private IP addresses when queried from instances in the peer VPC.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Allow a local VPC to communicate with a linked EC2-Classic
    instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
    connection. This option is not supported for inter-region VPC peering.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PeeringConnectionOptionsRequester(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Allow a local linked EC2-Classic instance to communicate
    with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
    to the remote VPC. This option is not supported for inter-region VPC peering.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Allow a local VPC to resolve public DNS hostnames to
    private IP addresses when queried from instances in the peer VPC.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Allow a local VPC to communicate with a linked EC2-Classic
    instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
    connection. This option is not supported for inter-region VPC peering.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteTableRoute(dict):
    cidr_block: Optional[str] = pulumi.output_property("cidrBlock")
    """
    The CIDR block of the route.
    """
    egress_only_gateway_id: Optional[str] = pulumi.output_property("egressOnlyGatewayId")
    """
    Identifier of a VPC Egress Only Internet Gateway.
    """
    gateway_id: Optional[str] = pulumi.output_property("gatewayId")
    """
    Identifier of a VPC internet gateway or a virtual private gateway.
    """
    instance_id: Optional[str] = pulumi.output_property("instanceId")
    """
    Identifier of an EC2 instance.
    """
    ipv6_cidr_block: Optional[str] = pulumi.output_property("ipv6CidrBlock")
    """
    The Ipv6 CIDR block of the route.
    """
    nat_gateway_id: Optional[str] = pulumi.output_property("natGatewayId")
    """
    Identifier of a VPC NAT gateway.
    """
    network_interface_id: Optional[str] = pulumi.output_property("networkInterfaceId")
    """
    Identifier of an EC2 network interface.
    """
    transit_gateway_id: Optional[str] = pulumi.output_property("transitGatewayId")
    """
    Identifier of an EC2 Transit Gateway.
    """
    vpc_peering_connection_id: Optional[str] = pulumi.output_property("vpcPeeringConnectionId")
    """
    Identifier of a VPC peering connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityGroupEgress(dict):
    cidr_blocks: Optional[List[str]] = pulumi.output_property("cidrBlocks")
    """
    List of CIDR blocks.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this egress rule.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The start port (or ICMP type number if protocol is "icmp")
    """
    ipv6_cidr_blocks: Optional[List[str]] = pulumi.output_property("ipv6CidrBlocks")
    """
    List of IPv6 CIDR blocks.
    """
    prefix_list_ids: Optional[List[str]] = pulumi.output_property("prefixListIds")
    """
    List of prefix list IDs (for allowing access to VPC endpoints)
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol. If you select a protocol of
    "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "from_port" and "to_port" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
    """
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    """
    List of security group Group Names if using
    EC2-Classic, or Group IDs if using a VPC.
    """
    self: Optional[bool] = pulumi.output_property("self")
    """
    If true, the security group itself will be added as
    a source to this egress rule.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The end range port (or ICMP code if protocol is "icmp").
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityGroupIngress(dict):
    cidr_blocks: Optional[List[str]] = pulumi.output_property("cidrBlocks")
    """
    List of CIDR blocks.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this egress rule.
    """
    from_port: float = pulumi.output_property("fromPort")
    """
    The start port (or ICMP type number if protocol is "icmp")
    """
    ipv6_cidr_blocks: Optional[List[str]] = pulumi.output_property("ipv6CidrBlocks")
    """
    List of IPv6 CIDR blocks.
    """
    prefix_list_ids: Optional[List[str]] = pulumi.output_property("prefixListIds")
    """
    List of prefix list IDs (for allowing access to VPC endpoints)
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol. If you select a protocol of
    "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "from_port" and "to_port" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
    """
    security_groups: Optional[List[str]] = pulumi.output_property("securityGroups")
    """
    List of security group Group Names if using
    EC2-Classic, or Group IDs if using a VPC.
    """
    self: Optional[bool] = pulumi.output_property("self")
    """
    If true, the security group itself will be added as
    a source to this egress rule.
    """
    to_port: float = pulumi.output_property("toPort")
    """
    The end range port (or ICMP code if protocol is "icmp").
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecification(dict):
    ami: str = pulumi.output_property("ami")
    associate_public_ip_address: Optional[bool] = pulumi.output_property("associatePublicIpAddress")
    availability_zone: Optional[str] = pulumi.output_property("availabilityZone")
    """
    The availability zone in which to place the request.
    """
    ebs_block_devices: Optional[List['outputs.SpotFleetRequestLaunchSpecificationEbsBlockDevice']] = pulumi.output_property("ebsBlockDevices")
    ebs_optimized: Optional[bool] = pulumi.output_property("ebsOptimized")
    ephemeral_block_devices: Optional[List['outputs.SpotFleetRequestLaunchSpecificationEphemeralBlockDevice']] = pulumi.output_property("ephemeralBlockDevices")
    iam_instance_profile: Optional[str] = pulumi.output_property("iamInstanceProfile")
    iam_instance_profile_arn: Optional[str] = pulumi.output_property("iamInstanceProfileArn")
    instance_type: str = pulumi.output_property("instanceType")
    """
    The type of instance to request.
    """
    key_name: Optional[str] = pulumi.output_property("keyName")
    monitoring: Optional[bool] = pulumi.output_property("monitoring")
    placement_group: Optional[str] = pulumi.output_property("placementGroup")
    placement_tenancy: Optional[str] = pulumi.output_property("placementTenancy")
    root_block_devices: Optional[List['outputs.SpotFleetRequestLaunchSpecificationRootBlockDevice']] = pulumi.output_property("rootBlockDevices")
    spot_price: Optional[str] = pulumi.output_property("spotPrice")
    """
    The maximum spot bid for this override request.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The subnet in which to launch the requested instance.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    A map of tags to assign to the resource.
    """
    user_data: Optional[str] = pulumi.output_property("userData")
    vpc_security_group_ids: Optional[List[str]] = pulumi.output_property("vpcSecurityGroupIds")
    weighted_capacity: Optional[str] = pulumi.output_property("weightedCapacity")
    """
    The capacity added to the fleet by a fulfilled request.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    device_name: str = pulumi.output_property("deviceName")
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    virtual_name: str = pulumi.output_property("virtualName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationRootBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    iops: Optional[float] = pulumi.output_property("iops")
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    volume_type: Optional[str] = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfig(dict):
    launch_template_specification: 'outputs.SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification' = pulumi.output_property("launchTemplateSpecification")
    """
    Launch template specification. See Launch Template Specification below for more details.
    """
    overrides: Optional[List['outputs.SpotFleetRequestLaunchTemplateConfigOverride']] = pulumi.output_property("overrides")
    """
    One or more override configurations. See Overrides below for more details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the launch template. Conflicts with `name`.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the launch template. Conflicts with `id`.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    Template version. Unlike the autoscaling equivalent, does not support `$Latest` or `$Default`, so use the launch_template resource's attribute, e.g. `"${aws_launch_template.foo.latest_version}"`. It will use the default version if omitted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfigOverride(dict):
    availability_zone: Optional[str] = pulumi.output_property("availabilityZone")
    """
    The availability zone in which to place the request.
    """
    instance_type: Optional[str] = pulumi.output_property("instanceType")
    """
    The type of instance to request.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    The priority for the launch template override. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
    """
    spot_price: Optional[str] = pulumi.output_property("spotPrice")
    """
    The maximum spot bid for this override request.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The subnet in which to launch the requested instance.
    """
    weighted_capacity: Optional[float] = pulumi.output_property("weightedCapacity")
    """
    The capacity added to the fleet by a fulfilled request.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestCreditSpecification(dict):
    cpu_credits: Optional[str] = pulumi.output_property("cpuCredits")
    """
    The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestEbsBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether the volume should be destroyed
    on instance termination (Default: `true`).
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The name of the device to mount.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Enables [EBS
    encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    on the volume (Default: `false`). Cannot be used with `snapshot_id`. Must be configured to perform drift detection.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The amount of provisioned
    [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
    This must be set with a `volume_type` of `"io1"`.
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    """
    snapshot_id: Optional[str] = pulumi.output_property("snapshotId")
    """
    The Snapshot ID to mount.
    """
    volume_id: Optional[str] = pulumi.output_property("volumeId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of the volume in gibibytes (GiB).
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of volume. Can be `"standard"`, `"gp2"`,
    or `"io1"`. (Default: `"gp2"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The name of the block device to mount on the instance.
    """
    no_device: Optional[bool] = pulumi.output_property("noDevice")
    """
    Suppresses the specified device included in the AMI's block device mapping.
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    The [Instance Store Device
    Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
    (e.g. `"ephemeral0"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestMetadataOptions(dict):
    http_endpoint: Optional[str] = pulumi.output_property("httpEndpoint")
    """
    Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
    """
    http_put_response_hop_limit: Optional[float] = pulumi.output_property("httpPutResponseHopLimit")
    """
    The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
    """
    http_tokens: Optional[str] = pulumi.output_property("httpTokens")
    """
    Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestNetworkInterface(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
    """
    device_index: float = pulumi.output_property("deviceIndex")
    """
    The integer index of the network interface attachment. Limited by instance type.
    """
    network_interface_id: str = pulumi.output_property("networkInterfaceId")
    """
    The ID of the network interface to attach.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestRootBlockDevice(dict):
    delete_on_termination: Optional[bool] = pulumi.output_property("deleteOnTermination")
    """
    Whether the volume should be destroyed
    on instance termination (Default: `true`).
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    The name of the device to mount.
    """
    encrypted: Optional[bool] = pulumi.output_property("encrypted")
    """
    Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The amount of provisioned
    [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
    This is only valid for `volume_type` of `"io1"`, and must be specified if
    using that type
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    """
    volume_id: Optional[str] = pulumi.output_property("volumeId")
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of the volume in gibibytes (GiB).
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"sc1"`, or `"st1"`. (Default: `"standard"`).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficMirrorFilterRuleDestinationPortRange(dict):
    from_port: Optional[float] = pulumi.output_property("fromPort")
    """
    Starting port of the range
    """
    to_port: Optional[float] = pulumi.output_property("toPort")
    """
    Ending port of the range
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficMirrorFilterRuleSourcePortRange(dict):
    from_port: Optional[float] = pulumi.output_property("fromPort")
    """
    Starting port of the range
    """
    to_port: Optional[float] = pulumi.output_property("toPort")
    """
    Ending port of the range
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcEndpointDnsEntry(dict):
    dns_name: Optional[str] = pulumi.output_property("dnsName")
    """
    The DNS name.
    """
    hosted_zone_id: Optional[str] = pulumi.output_property("hostedZoneId")
    """
    The ID of the private hosted zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepter(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Allow a local linked EC2-Classic instance to communicate
    with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
    to the remote VPC.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Allow a local VPC to resolve public DNS hostnames to
    private IP addresses when queried from instances in the peer VPC. This is
    [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
    inter-region VPC peering.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Allow a local VPC to communicate with a linked EC2-Classic
    instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
    connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepterAccepter(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Indicates whether a local ClassicLink connection can communicate
    with the peer VPC over the VPC Peering Connection.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Indicates whether a local VPC can resolve public DNS hostnames to
    private IP addresses when queried from instances in a peer VPC.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Indicates whether a local VPC can communicate with a ClassicLink
    connection in the peer VPC over the VPC Peering Connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepterRequester(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Indicates whether a local ClassicLink connection can communicate
    with the peer VPC over the VPC Peering Connection.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Indicates whether a local VPC can resolve public DNS hostnames to
    private IP addresses when queried from instances in a peer VPC.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Indicates whether a local VPC can communicate with a ClassicLink
    connection in the peer VPC over the VPC Peering Connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionRequester(dict):
    allow_classic_link_to_remote_vpc: Optional[bool] = pulumi.output_property("allowClassicLinkToRemoteVpc")
    """
    Allow a local linked EC2-Classic instance to communicate
    with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
    to the remote VPC.
    """
    allow_remote_vpc_dns_resolution: Optional[bool] = pulumi.output_property("allowRemoteVpcDnsResolution")
    """
    Allow a local VPC to resolve public DNS hostnames to
    private IP addresses when queried from instances in the peer VPC. This is
    [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
    inter-region VPC peering.
    """
    allow_vpc_to_remote_classic_link: Optional[bool] = pulumi.output_property("allowVpcToRemoteClassicLink")
    """
    Allow a local VPC to communicate with a linked EC2-Classic
    instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
    connection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnConnectionRoute(dict):
    destination_cidr_block: Optional[str] = pulumi.output_property("destinationCidrBlock")
    source: Optional[str] = pulumi.output_property("source")
    state: Optional[str] = pulumi.output_property("state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnConnectionVgwTelemetry(dict):
    accepted_route_count: Optional[float] = pulumi.output_property("acceptedRouteCount")
    last_status_change: Optional[str] = pulumi.output_property("lastStatusChange")
    outside_ip_address: Optional[str] = pulumi.output_property("outsideIpAddress")
    status: Optional[str] = pulumi.output_property("status")
    status_message: Optional[str] = pulumi.output_property("statusMessage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCoipPoolFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A COIP Pool will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCoipPoolsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A COIP Pool will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCustomerGatewayFilter(dict):
    name: str = pulumi.output_property("name")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceCreditSpecification(dict):
    cpu_credits: str = pulumi.output_property("cpuCredits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceEbsBlockDevice(dict):
    delete_on_termination: bool = pulumi.output_property("deleteOnTermination")
    """
    If the root block device will be deleted on termination.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The physical name of the device.
    """
    encrypted: bool = pulumi.output_property("encrypted")
    """
    If the EBS volume is encrypted.
    """
    iops: float = pulumi.output_property("iops")
    """
    `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
    """
    kms_key_id: str = pulumi.output_property("kmsKeyId")
    snapshot_id: str = pulumi.output_property("snapshotId")
    """
    The ID of the snapshot.
    """
    volume_id: str = pulumi.output_property("volumeId")
    volume_size: float = pulumi.output_property("volumeSize")
    """
    The size of the volume, in GiB.
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    The type of the volume.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The physical name of the device.
    """
    no_device: Optional[bool] = pulumi.output_property("noDevice")
    """
    Whether the specified device included in the device mapping was suppressed or not (Boolean).
    """
    virtual_name: Optional[str] = pulumi.output_property("virtualName")
    """
    The virtual device name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceFilter(dict):
    name: str = pulumi.output_property("name")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceMetadataOption(dict):
    http_endpoint: str = pulumi.output_property("httpEndpoint")
    """
    The state of the metadata service: `enabled`, `disabled`.
    """
    http_put_response_hop_limit: float = pulumi.output_property("httpPutResponseHopLimit")
    """
    The desired HTTP PUT response hop limit for instance metadata requests.
    """
    http_tokens: str = pulumi.output_property("httpTokens")
    """
    If session tokens are required: `optional`, `required`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceRootBlockDevice(dict):
    delete_on_termination: bool = pulumi.output_property("deleteOnTermination")
    """
    If the root block device will be deleted on termination.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The physical name of the device.
    """
    encrypted: bool = pulumi.output_property("encrypted")
    """
    If the EBS volume is encrypted.
    """
    iops: float = pulumi.output_property("iops")
    """
    `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
    """
    kms_key_id: str = pulumi.output_property("kmsKeyId")
    volume_id: str = pulumi.output_property("volumeId")
    volume_size: float = pulumi.output_property("volumeSize")
    """
    The size of the volume, in GiB.
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    The type of the volume.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceTypeOfferingFilter(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of one or more values for the filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceTypeOfferingsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of one or more values for the filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstancesFilter(dict):
    name: str = pulumi.output_property("name")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInternetGatewayAttachment(dict):
    state: str = pulumi.output_property("state")
    """
    The current state of the attachment between the gateway and the VPC. Present only if a VPC is attached
    """
    vpc_id: str = pulumi.output_property("vpcId")
    """
    The ID of an attached VPC.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInternetGatewayFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    An Internet Gateway will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationEbsBlockDevice(dict):
    delete_on_termination: bool = pulumi.output_property("deleteOnTermination")
    """
    Whether the EBS Volume will be deleted on instance termination.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    The Name of the device.
    """
    encrypted: bool = pulumi.output_property("encrypted")
    """
    Whether the volume is Encrypted.
    """
    iops: float = pulumi.output_property("iops")
    """
    The provisioned IOPs of the volume.
    """
    snapshot_id: str = pulumi.output_property("snapshotId")
    """
    The Snapshot ID of the mount.
    """
    volume_size: float = pulumi.output_property("volumeSize")
    """
    The Size of the volume.
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    The Type of the volume.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationEphemeralBlockDevice(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    The Name of the device.
    """
    virtual_name: str = pulumi.output_property("virtualName")
    """
    The Virtual Name of the device.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationRootBlockDevice(dict):
    delete_on_termination: bool = pulumi.output_property("deleteOnTermination")
    """
    Whether the EBS Volume will be deleted on instance termination.
    """
    encrypted: bool = pulumi.output_property("encrypted")
    """
    Whether the volume is Encrypted.
    """
    iops: float = pulumi.output_property("iops")
    """
    The provisioned IOPs of the volume.
    """
    volume_size: float = pulumi.output_property("volumeSize")
    """
    The Size of the volume.
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    The Type of the volume.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateBlockDeviceMapping(dict):
    device_name: str = pulumi.output_property("deviceName")
    ebs: List['outputs.GetLaunchTemplateBlockDeviceMappingEb'] = pulumi.output_property("ebs")
    no_device: str = pulumi.output_property("noDevice")
    virtual_name: str = pulumi.output_property("virtualName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateBlockDeviceMappingEb(dict):
    delete_on_termination: str = pulumi.output_property("deleteOnTermination")
    encrypted: str = pulumi.output_property("encrypted")
    iops: float = pulumi.output_property("iops")
    kms_key_id: str = pulumi.output_property("kmsKeyId")
    snapshot_id: str = pulumi.output_property("snapshotId")
    volume_size: float = pulumi.output_property("volumeSize")
    volume_type: str = pulumi.output_property("volumeType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateCreditSpecification(dict):
    cpu_credits: str = pulumi.output_property("cpuCredits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateElasticGpuSpecification(dict):
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateHibernationOption(dict):
    configured: bool = pulumi.output_property("configured")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateIamInstanceProfile(dict):
    arn: str = pulumi.output_property("arn")
    """
    Amazon Resource Name (ARN) of the launch template.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateInstanceMarketOption(dict):
    market_type: str = pulumi.output_property("marketType")
    spot_options: List['outputs.GetLaunchTemplateInstanceMarketOptionSpotOption'] = pulumi.output_property("spotOptions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateInstanceMarketOptionSpotOption(dict):
    block_duration_minutes: float = pulumi.output_property("blockDurationMinutes")
    instance_interruption_behavior: str = pulumi.output_property("instanceInterruptionBehavior")
    max_price: str = pulumi.output_property("maxPrice")
    spot_instance_type: str = pulumi.output_property("spotInstanceType")
    valid_until: str = pulumi.output_property("validUntil")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateMetadataOption(dict):
    http_endpoint: str = pulumi.output_property("httpEndpoint")
    """
    The state of the metadata service: `enabled`, `disabled`.
    """
    http_put_response_hop_limit: float = pulumi.output_property("httpPutResponseHopLimit")
    """
    The desired HTTP PUT response hop limit for instance metadata requests.
    """
    http_tokens: str = pulumi.output_property("httpTokens")
    """
    If session tokens are required: `optional`, `required`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateMonitoring(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateNetworkInterface(dict):
    associate_public_ip_address: Optional[bool] = pulumi.output_property("associatePublicIpAddress")
    delete_on_termination: bool = pulumi.output_property("deleteOnTermination")
    description: str = pulumi.output_property("description")
    """
    Description of the launch template.
    """
    device_index: float = pulumi.output_property("deviceIndex")
    ipv4_address_count: float = pulumi.output_property("ipv4AddressCount")
    ipv4_addresses: List[str] = pulumi.output_property("ipv4Addresses")
    ipv6_address_count: float = pulumi.output_property("ipv6AddressCount")
    ipv6_addresses: List[str] = pulumi.output_property("ipv6Addresses")
    network_interface_id: str = pulumi.output_property("networkInterfaceId")
    private_ip_address: str = pulumi.output_property("privateIpAddress")
    security_groups: List[str] = pulumi.output_property("securityGroups")
    subnet_id: str = pulumi.output_property("subnetId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplatePlacement(dict):
    affinity: str = pulumi.output_property("affinity")
    availability_zone: str = pulumi.output_property("availabilityZone")
    group_name: str = pulumi.output_property("groupName")
    host_id: str = pulumi.output_property("hostId")
    partition_number: float = pulumi.output_property("partitionNumber")
    spread_domain: str = pulumi.output_property("spreadDomain")
    tenancy: str = pulumi.output_property("tenancy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateTagSpecification(dict):
    resource_type: str = pulumi.output_property("resourceType")
    tags: Dict[str, str] = pulumi.output_property("tags")
    """
    A map of tags, each pair of which must exactly match a pair on the desired Launch Template.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Local Gateway will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayRouteTableFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A local gateway route table will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayRouteTablesFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Local Gateway Route Table will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceFilter(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the filter.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of one or more values for the filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceGroupFilter(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the filter.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of one or more values for the filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceGroupsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the filter.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of one or more values for the filter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewaysFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Local Gateway will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNatGatewayFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNatGateways.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    An Nat Gateway will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkAclsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkAcls.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPC will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceAssociation(dict):
    allocation_id: str = pulumi.output_property("allocationId")
    """
    The allocation ID.
    """
    association_id: str = pulumi.output_property("associationId")
    """
    The association ID.
    """
    ip_owner_id: str = pulumi.output_property("ipOwnerId")
    """
    The ID of the Elastic IP address owner.
    """
    public_dns_name: str = pulumi.output_property("publicDnsName")
    """
    The public DNS name.
    """
    public_ip: str = pulumi.output_property("publicIp")
    """
    The address of the Elastic IP address bound to the network interface.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceAttachment(dict):
    attachment_id: str = pulumi.output_property("attachmentId")
    device_index: float = pulumi.output_property("deviceIndex")
    instance_id: str = pulumi.output_property("instanceId")
    instance_owner_id: str = pulumi.output_property("instanceOwnerId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceFilter(dict):
    name: str = pulumi.output_property("name")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfacesFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkInterfaces.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableAssociation(dict):
    gateway_id: str = pulumi.output_property("gatewayId")
    """
    The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
    """
    main: bool = pulumi.output_property("main")
    """
    If the Association due to the Main Route Table.
    """
    route_table_association_id: str = pulumi.output_property("routeTableAssociationId")
    """
    The Association ID.
    """
    route_table_id: str = pulumi.output_property("routeTableId")
    """
    The id of the specific Route Table to retrieve.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The id of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Route Table will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableRoute(dict):
    cidr_block: str = pulumi.output_property("cidrBlock")
    """
    The CIDR block of the route.
    """
    egress_only_gateway_id: str = pulumi.output_property("egressOnlyGatewayId")
    """
    The ID of the Egress Only Internet Gateway.
    """
    gateway_id: str = pulumi.output_property("gatewayId")
    """
    The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
    """
    instance_id: str = pulumi.output_property("instanceId")
    """
    The EC2 instance ID.
    """
    ipv6_cidr_block: str = pulumi.output_property("ipv6CidrBlock")
    """
    The IPv6 CIDR block of the route.
    """
    nat_gateway_id: str = pulumi.output_property("natGatewayId")
    """
    The NAT Gateway ID.
    """
    network_interface_id: str = pulumi.output_property("networkInterfaceId")
    """
    The ID of the elastic network interface (eni) to use.
    """
    transit_gateway_id: str = pulumi.output_property("transitGatewayId")
    """
    The EC2 Transit Gateway ID.
    """
    vpc_peering_connection_id: str = pulumi.output_property("vpcPeeringConnectionId")
    """
    The VPC Peering ID.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTablesFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Route Table will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecurityGroupFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A Security Group will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecurityGroupsFilter(dict):
    name: str = pulumi.output_property("name")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSubnetFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
    For example, if matching against tag `Name`, use:
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A subnet will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSubnetIdsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
    For example, if matching against tag `Name`, use:
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    Subnet IDs will be selected if any one of the given values match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcCidrBlockAssociation(dict):
    association_id: str = pulumi.output_property("associationId")
    """
    The association ID for the the IPv4 CIDR block.
    """
    cidr_block: str = pulumi.output_property("cidrBlock")
    """
    The cidr block of the desired VPC.
    """
    state: str = pulumi.output_property("state")
    """
    The current state of the desired VPC.
    Can be either `"pending"` or `"available"`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcDhcpOptionsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values for filtering.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointDnsEntry(dict):
    dns_name: str = pulumi.output_property("dnsName")
    """
    The DNS name.
    """
    hosted_zone_id: str = pulumi.output_property("hostedZoneId")
    """
    The ID of the private hosted zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpoints.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPC Endpoint will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointServiceFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the filter field. Valid values can be found in the [EC2 DescribeVpcEndpointServices API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpointServices.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPC will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcPeeringConnectionFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPC Peering Connection will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcsFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPC will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpnGatewayFilter(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the field to filter by, as defined by
    [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnGateways.html).
    """
    values: List[str] = pulumi.output_property("values")
    """
    Set of values that are accepted for the given field.
    A VPN Gateway will be selected if any one of the given values matches.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


