# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AmiCopyEbsBlockDevice',
    'AmiCopyEphemeralBlockDevice',
    'AmiEbsBlockDevice',
    'AmiEphemeralBlockDevice',
    'AmiFromInstanceEbsBlockDevice',
    'AmiFromInstanceEphemeralBlockDevice',
    'DefaultNetworkAclEgress',
    'DefaultNetworkAclIngress',
    'DefaultRouteTableRoute',
    'DefaultSecurityGroupEgress',
    'DefaultSecurityGroupIngress',
    'FleetLaunchTemplateConfig',
    'FleetLaunchTemplateConfigLaunchTemplateSpecification',
    'FleetLaunchTemplateConfigOverride',
    'FleetOnDemandOptions',
    'FleetSpotOptions',
    'FleetTargetCapacitySpecification',
    'InstanceCreditSpecification',
    'InstanceEbsBlockDevice',
    'InstanceEphemeralBlockDevice',
    'InstanceMetadataOptions',
    'InstanceNetworkInterface',
    'InstanceRootBlockDevice',
    'LaunchConfigurationEbsBlockDevice',
    'LaunchConfigurationEphemeralBlockDevice',
    'LaunchConfigurationRootBlockDevice',
    'LaunchTemplateBlockDeviceMapping',
    'LaunchTemplateBlockDeviceMappingEbs',
    'LaunchTemplateCapacityReservationSpecification',
    'LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget',
    'LaunchTemplateCpuOptions',
    'LaunchTemplateCreditSpecification',
    'LaunchTemplateElasticGpuSpecification',
    'LaunchTemplateElasticInferenceAccelerator',
    'LaunchTemplateHibernationOptions',
    'LaunchTemplateIamInstanceProfile',
    'LaunchTemplateInstanceMarketOptions',
    'LaunchTemplateInstanceMarketOptionsSpotOptions',
    'LaunchTemplateLicenseSpecification',
    'LaunchTemplateMetadataOptions',
    'LaunchTemplateMonitoring',
    'LaunchTemplateNetworkInterface',
    'LaunchTemplatePlacement',
    'LaunchTemplateTagSpecification',
    'NetworkAclEgress',
    'NetworkAclIngress',
    'NetworkInterfaceAttachment',
    'PeeringConnectionOptionsAccepter',
    'PeeringConnectionOptionsRequester',
    'RouteTableRoute',
    'SecurityGroupEgress',
    'SecurityGroupIngress',
    'SpotFleetRequestLaunchSpecification',
    'SpotFleetRequestLaunchSpecificationEbsBlockDevice',
    'SpotFleetRequestLaunchSpecificationEphemeralBlockDevice',
    'SpotFleetRequestLaunchSpecificationRootBlockDevice',
    'SpotFleetRequestLaunchTemplateConfig',
    'SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification',
    'SpotFleetRequestLaunchTemplateConfigOverride',
    'SpotInstanceRequestCreditSpecification',
    'SpotInstanceRequestEbsBlockDevice',
    'SpotInstanceRequestEphemeralBlockDevice',
    'SpotInstanceRequestMetadataOptions',
    'SpotInstanceRequestNetworkInterface',
    'SpotInstanceRequestRootBlockDevice',
    'TrafficMirrorFilterRuleDestinationPortRange',
    'TrafficMirrorFilterRuleSourcePortRange',
    'VpcEndpointDnsEntry',
    'VpcPeeringConnectionAccepter',
    'VpcPeeringConnectionAccepterAccepter',
    'VpcPeeringConnectionAccepterRequester',
    'VpcPeeringConnectionRequester',
    'VpnConnectionRoute',
    'VpnConnectionVgwTelemetry',
    'GetCoipPoolFilter',
    'GetCoipPoolsFilter',
    'GetCustomerGatewayFilter',
    'GetInstanceCreditSpecification',
    'GetInstanceEbsBlockDevice',
    'GetInstanceEphemeralBlockDevice',
    'GetInstanceFilter',
    'GetInstanceMetadataOption',
    'GetInstanceRootBlockDevice',
    'GetInstanceTypeOfferingFilter',
    'GetInstanceTypeOfferingsFilter',
    'GetInstancesFilter',
    'GetInternetGatewayAttachment',
    'GetInternetGatewayFilter',
    'GetLaunchConfigurationEbsBlockDevice',
    'GetLaunchConfigurationEphemeralBlockDevice',
    'GetLaunchConfigurationRootBlockDevice',
    'GetLaunchTemplateBlockDeviceMapping',
    'GetLaunchTemplateBlockDeviceMappingEb',
    'GetLaunchTemplateCreditSpecification',
    'GetLaunchTemplateElasticGpuSpecification',
    'GetLaunchTemplateFilter',
    'GetLaunchTemplateHibernationOption',
    'GetLaunchTemplateIamInstanceProfile',
    'GetLaunchTemplateInstanceMarketOption',
    'GetLaunchTemplateInstanceMarketOptionSpotOption',
    'GetLaunchTemplateMetadataOption',
    'GetLaunchTemplateMonitoring',
    'GetLaunchTemplateNetworkInterface',
    'GetLaunchTemplatePlacement',
    'GetLaunchTemplateTagSpecification',
    'GetLocalGatewayFilter',
    'GetLocalGatewayRouteTableFilter',
    'GetLocalGatewayRouteTablesFilter',
    'GetLocalGatewayVirtualInterfaceFilter',
    'GetLocalGatewayVirtualInterfaceGroupFilter',
    'GetLocalGatewayVirtualInterfaceGroupsFilter',
    'GetLocalGatewaysFilter',
    'GetNatGatewayFilter',
    'GetNetworkAclsFilter',
    'GetNetworkInterfaceAssociation',
    'GetNetworkInterfaceAttachment',
    'GetNetworkInterfaceFilter',
    'GetNetworkInterfacesFilter',
    'GetRouteTableAssociation',
    'GetRouteTableFilter',
    'GetRouteTableRoute',
    'GetRouteTablesFilter',
    'GetSecurityGroupFilter',
    'GetSecurityGroupsFilter',
    'GetSubnetFilter',
    'GetSubnetIdsFilter',
    'GetVpcCidrBlockAssociation',
    'GetVpcDhcpOptionsFilter',
    'GetVpcEndpointDnsEntry',
    'GetVpcEndpointFilter',
    'GetVpcEndpointServiceFilter',
    'GetVpcFilter',
    'GetVpcPeeringConnectionFilter',
    'GetVpcsFilter',
    'GetVpnGatewayFilter',
]

@pulumi.output_type
class AmiCopyEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Boolean controlling whether the EBS volumes created to
        support each created instance will be deleted once that instance is terminated.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        Number of I/O operations per second the
        created volumes will support.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The id of an EBS snapshot that will be used to initialize the created
        EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
        snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of created volumes in GiB.
        If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
        as the selected snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of EBS volume to create. Can be one of "standard" (the
        default), "io1" or "gp2".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiCopyEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        A name for the ephemeral device, of the form "ephemeralN" where
        *N* is a volume number starting from zero.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Boolean controlling whether the EBS volumes created to
        support each created instance will be deleted once that instance is terminated.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        Number of I/O operations per second the
        created volumes will support.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The id of an EBS snapshot that will be used to initialize the created
        EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
        snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of created volumes in GiB.
        If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
        as the selected snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of EBS volume to create. Can be one of "standard" (the
        default), "io1" or "gp2".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> str:
        """
        A name for the ephemeral device, of the form "ephemeralN" where
        *N* is a volume number starting from zero.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiFromInstanceEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Boolean controlling whether the EBS volumes created to
        support each created instance will be deleted once that instance is terminated.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshot_id`.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        Number of I/O operations per second the
        created volumes will support.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The id of an EBS snapshot that will be used to initialize the created
        EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
        snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of created volumes in GiB.
        If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
        as the selected snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of EBS volume to create. Can be one of "standard" (the
        default), "io1" or "gp2".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AmiFromInstanceEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The path at which the device is exposed to created instances.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        A name for the ephemeral device, of the form "ephemeralN" where
        *N* is a volume number starting from zero.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultNetworkAclEgress(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to take.
        """
        ...

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block to match. This must be a
        valid network mask.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The from port to match.
        """
        ...

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[float]:
        """
        The ICMP type code to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[float]:
        """
        The ICMP type to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The IPv6 CIDR block.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol to match. If using the -1 'all'
        protocol, you must specify a from and to port of 0.
        """
        ...

    @property
    @pulumi.getter(name="ruleNo")
    def rule_no(self) -> float:
        """
        The rule number. Used for ordering.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The to port to match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultNetworkAclIngress(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to take.
        """
        ...

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block to match. This must be a
        valid network mask.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The from port to match.
        """
        ...

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[float]:
        """
        The ICMP type code to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[float]:
        """
        The ICMP type to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The IPv6 CIDR block.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol to match. If using the -1 'all'
        protocol, you must specify a from and to port of 0.
        """
        ...

    @property
    @pulumi.getter(name="ruleNo")
    def rule_no(self) -> float:
        """
        The rule number. Used for ordering.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The to port to match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultRouteTableRoute(dict):
    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block of the route.
        """
        ...

    @property
    @pulumi.getter(name="egressOnlyGatewayId")
    def egress_only_gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC Egress Only Internet Gateway.
        """
        ...

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC internet gateway or a virtual private gateway.
        """
        ...

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Identifier of an EC2 instance.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The Ipv6 CIDR block of the route
        """
        ...

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC NAT gateway.
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[str]:
        """
        Identifier of an EC2 network interface.
        """
        ...

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> Optional[str]:
        """
        Identifier of an EC2 Transit Gateway.
        """
        ...

    @property
    @pulumi.getter(name="vpcPeeringConnectionId")
    def vpc_peering_connection_id(self) -> Optional[str]:
        """
        Identifier of a VPC peering connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultSecurityGroupEgress(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the security group
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlocks")
    def ipv6_cidr_blocks(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def self(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DefaultSecurityGroupIngress(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the security group
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlocks")
    def ipv6_cidr_blocks(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def self(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfig(dict):
    @property
    @pulumi.getter(name="launchTemplateSpecification")
    def launch_template_specification(self) -> 'outputs.FleetLaunchTemplateConfigLaunchTemplateSpecification':
        """
        Nested argument containing EC2 Launch Template to use. Defined below.
        """
        ...

    @property
    @pulumi.getter
    def overrides(self) -> Optional[List['outputs.FleetLaunchTemplateConfigOverride']]:
        """
        Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfigLaunchTemplateSpecification(dict):
    @property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> Optional[str]:
        """
        ID of the launch template.
        """
        ...

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> Optional[str]:
        """
        Name of the launch template.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version number of the launch template.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetLaunchTemplateConfigOverride(dict):
    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Availability Zone in which to launch the instances.
        """
        ...

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type.
        """
        ...

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[str]:
        """
        Maximum price per unit hour that you are willing to pay for a Spot Instance.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        Priority for the launch template override. If `on_demand_options` `allocation_strategy` is set to `prioritized`, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of the subnet in which to launch the instances.
        """
        ...

    @property
    @pulumi.getter(name="weightedCapacity")
    def weighted_capacity(self) -> Optional[float]:
        """
        Number of units provided by the specified instance type.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetOnDemandOptions(dict):
    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[str]:
        """
        How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetSpotOptions(dict):
    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[str]:
        """
        How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
        """
        ...

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> Optional[str]:
        """
        Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
        """
        ...

    @property
    @pulumi.getter(name="instancePoolsToUseCount")
    def instance_pools_to_use_count(self) -> Optional[float]:
        """
        Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FleetTargetCapacitySpecification(dict):
    @property
    @pulumi.getter(name="defaultTargetCapacityType")
    def default_target_capacity_type(self) -> str:
        """
        Default target capacity type. Valid values: `on-demand`, `spot`.
        """
        ...

    @property
    @pulumi.getter(name="onDemandTargetCapacity")
    def on_demand_target_capacity(self) -> Optional[float]:
        """
        The number of On-Demand units to request.
        """
        ...

    @property
    @pulumi.getter(name="spotTargetCapacity")
    def spot_target_capacity(self) -> Optional[float]:
        """
        The number of Spot units to request.
        """
        ...

    @property
    @pulumi.getter(name="totalTargetCapacity")
    def total_target_capacity(self) -> float:
        """
        The number of units to request, filled using `default_target_capacity_type`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceCreditSpecification(dict):
    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[str]:
        """
        The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether the volume should be destroyed
        on instance termination (Default: `true`).
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the device to mount.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Enables [EBS
        encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
        on the volume (Default: `false`). Cannot be used with `snapshot_id`. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        The amount of provisioned
        [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        This must be set with a `volume_type` of `"io1"`.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The Snapshot ID to mount.
        """
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of the volume in gibibytes (GiB).
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of volume. Can be `"standard"`, `"gp2"`,
        or `"io1"`. (Default: `"gp2"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the block device to mount on the instance.
        """
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[bool]:
        """
        Suppresses the specified device included in the AMI's block device mapping.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        The [Instance Store Device
        Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
        (e.g. `"ephemeral0"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceMetadataOptions(dict):
    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        """
        Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
        """
        ...

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[float]:
        """
        The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
        """
        ...

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[str]:
        """
        Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceNetworkInterface(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
        """
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> float:
        """
        The integer index of the network interface attachment. Limited by instance type.
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The ID of the network interface to attach.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether the volume should be destroyed
        on instance termination (Default: `true`).
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The name of the device to mount.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        The amount of provisioned
        [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        This is only valid for `volume_type` of `"io1"`, and must be specified if
        using that type
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of the volume in gibibytes (GiB).
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"sc1"`, or `"st1"`. (Default: `"standard"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchConfigurationRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateBlockDeviceMapping(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The name of the device to mount.
        """
        ...

    @property
    @pulumi.getter
    def ebs(self) -> Optional['outputs.LaunchTemplateBlockDeviceMappingEbs']:
        """
        Configure EBS volume properties.
        """
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[str]:
        """
        Suppresses the specified device included in the AMI's block device mapping.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        The [Instance Store Device
        Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
        (e.g. `"ephemeral0"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateBlockDeviceMappingEbs(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[str]:
        """
        Whether the volume should be destroyed on instance termination. Defaults to `false` if not set. See [Preserving Amazon EBS Volumes on Instance Termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination) for more information.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[str]:
        """
        Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
        on the volume (Default: `false`). Cannot be used with `snapshot_id`.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        The amount of provisioned
        [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        This must be set with a `volume_type` of `"io1"`.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume.
        `encrypted` must be set to `true` when this is set.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The Snapshot ID to mount.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of the volume in gigabytes.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of volume. Can be `"standard"`, `"gp2"`, or `"io1"`. (Default: `"standard"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCapacityReservationSpecification(dict):
    @property
    @pulumi.getter(name="capacityReservationPreference")
    def capacity_reservation_preference(self) -> Optional[str]:
        """
        Indicates the instance's Capacity Reservation preferences. Can be `open` or `none`. (Default `none`).
        """
        ...

    @property
    @pulumi.getter(name="capacityReservationTarget")
    def capacity_reservation_target(self) -> Optional['outputs.LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget']:
        """
        Used to target a specific Capacity Reservation:
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget(dict):
    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        """
        The ID of the Capacity Reservation to target.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCpuOptions(dict):
    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[float]:
        """
        The number of CPU cores for the instance.
        """
        ...

    @property
    @pulumi.getter(name="threadsPerCore")
    def threads_per_core(self) -> Optional[float]:
        """
        The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1.
        Otherwise, specify the default value of 2.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateCreditSpecification(dict):
    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[str]:
        """
        The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateElasticGpuSpecification(dict):
    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The [Elastic GPU Type](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-gpus.html#elastic-gpus-basics)
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateElasticInferenceAccelerator(dict):
    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Accelerator type.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateHibernationOptions(dict):
    @property
    @pulumi.getter
    def configured(self) -> bool:
        """
        If set to `true`, the launched EC2 instance will hibernation enabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateIamInstanceProfile(dict):
    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the instance profile.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the instance profile.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateInstanceMarketOptions(dict):
    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[str]:
        """
        The market type. Can be `spot`.
        """
        ...

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> Optional['outputs.LaunchTemplateInstanceMarketOptionsSpotOptions']:
        """
        The options for [Spot Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateInstanceMarketOptionsSpotOptions(dict):
    @property
    @pulumi.getter(name="blockDurationMinutes")
    def block_duration_minutes(self) -> Optional[float]:
        """
        The required duration in minutes. This value must be a multiple of 60.
        """
        ...

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> Optional[str]:
        """
        The behavior when a Spot Instance is interrupted. Can be `hibernate`,
        `stop`, or `terminate`. (Default: `terminate`).
        """
        ...

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[str]:
        """
        The maximum hourly price you're willing to pay for the Spot Instances.
        """
        ...

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[str]:
        """
        The Spot Instance request type. Can be `one-time`, or `persistent`.
        """
        ...

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> Optional[str]:
        """
        The end date of the request.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateLicenseSpecification(dict):
    @property
    @pulumi.getter(name="licenseConfigurationArn")
    def license_configuration_arn(self) -> str:
        """
        ARN of the license configuration.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateMetadataOptions(dict):
    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        """
        Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
        """
        ...

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[float]:
        """
        The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
        """
        ...

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[str]:
        """
        Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateMonitoring(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If `true`, the launched EC2 instance will have detailed monitoring enabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateNetworkInterface(dict):
    @property
    @pulumi.getter(name="associatePublicIpAddress")
    def associate_public_ip_address(self) -> Optional[str]:
        """
        Associate a public ip address with the network interface.  Boolean value.
        """
        ...

    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether the network interface should be destroyed on instance termination. Defaults to `false` if not set.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the network interface.
        """
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[float]:
        """
        The integer index of the network interface attachment.
        """
        ...

    @property
    @pulumi.getter(name="ipv4AddressCount")
    def ipv4_address_count(self) -> Optional[float]:
        """
        The number of secondary private IPv4 addresses to assign to a network interface. Conflicts with `ipv4_addresses`
        """
        ...

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[List[str]]:
        """
        One or more private IPv4 addresses to associate. Conflicts with `ipv4_address_count`
        """
        ...

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[float]:
        """
        The number of IPv6 addresses to assign to a network interface. Conflicts with `ipv6_addresses`
        """
        ...

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[List[str]]:
        """
        One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Conflicts with `ipv6_address_count`
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[str]:
        """
        The ID of the network interface to attach.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        The primary private IPv4 address.
        """
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[List[str]]:
        """
        A list of security group IDs to associate.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The VPC Subnet ID to associate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplatePlacement(dict):
    @property
    @pulumi.getter
    def affinity(self) -> Optional[str]:
        """
        The affinity setting for an instance on a Dedicated Host.
        """
        ...

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The Availability Zone for the instance.
        """
        ...

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        The name of the placement group for the instance.
        """
        ...

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[str]:
        """
        The ID of the Dedicated Host for the instance.
        """
        ...

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> Optional[float]:
        """
        The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        """
        ...

    @property
    @pulumi.getter(name="spreadDomain")
    def spread_domain(self) -> Optional[str]:
        """
        Reserved for future use.
        """
        ...

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[str]:
        """
        The tenancy of the instance (if the instance is running in a VPC). Can be `default`, `dedicated`, or `host`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LaunchTemplateTagSpecification(dict):
    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource to tag. Valid values are `instance` and `volume`.
        """
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        A map of tags to assign to the resource.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkAclEgress(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to take.
        """
        ...

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block to match. This must be a
        valid network mask.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The from port to match.
        """
        ...

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[float]:
        """
        The ICMP type code to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[float]:
        """
        The ICMP type to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The IPv6 CIDR block.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol to match. If using the -1 'all'
        protocol, you must specify a from and to port of 0.
        """
        ...

    @property
    @pulumi.getter(name="ruleNo")
    def rule_no(self) -> float:
        """
        The rule number. Used for ordering.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The to port to match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkAclIngress(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to take.
        """
        ...

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block to match. This must be a
        valid network mask.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The from port to match.
        """
        ...

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[float]:
        """
        The ICMP type code to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[float]:
        """
        The ICMP type to be used. Default 0.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The IPv6 CIDR block.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol to match. If using the -1 'all'
        protocol, you must specify a from and to port of 0.
        """
        ...

    @property
    @pulumi.getter(name="ruleNo")
    def rule_no(self) -> float:
        """
        The rule number. Used for ordering.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The to port to match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkInterfaceAttachment(dict):
    @property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> float:
        """
        Integer to define the devices index.
        """
        ...

    @property
    @pulumi.getter
    def instance(self) -> str:
        """
        ID of the instance to attach to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PeeringConnectionOptionsAccepter(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Allow a local linked EC2-Classic instance to communicate
        with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
        to the remote VPC. This option is not supported for inter-region VPC peering.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Allow a local VPC to communicate with a linked EC2-Classic
        instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
        connection. This option is not supported for inter-region VPC peering.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PeeringConnectionOptionsRequester(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Allow a local linked EC2-Classic instance to communicate
        with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
        to the remote VPC. This option is not supported for inter-region VPC peering.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Allow a local VPC to communicate with a linked EC2-Classic
        instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
        connection. This option is not supported for inter-region VPC peering.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteTableRoute(dict):
    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block of the route.
        """
        ...

    @property
    @pulumi.getter(name="egressOnlyGatewayId")
    def egress_only_gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC Egress Only Internet Gateway.
        """
        ...

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC internet gateway or a virtual private gateway.
        """
        ...

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Identifier of an EC2 instance.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        The Ipv6 CIDR block of the route.
        """
        ...

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> Optional[str]:
        """
        Identifier of a VPC NAT gateway.
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[str]:
        """
        Identifier of an EC2 network interface.
        """
        ...

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> Optional[str]:
        """
        Identifier of an EC2 Transit Gateway.
        """
        ...

    @property
    @pulumi.getter(name="vpcPeeringConnectionId")
    def vpc_peering_connection_id(self) -> Optional[str]:
        """
        Identifier of a VPC peering connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityGroupEgress(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[List[str]]:
        """
        List of CIDR blocks.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of this egress rule.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The start port (or ICMP type number if protocol is "icmp")
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlocks")
    def ipv6_cidr_blocks(self) -> Optional[List[str]]:
        """
        List of IPv6 CIDR blocks.
        """
        ...

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Optional[List[str]]:
        """
        List of prefix list IDs (for allowing access to VPC endpoints)
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol. If you select a protocol of
        "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "from_port" and "to_port" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
        """
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[List[str]]:
        """
        List of security group Group Names if using
        EC2-Classic, or Group IDs if using a VPC.
        """
        ...

    @property
    @pulumi.getter
    def self(self) -> Optional[bool]:
        """
        If true, the security group itself will be added as
        a source to this egress rule.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The end range port (or ICMP code if protocol is "icmp").
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityGroupIngress(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[List[str]]:
        """
        List of CIDR blocks.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of this egress rule.
        """
        ...

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> float:
        """
        The start port (or ICMP type number if protocol is "icmp")
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlocks")
    def ipv6_cidr_blocks(self) -> Optional[List[str]]:
        """
        List of IPv6 CIDR blocks.
        """
        ...

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Optional[List[str]]:
        """
        List of prefix list IDs (for allowing access to VPC endpoints)
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol. If you select a protocol of
        "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "from_port" and "to_port" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
        """
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[List[str]]:
        """
        List of security group Group Names if using
        EC2-Classic, or Group IDs if using a VPC.
        """
        ...

    @property
    @pulumi.getter
    def self(self) -> Optional[bool]:
        """
        If true, the security group itself will be added as
        a source to this egress rule.
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> float:
        """
        The end range port (or ICMP code if protocol is "icmp").
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecification(dict):
    @property
    @pulumi.getter
    def ami(self) -> str:
        ...

    @property
    @pulumi.getter(name="associatePublicIpAddress")
    def associate_public_ip_address(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The availability zone in which to place the request.
        """
        ...

    @property
    @pulumi.getter(name="ebsBlockDevices")
    def ebs_block_devices(self) -> Optional[List['outputs.SpotFleetRequestLaunchSpecificationEbsBlockDevice']]:
        ...

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="ephemeralBlockDevices")
    def ephemeral_block_devices(self) -> Optional[List['outputs.SpotFleetRequestLaunchSpecificationEphemeralBlockDevice']]:
        ...

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="iamInstanceProfileArn")
    def iam_instance_profile_arn(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The type of instance to request.
        """
        ...

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="rootBlockDevices")
    def root_block_devices(self) -> Optional[List['outputs.SpotFleetRequestLaunchSpecificationRootBlockDevice']]:
        ...

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[str]:
        """
        The maximum spot bid for this override request.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet in which to launch the requested instance.
        """
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        A map of tags to assign to the resource.
        """
        ...

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="vpcSecurityGroupIds")
    def vpc_security_group_ids(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter(name="weightedCapacity")
    def weighted_capacity(self) -> Optional[str]:
        """
        The capacity added to the fleet by a fulfilled request.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchSpecificationRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfig(dict):
    @property
    @pulumi.getter(name="launchTemplateSpecification")
    def launch_template_specification(self) -> 'outputs.SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification':
        """
        Launch template specification. See Launch Template Specification below for more details.
        """
        ...

    @property
    @pulumi.getter
    def overrides(self) -> Optional[List['outputs.SpotFleetRequestLaunchTemplateConfigOverride']]:
        """
        One or more override configurations. See Overrides below for more details.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the launch template. Conflicts with `name`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the launch template. Conflicts with `id`.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Template version. Unlike the autoscaling equivalent, does not support `$Latest` or `$Default`, so use the launch_template resource's attribute, e.g. `"${aws_launch_template.foo.latest_version}"`. It will use the default version if omitted.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotFleetRequestLaunchTemplateConfigOverride(dict):
    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The availability zone in which to place the request.
        """
        ...

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The type of instance to request.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        The priority for the launch template override. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
        """
        ...

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[str]:
        """
        The maximum spot bid for this override request.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet in which to launch the requested instance.
        """
        ...

    @property
    @pulumi.getter(name="weightedCapacity")
    def weighted_capacity(self) -> Optional[float]:
        """
        The capacity added to the fleet by a fulfilled request.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestCreditSpecification(dict):
    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[str]:
        """
        The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether the volume should be destroyed
        on instance termination (Default: `true`).
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the device to mount.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Enables [EBS
        encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
        on the volume (Default: `false`). Cannot be used with `snapshot_id`. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        The amount of provisioned
        [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        This must be set with a `volume_type` of `"io1"`.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The Snapshot ID to mount.
        """
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of the volume in gibibytes (GiB).
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of volume. Can be `"standard"`, `"gp2"`,
        or `"io1"`. (Default: `"gp2"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the block device to mount on the instance.
        """
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[bool]:
        """
        Suppresses the specified device included in the AMI's block device mapping.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        The [Instance Store Device
        Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
        (e.g. `"ephemeral0"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestMetadataOptions(dict):
    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        """
        Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
        """
        ...

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[float]:
        """
        The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
        """
        ...

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[str]:
        """
        Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestNetworkInterface(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
        """
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> float:
        """
        The integer index of the network interface attachment. Limited by instance type.
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The ID of the network interface to attach.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpotInstanceRequestRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[bool]:
        """
        Whether the volume should be destroyed
        on instance termination (Default: `true`).
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        The name of the device to mount.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        """
        Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> Optional[float]:
        """
        The amount of provisioned
        [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        This is only valid for `volume_type` of `"io1"`, and must be specified if
        using that type
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
        """
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[float]:
        """
        The size of the volume in gibibytes (GiB).
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"sc1"`, or `"st1"`. (Default: `"standard"`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficMirrorFilterRuleDestinationPortRange(dict):
    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[float]:
        """
        Starting port of the range
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[float]:
        """
        Ending port of the range
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficMirrorFilterRuleSourcePortRange(dict):
    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[float]:
        """
        Starting port of the range
        """
        ...

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[float]:
        """
        Ending port of the range
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcEndpointDnsEntry(dict):
    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        The DNS name.
        """
        ...

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[str]:
        """
        The ID of the private hosted zone.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepter(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Allow a local linked EC2-Classic instance to communicate
        with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
        to the remote VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC. This is
        [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
        inter-region VPC peering.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Allow a local VPC to communicate with a linked EC2-Classic
        instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
        connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepterAccepter(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Indicates whether a local ClassicLink connection can communicate
        with the peer VPC over the VPC Peering Connection.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Indicates whether a local VPC can resolve public DNS hostnames to
        private IP addresses when queried from instances in a peer VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Indicates whether a local VPC can communicate with a ClassicLink
        connection in the peer VPC over the VPC Peering Connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionAccepterRequester(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Indicates whether a local ClassicLink connection can communicate
        with the peer VPC over the VPC Peering Connection.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Indicates whether a local VPC can resolve public DNS hostnames to
        private IP addresses when queried from instances in a peer VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Indicates whether a local VPC can communicate with a ClassicLink
        connection in the peer VPC over the VPC Peering Connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpcPeeringConnectionRequester(dict):
    @property
    @pulumi.getter(name="allowClassicLinkToRemoteVpc")
    def allow_classic_link_to_remote_vpc(self) -> Optional[bool]:
        """
        Allow a local linked EC2-Classic instance to communicate
        with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
        to the remote VPC.
        """
        ...

    @property
    @pulumi.getter(name="allowRemoteVpcDnsResolution")
    def allow_remote_vpc_dns_resolution(self) -> Optional[bool]:
        """
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC. This is
        [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
        inter-region VPC peering.
        """
        ...

    @property
    @pulumi.getter(name="allowVpcToRemoteClassicLink")
    def allow_vpc_to_remote_classic_link(self) -> Optional[bool]:
        """
        Allow a local VPC to communicate with a linked EC2-Classic
        instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
        connection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnConnectionRoute(dict):
    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnConnectionVgwTelemetry(dict):
    @property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCoipPoolFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A COIP Pool will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCoipPoolsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A COIP Pool will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCustomerGatewayFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceCreditSpecification(dict):
    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> bool:
        """
        If the root block device will be deleted on termination.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The physical name of the device.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        """
        If the EBS volume is encrypted.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> float:
        """
        `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        The ID of the snapshot.
        """
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> float:
        """
        The size of the volume, in GiB.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of the volume.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The physical name of the device.
        """
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[bool]:
        """
        Whether the specified device included in the device mapping was suppressed or not (Boolean).
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[str]:
        """
        The virtual device name.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceMetadataOption(dict):
    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        """
        The state of the metadata service: `enabled`, `disabled`.
        """
        ...

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> float:
        """
        The desired HTTP PUT response hop limit for instance metadata requests.
        """
        ...

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> str:
        """
        If session tokens are required: `optional`, `required`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> bool:
        """
        If the root block device will be deleted on termination.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The physical name of the device.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        """
        If the EBS volume is encrypted.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> float:
        """
        `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
        """
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> float:
        """
        The size of the volume, in GiB.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of the volume.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceTypeOfferingFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of one or more values for the filter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceTypeOfferingsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of one or more values for the filter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstancesFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInternetGatewayAttachment(dict):
    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the attachment between the gateway and the VPC. Present only if a VPC is attached
        """
        ...

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of an attached VPC.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInternetGatewayFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        An Internet Gateway will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationEbsBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> bool:
        """
        Whether the EBS Volume will be deleted on instance termination.
        """
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The Name of the device.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        """
        Whether the volume is Encrypted.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> float:
        """
        The provisioned IOPs of the volume.
        """
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        The Snapshot ID of the mount.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> float:
        """
        The Size of the volume.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The Type of the volume.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationEphemeralBlockDevice(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The Name of the device.
        """
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> str:
        """
        The Virtual Name of the device.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchConfigurationRootBlockDevice(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> bool:
        """
        Whether the EBS Volume will be deleted on instance termination.
        """
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        """
        Whether the volume is Encrypted.
        """
        ...

    @property
    @pulumi.getter
    def iops(self) -> float:
        """
        The provisioned IOPs of the volume.
        """
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> float:
        """
        The Size of the volume.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The Type of the volume.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateBlockDeviceMapping(dict):
    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        ...

    @property
    @pulumi.getter
    def ebs(self) -> List['outputs.GetLaunchTemplateBlockDeviceMappingEb']:
        ...

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> str:
        ...

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateBlockDeviceMappingEb(dict):
    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> str:
        ...

    @property
    @pulumi.getter
    def encrypted(self) -> str:
        ...

    @property
    @pulumi.getter
    def iops(self) -> float:
        ...

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> float:
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateCreditSpecification(dict):
    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateElasticGpuSpecification(dict):
    @property
    @pulumi.getter
    def type(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateHibernationOption(dict):
    @property
    @pulumi.getter
    def configured(self) -> bool:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateIamInstanceProfile(dict):
    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        Amazon Resource Name (ARN) of the launch template.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateInstanceMarketOption(dict):
    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> str:
        ...

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> List['outputs.GetLaunchTemplateInstanceMarketOptionSpotOption']:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateInstanceMarketOptionSpotOption(dict):
    @property
    @pulumi.getter(name="blockDurationMinutes")
    def block_duration_minutes(self) -> float:
        ...

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> str:
        ...

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> str:
        ...

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> str:
        ...

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateMetadataOption(dict):
    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        """
        The state of the metadata service: `enabled`, `disabled`.
        """
        ...

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> float:
        """
        The desired HTTP PUT response hop limit for instance metadata requests.
        """
        ...

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> str:
        """
        If session tokens are required: `optional`, `required`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateMonitoring(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateNetworkInterface(dict):
    @property
    @pulumi.getter(name="associatePublicIpAddress")
    def associate_public_ip_address(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> bool:
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the launch template.
        """
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> float:
        ...

    @property
    @pulumi.getter(name="ipv4AddressCount")
    def ipv4_address_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        ...

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplatePlacement(dict):
    @property
    @pulumi.getter
    def affinity(self) -> str:
        ...

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        ...

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> float:
        ...

    @property
    @pulumi.getter(name="spreadDomain")
    def spread_domain(self) -> str:
        ...

    @property
    @pulumi.getter
    def tenancy(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLaunchTemplateTagSpecification(dict):
    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A map of tags, each pair of which must exactly match a pair on the desired Launch Template.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Local Gateway will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayRouteTableFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A local gateway route table will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayRouteTablesFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Local Gateway Route Table will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of one or more values for the filter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceGroupFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of one or more values for the filter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewayVirtualInterfaceGroupsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of one or more values for the filter.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLocalGatewaysFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Local Gateway will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNatGatewayFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNatGateways.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        An Nat Gateway will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkAclsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkAcls.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPC will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceAssociation(dict):
    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> str:
        """
        The allocation ID.
        """
        ...

    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> str:
        """
        The association ID.
        """
        ...

    @property
    @pulumi.getter(name="ipOwnerId")
    def ip_owner_id(self) -> str:
        """
        The ID of the Elastic IP address owner.
        """
        ...

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        """
        The public DNS name.
        """
        ...

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The address of the Elastic IP address bound to the network interface.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceAttachment(dict):
    @property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> float:
        ...

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="instanceOwnerId")
    def instance_owner_id(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfacesFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkInterfaces.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableAssociation(dict):
    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
        """
        ...

    @property
    @pulumi.getter
    def main(self) -> bool:
        """
        If the Association due to the Main Route Table.
        """
        ...

    @property
    @pulumi.getter(name="routeTableAssociationId")
    def route_table_association_id(self) -> str:
        """
        The Association ID.
        """
        ...

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        """
        The id of the specific Route Table to retrieve.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Route Table will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableRoute(dict):
    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The CIDR block of the route.
        """
        ...

    @property
    @pulumi.getter(name="egressOnlyGatewayId")
    def egress_only_gateway_id(self) -> str:
        """
        The ID of the Egress Only Internet Gateway.
        """
        ...

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
        """
        ...

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The EC2 instance ID.
        """
        ...

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> str:
        """
        The IPv6 CIDR block of the route.
        """
        ...

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> str:
        """
        The NAT Gateway ID.
        """
        ...

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The ID of the elastic network interface (eni) to use.
        """
        ...

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> str:
        """
        The EC2 Transit Gateway ID.
        """
        ...

    @property
    @pulumi.getter(name="vpcPeeringConnectionId")
    def vpc_peering_connection_id(self) -> str:
        """
        The VPC Peering ID.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTablesFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Route Table will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecurityGroupFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A Security Group will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecurityGroupsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSubnetFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
        For example, if matching against tag `Name`, use:
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A subnet will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSubnetIdsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
        For example, if matching against tag `Name`, use:
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        Subnet IDs will be selected if any one of the given values match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcCidrBlockAssociation(dict):
    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> str:
        """
        The association ID for the the IPv4 CIDR block.
        """
        ...

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The cidr block of the desired VPC.
        """
        ...

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the desired VPC.
        Can be either `"pending"` or `"available"`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcDhcpOptionsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values for filtering.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointDnsEntry(dict):
    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        """
        The DNS name.
        """
        ...

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> str:
        """
        The ID of the private hosted zone.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpoints.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPC Endpoint will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcEndpointServiceFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the filter field. Valid values can be found in the [EC2 DescribeVpcEndpointServices API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpointServices.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPC will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcPeeringConnectionFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPC Peering Connection will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpcsFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPC will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVpnGatewayFilter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by, as defined by
        [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnGateways.html).
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        Set of values that are accepted for the given field.
        A VPN Gateway will be selected if any one of the given values matches.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


