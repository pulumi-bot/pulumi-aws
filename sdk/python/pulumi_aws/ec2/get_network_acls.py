# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkAclsResult',
    'AwaitableGetNetworkAclsResult',
    'get_network_acls',
]


class GetNetworkAclsResult:
    """
    A collection of values returned by getNetworkAcls.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, filters=None, id=None, ids=None, tags=None, vpc_id=None) -> None:
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of all the network ACL ids found. This data source will fail if none are found.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        __self__.vpc_id = vpc_id


class AwaitableGetNetworkAclsResult(GetNetworkAclsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkAclsResult(
            filters=self.filters,
            id=self.id,
            ids=self.ids,
            tags=self.tags,
            vpc_id=self.vpc_id)


def get_network_acls(filters: Optional[List[pulumi.InputType['GetNetworkAclsFilterArgs']]] = None, tags: Optional[Dict[str, str]] = None, vpc_id: Optional[str] = None, opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkAclsResult:
    """
    ## Example Usage

    The following shows outputing all network ACL ids in a vpc.

    ```python
    import pulumi
    import pulumi_aws as aws

    example_network_acls = aws.ec2.get_network_acls(vpc_id=var["vpc_id"])
    pulumi.export("example", example_network_acls.ids)
    ```

    The following example retrieves a list of all network ACL ids in a VPC with a custom
    tag of `Tier` set to a value of "Private".

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_network_acls(tags={
            "Tier": "Private",
        },
        vpc_id=var["vpc_id"])
    ```

    The following example retrieves a network ACL id in a VPC which associated
    with specific subnet.

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_network_acls(filters=[{
            "name": "association.subnet-id",
            "values": [aws_subnet["test"]["id"]],
        }],
        vpc_id=var["vpc_id"])
    ```


    :param List[pulumi.InputType['GetNetworkAclsFilterArgs']] filters: Custom filter block as described below.
    :param Dict[str, str] tags: A map of tags, each pair of which must exactly match
           a pair on the desired network ACLs.
    :param str vpc_id: The VPC ID that you want to filter from.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws:ec2/getNetworkAcls:getNetworkAcls', __args__, opts=opts).value

    return AwaitableGetNetworkAclsResult(
        filters=__ret__.get('filters'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        tags=__ret__.get('tags'),
        vpc_id=__ret__.get('vpcId'))
