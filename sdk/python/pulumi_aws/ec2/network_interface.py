# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['NetworkInterface']


class NetworkInterface(pulumi.CustomResource):
    attachments: pulumi.Output[List['outputs.NetworkInterfaceAttachment']] = pulumi.output_property("attachments")
    """
    Block to define the attachment of the ENI. Documented below.
    """
    description: pulumi.Output[Optional[str]] = pulumi.output_property("description")
    """
    A description for the network interface.
    """
    mac_address: pulumi.Output[str] = pulumi.output_property("macAddress")
    """
    The MAC address of the network interface.
    """
    outpost_arn: pulumi.Output[str] = pulumi.output_property("outpostArn")
    private_dns_name: pulumi.Output[str] = pulumi.output_property("privateDnsName")
    """
    The private DNS name of the network interface (IPv4).
    """
    private_ip: pulumi.Output[str] = pulumi.output_property("privateIp")
    private_ips: pulumi.Output[List[str]] = pulumi.output_property("privateIps")
    """
    List of private IPs to assign to the ENI.
    """
    private_ips_count: pulumi.Output[float] = pulumi.output_property("privateIpsCount")
    """
    Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
    """
    security_groups: pulumi.Output[List[str]] = pulumi.output_property("securityGroups")
    """
    List of security group IDs to assign to the ENI.
    """
    source_dest_check: pulumi.Output[Optional[bool]] = pulumi.output_property("sourceDestCheck")
    """
    Whether to enable source destination checking for the ENI. Default true.
    """
    subnet_id: pulumi.Output[str] = pulumi.output_property("subnetId")
    """
    Subnet ID to create the ENI in.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    A map of tags to assign to the resource.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, attachments: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['NetworkInterfaceAttachmentArgs']]]]] = None, description: Optional[pulumi.Input[str]] = None, private_ip: Optional[pulumi.Input[str]] = None, private_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, private_ips_count: Optional[pulumi.Input[float]] = None, security_groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, source_dest_check: Optional[pulumi.Input[bool]] = None, subnet_id: Optional[pulumi.Input[str]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Provides an Elastic network interface (ENI) resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.ec2.NetworkInterface("test",
            attachments=[{
                "device_index": 1,
                "instance": aws_instance["test"]["id"],
            }],
            private_ips=["10.0.0.50"],
            security_groups=[aws_security_group["web"]["id"]],
            subnet_id=aws_subnet["public_a"]["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['NetworkInterfaceAttachmentArgs']]]] attachments: Block to define the attachment of the ENI. Documented below.
        :param pulumi.Input[str] description: A description for the network interface.
        :param pulumi.Input[List[pulumi.Input[str]]] private_ips: List of private IPs to assign to the ENI.
        :param pulumi.Input[float] private_ips_count: Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
        :param pulumi.Input[List[pulumi.Input[str]]] security_groups: List of security group IDs to assign to the ENI.
        :param pulumi.Input[bool] source_dest_check: Whether to enable source destination checking for the ENI. Default true.
        :param pulumi.Input[str] subnet_id: Subnet ID to create the ENI in.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['attachments'] = attachments
            __props__['description'] = description
            __props__['private_ip'] = private_ip
            __props__['private_ips'] = private_ips
            __props__['private_ips_count'] = private_ips_count
            __props__['security_groups'] = security_groups
            __props__['source_dest_check'] = source_dest_check
            if subnet_id is None:
                raise TypeError("Missing required property 'subnet_id'")
            __props__['subnet_id'] = subnet_id
            __props__['tags'] = tags
            __props__['mac_address'] = None
            __props__['outpost_arn'] = None
            __props__['private_dns_name'] = None
        super(NetworkInterface, __self__).__init__(
            'aws:ec2/networkInterface:NetworkInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, attachments: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['NetworkInterfaceAttachmentArgs']]]]] = None, description: Optional[pulumi.Input[str]] = None, mac_address: Optional[pulumi.Input[str]] = None, outpost_arn: Optional[pulumi.Input[str]] = None, private_dns_name: Optional[pulumi.Input[str]] = None, private_ip: Optional[pulumi.Input[str]] = None, private_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, private_ips_count: Optional[pulumi.Input[float]] = None, security_groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, source_dest_check: Optional[pulumi.Input[bool]] = None, subnet_id: Optional[pulumi.Input[str]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> 'NetworkInterface':
        """
        Get an existing NetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['NetworkInterfaceAttachmentArgs']]]] attachments: Block to define the attachment of the ENI. Documented below.
        :param pulumi.Input[str] description: A description for the network interface.
        :param pulumi.Input[str] mac_address: The MAC address of the network interface.
        :param pulumi.Input[str] private_dns_name: The private DNS name of the network interface (IPv4).
        :param pulumi.Input[List[pulumi.Input[str]]] private_ips: List of private IPs to assign to the ENI.
        :param pulumi.Input[float] private_ips_count: Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
        :param pulumi.Input[List[pulumi.Input[str]]] security_groups: List of security group IDs to assign to the ENI.
        :param pulumi.Input[bool] source_dest_check: Whether to enable source destination checking for the ENI. Default true.
        :param pulumi.Input[str] subnet_id: Subnet ID to create the ENI in.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["attachments"] = attachments
        __props__["description"] = description
        __props__["mac_address"] = mac_address
        __props__["outpost_arn"] = outpost_arn
        __props__["private_dns_name"] = private_dns_name
        __props__["private_ip"] = private_ip
        __props__["private_ips"] = private_ips
        __props__["private_ips_count"] = private_ips_count
        __props__["security_groups"] = security_groups
        __props__["source_dest_check"] = source_dest_check
        __props__["subnet_id"] = subnet_id
        __props__["tags"] = tags
        return NetworkInterface(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

