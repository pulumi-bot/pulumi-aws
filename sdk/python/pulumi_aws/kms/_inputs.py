# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GrantConstraintArgs',
    'GetSecretSecretArgs',
    'GetSecretsSecretArgs',
]

@pulumi.input_type
class GrantConstraintArgs:
    encryption_context_equals: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("encryptionContextEquals")
    """
    A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryption_context_subset`.
    """
    encryption_context_subset: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("encryptionContextSubset")
    """
    A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryption_context_equals`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, encryption_context_equals: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, encryption_context_subset: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] encryption_context_equals: A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryption_context_subset`.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] encryption_context_subset: A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryption_context_equals`.
        """
        __self__.encryption_context_equals = encryption_context_equals
        __self__.encryption_context_subset = encryption_context_subset

@pulumi.input_type
class GetSecretSecretArgs:
    name: str = pulumi.input_property("name")
    payload: str = pulumi.input_property("payload")
    context: Optional[Dict[str, str]] = pulumi.input_property("context")
    grant_tokens: Optional[List[str]] = pulumi.input_property("grantTokens")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: str, payload: str, context: Optional[Dict[str, str]] = None, grant_tokens: Optional[List[str]] = None) -> None:
        __self__.name = name
        __self__.payload = payload
        __self__.context = context
        __self__.grant_tokens = grant_tokens

@pulumi.input_type
class GetSecretsSecretArgs:
    name: str = pulumi.input_property("name")
    """
    The name to export this secret under in the attributes.
    """
    payload: str = pulumi.input_property("payload")
    """
    Base64 encoded payload, as returned from a KMS encrypt operation.
    """
    context: Optional[Dict[str, str]] = pulumi.input_property("context")
    """
    An optional mapping that makes up the Encryption Context for the secret.
    """
    grant_tokens: Optional[List[str]] = pulumi.input_property("grantTokens")
    """
    An optional list of Grant Tokens for the secret.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: str, payload: str, context: Optional[Dict[str, str]] = None, grant_tokens: Optional[List[str]] = None) -> None:
        """
        :param str name: The name to export this secret under in the attributes.
        :param str payload: Base64 encoded payload, as returned from a KMS encrypt operation.
        :param Dict[str, str] context: An optional mapping that makes up the Encryption Context for the secret.
        :param List[str] grant_tokens: An optional list of Grant Tokens for the secret.
        """
        __self__.name = name
        __self__.payload = payload
        __self__.context = context
        __self__.grant_tokens = grant_tokens

