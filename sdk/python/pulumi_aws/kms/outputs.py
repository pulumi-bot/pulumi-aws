# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GrantConstraint',
    'GetSecretSecret',
    'GetSecretsSecret',
]

@pulumi.output_type
class GrantConstraint(dict):
    @property
    @pulumi.getter(name="encryptionContextEquals")
    def encryption_context_equals(self) -> Optional[Mapping[str, str]]:
        """
        A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryption_context_subset`.
        """
        ...

    @property
    @pulumi.getter(name="encryptionContextSubset")
    def encryption_context_subset(self) -> Optional[Mapping[str, str]]:
        """
        A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryption_context_equals`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecretSecret(dict):
    @property
    @pulumi.getter
    def context(self) -> Optional[Mapping[str, str]]:
        ...

    @property
    @pulumi.getter(name="grantTokens")
    def grant_tokens(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def payload(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecretsSecret(dict):
    @property
    @pulumi.getter
    def context(self) -> Optional[Mapping[str, str]]:
        """
        An optional mapping that makes up the Encryption Context for the secret.
        """
        ...

    @property
    @pulumi.getter(name="grantTokens")
    def grant_tokens(self) -> Optional[List[str]]:
        """
        An optional list of Grant Tokens for the secret.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name to export this secret under in the attributes.
        """
        ...

    @property
    @pulumi.getter
    def payload(self) -> str:
        """
        Base64 encoded payload, as returned from a KMS encrypt operation.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


