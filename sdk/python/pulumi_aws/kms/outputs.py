# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GrantConstraint',
    'GetSecretSecret',
    'GetSecretsSecret',
]

@pulumi.output_type
class GrantConstraint(dict):
    encryption_context_equals: Optional[Dict[str, str]] = pulumi.output_property("encryptionContextEquals")
    """
    A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryption_context_subset`.
    """
    encryption_context_subset: Optional[Dict[str, str]] = pulumi.output_property("encryptionContextSubset")
    """
    A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryption_context_equals`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecretSecret(dict):
    context: Optional[Dict[str, str]] = pulumi.output_property("context")
    grant_tokens: Optional[List[str]] = pulumi.output_property("grantTokens")
    name: str = pulumi.output_property("name")
    payload: str = pulumi.output_property("payload")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSecretsSecret(dict):
    context: Optional[Dict[str, str]] = pulumi.output_property("context")
    """
    An optional mapping that makes up the Encryption Context for the secret.
    """
    grant_tokens: Optional[List[str]] = pulumi.output_property("grantTokens")
    """
    An optional list of Grant Tokens for the secret.
    """
    name: str = pulumi.output_property("name")
    """
    The name to export this secret under in the attributes.
    """
    payload: str = pulumi.output_property("payload")
    """
    Base64 encoded payload, as returned from a KMS encrypt operation.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


