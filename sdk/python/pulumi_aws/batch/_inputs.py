# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ComputeEnvironmentComputeResourcesArgs',
    'ComputeEnvironmentComputeResourcesLaunchTemplateArgs',
    'JobDefinitionRetryStrategyArgs',
    'JobDefinitionTimeoutArgs',
]

@pulumi.input_type
class ComputeEnvironmentComputeResourcesArgs:
    instance_role: pulumi.Input[str] = pulumi.input_property("instanceRole")
    """
    The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
    """
    instance_types: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("instanceTypes")
    """
    A list of instance types that may be launched.
    """
    max_vcpus: pulumi.Input[float] = pulumi.input_property("maxVcpus")
    """
    The maximum number of EC2 vCPUs that an environment can reach.
    """
    min_vcpus: pulumi.Input[float] = pulumi.input_property("minVcpus")
    """
    The minimum number of EC2 vCPUs that an environment should maintain.
    """
    security_group_ids: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("securityGroupIds")
    """
    A list of EC2 security group that are associated with instances launched in the compute environment.
    """
    subnets: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("subnets")
    """
    A list of VPC subnets into which the compute resources are launched.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of compute environment. Valid items are `EC2` or `SPOT`.
    """
    allocation_strategy: Optional[pulumi.Input[str]] = pulumi.input_property("allocationStrategy")
    """
    The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
    """
    bid_percentage: Optional[pulumi.Input[float]] = pulumi.input_property("bidPercentage")
    """
    Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
    """
    desired_vcpus: Optional[pulumi.Input[float]] = pulumi.input_property("desiredVcpus")
    """
    The desired number of EC2 vCPUS in the compute environment.
    """
    ec2_key_pair: Optional[pulumi.Input[str]] = pulumi.input_property("ec2KeyPair")
    """
    The EC2 key pair that is used for instances launched in the compute environment.
    """
    image_id: Optional[pulumi.Input[str]] = pulumi.input_property("imageId")
    """
    The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
    """
    launch_template: Optional[pulumi.Input['ComputeEnvironmentComputeResourcesLaunchTemplateArgs']] = pulumi.input_property("launchTemplate")
    """
    The launch template to use for your compute resources. See details below.
    """
    spot_iam_fleet_role: Optional[pulumi.Input[str]] = pulumi.input_property("spotIamFleetRole")
    """
    The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
    """
    tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("tags")
    """
    Key-value pair tags to be applied to resources that are launched in the compute environment.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_role: pulumi.Input[str], instance_types: pulumi.Input[List[pulumi.Input[str]]], max_vcpus: pulumi.Input[float], min_vcpus: pulumi.Input[float], security_group_ids: pulumi.Input[List[pulumi.Input[str]]], subnets: pulumi.Input[List[pulumi.Input[str]]], type: pulumi.Input[str], allocation_strategy: Optional[pulumi.Input[str]] = None, bid_percentage: Optional[pulumi.Input[float]] = None, desired_vcpus: Optional[pulumi.Input[float]] = None, ec2_key_pair: Optional[pulumi.Input[str]] = None, image_id: Optional[pulumi.Input[str]] = None, launch_template: Optional[pulumi.Input['ComputeEnvironmentComputeResourcesLaunchTemplateArgs']] = None, spot_iam_fleet_role: Optional[pulumi.Input[str]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] instance_role: The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        :param pulumi.Input[List[pulumi.Input[str]]] instance_types: A list of instance types that may be launched.
        :param pulumi.Input[float] max_vcpus: The maximum number of EC2 vCPUs that an environment can reach.
        :param pulumi.Input[float] min_vcpus: The minimum number of EC2 vCPUs that an environment should maintain.
        :param pulumi.Input[List[pulumi.Input[str]]] security_group_ids: A list of EC2 security group that are associated with instances launched in the compute environment.
        :param pulumi.Input[List[pulumi.Input[str]]] subnets: A list of VPC subnets into which the compute resources are launched.
        :param pulumi.Input[str] type: The type of compute environment. Valid items are `EC2` or `SPOT`.
        :param pulumi.Input[str] allocation_strategy: The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
        :param pulumi.Input[float] bid_percentage: Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
        :param pulumi.Input[float] desired_vcpus: The desired number of EC2 vCPUS in the compute environment.
        :param pulumi.Input[str] ec2_key_pair: The EC2 key pair that is used for instances launched in the compute environment.
        :param pulumi.Input[str] image_id: The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        :param pulumi.Input['ComputeEnvironmentComputeResourcesLaunchTemplateArgs'] launch_template: The launch template to use for your compute resources. See details below.
        :param pulumi.Input[str] spot_iam_fleet_role: The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: Key-value pair tags to be applied to resources that are launched in the compute environment.
        """
        __self__.instance_role = instance_role
        __self__.instance_types = instance_types
        __self__.max_vcpus = max_vcpus
        __self__.min_vcpus = min_vcpus
        __self__.security_group_ids = security_group_ids
        __self__.subnets = subnets
        __self__.type = type
        __self__.allocation_strategy = allocation_strategy
        __self__.bid_percentage = bid_percentage
        __self__.desired_vcpus = desired_vcpus
        __self__.ec2_key_pair = ec2_key_pair
        __self__.image_id = image_id
        __self__.launch_template = launch_template
        __self__.spot_iam_fleet_role = spot_iam_fleet_role
        __self__.tags = tags

@pulumi.input_type
class ComputeEnvironmentComputeResourcesLaunchTemplateArgs:
    launch_template_id: Optional[pulumi.Input[str]] = pulumi.input_property("launchTemplateId")
    """
    ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
    """
    launch_template_name: Optional[pulumi.Input[str]] = pulumi.input_property("launchTemplateName")
    """
    Name of the launch template.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    The version number of the launch template. Default: The default version of the launch template.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, launch_template_id: Optional[pulumi.Input[str]] = None, launch_template_name: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] launch_template_id: ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        :param pulumi.Input[str] launch_template_name: Name of the launch template.
        :param pulumi.Input[str] version: The version number of the launch template. Default: The default version of the launch template.
        """
        __self__.launch_template_id = launch_template_id
        __self__.launch_template_name = launch_template_name
        __self__.version = version

@pulumi.input_type
class JobDefinitionRetryStrategyArgs:
    attempts: Optional[pulumi.Input[float]] = pulumi.input_property("attempts")
    """
    The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attempts: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] attempts: The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
        """
        __self__.attempts = attempts

@pulumi.input_type
class JobDefinitionTimeoutArgs:
    attempt_duration_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("attemptDurationSeconds")
    """
    The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attempt_duration_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] attempt_duration_seconds: The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
        """
        __self__.attempt_duration_seconds = attempt_duration_seconds

