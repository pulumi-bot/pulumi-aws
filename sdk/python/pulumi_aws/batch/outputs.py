# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ComputeEnvironmentComputeResources',
    'ComputeEnvironmentComputeResourcesLaunchTemplate',
    'JobDefinitionRetryStrategy',
    'JobDefinitionTimeout',
    'GetJobQueueComputeEnvironmentOrder',
]

@pulumi.output_type
class ComputeEnvironmentComputeResources(dict):
    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[str]:
        """
        The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
        """
        ...

    @property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[float]:
        """
        Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
        """
        ...

    @property
    @pulumi.getter(name="desiredVcpus")
    def desired_vcpus(self) -> Optional[float]:
        """
        The desired number of EC2 vCPUS in the compute environment.
        """
        ...

    @property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[str]:
        """
        The EC2 key pair that is used for instances launched in the compute environment.
        """
        ...

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        """
        ...

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> str:
        """
        The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        """
        ...

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> List[str]:
        """
        A list of instance types that may be launched.
        """
        ...

    @property
    @pulumi.getter(name="launchTemplate")
    def launch_template(self) -> Optional['outputs.ComputeEnvironmentComputeResourcesLaunchTemplate']:
        """
        The launch template to use for your compute resources. See details below.
        """
        ...

    @property
    @pulumi.getter(name="maxVcpus")
    def max_vcpus(self) -> float:
        """
        The maximum number of EC2 vCPUs that an environment can reach.
        """
        ...

    @property
    @pulumi.getter(name="minVcpus")
    def min_vcpus(self) -> float:
        """
        The minimum number of EC2 vCPUs that an environment should maintain.
        """
        ...

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> List[str]:
        """
        A list of EC2 security group that are associated with instances launched in the compute environment.
        """
        ...

    @property
    @pulumi.getter(name="spotIamFleetRole")
    def spot_iam_fleet_role(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
        """
        ...

    @property
    @pulumi.getter
    def subnets(self) -> List[str]:
        """
        A list of VPC subnets into which the compute resources are launched.
        """
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Key-value pair tags to be applied to resources that are launched in the compute environment.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of compute environment. Valid items are `EC2` or `SPOT`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComputeEnvironmentComputeResourcesLaunchTemplate(dict):
    @property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> Optional[str]:
        """
        ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        """
        ...

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> Optional[str]:
        """
        Name of the launch template.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version number of the launch template. Default: The default version of the launch template.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobDefinitionRetryStrategy(dict):
    @property
    @pulumi.getter
    def attempts(self) -> Optional[float]:
        """
        The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobDefinitionTimeout(dict):
    @property
    @pulumi.getter(name="attemptDurationSeconds")
    def attempt_duration_seconds(self) -> Optional[float]:
        """
        The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetJobQueueComputeEnvironmentOrder(dict):
    @property
    @pulumi.getter(name="computeEnvironment")
    def compute_environment(self) -> str:
        ...

    @property
    @pulumi.getter
    def order(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


