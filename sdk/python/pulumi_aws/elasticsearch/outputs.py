# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DomainAdvancedSecurityOptions',
    'DomainAdvancedSecurityOptionsMasterUserOptions',
    'DomainClusterConfig',
    'DomainClusterConfigZoneAwarenessConfig',
    'DomainCognitoOptions',
    'DomainDomainEndpointOptions',
    'DomainEbsOptions',
    'DomainEncryptAtRest',
    'DomainLogPublishingOption',
    'DomainNodeToNodeEncryption',
    'DomainSnapshotOptions',
    'DomainVpcOptions',
    'GetDomainAdvancedSecurityOption',
    'GetDomainClusterConfig',
    'GetDomainClusterConfigZoneAwarenessConfig',
    'GetDomainCognitoOption',
    'GetDomainEbsOption',
    'GetDomainEncryptionAtRest',
    'GetDomainLogPublishingOption',
    'GetDomainNodeToNodeEncryption',
    'GetDomainSnapshotOption',
    'GetDomainVpcOption',
]

@pulumi.output_type
class DomainAdvancedSecurityOptions(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    internal_user_database_enabled: Optional[bool] = pulumi.output_property("internalUserDatabaseEnabled")
    """
    Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
    """
    master_user_options: Optional['outputs.DomainAdvancedSecurityOptionsMasterUserOptions'] = pulumi.output_property("masterUserOptions")
    """
    Credentials for the master user: username and password, or ARN
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainAdvancedSecurityOptionsMasterUserOptions(dict):
    master_user_arn: Optional[str] = pulumi.output_property("masterUserArn")
    """
    ARN for the master user. Only specify if `internal_user_database_enabled` is not set or set to `false`)
    """
    master_user_name: Optional[str] = pulumi.output_property("masterUserName")
    """
    The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
    """
    master_user_password: Optional[str] = pulumi.output_property("masterUserPassword")
    """
    The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainClusterConfig(dict):
    dedicated_master_count: Optional[float] = pulumi.output_property("dedicatedMasterCount")
    """
    Number of dedicated master nodes in the cluster
    """
    dedicated_master_enabled: Optional[bool] = pulumi.output_property("dedicatedMasterEnabled")
    """
    Indicates whether dedicated master nodes are enabled for the cluster.
    """
    dedicated_master_type: Optional[str] = pulumi.output_property("dedicatedMasterType")
    """
    Instance type of the dedicated master nodes in the cluster.
    """
    instance_count: Optional[float] = pulumi.output_property("instanceCount")
    """
    Number of instances in the cluster.
    """
    instance_type: Optional[str] = pulumi.output_property("instanceType")
    """
    Instance type of data nodes in the cluster.
    """
    warm_count: Optional[float] = pulumi.output_property("warmCount")
    """
    The number of warm nodes in the cluster. Valid values are between `2` and `150`. `warm_count` can be only and must be set when `warm_enabled` is set to `true`.
    """
    warm_enabled: Optional[bool] = pulumi.output_property("warmEnabled")
    """
    Indicates whether to enable warm storage.
    """
    warm_type: Optional[str] = pulumi.output_property("warmType")
    """
    The instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warm_type` can be only and must be set when `warm_enabled` is set to `true`.
    """
    zone_awareness_config: Optional['outputs.DomainClusterConfigZoneAwarenessConfig'] = pulumi.output_property("zoneAwarenessConfig")
    """
    Configuration block containing zone awareness settings. Documented below.
    """
    zone_awareness_enabled: Optional[bool] = pulumi.output_property("zoneAwarenessEnabled")
    """
    Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availability_zone_count` within the `zone_awareness_config` must be set to `3`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainClusterConfigZoneAwarenessConfig(dict):
    availability_zone_count: Optional[float] = pulumi.output_property("availabilityZoneCount")
    """
    Number of Availability Zones for the domain to use with `zone_awareness_enabled`. Defaults to `2`. Valid values: `2` or `3`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainCognitoOptions(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    identity_pool_id: str = pulumi.output_property("identityPoolId")
    """
    ID of the Cognito Identity Pool to use
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    ARN of the IAM role that has the AmazonESCognitoAccess policy attached
    """
    user_pool_id: str = pulumi.output_property("userPoolId")
    """
    ID of the Cognito User Pool to use
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainDomainEndpointOptions(dict):
    enforce_https: bool = pulumi.output_property("enforceHttps")
    """
    Whether or not to require HTTPS
    """
    tls_security_policy: Optional[str] = pulumi.output_property("tlsSecurityPolicy")
    """
    The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainEbsOptions(dict):
    ebs_enabled: bool = pulumi.output_property("ebsEnabled")
    """
    Whether EBS volumes are attached to data nodes in the domain.
    """
    iops: Optional[float] = pulumi.output_property("iops")
    """
    The baseline input/output (I/O) performance of EBS volumes
    attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
    """
    volume_size: Optional[float] = pulumi.output_property("volumeSize")
    """
    The size of EBS volumes attached to data nodes (in GB).
    **Required** if `ebs_enabled` is set to `true`.
    """
    volume_type: Optional[str] = pulumi.output_property("volumeType")
    """
    The type of EBS volumes attached to data nodes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainEncryptAtRest(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    kms_key_id: Optional[str] = pulumi.output_property("kmsKeyId")
    """
    The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainLogPublishingOption(dict):
    cloudwatch_log_group_arn: str = pulumi.output_property("cloudwatchLogGroupArn")
    """
    ARN of the Cloudwatch log group to which log needs to be published.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    log_type: str = pulumi.output_property("logType")
    """
    A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainNodeToNodeEncryption(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainSnapshotOptions(dict):
    automated_snapshot_start_hour: float = pulumi.output_property("automatedSnapshotStartHour")
    """
    Hour during which the service takes an automated daily
    snapshot of the indices in the domain.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainVpcOptions(dict):
    availability_zones: Optional[List[str]] = pulumi.output_property("availabilityZones")
    security_group_ids: Optional[List[str]] = pulumi.output_property("securityGroupIds")
    """
    List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
    """
    subnet_ids: Optional[List[str]] = pulumi.output_property("subnetIds")
    """
    List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
    """
    vpc_id: Optional[str] = pulumi.output_property("vpcId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainAdvancedSecurityOption(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Whether node to node encryption is enabled.
    """
    internal_user_database_enabled: bool = pulumi.output_property("internalUserDatabaseEnabled")
    """
    Whether the internal user database is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainClusterConfig(dict):
    dedicated_master_count: float = pulumi.output_property("dedicatedMasterCount")
    """
    Number of dedicated master nodes in the cluster.
    """
    dedicated_master_enabled: bool = pulumi.output_property("dedicatedMasterEnabled")
    """
    Indicates whether dedicated master nodes are enabled for the cluster.
    """
    dedicated_master_type: str = pulumi.output_property("dedicatedMasterType")
    """
    Instance type of the dedicated master nodes in the cluster.
    """
    instance_count: float = pulumi.output_property("instanceCount")
    """
    Number of instances in the cluster.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    Instance type of data nodes in the cluster.
    """
    warm_count: float = pulumi.output_property("warmCount")
    """
    The number of warm nodes in the cluster.
    """
    warm_enabled: Optional[bool] = pulumi.output_property("warmEnabled")
    """
    Indicates warm storage is enabled.
    """
    warm_type: str = pulumi.output_property("warmType")
    """
    The instance type for the Elasticsearch cluster's warm nodes.
    """
    zone_awareness_configs: List['outputs.GetDomainClusterConfigZoneAwarenessConfig'] = pulumi.output_property("zoneAwarenessConfigs")
    """
    Configuration block containing zone awareness settings.
    """
    zone_awareness_enabled: bool = pulumi.output_property("zoneAwarenessEnabled")
    """
    Indicates whether zone awareness is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainClusterConfigZoneAwarenessConfig(dict):
    availability_zone_count: float = pulumi.output_property("availabilityZoneCount")
    """
    Number of availability zones used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainCognitoOption(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Whether node to node encryption is enabled.
    """
    identity_pool_id: str = pulumi.output_property("identityPoolId")
    """
    The Cognito Identity pool used by the domain.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The IAM Role with the AmazonESCognitoAccess policy attached.
    """
    user_pool_id: str = pulumi.output_property("userPoolId")
    """
    The Cognito User pool used by the domain.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainEbsOption(dict):
    ebs_enabled: bool = pulumi.output_property("ebsEnabled")
    """
    Whether EBS volumes are attached to data nodes in the domain.
    """
    iops: float = pulumi.output_property("iops")
    """
    The baseline input/output (I/O) performance of EBS volumes
    attached to data nodes.
    """
    volume_size: float = pulumi.output_property("volumeSize")
    """
    The size of EBS volumes attached to data nodes (in GB).
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    The type of EBS volumes attached to data nodes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainEncryptionAtRest(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Whether node to node encryption is enabled.
    """
    kms_key_id: str = pulumi.output_property("kmsKeyId")
    """
    The KMS key id used to encrypt data at rest.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainLogPublishingOption(dict):
    cloudwatch_log_group_arn: str = pulumi.output_property("cloudwatchLogGroupArn")
    """
    The CloudWatch Log Group where the logs are published.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Whether node to node encryption is enabled.
    """
    log_type: str = pulumi.output_property("logType")
    """
    The type of Elasticsearch log being published.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainNodeToNodeEncryption(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Whether node to node encryption is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainSnapshotOption(dict):
    automated_snapshot_start_hour: float = pulumi.output_property("automatedSnapshotStartHour")
    """
    Hour during which the service takes an automated daily
    snapshot of the indices in the domain.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainVpcOption(dict):
    availability_zones: List[str] = pulumi.output_property("availabilityZones")
    """
    The availability zones used by the domain.
    """
    security_group_ids: List[str] = pulumi.output_property("securityGroupIds")
    """
    The security groups used by the domain.
    """
    subnet_ids: List[str] = pulumi.output_property("subnetIds")
    """
    The subnets used by the domain.
    """
    vpc_id: str = pulumi.output_property("vpcId")
    """
    The VPC used by the domain.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


