# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DomainAdvancedSecurityOptionsArgs',
    'DomainAdvancedSecurityOptionsMasterUserOptionsArgs',
    'DomainClusterConfigArgs',
    'DomainClusterConfigZoneAwarenessConfigArgs',
    'DomainCognitoOptionsArgs',
    'DomainDomainEndpointOptionsArgs',
    'DomainEbsOptionsArgs',
    'DomainEncryptAtRestArgs',
    'DomainLogPublishingOptionArgs',
    'DomainNodeToNodeEncryptionArgs',
    'DomainSnapshotOptionsArgs',
    'DomainVpcOptionsArgs',
]

@pulumi.input_type
class DomainAdvancedSecurityOptionsArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    internal_user_database_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("internalUserDatabaseEnabled")
    """
    Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
    """
    master_user_options: Optional[pulumi.Input['DomainAdvancedSecurityOptionsMasterUserOptionsArgs']] = pulumi.input_property("masterUserOptions")
    """
    Credentials for the master user: username and password, or ARN
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], internal_user_database_enabled: Optional[pulumi.Input[bool]] = None, master_user_options: Optional[pulumi.Input['DomainAdvancedSecurityOptionsMasterUserOptionsArgs']] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Specifies whether Amazon Cognito authentication with Kibana is enabled or not
        :param pulumi.Input[bool] internal_user_database_enabled: Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
        :param pulumi.Input['DomainAdvancedSecurityOptionsMasterUserOptionsArgs'] master_user_options: Credentials for the master user: username and password, or ARN
        """
        __self__.enabled = enabled
        __self__.internal_user_database_enabled = internal_user_database_enabled
        __self__.master_user_options = master_user_options

@pulumi.input_type
class DomainAdvancedSecurityOptionsMasterUserOptionsArgs:
    master_user_arn: Optional[pulumi.Input[str]] = pulumi.input_property("masterUserArn")
    """
    ARN for the master user. Only specify if `internal_user_database_enabled` is not set or set to `false`)
    """
    master_user_name: Optional[pulumi.Input[str]] = pulumi.input_property("masterUserName")
    """
    The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
    """
    master_user_password: Optional[pulumi.Input[str]] = pulumi.input_property("masterUserPassword")
    """
    The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, master_user_arn: Optional[pulumi.Input[str]] = None, master_user_name: Optional[pulumi.Input[str]] = None, master_user_password: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] master_user_arn: ARN for the master user. Only specify if `internal_user_database_enabled` is not set or set to `false`)
        :param pulumi.Input[str] master_user_name: The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
        :param pulumi.Input[str] master_user_password: The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internal_user_database_enabled` is set to `true`.
        """
        __self__.master_user_arn = master_user_arn
        __self__.master_user_name = master_user_name
        __self__.master_user_password = master_user_password

@pulumi.input_type
class DomainClusterConfigArgs:
    dedicated_master_count: Optional[pulumi.Input[float]] = pulumi.input_property("dedicatedMasterCount")
    """
    Number of dedicated master nodes in the cluster
    """
    dedicated_master_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("dedicatedMasterEnabled")
    """
    Indicates whether dedicated master nodes are enabled for the cluster.
    """
    dedicated_master_type: Optional[pulumi.Input[str]] = pulumi.input_property("dedicatedMasterType")
    """
    Instance type of the dedicated master nodes in the cluster.
    """
    instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("instanceCount")
    """
    Number of instances in the cluster.
    """
    instance_type: Optional[pulumi.Input[str]] = pulumi.input_property("instanceType")
    """
    Instance type of data nodes in the cluster.
    """
    warm_count: Optional[pulumi.Input[float]] = pulumi.input_property("warmCount")
    """
    The number of warm nodes in the cluster. Valid values are between `2` and `150`. `warm_count` can be only and must be set when `warm_enabled` is set to `true`.
    """
    warm_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("warmEnabled")
    """
    Indicates whether to enable warm storage.
    """
    warm_type: Optional[pulumi.Input[str]] = pulumi.input_property("warmType")
    """
    The instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warm_type` can be only and must be set when `warm_enabled` is set to `true`.
    """
    zone_awareness_config: Optional[pulumi.Input['DomainClusterConfigZoneAwarenessConfigArgs']] = pulumi.input_property("zoneAwarenessConfig")
    """
    Configuration block containing zone awareness settings. Documented below.
    """
    zone_awareness_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("zoneAwarenessEnabled")
    """
    Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availability_zone_count` within the `zone_awareness_config` must be set to `3`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dedicated_master_count: Optional[pulumi.Input[float]] = None, dedicated_master_enabled: Optional[pulumi.Input[bool]] = None, dedicated_master_type: Optional[pulumi.Input[str]] = None, instance_count: Optional[pulumi.Input[float]] = None, instance_type: Optional[pulumi.Input[str]] = None, warm_count: Optional[pulumi.Input[float]] = None, warm_enabled: Optional[pulumi.Input[bool]] = None, warm_type: Optional[pulumi.Input[str]] = None, zone_awareness_config: Optional[pulumi.Input['DomainClusterConfigZoneAwarenessConfigArgs']] = None, zone_awareness_enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[float] dedicated_master_count: Number of dedicated master nodes in the cluster
        :param pulumi.Input[bool] dedicated_master_enabled: Indicates whether dedicated master nodes are enabled for the cluster.
        :param pulumi.Input[str] dedicated_master_type: Instance type of the dedicated master nodes in the cluster.
        :param pulumi.Input[float] instance_count: Number of instances in the cluster.
        :param pulumi.Input[str] instance_type: Instance type of data nodes in the cluster.
        :param pulumi.Input[float] warm_count: The number of warm nodes in the cluster. Valid values are between `2` and `150`. `warm_count` can be only and must be set when `warm_enabled` is set to `true`.
        :param pulumi.Input[bool] warm_enabled: Indicates whether to enable warm storage.
        :param pulumi.Input[str] warm_type: The instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warm_type` can be only and must be set when `warm_enabled` is set to `true`.
        :param pulumi.Input['DomainClusterConfigZoneAwarenessConfigArgs'] zone_awareness_config: Configuration block containing zone awareness settings. Documented below.
        :param pulumi.Input[bool] zone_awareness_enabled: Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availability_zone_count` within the `zone_awareness_config` must be set to `3`.
        """
        __self__.dedicated_master_count = dedicated_master_count
        __self__.dedicated_master_enabled = dedicated_master_enabled
        __self__.dedicated_master_type = dedicated_master_type
        __self__.instance_count = instance_count
        __self__.instance_type = instance_type
        __self__.warm_count = warm_count
        __self__.warm_enabled = warm_enabled
        __self__.warm_type = warm_type
        __self__.zone_awareness_config = zone_awareness_config
        __self__.zone_awareness_enabled = zone_awareness_enabled

@pulumi.input_type
class DomainClusterConfigZoneAwarenessConfigArgs:
    availability_zone_count: Optional[pulumi.Input[float]] = pulumi.input_property("availabilityZoneCount")
    """
    Number of Availability Zones for the domain to use with `zone_awareness_enabled`. Defaults to `2`. Valid values: `2` or `3`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, availability_zone_count: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] availability_zone_count: Number of Availability Zones for the domain to use with `zone_awareness_enabled`. Defaults to `2`. Valid values: `2` or `3`.
        """
        __self__.availability_zone_count = availability_zone_count

@pulumi.input_type
class DomainCognitoOptionsArgs:
    identity_pool_id: pulumi.Input[str] = pulumi.input_property("identityPoolId")
    """
    ID of the Cognito Identity Pool to use
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    ARN of the IAM role that has the AmazonESCognitoAccess policy attached
    """
    user_pool_id: pulumi.Input[str] = pulumi.input_property("userPoolId")
    """
    ID of the Cognito User Pool to use
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identity_pool_id: pulumi.Input[str], role_arn: pulumi.Input[str], user_pool_id: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] identity_pool_id: ID of the Cognito Identity Pool to use
        :param pulumi.Input[str] role_arn: ARN of the IAM role that has the AmazonESCognitoAccess policy attached
        :param pulumi.Input[str] user_pool_id: ID of the Cognito User Pool to use
        :param pulumi.Input[bool] enabled: Specifies whether Amazon Cognito authentication with Kibana is enabled or not
        """
        __self__.identity_pool_id = identity_pool_id
        __self__.role_arn = role_arn
        __self__.user_pool_id = user_pool_id
        __self__.enabled = enabled

@pulumi.input_type
class DomainDomainEndpointOptionsArgs:
    enforce_https: pulumi.Input[bool] = pulumi.input_property("enforceHttps")
    """
    Whether or not to require HTTPS
    """
    tls_security_policy: Optional[pulumi.Input[str]] = pulumi.input_property("tlsSecurityPolicy")
    """
    The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enforce_https: pulumi.Input[bool], tls_security_policy: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enforce_https: Whether or not to require HTTPS
        :param pulumi.Input[str] tls_security_policy: The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
        """
        __self__.enforce_https = enforce_https
        __self__.tls_security_policy = tls_security_policy

@pulumi.input_type
class DomainEbsOptionsArgs:
    ebs_enabled: pulumi.Input[bool] = pulumi.input_property("ebsEnabled")
    """
    Whether EBS volumes are attached to data nodes in the domain.
    """
    iops: Optional[pulumi.Input[float]] = pulumi.input_property("iops")
    """
    The baseline input/output (I/O) performance of EBS volumes
    attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
    """
    volume_size: Optional[pulumi.Input[float]] = pulumi.input_property("volumeSize")
    """
    The size of EBS volumes attached to data nodes (in GB).
    **Required** if `ebs_enabled` is set to `true`.
    """
    volume_type: Optional[pulumi.Input[str]] = pulumi.input_property("volumeType")
    """
    The type of EBS volumes attached to data nodes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ebs_enabled: pulumi.Input[bool], iops: Optional[pulumi.Input[float]] = None, volume_size: Optional[pulumi.Input[float]] = None, volume_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] ebs_enabled: Whether EBS volumes are attached to data nodes in the domain.
        :param pulumi.Input[float] iops: The baseline input/output (I/O) performance of EBS volumes
               attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
        :param pulumi.Input[float] volume_size: The size of EBS volumes attached to data nodes (in GB).
               **Required** if `ebs_enabled` is set to `true`.
        :param pulumi.Input[str] volume_type: The type of EBS volumes attached to data nodes.
        """
        __self__.ebs_enabled = ebs_enabled
        __self__.iops = iops
        __self__.volume_size = volume_size
        __self__.volume_type = volume_type

@pulumi.input_type
class DomainEncryptAtRestArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """
    kms_key_id: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyId")
    """
    The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], kms_key_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Specifies whether Amazon Cognito authentication with Kibana is enabled or not
        :param pulumi.Input[str] kms_key_id: The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
        """
        __self__.enabled = enabled
        __self__.kms_key_id = kms_key_id

@pulumi.input_type
class DomainLogPublishingOptionArgs:
    cloudwatch_log_group_arn: pulumi.Input[str] = pulumi.input_property("cloudwatchLogGroupArn")
    """
    ARN of the Cloudwatch log group to which log needs to be published.
    """
    log_type: pulumi.Input[str] = pulumi.input_property("logType")
    """
    A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_log_group_arn: pulumi.Input[str], log_type: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] cloudwatch_log_group_arn: ARN of the Cloudwatch log group to which log needs to be published.
        :param pulumi.Input[str] log_type: A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
        :param pulumi.Input[bool] enabled: Specifies whether Amazon Cognito authentication with Kibana is enabled or not
        """
        __self__.cloudwatch_log_group_arn = cloudwatch_log_group_arn
        __self__.log_type = log_type
        __self__.enabled = enabled

@pulumi.input_type
class DomainNodeToNodeEncryptionArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Specifies whether Amazon Cognito authentication with Kibana is enabled or not
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: Specifies whether Amazon Cognito authentication with Kibana is enabled or not
        """
        __self__.enabled = enabled

@pulumi.input_type
class DomainSnapshotOptionsArgs:
    automated_snapshot_start_hour: pulumi.Input[float] = pulumi.input_property("automatedSnapshotStartHour")
    """
    Hour during which the service takes an automated daily
    snapshot of the indices in the domain.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, automated_snapshot_start_hour: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] automated_snapshot_start_hour: Hour during which the service takes an automated daily
               snapshot of the indices in the domain.
        """
        __self__.automated_snapshot_start_hour = automated_snapshot_start_hour

@pulumi.input_type
class DomainVpcOptionsArgs:
    availability_zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("availabilityZones")
    security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("securityGroupIds")
    """
    List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
    """
    subnet_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("subnetIds")
    """
    List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
    """
    vpc_id: Optional[pulumi.Input[str]] = pulumi.input_property("vpcId")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, availability_zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, vpc_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] security_group_ids: List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
        :param pulumi.Input[List[pulumi.Input[str]]] subnet_ids: List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
        """
        __self__.availability_zones = availability_zones
        __self__.security_group_ids = security_group_ids
        __self__.subnet_ids = subnet_ids
        __self__.vpc_id = vpc_id

