# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'EndpointConfigurationProductionVariant',
    'ModelContainer',
    'ModelPrimaryContainer',
    'ModelVpcConfig',
]

@pulumi.output_type
class EndpointConfigurationProductionVariant(dict):
    accelerator_type: Optional[str] = pulumi.output_property("acceleratorType")
    """
    The size of the Elastic Inference (EI) instance to use for the production variant.
    """
    initial_instance_count: float = pulumi.output_property("initialInstanceCount")
    """
    Initial number of instances used for auto-scaling.
    """
    initial_variant_weight: Optional[float] = pulumi.output_property("initialVariantWeight")
    """
    Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to 1.0.
    """
    instance_type: str = pulumi.output_property("instanceType")
    """
    The type of instance to start.
    """
    model_name: str = pulumi.output_property("modelName")
    """
    The name of the model to use.
    """
    variant_name: Optional[str] = pulumi.output_property("variantName")
    """
    The name of the variant. If omitted, this provider will assign a random, unique name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ModelContainer(dict):
    container_hostname: Optional[str] = pulumi.output_property("containerHostname")
    """
    The DNS host name for the container.
    """
    environment: Optional[Dict[str, str]] = pulumi.output_property("environment")
    """
    Environment variables for the Docker container.
    A list of key value pairs.
    """
    image: str = pulumi.output_property("image")
    """
    The registry path where the inference code image is stored in Amazon ECR.
    """
    model_data_url: Optional[str] = pulumi.output_property("modelDataUrl")
    """
    The URL for the S3 location where model artifacts are stored.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ModelPrimaryContainer(dict):
    container_hostname: Optional[str] = pulumi.output_property("containerHostname")
    """
    The DNS host name for the container.
    """
    environment: Optional[Dict[str, str]] = pulumi.output_property("environment")
    """
    Environment variables for the Docker container.
    A list of key value pairs.
    """
    image: str = pulumi.output_property("image")
    """
    The registry path where the inference code image is stored in Amazon ECR.
    """
    model_data_url: Optional[str] = pulumi.output_property("modelDataUrl")
    """
    The URL for the S3 location where model artifacts are stored.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ModelVpcConfig(dict):
    security_group_ids: List[str] = pulumi.output_property("securityGroupIds")
    subnets: List[str] = pulumi.output_property("subnets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


