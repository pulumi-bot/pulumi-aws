# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DataSourceDynamodbConfigArgs',
    'DataSourceElasticsearchConfigArgs',
    'DataSourceHttpConfigArgs',
    'DataSourceLambdaConfigArgs',
    'GraphQLApiAdditionalAuthenticationProviderArgs',
    'GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs',
    'GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs',
    'GraphQLApiLogConfigArgs',
    'GraphQLApiOpenidConnectConfigArgs',
    'GraphQLApiUserPoolConfigArgs',
    'ResolverCachingConfigArgs',
    'ResolverPipelineConfigArgs',
]

@pulumi.input_type
class DataSourceDynamodbConfigArgs:
    table_name: pulumi.Input[str] = pulumi.input_property("tableName")
    """
    Name of the DynamoDB table.
    """
    region: Optional[pulumi.Input[str]] = pulumi.input_property("region")
    """
    AWS region of Elasticsearch domain. Defaults to current region.
    """
    use_caller_credentials: Optional[pulumi.Input[bool]] = pulumi.input_property("useCallerCredentials")
    """
    Set to `true` to use Amazon Cognito credentials with this data source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, table_name: pulumi.Input[str], region: Optional[pulumi.Input[str]] = None, use_caller_credentials: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] table_name: Name of the DynamoDB table.
        :param pulumi.Input[str] region: AWS region of Elasticsearch domain. Defaults to current region.
        :param pulumi.Input[bool] use_caller_credentials: Set to `true` to use Amazon Cognito credentials with this data source.
        """
        __self__.table_name = table_name
        __self__.region = region
        __self__.use_caller_credentials = use_caller_credentials

@pulumi.input_type
class DataSourceElasticsearchConfigArgs:
    endpoint: pulumi.Input[str] = pulumi.input_property("endpoint")
    """
    HTTP URL.
    """
    region: Optional[pulumi.Input[str]] = pulumi.input_property("region")
    """
    AWS region of Elasticsearch domain. Defaults to current region.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint: pulumi.Input[str], region: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] endpoint: HTTP URL.
        :param pulumi.Input[str] region: AWS region of Elasticsearch domain. Defaults to current region.
        """
        __self__.endpoint = endpoint
        __self__.region = region

@pulumi.input_type
class DataSourceHttpConfigArgs:
    endpoint: pulumi.Input[str] = pulumi.input_property("endpoint")
    """
    HTTP URL.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] endpoint: HTTP URL.
        """
        __self__.endpoint = endpoint

@pulumi.input_type
class DataSourceLambdaConfigArgs:
    function_arn: pulumi.Input[str] = pulumi.input_property("functionArn")
    """
    The ARN for the Lambda function.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, function_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] function_arn: The ARN for the Lambda function.
        """
        __self__.function_arn = function_arn

@pulumi.input_type
class GraphQLApiAdditionalAuthenticationProviderArgs:
    authentication_type: pulumi.Input[str] = pulumi.input_property("authenticationType")
    """
    The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`
    """
    openid_connect_config: Optional[pulumi.Input['GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs']] = pulumi.input_property("openidConnectConfig")
    """
    Nested argument containing OpenID Connect configuration. Defined below.
    """
    user_pool_config: Optional[pulumi.Input['GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs']] = pulumi.input_property("userPoolConfig")
    """
    The Amazon Cognito User Pool configuration. Defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, authentication_type: pulumi.Input[str], openid_connect_config: Optional[pulumi.Input['GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs']] = None, user_pool_config: Optional[pulumi.Input['GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs']] = None) -> None:
        """
        :param pulumi.Input[str] authentication_type: The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`
        :param pulumi.Input['GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs'] openid_connect_config: Nested argument containing OpenID Connect configuration. Defined below.
        :param pulumi.Input['GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs'] user_pool_config: The Amazon Cognito User Pool configuration. Defined below.
        """
        __self__.authentication_type = authentication_type
        __self__.openid_connect_config = openid_connect_config
        __self__.user_pool_config = user_pool_config

@pulumi.input_type
class GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs:
    issuer: pulumi.Input[str] = pulumi.input_property("issuer")
    """
    Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    """
    auth_ttl: Optional[pulumi.Input[float]] = pulumi.input_property("authTtl")
    """
    Number of milliseconds a token is valid after being authenticated.
    """
    client_id: Optional[pulumi.Input[str]] = pulumi.input_property("clientId")
    """
    Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    """
    iat_ttl: Optional[pulumi.Input[float]] = pulumi.input_property("iatTtl")
    """
    Number of milliseconds a token is valid after being issued to a user.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, issuer: pulumi.Input[str], auth_ttl: Optional[pulumi.Input[float]] = None, client_id: Optional[pulumi.Input[str]] = None, iat_ttl: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] issuer: Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
        :param pulumi.Input[float] auth_ttl: Number of milliseconds a token is valid after being authenticated.
        :param pulumi.Input[str] client_id: Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
        :param pulumi.Input[float] iat_ttl: Number of milliseconds a token is valid after being issued to a user.
        """
        __self__.issuer = issuer
        __self__.auth_ttl = auth_ttl
        __self__.client_id = client_id
        __self__.iat_ttl = iat_ttl

@pulumi.input_type
class GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs:
    user_pool_id: pulumi.Input[str] = pulumi.input_property("userPoolId")
    """
    The user pool ID.
    """
    app_id_client_regex: Optional[pulumi.Input[str]] = pulumi.input_property("appIdClientRegex")
    """
    A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    """
    aws_region: Optional[pulumi.Input[str]] = pulumi.input_property("awsRegion")
    """
    The AWS region in which the user pool was created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, user_pool_id: pulumi.Input[str], app_id_client_regex: Optional[pulumi.Input[str]] = None, aws_region: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] user_pool_id: The user pool ID.
        :param pulumi.Input[str] app_id_client_regex: A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
        :param pulumi.Input[str] aws_region: The AWS region in which the user pool was created.
        """
        __self__.user_pool_id = user_pool_id
        __self__.app_id_client_regex = app_id_client_regex
        __self__.aws_region = aws_region

@pulumi.input_type
class GraphQLApiLogConfigArgs:
    cloudwatch_logs_role_arn: pulumi.Input[str] = pulumi.input_property("cloudwatchLogsRoleArn")
    """
    Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
    """
    field_log_level: pulumi.Input[str] = pulumi.input_property("fieldLogLevel")
    """
    Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
    """
    exclude_verbose_content: Optional[pulumi.Input[bool]] = pulumi.input_property("excludeVerboseContent")
    """
    Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloudwatch_logs_role_arn: pulumi.Input[str], field_log_level: pulumi.Input[str], exclude_verbose_content: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] cloudwatch_logs_role_arn: Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
        :param pulumi.Input[str] field_log_level: Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
        :param pulumi.Input[bool] exclude_verbose_content: Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
        """
        __self__.cloudwatch_logs_role_arn = cloudwatch_logs_role_arn
        __self__.field_log_level = field_log_level
        __self__.exclude_verbose_content = exclude_verbose_content

@pulumi.input_type
class GraphQLApiOpenidConnectConfigArgs:
    issuer: pulumi.Input[str] = pulumi.input_property("issuer")
    """
    Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
    """
    auth_ttl: Optional[pulumi.Input[float]] = pulumi.input_property("authTtl")
    """
    Number of milliseconds a token is valid after being authenticated.
    """
    client_id: Optional[pulumi.Input[str]] = pulumi.input_property("clientId")
    """
    Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
    """
    iat_ttl: Optional[pulumi.Input[float]] = pulumi.input_property("iatTtl")
    """
    Number of milliseconds a token is valid after being issued to a user.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, issuer: pulumi.Input[str], auth_ttl: Optional[pulumi.Input[float]] = None, client_id: Optional[pulumi.Input[str]] = None, iat_ttl: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] issuer: Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
        :param pulumi.Input[float] auth_ttl: Number of milliseconds a token is valid after being authenticated.
        :param pulumi.Input[str] client_id: Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
        :param pulumi.Input[float] iat_ttl: Number of milliseconds a token is valid after being issued to a user.
        """
        __self__.issuer = issuer
        __self__.auth_ttl = auth_ttl
        __self__.client_id = client_id
        __self__.iat_ttl = iat_ttl

@pulumi.input_type
class GraphQLApiUserPoolConfigArgs:
    default_action: pulumi.Input[str] = pulumi.input_property("defaultAction")
    """
    The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
    """
    user_pool_id: pulumi.Input[str] = pulumi.input_property("userPoolId")
    """
    The user pool ID.
    """
    app_id_client_regex: Optional[pulumi.Input[str]] = pulumi.input_property("appIdClientRegex")
    """
    A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
    """
    aws_region: Optional[pulumi.Input[str]] = pulumi.input_property("awsRegion")
    """
    The AWS region in which the user pool was created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_action: pulumi.Input[str], user_pool_id: pulumi.Input[str], app_id_client_regex: Optional[pulumi.Input[str]] = None, aws_region: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] default_action: The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
        :param pulumi.Input[str] user_pool_id: The user pool ID.
        :param pulumi.Input[str] app_id_client_regex: A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
        :param pulumi.Input[str] aws_region: The AWS region in which the user pool was created.
        """
        __self__.default_action = default_action
        __self__.user_pool_id = user_pool_id
        __self__.app_id_client_regex = app_id_client_regex
        __self__.aws_region = aws_region

@pulumi.input_type
class ResolverCachingConfigArgs:
    caching_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("cachingKeys")
    """
    The list of caching key.
    """
    ttl: Optional[pulumi.Input[float]] = pulumi.input_property("ttl")
    """
    The TTL in seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, caching_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, ttl: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] caching_keys: The list of caching key.
        :param pulumi.Input[float] ttl: The TTL in seconds.
        """
        __self__.caching_keys = caching_keys
        __self__.ttl = ttl

@pulumi.input_type
class ResolverPipelineConfigArgs:
    functions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("functions")
    """
    The list of Function ID.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, functions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] functions: The list of Function ID.
        """
        __self__.functions = functions

