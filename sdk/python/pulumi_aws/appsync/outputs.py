# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'DataSourceDynamodbConfig',
    'DataSourceElasticsearchConfig',
    'DataSourceHttpConfig',
    'DataSourceLambdaConfig',
    'GraphQLApiAdditionalAuthenticationProvider',
    'GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig',
    'GraphQLApiAdditionalAuthenticationProviderUserPoolConfig',
    'GraphQLApiLogConfig',
    'GraphQLApiOpenidConnectConfig',
    'GraphQLApiUserPoolConfig',
    'ResolverCachingConfig',
    'ResolverPipelineConfig',
]

@pulumi.output_type
class DataSourceDynamodbConfig(dict):
    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        AWS region of Elasticsearch domain. Defaults to current region.
        """
        ...

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Name of the DynamoDB table.
        """
        ...

    @property
    @pulumi.getter(name="useCallerCredentials")
    def use_caller_credentials(self) -> Optional[bool]:
        """
        Set to `true` to use Amazon Cognito credentials with this data source.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataSourceElasticsearchConfig(dict):
    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        HTTP URL.
        """
        ...

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        AWS region of Elasticsearch domain. Defaults to current region.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataSourceHttpConfig(dict):
    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        HTTP URL.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataSourceLambdaConfig(dict):
    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> str:
        """
        The ARN for the Lambda function.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiAdditionalAuthenticationProvider(dict):
    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`
        """
        ...

    @property
    @pulumi.getter(name="openidConnectConfig")
    def openid_connect_config(self) -> Optional['outputs.GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig']:
        """
        Nested argument containing OpenID Connect configuration. Defined below.
        """
        ...

    @property
    @pulumi.getter(name="userPoolConfig")
    def user_pool_config(self) -> Optional['outputs.GraphQLApiAdditionalAuthenticationProviderUserPoolConfig']:
        """
        The Amazon Cognito User Pool configuration. Defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig(dict):
    @property
    @pulumi.getter(name="authTtl")
    def auth_ttl(self) -> Optional[float]:
        """
        Number of milliseconds a token is valid after being authenticated.
        """
        ...

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
        """
        ...

    @property
    @pulumi.getter(name="iatTtl")
    def iat_ttl(self) -> Optional[float]:
        """
        Number of milliseconds a token is valid after being issued to a user.
        """
        ...

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiAdditionalAuthenticationProviderUserPoolConfig(dict):
    @property
    @pulumi.getter(name="appIdClientRegex")
    def app_id_client_regex(self) -> Optional[str]:
        """
        A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
        """
        ...

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        """
        The AWS region in which the user pool was created.
        """
        ...

    @property
    @pulumi.getter(name="userPoolId")
    def user_pool_id(self) -> str:
        """
        The user pool ID.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiLogConfig(dict):
    @property
    @pulumi.getter(name="cloudwatchLogsRoleArn")
    def cloudwatch_logs_role_arn(self) -> str:
        """
        Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
        """
        ...

    @property
    @pulumi.getter(name="excludeVerboseContent")
    def exclude_verbose_content(self) -> Optional[bool]:
        """
        Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
        """
        ...

    @property
    @pulumi.getter(name="fieldLogLevel")
    def field_log_level(self) -> str:
        """
        Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiOpenidConnectConfig(dict):
    @property
    @pulumi.getter(name="authTtl")
    def auth_ttl(self) -> Optional[float]:
        """
        Number of milliseconds a token is valid after being authenticated.
        """
        ...

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
        """
        ...

    @property
    @pulumi.getter(name="iatTtl")
    def iat_ttl(self) -> Optional[float]:
        """
        Number of milliseconds a token is valid after being issued to a user.
        """
        ...

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GraphQLApiUserPoolConfig(dict):
    @property
    @pulumi.getter(name="appIdClientRegex")
    def app_id_client_regex(self) -> Optional[str]:
        """
        A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
        """
        ...

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        """
        The AWS region in which the user pool was created.
        """
        ...

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        """
        The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
        """
        ...

    @property
    @pulumi.getter(name="userPoolId")
    def user_pool_id(self) -> str:
        """
        The user pool ID.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResolverCachingConfig(dict):
    @property
    @pulumi.getter(name="cachingKeys")
    def caching_keys(self) -> Optional[List[str]]:
        """
        The list of caching key.
        """
        ...

    @property
    @pulumi.getter
    def ttl(self) -> Optional[float]:
        """
        The TTL in seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResolverPipelineConfig(dict):
    @property
    @pulumi.getter
    def functions(self) -> Optional[List[str]]:
        """
        The list of Function ID.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


