# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'IdentityPoolCognitoIdentityProvider',
    'IdentityPoolRoleAttachmentRoleMapping',
    'IdentityPoolRoleAttachmentRoleMappingMappingRule',
    'ResourceServerScope',
    'UserPoolAdminCreateUserConfig',
    'UserPoolAdminCreateUserConfigInviteMessageTemplate',
    'UserPoolClientAnalyticsConfiguration',
    'UserPoolDeviceConfiguration',
    'UserPoolEmailConfiguration',
    'UserPoolLambdaConfig',
    'UserPoolPasswordPolicy',
    'UserPoolSchema',
    'UserPoolSchemaNumberAttributeConstraints',
    'UserPoolSchemaStringAttributeConstraints',
    'UserPoolSmsConfiguration',
    'UserPoolSoftwareTokenMfaConfiguration',
    'UserPoolUserPoolAddOns',
    'UserPoolUsernameConfiguration',
    'UserPoolVerificationMessageTemplate',
]

@pulumi.output_type
class IdentityPoolCognitoIdentityProvider(dict):
    client_id: Optional[str] = pulumi.output_property("clientId")
    """
    The client ID for the Amazon Cognito Identity User Pool.
    """
    provider_name: Optional[str] = pulumi.output_property("providerName")
    """
    The provider name for an Amazon Cognito Identity User Pool.
    """
    server_side_token_check: Optional[bool] = pulumi.output_property("serverSideTokenCheck")
    """
    Whether server-side token validation is enabled for the identity provider’s token or not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IdentityPoolRoleAttachmentRoleMapping(dict):
    ambiguous_role_resolution: Optional[str] = pulumi.output_property("ambiguousRoleResolution")
    """
    Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
    """
    identity_provider: str = pulumi.output_property("identityProvider")
    """
    A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
    """
    mapping_rules: Optional[List['outputs.IdentityPoolRoleAttachmentRoleMappingMappingRule']] = pulumi.output_property("mappingRules")
    """
    The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
    """
    type: str = pulumi.output_property("type")
    """
    The role mapping type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IdentityPoolRoleAttachmentRoleMappingMappingRule(dict):
    claim: str = pulumi.output_property("claim")
    """
    The claim name that must be present in the token, for example, "isAdmin" or "paid".
    """
    match_type: str = pulumi.output_property("matchType")
    """
    The match condition that specifies how closely the claim value in the IdP token must match Value.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The role ARN.
    """
    value: str = pulumi.output_property("value")
    """
    A brief string that the claim must match, for example, "paid" or "yes".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceServerScope(dict):
    scope_description: str = pulumi.output_property("scopeDescription")
    """
    The scope description.
    """
    scope_name: str = pulumi.output_property("scopeName")
    """
    The scope name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolAdminCreateUserConfig(dict):
    allow_admin_create_user_only: Optional[bool] = pulumi.output_property("allowAdminCreateUserOnly")
    """
    Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
    """
    invite_message_template: Optional['outputs.UserPoolAdminCreateUserConfigInviteMessageTemplate'] = pulumi.output_property("inviteMessageTemplate")
    """
    The invite message template structure.
    """
    unused_account_validity_days: Optional[float] = pulumi.output_property("unusedAccountValidityDays")
    """
    **DEPRECATED** Use password_policy.temporary_password_validity_days instead - The user account expiration limit, in days, after which the account is no longer usable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolAdminCreateUserConfigInviteMessageTemplate(dict):
    email_message: Optional[str] = pulumi.output_property("emailMessage")
    """
    The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
    """
    email_subject: Optional[str] = pulumi.output_property("emailSubject")
    """
    The subject line for the email message template. Conflicts with `email_verification_subject` argument.
    """
    sms_message: Optional[str] = pulumi.output_property("smsMessage")
    """
    The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolClientAnalyticsConfiguration(dict):
    application_id: str = pulumi.output_property("applicationId")
    """
    The application ID for an Amazon Pinpoint application.
    """
    external_id: str = pulumi.output_property("externalId")
    """
    An ID for the Analytics Configuration.
    """
    role_arn: str = pulumi.output_property("roleArn")
    """
    The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
    """
    user_data_shared: Optional[bool] = pulumi.output_property("userDataShared")
    """
    If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolDeviceConfiguration(dict):
    challenge_required_on_new_device: Optional[bool] = pulumi.output_property("challengeRequiredOnNewDevice")
    """
    Indicates whether a challenge is required on a new device. Only applicable to a new device.
    """
    device_only_remembered_on_user_prompt: Optional[bool] = pulumi.output_property("deviceOnlyRememberedOnUserPrompt")
    """
    If true, a device is only remembered on user prompt.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolEmailConfiguration(dict):
    email_sending_account: Optional[str] = pulumi.output_property("emailSendingAccount")
    """
    The email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration.
    """
    from_email_address: Optional[str] = pulumi.output_property("fromEmailAddress")
    """
    Sender’s email address or sender’s display name with their email address (e.g. `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
    """
    reply_to_email_address: Optional[str] = pulumi.output_property("replyToEmailAddress")
    """
    The REPLY-TO email address.
    """
    source_arn: Optional[str] = pulumi.output_property("sourceArn")
    """
    The ARN of the SES verified email identity to to use. Required if `email_sending_account` is set to `DEVELOPER`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolLambdaConfig(dict):
    create_auth_challenge: Optional[str] = pulumi.output_property("createAuthChallenge")
    """
    The ARN of the lambda creating an authentication challenge.
    """
    custom_message: Optional[str] = pulumi.output_property("customMessage")
    """
    A custom Message AWS Lambda trigger.
    """
    define_auth_challenge: Optional[str] = pulumi.output_property("defineAuthChallenge")
    """
    Defines the authentication challenge.
    """
    post_authentication: Optional[str] = pulumi.output_property("postAuthentication")
    """
    A post-authentication AWS Lambda trigger.
    """
    post_confirmation: Optional[str] = pulumi.output_property("postConfirmation")
    """
    A post-confirmation AWS Lambda trigger.
    """
    pre_authentication: Optional[str] = pulumi.output_property("preAuthentication")
    """
    A pre-authentication AWS Lambda trigger.
    """
    pre_sign_up: Optional[str] = pulumi.output_property("preSignUp")
    """
    A pre-registration AWS Lambda trigger.
    """
    pre_token_generation: Optional[str] = pulumi.output_property("preTokenGeneration")
    """
    Allow to customize identity token claims before token generation.
    """
    user_migration: Optional[str] = pulumi.output_property("userMigration")
    """
    The user migration Lambda config type.
    """
    verify_auth_challenge_response: Optional[str] = pulumi.output_property("verifyAuthChallengeResponse")
    """
    Verifies the authentication challenge response.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolPasswordPolicy(dict):
    minimum_length: Optional[float] = pulumi.output_property("minimumLength")
    """
    The minimum length of the password policy that you have set.
    """
    require_lowercase: Optional[bool] = pulumi.output_property("requireLowercase")
    """
    Whether you have required users to use at least one lowercase letter in their password.
    """
    require_numbers: Optional[bool] = pulumi.output_property("requireNumbers")
    """
    Whether you have required users to use at least one number in their password.
    """
    require_symbols: Optional[bool] = pulumi.output_property("requireSymbols")
    """
    Whether you have required users to use at least one symbol in their password.
    """
    require_uppercase: Optional[bool] = pulumi.output_property("requireUppercase")
    """
    Whether you have required users to use at least one uppercase letter in their password.
    """
    temporary_password_validity_days: Optional[float] = pulumi.output_property("temporaryPasswordValidityDays")
    """
    In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolSchema(dict):
    attribute_data_type: str = pulumi.output_property("attributeDataType")
    """
    The attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
    """
    developer_only_attribute: Optional[bool] = pulumi.output_property("developerOnlyAttribute")
    """
    Specifies whether the attribute type is developer only.
    """
    mutable: Optional[bool] = pulumi.output_property("mutable")
    """
    Specifies whether the attribute can be changed once it has been created.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the attribute.
    """
    number_attribute_constraints: Optional['outputs.UserPoolSchemaNumberAttributeConstraints'] = pulumi.output_property("numberAttributeConstraints")
    """
    Specifies the constraints for an attribute of the number type.
    """
    required: Optional[bool] = pulumi.output_property("required")
    """
    Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    """
    string_attribute_constraints: Optional['outputs.UserPoolSchemaStringAttributeConstraints'] = pulumi.output_property("stringAttributeConstraints")
    """
    -Specifies the constraints for an attribute of the string type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolSchemaNumberAttributeConstraints(dict):
    max_value: Optional[str] = pulumi.output_property("maxValue")
    """
    The maximum value of an attribute that is of the number data type.
    """
    min_value: Optional[str] = pulumi.output_property("minValue")
    """
    The minimum value of an attribute that is of the number data type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolSchemaStringAttributeConstraints(dict):
    max_length: Optional[str] = pulumi.output_property("maxLength")
    """
    The maximum length of an attribute value of the string type.
    """
    min_length: Optional[str] = pulumi.output_property("minLength")
    """
    The minimum length of an attribute value of the string type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolSmsConfiguration(dict):
    external_id: str = pulumi.output_property("externalId")
    """
    The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
    """
    sns_caller_arn: str = pulumi.output_property("snsCallerArn")
    """
    The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolSoftwareTokenMfaConfiguration(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA when `sms_configuration` is not present, the `mfa_configuration` argument must be set to `OFF` and the `software_token_mfa_configuration` configuration block must be fully removed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolUserPoolAddOns(dict):
    advanced_security_mode: str = pulumi.output_property("advancedSecurityMode")
    """
    The mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolUsernameConfiguration(dict):
    case_sensitive: bool = pulumi.output_property("caseSensitive")
    """
    Specifies whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserPoolVerificationMessageTemplate(dict):
    default_email_option: Optional[str] = pulumi.output_property("defaultEmailOption")
    """
    The default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
    """
    email_message: Optional[str] = pulumi.output_property("emailMessage")
    """
    The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
    """
    email_message_by_link: Optional[str] = pulumi.output_property("emailMessageByLink")
    """
    The email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
    """
    email_subject: Optional[str] = pulumi.output_property("emailSubject")
    """
    The subject line for the email message template. Conflicts with `email_verification_subject` argument.
    """
    email_subject_by_link: Optional[str] = pulumi.output_property("emailSubjectByLink")
    """
    The subject line for the email message template for sending a confirmation link to the user.
    """
    sms_message: Optional[str] = pulumi.output_property("smsMessage")
    """
    The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


