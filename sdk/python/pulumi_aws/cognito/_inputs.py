# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'IdentityPoolCognitoIdentityProviderArgs',
    'IdentityPoolRoleAttachmentRoleMappingArgs',
    'IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs',
    'ResourceServerScopeArgs',
    'UserPoolAdminCreateUserConfigArgs',
    'UserPoolAdminCreateUserConfigInviteMessageTemplateArgs',
    'UserPoolClientAnalyticsConfigurationArgs',
    'UserPoolDeviceConfigurationArgs',
    'UserPoolEmailConfigurationArgs',
    'UserPoolLambdaConfigArgs',
    'UserPoolPasswordPolicyArgs',
    'UserPoolSchemaArgs',
    'UserPoolSchemaNumberAttributeConstraintsArgs',
    'UserPoolSchemaStringAttributeConstraintsArgs',
    'UserPoolSmsConfigurationArgs',
    'UserPoolSoftwareTokenMfaConfigurationArgs',
    'UserPoolUserPoolAddOnsArgs',
    'UserPoolUsernameConfigurationArgs',
    'UserPoolVerificationMessageTemplateArgs',
]

@pulumi.input_type
class IdentityPoolCognitoIdentityProviderArgs:
    client_id: Optional[pulumi.Input[str]] = pulumi.input_property("clientId")
    """
    The client ID for the Amazon Cognito Identity User Pool.
    """
    provider_name: Optional[pulumi.Input[str]] = pulumi.input_property("providerName")
    """
    The provider name for an Amazon Cognito Identity User Pool.
    """
    server_side_token_check: Optional[pulumi.Input[bool]] = pulumi.input_property("serverSideTokenCheck")
    """
    Whether server-side token validation is enabled for the identity provider’s token or not.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, client_id: Optional[pulumi.Input[str]] = None, provider_name: Optional[pulumi.Input[str]] = None, server_side_token_check: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] client_id: The client ID for the Amazon Cognito Identity User Pool.
        :param pulumi.Input[str] provider_name: The provider name for an Amazon Cognito Identity User Pool.
        :param pulumi.Input[bool] server_side_token_check: Whether server-side token validation is enabled for the identity provider’s token or not.
        """
        __self__.client_id = client_id
        __self__.provider_name = provider_name
        __self__.server_side_token_check = server_side_token_check

@pulumi.input_type
class IdentityPoolRoleAttachmentRoleMappingArgs:
    identity_provider: pulumi.Input[str] = pulumi.input_property("identityProvider")
    """
    A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The role mapping type.
    """
    ambiguous_role_resolution: Optional[pulumi.Input[str]] = pulumi.input_property("ambiguousRoleResolution")
    """
    Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
    """
    mapping_rules: Optional[pulumi.Input[List[pulumi.Input['IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs']]]] = pulumi.input_property("mappingRules")
    """
    The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identity_provider: pulumi.Input[str], type: pulumi.Input[str], ambiguous_role_resolution: Optional[pulumi.Input[str]] = None, mapping_rules: Optional[pulumi.Input[List[pulumi.Input['IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] identity_provider: A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
        :param pulumi.Input[str] type: The role mapping type.
        :param pulumi.Input[str] ambiguous_role_resolution: Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
        :param pulumi.Input[List[pulumi.Input['IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs']]] mapping_rules: The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
        """
        __self__.identity_provider = identity_provider
        __self__.type = type
        __self__.ambiguous_role_resolution = ambiguous_role_resolution
        __self__.mapping_rules = mapping_rules

@pulumi.input_type
class IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs:
    claim: pulumi.Input[str] = pulumi.input_property("claim")
    """
    The claim name that must be present in the token, for example, "isAdmin" or "paid".
    """
    match_type: pulumi.Input[str] = pulumi.input_property("matchType")
    """
    The match condition that specifies how closely the claim value in the IdP token must match Value.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The role ARN.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    A brief string that the claim must match, for example, "paid" or "yes".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, claim: pulumi.Input[str], match_type: pulumi.Input[str], role_arn: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] claim: The claim name that must be present in the token, for example, "isAdmin" or "paid".
        :param pulumi.Input[str] match_type: The match condition that specifies how closely the claim value in the IdP token must match Value.
        :param pulumi.Input[str] role_arn: The role ARN.
        :param pulumi.Input[str] value: A brief string that the claim must match, for example, "paid" or "yes".
        """
        __self__.claim = claim
        __self__.match_type = match_type
        __self__.role_arn = role_arn
        __self__.value = value

@pulumi.input_type
class ResourceServerScopeArgs:
    scope_description: pulumi.Input[str] = pulumi.input_property("scopeDescription")
    """
    The scope description.
    """
    scope_name: pulumi.Input[str] = pulumi.input_property("scopeName")
    """
    The scope name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, scope_description: pulumi.Input[str], scope_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] scope_description: The scope description.
        :param pulumi.Input[str] scope_name: The scope name.
        """
        __self__.scope_description = scope_description
        __self__.scope_name = scope_name

@pulumi.input_type
class UserPoolAdminCreateUserConfigArgs:
    allow_admin_create_user_only: Optional[pulumi.Input[bool]] = pulumi.input_property("allowAdminCreateUserOnly")
    """
    Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
    """
    invite_message_template: Optional[pulumi.Input['UserPoolAdminCreateUserConfigInviteMessageTemplateArgs']] = pulumi.input_property("inviteMessageTemplate")
    """
    The invite message template structure.
    """
    unused_account_validity_days: Optional[pulumi.Input[float]] = pulumi.input_property("unusedAccountValidityDays")
    """
    **DEPRECATED** Use password_policy.temporary_password_validity_days instead - The user account expiration limit, in days, after which the account is no longer usable.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allow_admin_create_user_only: Optional[pulumi.Input[bool]] = None, invite_message_template: Optional[pulumi.Input['UserPoolAdminCreateUserConfigInviteMessageTemplateArgs']] = None, unused_account_validity_days: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[bool] allow_admin_create_user_only: Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        :param pulumi.Input['UserPoolAdminCreateUserConfigInviteMessageTemplateArgs'] invite_message_template: The invite message template structure.
        :param pulumi.Input[float] unused_account_validity_days: **DEPRECATED** Use password_policy.temporary_password_validity_days instead - The user account expiration limit, in days, after which the account is no longer usable.
        """
        __self__.allow_admin_create_user_only = allow_admin_create_user_only
        __self__.invite_message_template = invite_message_template
        if unused_account_validity_days is not None:
            warnings.warn("Use password_policy.temporary_password_validity_days instead", DeprecationWarning)
            pulumi.log.warn("unused_account_validity_days is deprecated: Use password_policy.temporary_password_validity_days instead")
        __self__.unused_account_validity_days = unused_account_validity_days

@pulumi.input_type
class UserPoolAdminCreateUserConfigInviteMessageTemplateArgs:
    email_message: Optional[pulumi.Input[str]] = pulumi.input_property("emailMessage")
    """
    The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
    """
    email_subject: Optional[pulumi.Input[str]] = pulumi.input_property("emailSubject")
    """
    The subject line for the email message template. Conflicts with `email_verification_subject` argument.
    """
    sms_message: Optional[pulumi.Input[str]] = pulumi.input_property("smsMessage")
    """
    The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, email_message: Optional[pulumi.Input[str]] = None, email_subject: Optional[pulumi.Input[str]] = None, sms_message: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] email_message: The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
        :param pulumi.Input[str] email_subject: The subject line for the email message template. Conflicts with `email_verification_subject` argument.
        :param pulumi.Input[str] sms_message: The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
        """
        __self__.email_message = email_message
        __self__.email_subject = email_subject
        __self__.sms_message = sms_message

@pulumi.input_type
class UserPoolClientAnalyticsConfigurationArgs:
    application_id: pulumi.Input[str] = pulumi.input_property("applicationId")
    """
    The application ID for an Amazon Pinpoint application.
    """
    external_id: pulumi.Input[str] = pulumi.input_property("externalId")
    """
    An ID for the Analytics Configuration.
    """
    role_arn: pulumi.Input[str] = pulumi.input_property("roleArn")
    """
    The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
    """
    user_data_shared: Optional[pulumi.Input[bool]] = pulumi.input_property("userDataShared")
    """
    If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, application_id: pulumi.Input[str], external_id: pulumi.Input[str], role_arn: pulumi.Input[str], user_data_shared: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] application_id: The application ID for an Amazon Pinpoint application.
        :param pulumi.Input[str] external_id: An ID for the Analytics Configuration.
        :param pulumi.Input[str] role_arn: The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        :param pulumi.Input[bool] user_data_shared: If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
        """
        __self__.application_id = application_id
        __self__.external_id = external_id
        __self__.role_arn = role_arn
        __self__.user_data_shared = user_data_shared

@pulumi.input_type
class UserPoolDeviceConfigurationArgs:
    challenge_required_on_new_device: Optional[pulumi.Input[bool]] = pulumi.input_property("challengeRequiredOnNewDevice")
    """
    Indicates whether a challenge is required on a new device. Only applicable to a new device.
    """
    device_only_remembered_on_user_prompt: Optional[pulumi.Input[bool]] = pulumi.input_property("deviceOnlyRememberedOnUserPrompt")
    """
    If true, a device is only remembered on user prompt.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, challenge_required_on_new_device: Optional[pulumi.Input[bool]] = None, device_only_remembered_on_user_prompt: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] challenge_required_on_new_device: Indicates whether a challenge is required on a new device. Only applicable to a new device.
        :param pulumi.Input[bool] device_only_remembered_on_user_prompt: If true, a device is only remembered on user prompt.
        """
        __self__.challenge_required_on_new_device = challenge_required_on_new_device
        __self__.device_only_remembered_on_user_prompt = device_only_remembered_on_user_prompt

@pulumi.input_type
class UserPoolEmailConfigurationArgs:
    email_sending_account: Optional[pulumi.Input[str]] = pulumi.input_property("emailSendingAccount")
    """
    The email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration.
    """
    from_email_address: Optional[pulumi.Input[str]] = pulumi.input_property("fromEmailAddress")
    """
    Sender’s email address or sender’s display name with their email address (e.g. `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
    """
    reply_to_email_address: Optional[pulumi.Input[str]] = pulumi.input_property("replyToEmailAddress")
    """
    The REPLY-TO email address.
    """
    source_arn: Optional[pulumi.Input[str]] = pulumi.input_property("sourceArn")
    """
    The ARN of the SES verified email identity to to use. Required if `email_sending_account` is set to `DEVELOPER`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, email_sending_account: Optional[pulumi.Input[str]] = None, from_email_address: Optional[pulumi.Input[str]] = None, reply_to_email_address: Optional[pulumi.Input[str]] = None, source_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] email_sending_account: The email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration.
        :param pulumi.Input[str] from_email_address: Sender’s email address or sender’s display name with their email address (e.g. `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
        :param pulumi.Input[str] reply_to_email_address: The REPLY-TO email address.
        :param pulumi.Input[str] source_arn: The ARN of the SES verified email identity to to use. Required if `email_sending_account` is set to `DEVELOPER`.
        """
        __self__.email_sending_account = email_sending_account
        __self__.from_email_address = from_email_address
        __self__.reply_to_email_address = reply_to_email_address
        __self__.source_arn = source_arn

@pulumi.input_type
class UserPoolLambdaConfigArgs:
    create_auth_challenge: Optional[pulumi.Input[str]] = pulumi.input_property("createAuthChallenge")
    """
    The ARN of the lambda creating an authentication challenge.
    """
    custom_message: Optional[pulumi.Input[str]] = pulumi.input_property("customMessage")
    """
    A custom Message AWS Lambda trigger.
    """
    define_auth_challenge: Optional[pulumi.Input[str]] = pulumi.input_property("defineAuthChallenge")
    """
    Defines the authentication challenge.
    """
    post_authentication: Optional[pulumi.Input[str]] = pulumi.input_property("postAuthentication")
    """
    A post-authentication AWS Lambda trigger.
    """
    post_confirmation: Optional[pulumi.Input[str]] = pulumi.input_property("postConfirmation")
    """
    A post-confirmation AWS Lambda trigger.
    """
    pre_authentication: Optional[pulumi.Input[str]] = pulumi.input_property("preAuthentication")
    """
    A pre-authentication AWS Lambda trigger.
    """
    pre_sign_up: Optional[pulumi.Input[str]] = pulumi.input_property("preSignUp")
    """
    A pre-registration AWS Lambda trigger.
    """
    pre_token_generation: Optional[pulumi.Input[str]] = pulumi.input_property("preTokenGeneration")
    """
    Allow to customize identity token claims before token generation.
    """
    user_migration: Optional[pulumi.Input[str]] = pulumi.input_property("userMigration")
    """
    The user migration Lambda config type.
    """
    verify_auth_challenge_response: Optional[pulumi.Input[str]] = pulumi.input_property("verifyAuthChallengeResponse")
    """
    Verifies the authentication challenge response.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, create_auth_challenge: Optional[pulumi.Input[str]] = None, custom_message: Optional[pulumi.Input[str]] = None, define_auth_challenge: Optional[pulumi.Input[str]] = None, post_authentication: Optional[pulumi.Input[str]] = None, post_confirmation: Optional[pulumi.Input[str]] = None, pre_authentication: Optional[pulumi.Input[str]] = None, pre_sign_up: Optional[pulumi.Input[str]] = None, pre_token_generation: Optional[pulumi.Input[str]] = None, user_migration: Optional[pulumi.Input[str]] = None, verify_auth_challenge_response: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] create_auth_challenge: The ARN of the lambda creating an authentication challenge.
        :param pulumi.Input[str] custom_message: A custom Message AWS Lambda trigger.
        :param pulumi.Input[str] define_auth_challenge: Defines the authentication challenge.
        :param pulumi.Input[str] post_authentication: A post-authentication AWS Lambda trigger.
        :param pulumi.Input[str] post_confirmation: A post-confirmation AWS Lambda trigger.
        :param pulumi.Input[str] pre_authentication: A pre-authentication AWS Lambda trigger.
        :param pulumi.Input[str] pre_sign_up: A pre-registration AWS Lambda trigger.
        :param pulumi.Input[str] pre_token_generation: Allow to customize identity token claims before token generation.
        :param pulumi.Input[str] user_migration: The user migration Lambda config type.
        :param pulumi.Input[str] verify_auth_challenge_response: Verifies the authentication challenge response.
        """
        __self__.create_auth_challenge = create_auth_challenge
        __self__.custom_message = custom_message
        __self__.define_auth_challenge = define_auth_challenge
        __self__.post_authentication = post_authentication
        __self__.post_confirmation = post_confirmation
        __self__.pre_authentication = pre_authentication
        __self__.pre_sign_up = pre_sign_up
        __self__.pre_token_generation = pre_token_generation
        __self__.user_migration = user_migration
        __self__.verify_auth_challenge_response = verify_auth_challenge_response

@pulumi.input_type
class UserPoolPasswordPolicyArgs:
    minimum_length: Optional[pulumi.Input[float]] = pulumi.input_property("minimumLength")
    """
    The minimum length of the password policy that you have set.
    """
    require_lowercase: Optional[pulumi.Input[bool]] = pulumi.input_property("requireLowercase")
    """
    Whether you have required users to use at least one lowercase letter in their password.
    """
    require_numbers: Optional[pulumi.Input[bool]] = pulumi.input_property("requireNumbers")
    """
    Whether you have required users to use at least one number in their password.
    """
    require_symbols: Optional[pulumi.Input[bool]] = pulumi.input_property("requireSymbols")
    """
    Whether you have required users to use at least one symbol in their password.
    """
    require_uppercase: Optional[pulumi.Input[bool]] = pulumi.input_property("requireUppercase")
    """
    Whether you have required users to use at least one uppercase letter in their password.
    """
    temporary_password_validity_days: Optional[pulumi.Input[float]] = pulumi.input_property("temporaryPasswordValidityDays")
    """
    In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, minimum_length: Optional[pulumi.Input[float]] = None, require_lowercase: Optional[pulumi.Input[bool]] = None, require_numbers: Optional[pulumi.Input[bool]] = None, require_symbols: Optional[pulumi.Input[bool]] = None, require_uppercase: Optional[pulumi.Input[bool]] = None, temporary_password_validity_days: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] minimum_length: The minimum length of the password policy that you have set.
        :param pulumi.Input[bool] require_lowercase: Whether you have required users to use at least one lowercase letter in their password.
        :param pulumi.Input[bool] require_numbers: Whether you have required users to use at least one number in their password.
        :param pulumi.Input[bool] require_symbols: Whether you have required users to use at least one symbol in their password.
        :param pulumi.Input[bool] require_uppercase: Whether you have required users to use at least one uppercase letter in their password.
        :param pulumi.Input[float] temporary_password_validity_days: In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
        """
        __self__.minimum_length = minimum_length
        __self__.require_lowercase = require_lowercase
        __self__.require_numbers = require_numbers
        __self__.require_symbols = require_symbols
        __self__.require_uppercase = require_uppercase
        __self__.temporary_password_validity_days = temporary_password_validity_days

@pulumi.input_type
class UserPoolSchemaArgs:
    attribute_data_type: pulumi.Input[str] = pulumi.input_property("attributeDataType")
    """
    The attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the attribute.
    """
    developer_only_attribute: Optional[pulumi.Input[bool]] = pulumi.input_property("developerOnlyAttribute")
    """
    Specifies whether the attribute type is developer only.
    """
    mutable: Optional[pulumi.Input[bool]] = pulumi.input_property("mutable")
    """
    Specifies whether the attribute can be changed once it has been created.
    """
    number_attribute_constraints: Optional[pulumi.Input['UserPoolSchemaNumberAttributeConstraintsArgs']] = pulumi.input_property("numberAttributeConstraints")
    """
    Specifies the constraints for an attribute of the number type.
    """
    required: Optional[pulumi.Input[bool]] = pulumi.input_property("required")
    """
    Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    """
    string_attribute_constraints: Optional[pulumi.Input['UserPoolSchemaStringAttributeConstraintsArgs']] = pulumi.input_property("stringAttributeConstraints")
    """
    -Specifies the constraints for an attribute of the string type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attribute_data_type: pulumi.Input[str], name: pulumi.Input[str], developer_only_attribute: Optional[pulumi.Input[bool]] = None, mutable: Optional[pulumi.Input[bool]] = None, number_attribute_constraints: Optional[pulumi.Input['UserPoolSchemaNumberAttributeConstraintsArgs']] = None, required: Optional[pulumi.Input[bool]] = None, string_attribute_constraints: Optional[pulumi.Input['UserPoolSchemaStringAttributeConstraintsArgs']] = None) -> None:
        """
        :param pulumi.Input[str] attribute_data_type: The attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
        :param pulumi.Input[str] name: The name of the attribute.
        :param pulumi.Input[bool] developer_only_attribute: Specifies whether the attribute type is developer only.
        :param pulumi.Input[bool] mutable: Specifies whether the attribute can be changed once it has been created.
        :param pulumi.Input['UserPoolSchemaNumberAttributeConstraintsArgs'] number_attribute_constraints: Specifies the constraints for an attribute of the number type.
        :param pulumi.Input[bool] required: Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        :param pulumi.Input['UserPoolSchemaStringAttributeConstraintsArgs'] string_attribute_constraints: -Specifies the constraints for an attribute of the string type.
        """
        __self__.attribute_data_type = attribute_data_type
        __self__.name = name
        __self__.developer_only_attribute = developer_only_attribute
        __self__.mutable = mutable
        __self__.number_attribute_constraints = number_attribute_constraints
        __self__.required = required
        __self__.string_attribute_constraints = string_attribute_constraints

@pulumi.input_type
class UserPoolSchemaNumberAttributeConstraintsArgs:
    max_value: Optional[pulumi.Input[str]] = pulumi.input_property("maxValue")
    """
    The maximum value of an attribute that is of the number data type.
    """
    min_value: Optional[pulumi.Input[str]] = pulumi.input_property("minValue")
    """
    The minimum value of an attribute that is of the number data type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_value: Optional[pulumi.Input[str]] = None, min_value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] max_value: The maximum value of an attribute that is of the number data type.
        :param pulumi.Input[str] min_value: The minimum value of an attribute that is of the number data type.
        """
        __self__.max_value = max_value
        __self__.min_value = min_value

@pulumi.input_type
class UserPoolSchemaStringAttributeConstraintsArgs:
    max_length: Optional[pulumi.Input[str]] = pulumi.input_property("maxLength")
    """
    The maximum length of an attribute value of the string type.
    """
    min_length: Optional[pulumi.Input[str]] = pulumi.input_property("minLength")
    """
    The minimum length of an attribute value of the string type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_length: Optional[pulumi.Input[str]] = None, min_length: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] max_length: The maximum length of an attribute value of the string type.
        :param pulumi.Input[str] min_length: The minimum length of an attribute value of the string type.
        """
        __self__.max_length = max_length
        __self__.min_length = min_length

@pulumi.input_type
class UserPoolSmsConfigurationArgs:
    external_id: pulumi.Input[str] = pulumi.input_property("externalId")
    """
    The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
    """
    sns_caller_arn: pulumi.Input[str] = pulumi.input_property("snsCallerArn")
    """
    The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, external_id: pulumi.Input[str], sns_caller_arn: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] external_id: The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
        :param pulumi.Input[str] sns_caller_arn: The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
        """
        __self__.external_id = external_id
        __self__.sns_caller_arn = sns_caller_arn

@pulumi.input_type
class UserPoolSoftwareTokenMfaConfigurationArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA when `sms_configuration` is not present, the `mfa_configuration` argument must be set to `OFF` and the `software_token_mfa_configuration` configuration block must be fully removed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA when `sms_configuration` is not present, the `mfa_configuration` argument must be set to `OFF` and the `software_token_mfa_configuration` configuration block must be fully removed.
        """
        __self__.enabled = enabled

@pulumi.input_type
class UserPoolUserPoolAddOnsArgs:
    advanced_security_mode: pulumi.Input[str] = pulumi.input_property("advancedSecurityMode")
    """
    The mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, advanced_security_mode: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] advanced_security_mode: The mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
        """
        __self__.advanced_security_mode = advanced_security_mode

@pulumi.input_type
class UserPoolUsernameConfigurationArgs:
    case_sensitive: pulumi.Input[bool] = pulumi.input_property("caseSensitive")
    """
    Specifies whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, case_sensitive: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] case_sensitive: Specifies whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
        """
        __self__.case_sensitive = case_sensitive

@pulumi.input_type
class UserPoolVerificationMessageTemplateArgs:
    default_email_option: Optional[pulumi.Input[str]] = pulumi.input_property("defaultEmailOption")
    """
    The default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
    """
    email_message: Optional[pulumi.Input[str]] = pulumi.input_property("emailMessage")
    """
    The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
    """
    email_message_by_link: Optional[pulumi.Input[str]] = pulumi.input_property("emailMessageByLink")
    """
    The email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
    """
    email_subject: Optional[pulumi.Input[str]] = pulumi.input_property("emailSubject")
    """
    The subject line for the email message template. Conflicts with `email_verification_subject` argument.
    """
    email_subject_by_link: Optional[pulumi.Input[str]] = pulumi.input_property("emailSubjectByLink")
    """
    The subject line for the email message template for sending a confirmation link to the user.
    """
    sms_message: Optional[pulumi.Input[str]] = pulumi.input_property("smsMessage")
    """
    The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_email_option: Optional[pulumi.Input[str]] = None, email_message: Optional[pulumi.Input[str]] = None, email_message_by_link: Optional[pulumi.Input[str]] = None, email_subject: Optional[pulumi.Input[str]] = None, email_subject_by_link: Optional[pulumi.Input[str]] = None, sms_message: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] default_email_option: The default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
        :param pulumi.Input[str] email_message: The email message template. Must contain the `{####}` placeholder. Conflicts with `email_verification_message` argument.
        :param pulumi.Input[str] email_message_by_link: The email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
        :param pulumi.Input[str] email_subject: The subject line for the email message template. Conflicts with `email_verification_subject` argument.
        :param pulumi.Input[str] email_subject_by_link: The subject line for the email message template for sending a confirmation link to the user.
        :param pulumi.Input[str] sms_message: The SMS message template. Must contain the `{####}` placeholder. Conflicts with `sms_verification_message` argument.
        """
        __self__.default_email_option = default_email_option
        __self__.email_message = email_message
        __self__.email_message_by_link = email_message_by_link
        __self__.email_subject = email_subject
        __self__.email_subject_by_link = email_subject_by_link
        __self__.sms_message = sms_message

