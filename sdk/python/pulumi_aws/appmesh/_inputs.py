# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'MeshSpecArgs',
    'MeshSpecEgressFilterArgs',
    'RouteSpecArgs',
    'RouteSpecHttpRouteArgs',
    'RouteSpecHttpRouteActionArgs',
    'RouteSpecHttpRouteActionWeightedTargetArgs',
    'RouteSpecHttpRouteMatchArgs',
    'RouteSpecHttpRouteMatchHeaderArgs',
    'RouteSpecHttpRouteMatchHeaderMatchArgs',
    'RouteSpecHttpRouteMatchHeaderMatchRangeArgs',
    'RouteSpecTcpRouteArgs',
    'RouteSpecTcpRouteActionArgs',
    'RouteSpecTcpRouteActionWeightedTargetArgs',
    'VirtualNodeSpecArgs',
    'VirtualNodeSpecBackendArgs',
    'VirtualNodeSpecBackendVirtualServiceArgs',
    'VirtualNodeSpecListenerArgs',
    'VirtualNodeSpecListenerHealthCheckArgs',
    'VirtualNodeSpecListenerPortMappingArgs',
    'VirtualNodeSpecLoggingArgs',
    'VirtualNodeSpecLoggingAccessLogArgs',
    'VirtualNodeSpecLoggingAccessLogFileArgs',
    'VirtualNodeSpecServiceDiscoveryArgs',
    'VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs',
    'VirtualNodeSpecServiceDiscoveryDnsArgs',
    'VirtualRouterSpecArgs',
    'VirtualRouterSpecListenerArgs',
    'VirtualRouterSpecListenerPortMappingArgs',
    'VirtualServiceSpecArgs',
    'VirtualServiceSpecProviderArgs',
    'VirtualServiceSpecProviderVirtualNodeArgs',
    'VirtualServiceSpecProviderVirtualRouterArgs',
]

@pulumi.input_type
class MeshSpecArgs:
    egress_filter: Optional[pulumi.Input['MeshSpecEgressFilterArgs']] = pulumi.input_property("egressFilter")
    """
    The egress filter rules for the service mesh.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, egress_filter: Optional[pulumi.Input['MeshSpecEgressFilterArgs']] = None) -> None:
        """
        :param pulumi.Input['MeshSpecEgressFilterArgs'] egress_filter: The egress filter rules for the service mesh.
        """
        __self__.egress_filter = egress_filter

@pulumi.input_type
class MeshSpecEgressFilterArgs:
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The egress filter type. By default, the type is `DROP_ALL`.
    Valid values are `ALLOW_ALL` and `DROP_ALL`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The egress filter type. By default, the type is `DROP_ALL`.
               Valid values are `ALLOW_ALL` and `DROP_ALL`.
        """
        __self__.type = type

@pulumi.input_type
class RouteSpecArgs:
    http_route: Optional[pulumi.Input['RouteSpecHttpRouteArgs']] = pulumi.input_property("httpRoute")
    """
    The HTTP routing information for the route.
    """
    priority: Optional[pulumi.Input[float]] = pulumi.input_property("priority")
    """
    The priority for the route, between `0` and `1000`.
    Routes are matched based on the specified value, where `0` is the highest priority.
    """
    tcp_route: Optional[pulumi.Input['RouteSpecTcpRouteArgs']] = pulumi.input_property("tcpRoute")
    """
    The TCP routing information for the route.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, http_route: Optional[pulumi.Input['RouteSpecHttpRouteArgs']] = None, priority: Optional[pulumi.Input[float]] = None, tcp_route: Optional[pulumi.Input['RouteSpecTcpRouteArgs']] = None) -> None:
        """
        :param pulumi.Input['RouteSpecHttpRouteArgs'] http_route: The HTTP routing information for the route.
        :param pulumi.Input[float] priority: The priority for the route, between `0` and `1000`.
               Routes are matched based on the specified value, where `0` is the highest priority.
        :param pulumi.Input['RouteSpecTcpRouteArgs'] tcp_route: The TCP routing information for the route.
        """
        __self__.http_route = http_route
        __self__.priority = priority
        __self__.tcp_route = tcp_route

@pulumi.input_type
class RouteSpecHttpRouteArgs:
    action: pulumi.Input['RouteSpecHttpRouteActionArgs'] = pulumi.input_property("action")
    """
    The action to take if a match is determined.
    """
    match: pulumi.Input['RouteSpecHttpRouteMatchArgs'] = pulumi.input_property("match")
    """
    The criteria for determining an HTTP request match.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: pulumi.Input['RouteSpecHttpRouteActionArgs'], match: pulumi.Input['RouteSpecHttpRouteMatchArgs']) -> None:
        """
        :param pulumi.Input['RouteSpecHttpRouteActionArgs'] action: The action to take if a match is determined.
        :param pulumi.Input['RouteSpecHttpRouteMatchArgs'] match: The criteria for determining an HTTP request match.
        """
        __self__.action = action
        __self__.match = match

@pulumi.input_type
class RouteSpecHttpRouteActionArgs:
    weighted_targets: pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteActionWeightedTargetArgs']]] = pulumi.input_property("weightedTargets")
    """
    The targets that traffic is routed to when a request matches the route.
    You can specify one or more targets and their relative weights with which to distribute traffic.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, weighted_targets: pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteActionWeightedTargetArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteActionWeightedTargetArgs']]] weighted_targets: The targets that traffic is routed to when a request matches the route.
               You can specify one or more targets and their relative weights with which to distribute traffic.
        """
        __self__.weighted_targets = weighted_targets

@pulumi.input_type
class RouteSpecHttpRouteActionWeightedTargetArgs:
    virtual_node: pulumi.Input[str] = pulumi.input_property("virtualNode")
    """
    The virtual node to associate with the weighted target.
    """
    weight: pulumi.Input[float] = pulumi.input_property("weight")
    """
    The relative weight of the weighted target. An integer between 0 and 100.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_node: pulumi.Input[str], weight: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] virtual_node: The virtual node to associate with the weighted target.
        :param pulumi.Input[float] weight: The relative weight of the weighted target. An integer between 0 and 100.
        """
        __self__.virtual_node = virtual_node
        __self__.weight = weight

@pulumi.input_type
class RouteSpecHttpRouteMatchArgs:
    prefix: pulumi.Input[str] = pulumi.input_property("prefix")
    """
    Specifies the path with which to match requests.
    This parameter must always start with /, which by itself matches all requests to the virtual router service name.
    """
    headers: Optional[pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteMatchHeaderArgs']]]] = pulumi.input_property("headers")
    """
    The client request headers to match on.
    """
    method: Optional[pulumi.Input[str]] = pulumi.input_property("method")
    """
    The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
    """
    scheme: Optional[pulumi.Input[str]] = pulumi.input_property("scheme")
    """
    The client request header scheme to match on. Valid values: `http`, `https`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, prefix: pulumi.Input[str], headers: Optional[pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteMatchHeaderArgs']]]] = None, method: Optional[pulumi.Input[str]] = None, scheme: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] prefix: Specifies the path with which to match requests.
               This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        :param pulumi.Input[List[pulumi.Input['RouteSpecHttpRouteMatchHeaderArgs']]] headers: The client request headers to match on.
        :param pulumi.Input[str] method: The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
        :param pulumi.Input[str] scheme: The client request header scheme to match on. Valid values: `http`, `https`.
        """
        __self__.prefix = prefix
        __self__.headers = headers
        __self__.method = method
        __self__.scheme = scheme

@pulumi.input_type
class RouteSpecHttpRouteMatchHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name for the HTTP header in the client request that will be matched on.
    """
    invert: Optional[pulumi.Input[bool]] = pulumi.input_property("invert")
    """
    If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
    """
    match: Optional[pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchArgs']] = pulumi.input_property("match")
    """
    The method and value to match the header value sent with a request. Specify one match method.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], invert: Optional[pulumi.Input[bool]] = None, match: Optional[pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchArgs']] = None) -> None:
        """
        :param pulumi.Input[str] name: A name for the HTTP header in the client request that will be matched on.
        :param pulumi.Input[bool] invert: If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
        :param pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchArgs'] match: The method and value to match the header value sent with a request. Specify one match method.
        """
        __self__.name = name
        __self__.invert = invert
        __self__.match = match

@pulumi.input_type
class RouteSpecHttpRouteMatchHeaderMatchArgs:
    exact: Optional[pulumi.Input[str]] = pulumi.input_property("exact")
    """
    The header value sent by the client must match the specified value exactly.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    Specifies the path with which to match requests.
    This parameter must always start with /, which by itself matches all requests to the virtual router service name.
    """
    range: Optional[pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchRangeArgs']] = pulumi.input_property("range")
    """
    The object that specifies the range of numbers that the header value sent by the client must be included in.
    """
    regex: Optional[pulumi.Input[str]] = pulumi.input_property("regex")
    """
    The header value sent by the client must include the specified characters.
    """
    suffix: Optional[pulumi.Input[str]] = pulumi.input_property("suffix")
    """
    The header value sent by the client must end with the specified characters.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, exact: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None, range: Optional[pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchRangeArgs']] = None, regex: Optional[pulumi.Input[str]] = None, suffix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] exact: The header value sent by the client must match the specified value exactly.
        :param pulumi.Input[str] prefix: Specifies the path with which to match requests.
               This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        :param pulumi.Input['RouteSpecHttpRouteMatchHeaderMatchRangeArgs'] range: The object that specifies the range of numbers that the header value sent by the client must be included in.
        :param pulumi.Input[str] regex: The header value sent by the client must include the specified characters.
        :param pulumi.Input[str] suffix: The header value sent by the client must end with the specified characters.
        """
        __self__.exact = exact
        __self__.prefix = prefix
        __self__.range = range
        __self__.regex = regex
        __self__.suffix = suffix

@pulumi.input_type
class RouteSpecHttpRouteMatchHeaderMatchRangeArgs:
    end: pulumi.Input[float] = pulumi.input_property("end")
    """
    The end of the range.
    """
    start: pulumi.Input[float] = pulumi.input_property("start")
    """
    The start of the range.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, end: pulumi.Input[float], start: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] end: The end of the range.
        :param pulumi.Input[float] start: The start of the range.
        """
        __self__.end = end
        __self__.start = start

@pulumi.input_type
class RouteSpecTcpRouteArgs:
    action: pulumi.Input['RouteSpecTcpRouteActionArgs'] = pulumi.input_property("action")
    """
    The action to take if a match is determined.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: pulumi.Input['RouteSpecTcpRouteActionArgs']) -> None:
        """
        :param pulumi.Input['RouteSpecTcpRouteActionArgs'] action: The action to take if a match is determined.
        """
        __self__.action = action

@pulumi.input_type
class RouteSpecTcpRouteActionArgs:
    weighted_targets: pulumi.Input[List[pulumi.Input['RouteSpecTcpRouteActionWeightedTargetArgs']]] = pulumi.input_property("weightedTargets")
    """
    The targets that traffic is routed to when a request matches the route.
    You can specify one or more targets and their relative weights with which to distribute traffic.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, weighted_targets: pulumi.Input[List[pulumi.Input['RouteSpecTcpRouteActionWeightedTargetArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['RouteSpecTcpRouteActionWeightedTargetArgs']]] weighted_targets: The targets that traffic is routed to when a request matches the route.
               You can specify one or more targets and their relative weights with which to distribute traffic.
        """
        __self__.weighted_targets = weighted_targets

@pulumi.input_type
class RouteSpecTcpRouteActionWeightedTargetArgs:
    virtual_node: pulumi.Input[str] = pulumi.input_property("virtualNode")
    """
    The virtual node to associate with the weighted target.
    """
    weight: pulumi.Input[float] = pulumi.input_property("weight")
    """
    The relative weight of the weighted target. An integer between 0 and 100.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_node: pulumi.Input[str], weight: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] virtual_node: The virtual node to associate with the weighted target.
        :param pulumi.Input[float] weight: The relative weight of the weighted target. An integer between 0 and 100.
        """
        __self__.virtual_node = virtual_node
        __self__.weight = weight

@pulumi.input_type
class VirtualNodeSpecArgs:
    backends: Optional[pulumi.Input[List[pulumi.Input['VirtualNodeSpecBackendArgs']]]] = pulumi.input_property("backends")
    """
    The backends to which the virtual node is expected to send outbound traffic.
    """
    listener: Optional[pulumi.Input['VirtualNodeSpecListenerArgs']] = pulumi.input_property("listener")
    """
    The listeners from which the virtual node is expected to receive inbound traffic.
    """
    logging: Optional[pulumi.Input['VirtualNodeSpecLoggingArgs']] = pulumi.input_property("logging")
    """
    The inbound and outbound access logging information for the virtual node.
    """
    service_discovery: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryArgs']] = pulumi.input_property("serviceDiscovery")
    """
    The service discovery information for the virtual node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, backends: Optional[pulumi.Input[List[pulumi.Input['VirtualNodeSpecBackendArgs']]]] = None, listener: Optional[pulumi.Input['VirtualNodeSpecListenerArgs']] = None, logging: Optional[pulumi.Input['VirtualNodeSpecLoggingArgs']] = None, service_discovery: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryArgs']] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['VirtualNodeSpecBackendArgs']]] backends: The backends to which the virtual node is expected to send outbound traffic.
        :param pulumi.Input['VirtualNodeSpecListenerArgs'] listener: The listeners from which the virtual node is expected to receive inbound traffic.
        :param pulumi.Input['VirtualNodeSpecLoggingArgs'] logging: The inbound and outbound access logging information for the virtual node.
        :param pulumi.Input['VirtualNodeSpecServiceDiscoveryArgs'] service_discovery: The service discovery information for the virtual node.
        """
        __self__.backends = backends
        __self__.listener = listener
        __self__.logging = logging
        __self__.service_discovery = service_discovery

@pulumi.input_type
class VirtualNodeSpecBackendArgs:
    virtual_service: Optional[pulumi.Input['VirtualNodeSpecBackendVirtualServiceArgs']] = pulumi.input_property("virtualService")
    """
    Specifies a virtual service to use as a backend for a virtual node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_service: Optional[pulumi.Input['VirtualNodeSpecBackendVirtualServiceArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualNodeSpecBackendVirtualServiceArgs'] virtual_service: Specifies a virtual service to use as a backend for a virtual node.
        """
        __self__.virtual_service = virtual_service

@pulumi.input_type
class VirtualNodeSpecBackendVirtualServiceArgs:
    virtual_service_name: pulumi.Input[str] = pulumi.input_property("virtualServiceName")
    """
    The name of the virtual service that is acting as a virtual node backend.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_service_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] virtual_service_name: The name of the virtual service that is acting as a virtual node backend.
        """
        __self__.virtual_service_name = virtual_service_name

@pulumi.input_type
class VirtualNodeSpecListenerArgs:
    port_mapping: pulumi.Input['VirtualNodeSpecListenerPortMappingArgs'] = pulumi.input_property("portMapping")
    """
    The port mapping information for the listener.
    """
    health_check: Optional[pulumi.Input['VirtualNodeSpecListenerHealthCheckArgs']] = pulumi.input_property("healthCheck")
    """
    The health check information for the listener.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port_mapping: pulumi.Input['VirtualNodeSpecListenerPortMappingArgs'], health_check: Optional[pulumi.Input['VirtualNodeSpecListenerHealthCheckArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualNodeSpecListenerPortMappingArgs'] port_mapping: The port mapping information for the listener.
        :param pulumi.Input['VirtualNodeSpecListenerHealthCheckArgs'] health_check: The health check information for the listener.
        """
        __self__.port_mapping = port_mapping
        __self__.health_check = health_check

@pulumi.input_type
class VirtualNodeSpecListenerHealthCheckArgs:
    healthy_threshold: pulumi.Input[float] = pulumi.input_property("healthyThreshold")
    """
    The number of consecutive successful health checks that must occur before declaring listener healthy.
    """
    interval_millis: pulumi.Input[float] = pulumi.input_property("intervalMillis")
    """
    The time period in milliseconds between each health check execution.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The protocol for the health check request. Valid values are `http` and `tcp`.
    """
    timeout_millis: pulumi.Input[float] = pulumi.input_property("timeoutMillis")
    """
    The amount of time to wait when receiving a response from the health check, in milliseconds.
    """
    unhealthy_threshold: pulumi.Input[float] = pulumi.input_property("unhealthyThreshold")
    """
    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The destination path for the health check request. This is only required if the specified protocol is `http`.
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, healthy_threshold: pulumi.Input[float], interval_millis: pulumi.Input[float], protocol: pulumi.Input[str], timeout_millis: pulumi.Input[float], unhealthy_threshold: pulumi.Input[float], path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] healthy_threshold: The number of consecutive successful health checks that must occur before declaring listener healthy.
        :param pulumi.Input[float] interval_millis: The time period in milliseconds between each health check execution.
        :param pulumi.Input[str] protocol: The protocol for the health check request. Valid values are `http` and `tcp`.
        :param pulumi.Input[float] timeout_millis: The amount of time to wait when receiving a response from the health check, in milliseconds.
        :param pulumi.Input[float] unhealthy_threshold: The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
        :param pulumi.Input[str] path: The destination path for the health check request. This is only required if the specified protocol is `http`.
        :param pulumi.Input[float] port: The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
        """
        __self__.healthy_threshold = healthy_threshold
        __self__.interval_millis = interval_millis
        __self__.protocol = protocol
        __self__.timeout_millis = timeout_millis
        __self__.unhealthy_threshold = unhealthy_threshold
        __self__.path = path
        __self__.port = port

@pulumi.input_type
class VirtualNodeSpecListenerPortMappingArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port used for the port mapping.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The protocol used for the port mapping. Valid values are `http` and `tcp`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], protocol: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[float] port: The port used for the port mapping.
        :param pulumi.Input[str] protocol: The protocol used for the port mapping. Valid values are `http` and `tcp`.
        """
        __self__.port = port
        __self__.protocol = protocol

@pulumi.input_type
class VirtualNodeSpecLoggingArgs:
    access_log: Optional[pulumi.Input['VirtualNodeSpecLoggingAccessLogArgs']] = pulumi.input_property("accessLog")
    """
    The access log configuration for a virtual node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_log: Optional[pulumi.Input['VirtualNodeSpecLoggingAccessLogArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualNodeSpecLoggingAccessLogArgs'] access_log: The access log configuration for a virtual node.
        """
        __self__.access_log = access_log

@pulumi.input_type
class VirtualNodeSpecLoggingAccessLogArgs:
    file: Optional[pulumi.Input['VirtualNodeSpecLoggingAccessLogFileArgs']] = pulumi.input_property("file")
    """
    The file object to send virtual node access logs to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, file: Optional[pulumi.Input['VirtualNodeSpecLoggingAccessLogFileArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualNodeSpecLoggingAccessLogFileArgs'] file: The file object to send virtual node access logs to.
        """
        __self__.file = file

@pulumi.input_type
class VirtualNodeSpecLoggingAccessLogFileArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] path: The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
        """
        __self__.path = path

@pulumi.input_type
class VirtualNodeSpecServiceDiscoveryArgs:
    aws_cloud_map: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs']] = pulumi.input_property("awsCloudMap")
    """
    Specifies any AWS Cloud Map information for the virtual node.
    """
    dns: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryDnsArgs']] = pulumi.input_property("dns")
    """
    Specifies the DNS service name for the virtual node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, aws_cloud_map: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs']] = None, dns: Optional[pulumi.Input['VirtualNodeSpecServiceDiscoveryDnsArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs'] aws_cloud_map: Specifies any AWS Cloud Map information for the virtual node.
        :param pulumi.Input['VirtualNodeSpecServiceDiscoveryDnsArgs'] dns: Specifies the DNS service name for the virtual node.
        """
        __self__.aws_cloud_map = aws_cloud_map
        __self__.dns = dns

@pulumi.input_type
class VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs:
    namespace_name: pulumi.Input[str] = pulumi.input_property("namespaceName")
    """
    The name of the AWS Cloud Map namespace to use.
    Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace.
    """
    service_name: pulumi.Input[str] = pulumi.input_property("serviceName")
    """
    The name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service.
    """
    attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("attributes")
    """
    A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, namespace_name: pulumi.Input[str], service_name: pulumi.Input[str], attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] namespace_name: The name of the AWS Cloud Map namespace to use.
               Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace.
        :param pulumi.Input[str] service_name: The name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] attributes: A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        """
        __self__.namespace_name = namespace_name
        __self__.service_name = service_name
        __self__.attributes = attributes

@pulumi.input_type
class VirtualNodeSpecServiceDiscoveryDnsArgs:
    hostname: pulumi.Input[str] = pulumi.input_property("hostname")
    """
    The DNS host name for your virtual node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hostname: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] hostname: The DNS host name for your virtual node.
        """
        __self__.hostname = hostname

@pulumi.input_type
class VirtualRouterSpecArgs:
    listener: pulumi.Input['VirtualRouterSpecListenerArgs'] = pulumi.input_property("listener")
    """
    The listeners that the virtual router is expected to receive inbound traffic from.
    Currently only one listener is supported per virtual router.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, listener: pulumi.Input['VirtualRouterSpecListenerArgs']) -> None:
        """
        :param pulumi.Input['VirtualRouterSpecListenerArgs'] listener: The listeners that the virtual router is expected to receive inbound traffic from.
               Currently only one listener is supported per virtual router.
        """
        __self__.listener = listener

@pulumi.input_type
class VirtualRouterSpecListenerArgs:
    port_mapping: pulumi.Input['VirtualRouterSpecListenerPortMappingArgs'] = pulumi.input_property("portMapping")
    """
    The port mapping information for the listener.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port_mapping: pulumi.Input['VirtualRouterSpecListenerPortMappingArgs']) -> None:
        """
        :param pulumi.Input['VirtualRouterSpecListenerPortMappingArgs'] port_mapping: The port mapping information for the listener.
        """
        __self__.port_mapping = port_mapping

@pulumi.input_type
class VirtualRouterSpecListenerPortMappingArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port used for the port mapping.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The protocol used for the port mapping. Valid values are `http` and `tcp`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], protocol: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[float] port: The port used for the port mapping.
        :param pulumi.Input[str] protocol: The protocol used for the port mapping. Valid values are `http` and `tcp`.
        """
        __self__.port = port
        __self__.protocol = protocol

@pulumi.input_type
class VirtualServiceSpecArgs:
    provider: Optional[pulumi.Input['VirtualServiceSpecProviderArgs']] = pulumi.input_property("provider")
    """
    The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, provider: Optional[pulumi.Input['VirtualServiceSpecProviderArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualServiceSpecProviderArgs'] provider: The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
        """
        __self__.provider = provider

@pulumi.input_type
class VirtualServiceSpecProviderArgs:
    virtual_node: Optional[pulumi.Input['VirtualServiceSpecProviderVirtualNodeArgs']] = pulumi.input_property("virtualNode")
    """
    The virtual node associated with a virtual service.
    """
    virtual_router: Optional[pulumi.Input['VirtualServiceSpecProviderVirtualRouterArgs']] = pulumi.input_property("virtualRouter")
    """
    The virtual router associated with a virtual service.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_node: Optional[pulumi.Input['VirtualServiceSpecProviderVirtualNodeArgs']] = None, virtual_router: Optional[pulumi.Input['VirtualServiceSpecProviderVirtualRouterArgs']] = None) -> None:
        """
        :param pulumi.Input['VirtualServiceSpecProviderVirtualNodeArgs'] virtual_node: The virtual node associated with a virtual service.
        :param pulumi.Input['VirtualServiceSpecProviderVirtualRouterArgs'] virtual_router: The virtual router associated with a virtual service.
        """
        __self__.virtual_node = virtual_node
        __self__.virtual_router = virtual_router

@pulumi.input_type
class VirtualServiceSpecProviderVirtualNodeArgs:
    virtual_node_name: pulumi.Input[str] = pulumi.input_property("virtualNodeName")
    """
    The name of the virtual node that is acting as a service provider.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_node_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] virtual_node_name: The name of the virtual node that is acting as a service provider.
        """
        __self__.virtual_node_name = virtual_node_name

@pulumi.input_type
class VirtualServiceSpecProviderVirtualRouterArgs:
    virtual_router_name: pulumi.Input[str] = pulumi.input_property("virtualRouterName")
    """
    The name of the virtual router that is acting as a service provider.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_router_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] virtual_router_name: The name of the virtual router that is acting as a service provider.
        """
        __self__.virtual_router_name = virtual_router_name

