# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'MeshSpec',
    'MeshSpecEgressFilter',
    'RouteSpec',
    'RouteSpecHttpRoute',
    'RouteSpecHttpRouteAction',
    'RouteSpecHttpRouteActionWeightedTarget',
    'RouteSpecHttpRouteMatch',
    'RouteSpecHttpRouteMatchHeader',
    'RouteSpecHttpRouteMatchHeaderMatch',
    'RouteSpecHttpRouteMatchHeaderMatchRange',
    'RouteSpecTcpRoute',
    'RouteSpecTcpRouteAction',
    'RouteSpecTcpRouteActionWeightedTarget',
    'VirtualNodeSpec',
    'VirtualNodeSpecBackend',
    'VirtualNodeSpecBackendVirtualService',
    'VirtualNodeSpecListener',
    'VirtualNodeSpecListenerHealthCheck',
    'VirtualNodeSpecListenerPortMapping',
    'VirtualNodeSpecLogging',
    'VirtualNodeSpecLoggingAccessLog',
    'VirtualNodeSpecLoggingAccessLogFile',
    'VirtualNodeSpecServiceDiscovery',
    'VirtualNodeSpecServiceDiscoveryAwsCloudMap',
    'VirtualNodeSpecServiceDiscoveryDns',
    'VirtualRouterSpec',
    'VirtualRouterSpecListener',
    'VirtualRouterSpecListenerPortMapping',
    'VirtualServiceSpec',
    'VirtualServiceSpecProvider',
    'VirtualServiceSpecProviderVirtualNode',
    'VirtualServiceSpecProviderVirtualRouter',
]

@pulumi.output_type
class MeshSpec(dict):
    egress_filter: Optional['outputs.MeshSpecEgressFilter'] = pulumi.output_property("egressFilter")
    """
    The egress filter rules for the service mesh.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MeshSpecEgressFilter(dict):
    type: Optional[str] = pulumi.output_property("type")
    """
    The egress filter type. By default, the type is `DROP_ALL`.
    Valid values are `ALLOW_ALL` and `DROP_ALL`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpec(dict):
    http_route: Optional['outputs.RouteSpecHttpRoute'] = pulumi.output_property("httpRoute")
    """
    The HTTP routing information for the route.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    The priority for the route, between `0` and `1000`.
    Routes are matched based on the specified value, where `0` is the highest priority.
    """
    tcp_route: Optional['outputs.RouteSpecTcpRoute'] = pulumi.output_property("tcpRoute")
    """
    The TCP routing information for the route.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRoute(dict):
    action: 'outputs.RouteSpecHttpRouteAction' = pulumi.output_property("action")
    """
    The action to take if a match is determined.
    """
    match: 'outputs.RouteSpecHttpRouteMatch' = pulumi.output_property("match")
    """
    The criteria for determining an HTTP request match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteAction(dict):
    weighted_targets: List['outputs.RouteSpecHttpRouteActionWeightedTarget'] = pulumi.output_property("weightedTargets")
    """
    The targets that traffic is routed to when a request matches the route.
    You can specify one or more targets and their relative weights with which to distribute traffic.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteActionWeightedTarget(dict):
    virtual_node: str = pulumi.output_property("virtualNode")
    """
    The virtual node to associate with the weighted target.
    """
    weight: float = pulumi.output_property("weight")
    """
    The relative weight of the weighted target. An integer between 0 and 100.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatch(dict):
    headers: Optional[List['outputs.RouteSpecHttpRouteMatchHeader']] = pulumi.output_property("headers")
    """
    The client request headers to match on.
    """
    method: Optional[str] = pulumi.output_property("method")
    """
    The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
    """
    prefix: str = pulumi.output_property("prefix")
    """
    Specifies the path with which to match requests.
    This parameter must always start with /, which by itself matches all requests to the virtual router service name.
    """
    scheme: Optional[str] = pulumi.output_property("scheme")
    """
    The client request header scheme to match on. Valid values: `http`, `https`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeader(dict):
    invert: Optional[bool] = pulumi.output_property("invert")
    """
    If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
    """
    match: Optional['outputs.RouteSpecHttpRouteMatchHeaderMatch'] = pulumi.output_property("match")
    """
    The method and value to match the header value sent with a request. Specify one match method.
    """
    name: str = pulumi.output_property("name")
    """
    A name for the HTTP header in the client request that will be matched on.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeaderMatch(dict):
    exact: Optional[str] = pulumi.output_property("exact")
    """
    The header value sent by the client must match the specified value exactly.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    Specifies the path with which to match requests.
    This parameter must always start with /, which by itself matches all requests to the virtual router service name.
    """
    range: Optional['outputs.RouteSpecHttpRouteMatchHeaderMatchRange'] = pulumi.output_property("range")
    """
    The object that specifies the range of numbers that the header value sent by the client must be included in.
    """
    regex: Optional[str] = pulumi.output_property("regex")
    """
    The header value sent by the client must include the specified characters.
    """
    suffix: Optional[str] = pulumi.output_property("suffix")
    """
    The header value sent by the client must end with the specified characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeaderMatchRange(dict):
    end: float = pulumi.output_property("end")
    """
    The end of the range.
    """
    start: float = pulumi.output_property("start")
    """
    The start of the range.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRoute(dict):
    action: 'outputs.RouteSpecTcpRouteAction' = pulumi.output_property("action")
    """
    The action to take if a match is determined.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRouteAction(dict):
    weighted_targets: List['outputs.RouteSpecTcpRouteActionWeightedTarget'] = pulumi.output_property("weightedTargets")
    """
    The targets that traffic is routed to when a request matches the route.
    You can specify one or more targets and their relative weights with which to distribute traffic.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRouteActionWeightedTarget(dict):
    virtual_node: str = pulumi.output_property("virtualNode")
    """
    The virtual node to associate with the weighted target.
    """
    weight: float = pulumi.output_property("weight")
    """
    The relative weight of the weighted target. An integer between 0 and 100.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpec(dict):
    backends: Optional[List['outputs.VirtualNodeSpecBackend']] = pulumi.output_property("backends")
    """
    The backends to which the virtual node is expected to send outbound traffic.
    """
    listener: Optional['outputs.VirtualNodeSpecListener'] = pulumi.output_property("listener")
    """
    The listeners from which the virtual node is expected to receive inbound traffic.
    """
    logging: Optional['outputs.VirtualNodeSpecLogging'] = pulumi.output_property("logging")
    """
    The inbound and outbound access logging information for the virtual node.
    """
    service_discovery: Optional['outputs.VirtualNodeSpecServiceDiscovery'] = pulumi.output_property("serviceDiscovery")
    """
    The service discovery information for the virtual node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecBackend(dict):
    virtual_service: Optional['outputs.VirtualNodeSpecBackendVirtualService'] = pulumi.output_property("virtualService")
    """
    Specifies a virtual service to use as a backend for a virtual node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecBackendVirtualService(dict):
    virtual_service_name: str = pulumi.output_property("virtualServiceName")
    """
    The name of the virtual service that is acting as a virtual node backend.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListener(dict):
    health_check: Optional['outputs.VirtualNodeSpecListenerHealthCheck'] = pulumi.output_property("healthCheck")
    """
    The health check information for the listener.
    """
    port_mapping: 'outputs.VirtualNodeSpecListenerPortMapping' = pulumi.output_property("portMapping")
    """
    The port mapping information for the listener.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListenerHealthCheck(dict):
    healthy_threshold: float = pulumi.output_property("healthyThreshold")
    """
    The number of consecutive successful health checks that must occur before declaring listener healthy.
    """
    interval_millis: float = pulumi.output_property("intervalMillis")
    """
    The time period in milliseconds between each health check execution.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The destination path for the health check request. This is only required if the specified protocol is `http`.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol for the health check request. Valid values are `http` and `tcp`.
    """
    timeout_millis: float = pulumi.output_property("timeoutMillis")
    """
    The amount of time to wait when receiving a response from the health check, in milliseconds.
    """
    unhealthy_threshold: float = pulumi.output_property("unhealthyThreshold")
    """
    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListenerPortMapping(dict):
    port: float = pulumi.output_property("port")
    """
    The port used for the port mapping.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol used for the port mapping. Valid values are `http` and `tcp`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLogging(dict):
    access_log: Optional['outputs.VirtualNodeSpecLoggingAccessLog'] = pulumi.output_property("accessLog")
    """
    The access log configuration for a virtual node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLoggingAccessLog(dict):
    file: Optional['outputs.VirtualNodeSpecLoggingAccessLogFile'] = pulumi.output_property("file")
    """
    The file object to send virtual node access logs to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLoggingAccessLogFile(dict):
    path: str = pulumi.output_property("path")
    """
    The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscovery(dict):
    aws_cloud_map: Optional['outputs.VirtualNodeSpecServiceDiscoveryAwsCloudMap'] = pulumi.output_property("awsCloudMap")
    """
    Specifies any AWS Cloud Map information for the virtual node.
    """
    dns: Optional['outputs.VirtualNodeSpecServiceDiscoveryDns'] = pulumi.output_property("dns")
    """
    Specifies the DNS service name for the virtual node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscoveryAwsCloudMap(dict):
    attributes: Optional[Dict[str, str]] = pulumi.output_property("attributes")
    """
    A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
    """
    namespace_name: str = pulumi.output_property("namespaceName")
    """
    The name of the AWS Cloud Map namespace to use.
    Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace.
    """
    service_name: str = pulumi.output_property("serviceName")
    """
    The name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscoveryDns(dict):
    hostname: str = pulumi.output_property("hostname")
    """
    The DNS host name for your virtual node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpec(dict):
    listener: 'outputs.VirtualRouterSpecListener' = pulumi.output_property("listener")
    """
    The listeners that the virtual router is expected to receive inbound traffic from.
    Currently only one listener is supported per virtual router.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpecListener(dict):
    port_mapping: 'outputs.VirtualRouterSpecListenerPortMapping' = pulumi.output_property("portMapping")
    """
    The port mapping information for the listener.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpecListenerPortMapping(dict):
    port: float = pulumi.output_property("port")
    """
    The port used for the port mapping.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol used for the port mapping. Valid values are `http` and `tcp`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpec(dict):
    provider: Optional['outputs.VirtualServiceSpecProvider'] = pulumi.output_property("provider")
    """
    The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProvider(dict):
    virtual_node: Optional['outputs.VirtualServiceSpecProviderVirtualNode'] = pulumi.output_property("virtualNode")
    """
    The virtual node associated with a virtual service.
    """
    virtual_router: Optional['outputs.VirtualServiceSpecProviderVirtualRouter'] = pulumi.output_property("virtualRouter")
    """
    The virtual router associated with a virtual service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProviderVirtualNode(dict):
    virtual_node_name: str = pulumi.output_property("virtualNodeName")
    """
    The name of the virtual node that is acting as a service provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProviderVirtualRouter(dict):
    virtual_router_name: str = pulumi.output_property("virtualRouterName")
    """
    The name of the virtual router that is acting as a service provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


