# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'MeshSpec',
    'MeshSpecEgressFilter',
    'RouteSpec',
    'RouteSpecHttpRoute',
    'RouteSpecHttpRouteAction',
    'RouteSpecHttpRouteActionWeightedTarget',
    'RouteSpecHttpRouteMatch',
    'RouteSpecHttpRouteMatchHeader',
    'RouteSpecHttpRouteMatchHeaderMatch',
    'RouteSpecHttpRouteMatchHeaderMatchRange',
    'RouteSpecTcpRoute',
    'RouteSpecTcpRouteAction',
    'RouteSpecTcpRouteActionWeightedTarget',
    'VirtualNodeSpec',
    'VirtualNodeSpecBackend',
    'VirtualNodeSpecBackendVirtualService',
    'VirtualNodeSpecListener',
    'VirtualNodeSpecListenerHealthCheck',
    'VirtualNodeSpecListenerPortMapping',
    'VirtualNodeSpecLogging',
    'VirtualNodeSpecLoggingAccessLog',
    'VirtualNodeSpecLoggingAccessLogFile',
    'VirtualNodeSpecServiceDiscovery',
    'VirtualNodeSpecServiceDiscoveryAwsCloudMap',
    'VirtualNodeSpecServiceDiscoveryDns',
    'VirtualRouterSpec',
    'VirtualRouterSpecListener',
    'VirtualRouterSpecListenerPortMapping',
    'VirtualServiceSpec',
    'VirtualServiceSpecProvider',
    'VirtualServiceSpecProviderVirtualNode',
    'VirtualServiceSpecProviderVirtualRouter',
]

@pulumi.output_type
class MeshSpec(dict):
    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional['outputs.MeshSpecEgressFilter']:
        """
        The egress filter rules for the service mesh.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MeshSpecEgressFilter(dict):
    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The egress filter type. By default, the type is `DROP_ALL`.
        Valid values are `ALLOW_ALL` and `DROP_ALL`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpec(dict):
    @property
    @pulumi.getter(name="httpRoute")
    def http_route(self) -> Optional['outputs.RouteSpecHttpRoute']:
        """
        The HTTP routing information for the route.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        The priority for the route, between `0` and `1000`.
        Routes are matched based on the specified value, where `0` is the highest priority.
        """
        ...

    @property
    @pulumi.getter(name="tcpRoute")
    def tcp_route(self) -> Optional['outputs.RouteSpecTcpRoute']:
        """
        The TCP routing information for the route.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRoute(dict):
    @property
    @pulumi.getter
    def action(self) -> 'outputs.RouteSpecHttpRouteAction':
        """
        The action to take if a match is determined.
        """
        ...

    @property
    @pulumi.getter
    def match(self) -> 'outputs.RouteSpecHttpRouteMatch':
        """
        The criteria for determining an HTTP request match.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteAction(dict):
    @property
    @pulumi.getter(name="weightedTargets")
    def weighted_targets(self) -> List['outputs.RouteSpecHttpRouteActionWeightedTarget']:
        """
        The targets that traffic is routed to when a request matches the route.
        You can specify one or more targets and their relative weights with which to distribute traffic.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteActionWeightedTarget(dict):
    @property
    @pulumi.getter(name="virtualNode")
    def virtual_node(self) -> str:
        """
        The virtual node to associate with the weighted target.
        """
        ...

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        The relative weight of the weighted target. An integer between 0 and 100.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatch(dict):
    @property
    @pulumi.getter
    def headers(self) -> Optional[List['outputs.RouteSpecHttpRouteMatchHeader']]:
        """
        The client request headers to match on.
        """
        ...

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Specifies the path with which to match requests.
        This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        """
        ...

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        The client request header scheme to match on. Valid values: `http`, `https`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeader(dict):
    @property
    @pulumi.getter
    def invert(self) -> Optional[bool]:
        """
        If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
        """
        ...

    @property
    @pulumi.getter
    def match(self) -> Optional['outputs.RouteSpecHttpRouteMatchHeaderMatch']:
        """
        The method and value to match the header value sent with a request. Specify one match method.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name for the HTTP header in the client request that will be matched on.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeaderMatch(dict):
    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        """
        The header value sent by the client must match the specified value exactly.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Specifies the path with which to match requests.
        This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        """
        ...

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.RouteSpecHttpRouteMatchHeaderMatchRange']:
        """
        The object that specifies the range of numbers that the header value sent by the client must be included in.
        """
        ...

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        The header value sent by the client must include the specified characters.
        """
        ...

    @property
    @pulumi.getter
    def suffix(self) -> Optional[str]:
        """
        The header value sent by the client must end with the specified characters.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecHttpRouteMatchHeaderMatchRange(dict):
    @property
    @pulumi.getter
    def end(self) -> float:
        """
        The end of the range.
        """
        ...

    @property
    @pulumi.getter
    def start(self) -> float:
        """
        The start of the range.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRoute(dict):
    @property
    @pulumi.getter
    def action(self) -> 'outputs.RouteSpecTcpRouteAction':
        """
        The action to take if a match is determined.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRouteAction(dict):
    @property
    @pulumi.getter(name="weightedTargets")
    def weighted_targets(self) -> List['outputs.RouteSpecTcpRouteActionWeightedTarget']:
        """
        The targets that traffic is routed to when a request matches the route.
        You can specify one or more targets and their relative weights with which to distribute traffic.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteSpecTcpRouteActionWeightedTarget(dict):
    @property
    @pulumi.getter(name="virtualNode")
    def virtual_node(self) -> str:
        """
        The virtual node to associate with the weighted target.
        """
        ...

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        The relative weight of the weighted target. An integer between 0 and 100.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpec(dict):
    @property
    @pulumi.getter
    def backends(self) -> Optional[List['outputs.VirtualNodeSpecBackend']]:
        """
        The backends to which the virtual node is expected to send outbound traffic.
        """
        ...

    @property
    @pulumi.getter
    def listener(self) -> Optional['outputs.VirtualNodeSpecListener']:
        """
        The listeners from which the virtual node is expected to receive inbound traffic.
        """
        ...

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.VirtualNodeSpecLogging']:
        """
        The inbound and outbound access logging information for the virtual node.
        """
        ...

    @property
    @pulumi.getter(name="serviceDiscovery")
    def service_discovery(self) -> Optional['outputs.VirtualNodeSpecServiceDiscovery']:
        """
        The service discovery information for the virtual node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecBackend(dict):
    @property
    @pulumi.getter(name="virtualService")
    def virtual_service(self) -> Optional['outputs.VirtualNodeSpecBackendVirtualService']:
        """
        Specifies a virtual service to use as a backend for a virtual node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecBackendVirtualService(dict):
    @property
    @pulumi.getter(name="virtualServiceName")
    def virtual_service_name(self) -> str:
        """
        The name of the virtual service that is acting as a virtual node backend.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListener(dict):
    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.VirtualNodeSpecListenerHealthCheck']:
        """
        The health check information for the listener.
        """
        ...

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> 'outputs.VirtualNodeSpecListenerPortMapping':
        """
        The port mapping information for the listener.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListenerHealthCheck(dict):
    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> float:
        """
        The number of consecutive successful health checks that must occur before declaring listener healthy.
        """
        ...

    @property
    @pulumi.getter(name="intervalMillis")
    def interval_millis(self) -> float:
        """
        The time period in milliseconds between each health check execution.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The destination path for the health check request. This is only required if the specified protocol is `http`.
        """
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        """
        The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol for the health check request. Valid values are `http` and `tcp`.
        """
        ...

    @property
    @pulumi.getter(name="timeoutMillis")
    def timeout_millis(self) -> float:
        """
        The amount of time to wait when receiving a response from the health check, in milliseconds.
        """
        ...

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> float:
        """
        The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecListenerPortMapping(dict):
    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port used for the port mapping.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used for the port mapping. Valid values are `http` and `tcp`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLogging(dict):
    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional['outputs.VirtualNodeSpecLoggingAccessLog']:
        """
        The access log configuration for a virtual node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLoggingAccessLog(dict):
    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.VirtualNodeSpecLoggingAccessLogFile']:
        """
        The file object to send virtual node access logs to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecLoggingAccessLogFile(dict):
    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscovery(dict):
    @property
    @pulumi.getter(name="awsCloudMap")
    def aws_cloud_map(self) -> Optional['outputs.VirtualNodeSpecServiceDiscoveryAwsCloudMap']:
        """
        Specifies any AWS Cloud Map information for the virtual node.
        """
        ...

    @property
    @pulumi.getter
    def dns(self) -> Optional['outputs.VirtualNodeSpecServiceDiscoveryDns']:
        """
        Specifies the DNS service name for the virtual node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscoveryAwsCloudMap(dict):
    @property
    @pulumi.getter
    def attributes(self) -> Optional[Mapping[str, str]]:
        """
        A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        """
        ...

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The name of the AWS Cloud Map namespace to use.
        Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace.
        """
        ...

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNodeSpecServiceDiscoveryDns(dict):
    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The DNS host name for your virtual node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpec(dict):
    @property
    @pulumi.getter
    def listener(self) -> 'outputs.VirtualRouterSpecListener':
        """
        The listeners that the virtual router is expected to receive inbound traffic from.
        Currently only one listener is supported per virtual router.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpecListener(dict):
    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> 'outputs.VirtualRouterSpecListenerPortMapping':
        """
        The port mapping information for the listener.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualRouterSpecListenerPortMapping(dict):
    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port used for the port mapping.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used for the port mapping. Valid values are `http` and `tcp`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpec(dict):
    @property
    @pulumi.getter
    def provider(self) -> Optional['outputs.VirtualServiceSpecProvider']:
        """
        The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProvider(dict):
    @property
    @pulumi.getter(name="virtualNode")
    def virtual_node(self) -> Optional['outputs.VirtualServiceSpecProviderVirtualNode']:
        """
        The virtual node associated with a virtual service.
        """
        ...

    @property
    @pulumi.getter(name="virtualRouter")
    def virtual_router(self) -> Optional['outputs.VirtualServiceSpecProviderVirtualRouter']:
        """
        The virtual router associated with a virtual service.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProviderVirtualNode(dict):
    @property
    @pulumi.getter(name="virtualNodeName")
    def virtual_node_name(self) -> str:
        """
        The name of the virtual node that is acting as a service provider.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualServiceSpecProviderVirtualRouter(dict):
    @property
    @pulumi.getter(name="virtualRouterName")
    def virtual_router_name(self) -> str:
        """
        The name of the virtual router that is acting as a service provider.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


