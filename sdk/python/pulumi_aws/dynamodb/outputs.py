# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GlobalTableReplica',
    'TableAttribute',
    'TableGlobalSecondaryIndex',
    'TableLocalSecondaryIndex',
    'TablePointInTimeRecovery',
    'TableReplica',
    'TableServerSideEncryption',
    'TableTtl',
    'GetTableAttribute',
    'GetTableGlobalSecondaryIndex',
    'GetTableLocalSecondaryIndex',
    'GetTablePointInTimeRecovery',
    'GetTableReplica',
    'GetTableServerSideEncryption',
    'GetTableTtl',
]

@pulumi.output_type
class GlobalTableReplica(dict):
    region_name: str = pulumi.output_property("regionName")
    """
    AWS region name of replica DynamoDB Table. e.g. `us-east-1`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableAttribute(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the index
    """
    type: str = pulumi.output_property("type")
    """
    Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableGlobalSecondaryIndex(dict):
    hash_key: str = pulumi.output_property("hashKey")
    """
    The name of the hash key in the index; must be
    defined as an attribute in the resource.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the index
    """
    non_key_attributes: Optional[List[str]] = pulumi.output_property("nonKeyAttributes")
    """
    Only required with `INCLUDE` as a
    projection type; a list of attributes to project into the index. These
    do not need to be defined as attributes on the table.
    """
    projection_type: str = pulumi.output_property("projectionType")
    """
    One of `ALL`, `INCLUDE` or `KEYS_ONLY`
    where `ALL` projects every attribute into the index, `KEYS_ONLY`
    projects just the hash and range key into the index, and `INCLUDE`
    projects only the keys specified in the _non_key_attributes_
    parameter.
    """
    range_key: Optional[str] = pulumi.output_property("rangeKey")
    """
    The name of the range key; must be defined
    """
    read_capacity: Optional[float] = pulumi.output_property("readCapacity")
    """
    The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
    """
    write_capacity: Optional[float] = pulumi.output_property("writeCapacity")
    """
    The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableLocalSecondaryIndex(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the index
    """
    non_key_attributes: Optional[List[str]] = pulumi.output_property("nonKeyAttributes")
    """
    Only required with `INCLUDE` as a
    projection type; a list of attributes to project into the index. These
    do not need to be defined as attributes on the table.
    """
    projection_type: str = pulumi.output_property("projectionType")
    """
    One of `ALL`, `INCLUDE` or `KEYS_ONLY`
    where `ALL` projects every attribute into the index, `KEYS_ONLY`
    projects just the hash and range key into the index, and `INCLUDE`
    projects only the keys specified in the _non_key_attributes_
    parameter.
    """
    range_key: str = pulumi.output_property("rangeKey")
    """
    The name of the range key; must be defined
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TablePointInTimeRecovery(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableReplica(dict):
    region_name: str = pulumi.output_property("regionName")
    """
    Region name of the replica.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableServerSideEncryption(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """
    kms_key_arn: Optional[str] = pulumi.output_property("kmsKeyArn")
    """
    The ARN of the CMK that should be used for the AWS KMS encryption.
    This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableTtl(dict):
    attribute_name: str = pulumi.output_property("attributeName")
    """
    The name of the table attribute to store the TTL timestamp in.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableAttribute(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the DynamoDB table.
    """
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableGlobalSecondaryIndex(dict):
    hash_key: str = pulumi.output_property("hashKey")
    name: str = pulumi.output_property("name")
    """
    The name of the DynamoDB table.
    """
    non_key_attributes: List[str] = pulumi.output_property("nonKeyAttributes")
    projection_type: str = pulumi.output_property("projectionType")
    range_key: str = pulumi.output_property("rangeKey")
    read_capacity: float = pulumi.output_property("readCapacity")
    write_capacity: float = pulumi.output_property("writeCapacity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableLocalSecondaryIndex(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the DynamoDB table.
    """
    non_key_attributes: List[str] = pulumi.output_property("nonKeyAttributes")
    projection_type: str = pulumi.output_property("projectionType")
    range_key: str = pulumi.output_property("rangeKey")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTablePointInTimeRecovery(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableReplica(dict):
    region_name: str = pulumi.output_property("regionName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableServerSideEncryption(dict):
    enabled: bool = pulumi.output_property("enabled")
    kms_key_arn: str = pulumi.output_property("kmsKeyArn")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetTableTtl(dict):
    attribute_name: str = pulumi.output_property("attributeName")
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


