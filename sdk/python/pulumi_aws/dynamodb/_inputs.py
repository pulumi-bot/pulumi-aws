# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GlobalTableReplicaArgs',
    'TableAttributeArgs',
    'TableGlobalSecondaryIndexArgs',
    'TableLocalSecondaryIndexArgs',
    'TablePointInTimeRecoveryArgs',
    'TableReplicaArgs',
    'TableServerSideEncryptionArgs',
    'TableTtlArgs',
    'GetTableServerSideEncryptionArgs',
]

@pulumi.input_type
class GlobalTableReplicaArgs:
    region_name: pulumi.Input[str] = pulumi.input_property("regionName")
    """
    AWS region name of replica DynamoDB Table. e.g. `us-east-1`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, region_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] region_name: AWS region name of replica DynamoDB Table. e.g. `us-east-1`
        """
        __self__.region_name = region_name

@pulumi.input_type
class TableAttributeArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the index
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the index
        :param pulumi.Input[str] type: Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        """
        __self__.name = name
        __self__.type = type

@pulumi.input_type
class TableGlobalSecondaryIndexArgs:
    hash_key: pulumi.Input[str] = pulumi.input_property("hashKey")
    """
    The name of the hash key in the index; must be
    defined as an attribute in the resource.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the index
    """
    projection_type: pulumi.Input[str] = pulumi.input_property("projectionType")
    """
    One of `ALL`, `INCLUDE` or `KEYS_ONLY`
    where `ALL` projects every attribute into the index, `KEYS_ONLY`
    projects just the hash and range key into the index, and `INCLUDE`
    projects only the keys specified in the _non_key_attributes_
    parameter.
    """
    non_key_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("nonKeyAttributes")
    """
    Only required with `INCLUDE` as a
    projection type; a list of attributes to project into the index. These
    do not need to be defined as attributes on the table.
    """
    range_key: Optional[pulumi.Input[str]] = pulumi.input_property("rangeKey")
    """
    The name of the range key; must be defined
    """
    read_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("readCapacity")
    """
    The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
    """
    write_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("writeCapacity")
    """
    The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hash_key: pulumi.Input[str], name: pulumi.Input[str], projection_type: pulumi.Input[str], non_key_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, range_key: Optional[pulumi.Input[str]] = None, read_capacity: Optional[pulumi.Input[float]] = None, write_capacity: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] hash_key: The name of the hash key in the index; must be
               defined as an attribute in the resource.
        :param pulumi.Input[str] name: The name of the index
        :param pulumi.Input[str] projection_type: One of `ALL`, `INCLUDE` or `KEYS_ONLY`
               where `ALL` projects every attribute into the index, `KEYS_ONLY`
               projects just the hash and range key into the index, and `INCLUDE`
               projects only the keys specified in the _non_key_attributes_
               parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] non_key_attributes: Only required with `INCLUDE` as a
               projection type; a list of attributes to project into the index. These
               do not need to be defined as attributes on the table.
        :param pulumi.Input[str] range_key: The name of the range key; must be defined
        :param pulumi.Input[float] read_capacity: The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        :param pulumi.Input[float] write_capacity: The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        """
        __self__.hash_key = hash_key
        __self__.name = name
        __self__.projection_type = projection_type
        __self__.non_key_attributes = non_key_attributes
        __self__.range_key = range_key
        __self__.read_capacity = read_capacity
        __self__.write_capacity = write_capacity

@pulumi.input_type
class TableLocalSecondaryIndexArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the index
    """
    projection_type: pulumi.Input[str] = pulumi.input_property("projectionType")
    """
    One of `ALL`, `INCLUDE` or `KEYS_ONLY`
    where `ALL` projects every attribute into the index, `KEYS_ONLY`
    projects just the hash and range key into the index, and `INCLUDE`
    projects only the keys specified in the _non_key_attributes_
    parameter.
    """
    range_key: pulumi.Input[str] = pulumi.input_property("rangeKey")
    """
    The name of the range key; must be defined
    """
    non_key_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("nonKeyAttributes")
    """
    Only required with `INCLUDE` as a
    projection type; a list of attributes to project into the index. These
    do not need to be defined as attributes on the table.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], projection_type: pulumi.Input[str], range_key: pulumi.Input[str], non_key_attributes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the index
        :param pulumi.Input[str] projection_type: One of `ALL`, `INCLUDE` or `KEYS_ONLY`
               where `ALL` projects every attribute into the index, `KEYS_ONLY`
               projects just the hash and range key into the index, and `INCLUDE`
               projects only the keys specified in the _non_key_attributes_
               parameter.
        :param pulumi.Input[str] range_key: The name of the range key; must be defined
        :param pulumi.Input[List[pulumi.Input[str]]] non_key_attributes: Only required with `INCLUDE` as a
               projection type; a list of attributes to project into the index. These
               do not need to be defined as attributes on the table.
        """
        __self__.name = name
        __self__.projection_type = projection_type
        __self__.range_key = range_key
        __self__.non_key_attributes = non_key_attributes

@pulumi.input_type
class TablePointInTimeRecoveryArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: Indicates whether ttl is enabled (true) or disabled (false).
        """
        __self__.enabled = enabled

@pulumi.input_type
class TableReplicaArgs:
    region_name: pulumi.Input[str] = pulumi.input_property("regionName")
    """
    Region name of the replica.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, region_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] region_name: Region name of the replica.
        """
        __self__.region_name = region_name

@pulumi.input_type
class TableServerSideEncryptionArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """
    kms_key_arn: Optional[pulumi.Input[str]] = pulumi.input_property("kmsKeyArn")
    """
    The ARN of the CMK that should be used for the AWS KMS encryption.
    This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], kms_key_arn: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Indicates whether ttl is enabled (true) or disabled (false).
        :param pulumi.Input[str] kms_key_arn: The ARN of the CMK that should be used for the AWS KMS encryption.
               This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
        """
        __self__.enabled = enabled
        __self__.kms_key_arn = kms_key_arn

@pulumi.input_type
class TableTtlArgs:
    attribute_name: pulumi.Input[str] = pulumi.input_property("attributeName")
    """
    The name of the table attribute to store the TTL timestamp in.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Indicates whether ttl is enabled (true) or disabled (false).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attribute_name: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] attribute_name: The name of the table attribute to store the TTL timestamp in.
        :param pulumi.Input[bool] enabled: Indicates whether ttl is enabled (true) or disabled (false).
        """
        __self__.attribute_name = attribute_name
        __self__.enabled = enabled

@pulumi.input_type
class GetTableServerSideEncryptionArgs:
    enabled: bool = pulumi.input_property("enabled")
    kms_key_arn: str = pulumi.input_property("kmsKeyArn")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: bool, kms_key_arn: str) -> None:
        __self__.enabled = enabled
        __self__.kms_key_arn = kms_key_arn

