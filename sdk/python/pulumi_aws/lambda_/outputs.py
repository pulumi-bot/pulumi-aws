# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AliasRoutingConfig',
    'EventSourceMappingDestinationConfig',
    'EventSourceMappingDestinationConfigOnFailure',
    'FunctionDeadLetterConfig',
    'FunctionEnvironment',
    'FunctionEventInvokeConfigDestinationConfig',
    'FunctionEventInvokeConfigDestinationConfigOnFailure',
    'FunctionEventInvokeConfigDestinationConfigOnSuccess',
    'FunctionFileSystemConfig',
    'FunctionTracingConfig',
    'FunctionVpcConfig',
    'GetFunctionDeadLetterConfig',
    'GetFunctionEnvironment',
    'GetFunctionFileSystemConfig',
    'GetFunctionTracingConfig',
    'GetFunctionVpcConfig',
]

@pulumi.output_type
class AliasRoutingConfig(dict):
    additional_version_weights: Optional[Dict[str, float]] = pulumi.output_property("additionalVersionWeights")
    """
    A map that defines the proportion of events that should be sent to different versions of a lambda function.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSourceMappingDestinationConfig(dict):
    on_failure: Optional['outputs.EventSourceMappingDestinationConfigOnFailure'] = pulumi.output_property("onFailure")
    """
    The destination configuration for failed invocations. Detailed below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSourceMappingDestinationConfigOnFailure(dict):
    destination_arn: str = pulumi.output_property("destinationArn")
    """
    The Amazon Resource Name (ARN) of the destination resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionDeadLetterConfig(dict):
    target_arn: str = pulumi.output_property("targetArn")
    """
    The ARN of an SNS topic or SQS queue to notify when an invocation fails. If this
    option is used, the function's IAM role must be granted suitable access to write to the target object,
    which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on
    which service is targeted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionEnvironment(dict):
    variables: Optional[Dict[str, str]] = pulumi.output_property("variables")
    """
    A map that defines environment variables for the Lambda function.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionEventInvokeConfigDestinationConfig(dict):
    on_failure: Optional['outputs.FunctionEventInvokeConfigDestinationConfigOnFailure'] = pulumi.output_property("onFailure")
    """
    Configuration block with destination configuration for failed asynchronous invocations. See below for details.
    """
    on_success: Optional['outputs.FunctionEventInvokeConfigDestinationConfigOnSuccess'] = pulumi.output_property("onSuccess")
    """
    Configuration block with destination configuration for successful asynchronous invocations. See below for details.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionEventInvokeConfigDestinationConfigOnFailure(dict):
    destination: str = pulumi.output_property("destination")
    """
    Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionEventInvokeConfigDestinationConfigOnSuccess(dict):
    destination: str = pulumi.output_property("destination")
    """
    Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionFileSystemConfig(dict):
    arn: str = pulumi.output_property("arn")
    """
    The Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
    """
    local_mount_path: str = pulumi.output_property("localMountPath")
    """
    The path where the function can access the file system, starting with /mnt/.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionTracingConfig(dict):
    mode: str = pulumi.output_property("mode")
    """
    Can be either `PassThrough` or `Active`. If PassThrough, Lambda will only trace
    the request from an upstream service if it contains a tracing header with
    "sampled=1". If Active, Lambda will respect any tracing header it receives
    from an upstream service. If no tracing header is received, Lambda will call
    X-Ray for a tracing decision.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionVpcConfig(dict):
    security_group_ids: List[str] = pulumi.output_property("securityGroupIds")
    """
    A list of security group IDs associated with the Lambda function.
    """
    subnet_ids: List[str] = pulumi.output_property("subnetIds")
    """
    A list of subnet IDs associated with the Lambda function.
    """
    vpc_id: Optional[str] = pulumi.output_property("vpcId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionDeadLetterConfig(dict):
    target_arn: str = pulumi.output_property("targetArn")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionEnvironment(dict):
    variables: Dict[str, str] = pulumi.output_property("variables")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionFileSystemConfig(dict):
    arn: str = pulumi.output_property("arn")
    """
    Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualified_arn`.
    """
    local_mount_path: str = pulumi.output_property("localMountPath")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionTracingConfig(dict):
    mode: str = pulumi.output_property("mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionVpcConfig(dict):
    security_group_ids: List[str] = pulumi.output_property("securityGroupIds")
    subnet_ids: List[str] = pulumi.output_property("subnetIds")
    vpc_id: str = pulumi.output_property("vpcId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


