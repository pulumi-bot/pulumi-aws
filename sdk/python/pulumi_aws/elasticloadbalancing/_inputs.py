# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'LoadBalancerAccessLogsArgs',
    'LoadBalancerHealthCheckArgs',
    'LoadBalancerListenerArgs',
    'LoadBalancerPolicyPolicyAttributeArgs',
    'SslNegotiationPolicyAttributeArgs',
]

@pulumi.input_type
class LoadBalancerAccessLogsArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    The S3 bucket name to store the logs in.
    """
    bucket_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("bucketPrefix")
    """
    The S3 bucket prefix. Logs are stored in the root if not configured.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Boolean to enable / disable `access_logs`. Default is `true`
    """
    interval: Optional[pulumi.Input[float]] = pulumi.input_property("interval")
    """
    The publishing interval in minutes. Default: 60 minutes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], bucket_prefix: Optional[pulumi.Input[str]] = None, enabled: Optional[pulumi.Input[bool]] = None, interval: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] bucket: The S3 bucket name to store the logs in.
        :param pulumi.Input[str] bucket_prefix: The S3 bucket prefix. Logs are stored in the root if not configured.
        :param pulumi.Input[bool] enabled: Boolean to enable / disable `access_logs`. Default is `true`
        :param pulumi.Input[float] interval: The publishing interval in minutes. Default: 60 minutes.
        """
        __self__.bucket = bucket
        __self__.bucket_prefix = bucket_prefix
        __self__.enabled = enabled
        __self__.interval = interval

@pulumi.input_type
class LoadBalancerHealthCheckArgs:
    healthy_threshold: pulumi.Input[float] = pulumi.input_property("healthyThreshold")
    """
    The number of checks before the instance is declared healthy.
    """
    interval: pulumi.Input[float] = pulumi.input_property("interval")
    """
    The interval between checks.
    """
    target: pulumi.Input[str] = pulumi.input_property("target")
    """
    The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
    values are:
    * `HTTP`, `HTTPS` - PORT and PATH are required
    * `TCP`, `SSL` - PORT is required, PATH is not supported
    """
    timeout: pulumi.Input[float] = pulumi.input_property("timeout")
    """
    The length of time before the check times out.
    """
    unhealthy_threshold: pulumi.Input[float] = pulumi.input_property("unhealthyThreshold")
    """
    The number of checks before the instance is declared unhealthy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, healthy_threshold: pulumi.Input[float], interval: pulumi.Input[float], target: pulumi.Input[str], timeout: pulumi.Input[float], unhealthy_threshold: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] healthy_threshold: The number of checks before the instance is declared healthy.
        :param pulumi.Input[float] interval: The interval between checks.
        :param pulumi.Input[str] target: The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
               values are:
               * `HTTP`, `HTTPS` - PORT and PATH are required
               * `TCP`, `SSL` - PORT is required, PATH is not supported
        :param pulumi.Input[float] timeout: The length of time before the check times out.
        :param pulumi.Input[float] unhealthy_threshold: The number of checks before the instance is declared unhealthy.
        """
        __self__.healthy_threshold = healthy_threshold
        __self__.interval = interval
        __self__.target = target
        __self__.timeout = timeout
        __self__.unhealthy_threshold = unhealthy_threshold

@pulumi.input_type
class LoadBalancerListenerArgs:
    instance_port: pulumi.Input[float] = pulumi.input_property("instancePort")
    """
    The port on the instance to route to
    """
    instance_protocol: pulumi.Input[str] = pulumi.input_property("instanceProtocol")
    """
    The protocol to use to the instance. Valid
    values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
    """
    lb_port: pulumi.Input[float] = pulumi.input_property("lbPort")
    """
    The port to listen on for the load balancer
    """
    lb_protocol: pulumi.Input[str] = pulumi.input_property("lbProtocol")
    """
    The protocol to listen on. Valid values are `HTTP`,
    `HTTPS`, `TCP`, or `SSL`
    """
    ssl_certificate_id: Optional[pulumi.Input[str]] = pulumi.input_property("sslCertificateId")
    """
    The ARN of an SSL certificate you have
    uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instance_port: pulumi.Input[float], instance_protocol: pulumi.Input[str], lb_port: pulumi.Input[float], lb_protocol: pulumi.Input[str], ssl_certificate_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] instance_port: The port on the instance to route to
        :param pulumi.Input[str] instance_protocol: The protocol to use to the instance. Valid
               values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
        :param pulumi.Input[float] lb_port: The port to listen on for the load balancer
        :param pulumi.Input[str] lb_protocol: The protocol to listen on. Valid values are `HTTP`,
               `HTTPS`, `TCP`, or `SSL`
        :param pulumi.Input[str] ssl_certificate_id: The ARN of an SSL certificate you have
               uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
        """
        __self__.instance_port = instance_port
        __self__.instance_protocol = instance_protocol
        __self__.lb_port = lb_port
        __self__.lb_protocol = lb_protocol
        __self__.ssl_certificate_id = ssl_certificate_id

@pulumi.input_type
class LoadBalancerPolicyPolicyAttributeArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class SslNegotiationPolicyAttributeArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the attribute
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The value of the attribute
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the attribute
        :param pulumi.Input[str] value: The value of the attribute
        """
        __self__.name = name
        __self__.value = value

