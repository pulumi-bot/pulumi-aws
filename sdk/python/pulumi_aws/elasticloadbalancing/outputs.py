# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'LoadBalancerAccessLogs',
    'LoadBalancerHealthCheck',
    'LoadBalancerListener',
    'LoadBalancerPolicyPolicyAttribute',
    'SslNegotiationPolicyAttribute',
    'GetLoadBalancerAccessLogs',
    'GetLoadBalancerHealthCheck',
    'GetLoadBalancerListener',
]

@pulumi.output_type
class LoadBalancerAccessLogs(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The S3 bucket name to store the logs in.
        """
        ...

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[str]:
        """
        The S3 bucket prefix. Logs are stored in the root if not configured.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean to enable / disable `access_logs`. Default is `true`
        """
        ...

    @property
    @pulumi.getter
    def interval(self) -> Optional[float]:
        """
        The publishing interval in minutes. Default: 60 minutes.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> float:
        """
        The number of checks before the instance is declared healthy.
        """
        ...

    @property
    @pulumi.getter
    def interval(self) -> float:
        """
        The interval between checks.
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
        values are:
        * `HTTP`, `HTTPS` - PORT and PATH are required
        * `TCP`, `SSL` - PORT is required, PATH is not supported
        """
        ...

    @property
    @pulumi.getter
    def timeout(self) -> float:
        """
        The length of time before the check times out.
        """
        ...

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> float:
        """
        The number of checks before the instance is declared unhealthy.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerListener(dict):
    @property
    @pulumi.getter(name="instancePort")
    def instance_port(self) -> float:
        """
        The port on the instance to route to
        """
        ...

    @property
    @pulumi.getter(name="instanceProtocol")
    def instance_protocol(self) -> str:
        """
        The protocol to use to the instance. Valid
        values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
        """
        ...

    @property
    @pulumi.getter(name="lbPort")
    def lb_port(self) -> float:
        """
        The port to listen on for the load balancer
        """
        ...

    @property
    @pulumi.getter(name="lbProtocol")
    def lb_protocol(self) -> str:
        """
        The protocol to listen on. Valid values are `HTTP`,
        `HTTPS`, `TCP`, or `SSL`
        """
        ...

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[str]:
        """
        The ARN of an SSL certificate you have
        uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerPolicyPolicyAttribute(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SslNegotiationPolicyAttribute(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the attribute
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the attribute
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerAccessLogs(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        ...

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...

    @property
    @pulumi.getter
    def interval(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerHealthCheck(dict):
    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> float:
        ...

    @property
    @pulumi.getter
    def interval(self) -> float:
        ...

    @property
    @pulumi.getter
    def target(self) -> str:
        ...

    @property
    @pulumi.getter
    def timeout(self) -> float:
        ...

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerListener(dict):
    @property
    @pulumi.getter(name="instancePort")
    def instance_port(self) -> float:
        ...

    @property
    @pulumi.getter(name="instanceProtocol")
    def instance_protocol(self) -> str:
        ...

    @property
    @pulumi.getter(name="lbPort")
    def lb_port(self) -> float:
        ...

    @property
    @pulumi.getter(name="lbProtocol")
    def lb_protocol(self) -> str:
        ...

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


