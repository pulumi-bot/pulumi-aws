# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'LoadBalancerAccessLogs',
    'LoadBalancerHealthCheck',
    'LoadBalancerListener',
    'LoadBalancerPolicyPolicyAttribute',
    'SslNegotiationPolicyAttribute',
    'GetLoadBalancerAccessLogs',
    'GetLoadBalancerHealthCheck',
    'GetLoadBalancerListener',
]

@pulumi.output_type
class LoadBalancerAccessLogs(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    The S3 bucket name to store the logs in.
    """
    bucket_prefix: Optional[str] = pulumi.output_property("bucketPrefix")
    """
    The S3 bucket prefix. Logs are stored in the root if not configured.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Boolean to enable / disable `access_logs`. Default is `true`
    """
    interval: Optional[float] = pulumi.output_property("interval")
    """
    The publishing interval in minutes. Default: 60 minutes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    healthy_threshold: float = pulumi.output_property("healthyThreshold")
    """
    The number of checks before the instance is declared healthy.
    """
    interval: float = pulumi.output_property("interval")
    """
    The interval between checks.
    """
    target: str = pulumi.output_property("target")
    """
    The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
    values are:
    * `HTTP`, `HTTPS` - PORT and PATH are required
    * `TCP`, `SSL` - PORT is required, PATH is not supported
    """
    timeout: float = pulumi.output_property("timeout")
    """
    The length of time before the check times out.
    """
    unhealthy_threshold: float = pulumi.output_property("unhealthyThreshold")
    """
    The number of checks before the instance is declared unhealthy.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerListener(dict):
    instance_port: float = pulumi.output_property("instancePort")
    """
    The port on the instance to route to
    """
    instance_protocol: str = pulumi.output_property("instanceProtocol")
    """
    The protocol to use to the instance. Valid
    values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
    """
    lb_port: float = pulumi.output_property("lbPort")
    """
    The port to listen on for the load balancer
    """
    lb_protocol: str = pulumi.output_property("lbProtocol")
    """
    The protocol to listen on. Valid values are `HTTP`,
    `HTTPS`, `TCP`, or `SSL`
    """
    ssl_certificate_id: Optional[str] = pulumi.output_property("sslCertificateId")
    """
    The ARN of an SSL certificate you have
    uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoadBalancerPolicyPolicyAttribute(dict):
    name: Optional[str] = pulumi.output_property("name")
    value: Optional[str] = pulumi.output_property("value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SslNegotiationPolicyAttribute(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the attribute
    """
    value: str = pulumi.output_property("value")
    """
    The value of the attribute
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerAccessLogs(dict):
    bucket: str = pulumi.output_property("bucket")
    bucket_prefix: str = pulumi.output_property("bucketPrefix")
    enabled: bool = pulumi.output_property("enabled")
    interval: float = pulumi.output_property("interval")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerHealthCheck(dict):
    healthy_threshold: float = pulumi.output_property("healthyThreshold")
    interval: float = pulumi.output_property("interval")
    target: str = pulumi.output_property("target")
    timeout: float = pulumi.output_property("timeout")
    unhealthy_threshold: float = pulumi.output_property("unhealthyThreshold")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLoadBalancerListener(dict):
    instance_port: float = pulumi.output_property("instancePort")
    instance_protocol: str = pulumi.output_property("instanceProtocol")
    lb_port: float = pulumi.output_property("lbPort")
    lb_protocol: str = pulumi.output_property("lbProtocol")
    ssl_certificate_id: str = pulumi.output_property("sslCertificateId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


