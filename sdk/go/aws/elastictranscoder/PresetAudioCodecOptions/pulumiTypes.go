// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PresetAudioCodecOptions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PresetAudioCodecOptions struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth *string `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `pulumi:"signed"`
}

type PresetAudioCodecOptionsInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput
	ToPresetAudioCodecOptionsOutputWithContext(context.Context) PresetAudioCodecOptionsOutput
}

type PresetAudioCodecOptionsArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth pulumi.StringPtrInput `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder pulumi.StringPtrInput `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed pulumi.StringPtrInput `pulumi:"signed"`
}

func (PresetAudioCodecOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return i.ToPresetAudioCodecOptionsOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsOutput)
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return i.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsOutput).ToPresetAudioCodecOptionsPtrOutputWithContext(ctx)
}

type PresetAudioCodecOptionsPtrInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput
	ToPresetAudioCodecOptionsPtrOutputWithContext(context.Context) PresetAudioCodecOptionsPtrOutput
}

type presetAudioCodecOptionsPtrType PresetAudioCodecOptionsArgs

func PresetAudioCodecOptionsPtr(v *PresetAudioCodecOptionsArgs) PresetAudioCodecOptionsPtrInput {	return (*presetAudioCodecOptionsPtrType)(v)
}

func (*presetAudioCodecOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptions)(nil)).Elem()
}

func (i *presetAudioCodecOptionsPtrType) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return i.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (i *presetAudioCodecOptionsPtrType) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsPtrOutput)
}

type PresetAudioCodecOptionsOutput struct { *pulumi.OutputState }

func (PresetAudioCodecOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return o.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *PresetAudioCodecOptions {
		return &v
	}).(PresetAudioCodecOptionsPtrOutput)
}
// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptionsPtrOutput struct { *pulumi.OutputState}

func (PresetAudioCodecOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptions)(nil)).Elem()
}

func (o PresetAudioCodecOptionsPtrOutput) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsPtrOutput) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsPtrOutput) Elem() PresetAudioCodecOptionsOutput {
	return o.ApplyT(func (v *PresetAudioCodecOptions) PresetAudioCodecOptions { return *v }).(PresetAudioCodecOptionsOutput)
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudioCodecOptions) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PresetAudioCodecOptionsOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsPtrOutput{})
}
