// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PresetVideoWatermark

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PresetVideoWatermark struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign *string `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id *string `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target *string `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign *string `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset *string `pulumi:"verticalOffset"`
}

type PresetVideoWatermarkInput interface {
	pulumi.Input

	ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput
	ToPresetVideoWatermarkOutputWithContext(context.Context) PresetVideoWatermarkOutput
}

type PresetVideoWatermarkArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign pulumi.StringPtrInput `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset pulumi.StringPtrInput `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity pulumi.StringPtrInput `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign pulumi.StringPtrInput `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset pulumi.StringPtrInput `pulumi:"verticalOffset"`
}

func (PresetVideoWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return i.ToPresetVideoWatermarkOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkOutput)
}

type PresetVideoWatermarkArrayInput interface {
	pulumi.Input

	ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput
	ToPresetVideoWatermarkArrayOutputWithContext(context.Context) PresetVideoWatermarkArrayOutput
}

type PresetVideoWatermarkArray []PresetVideoWatermarkInput

func (PresetVideoWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermark)(nil)).Elem()
}

func (i PresetVideoWatermarkArray) ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput {
	return i.ToPresetVideoWatermarkArrayOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArray) ToPresetVideoWatermarkArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkArrayOutput)
}

type PresetVideoWatermarkOutput struct { *pulumi.OutputState }

func (PresetVideoWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return o
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return o
}

// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
func (o PresetVideoWatermarkOutput) HorizontalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.HorizontalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
func (o PresetVideoWatermarkOutput) HorizontalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.HorizontalOffset }).(pulumi.StringPtrOutput)
}

// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
func (o PresetVideoWatermarkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetVideoWatermarkOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetVideoWatermarkOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
func (o PresetVideoWatermarkOutput) Opacity() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.Opacity }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetVideoWatermarkOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
func (o PresetVideoWatermarkOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
func (o PresetVideoWatermarkOutput) VerticalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.VerticalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
func (o PresetVideoWatermarkOutput) VerticalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetVideoWatermark) *string { return v.VerticalOffset }).(pulumi.StringPtrOutput)
}

type PresetVideoWatermarkArrayOutput struct { *pulumi.OutputState}

func (PresetVideoWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermark)(nil)).Elem()
}

func (o PresetVideoWatermarkArrayOutput) ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput {
	return o
}

func (o PresetVideoWatermarkArrayOutput) ToPresetVideoWatermarkArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArrayOutput {
	return o
}

func (o PresetVideoWatermarkArrayOutput) Index(i pulumi.IntInput) PresetVideoWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) PresetVideoWatermark {
		return vs[0].([]PresetVideoWatermark)[vs[1].(int)]
	}).(PresetVideoWatermarkOutput)
}

func init() {
	pulumi.RegisterOutputType(PresetVideoWatermarkOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkArrayOutput{})
}
