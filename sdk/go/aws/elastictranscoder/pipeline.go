// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Pipeline struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                          `pulumi:"arn"`
	AwsKmsKeyArn               pulumi.StringPtrOutput                       `pulumi:"awsKmsKeyArn"`
	ContentConfig              PipelineContentConfigOutput                  `pulumi:"contentConfig"`
	ContentConfigPermissions   PipelineContentConfigPermissionArrayOutput   `pulumi:"contentConfigPermissions"`
	InputBucket                pulumi.StringOutput                          `pulumi:"inputBucket"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	Notifications              PipelineNotificationsPtrOutput               `pulumi:"notifications"`
	OutputBucket               pulumi.StringOutput                          `pulumi:"outputBucket"`
	Role                       pulumi.StringOutput                          `pulumi:"role"`
	ThumbnailConfig            PipelineThumbnailConfigOutput                `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayOutput `pulumi:"thumbnailConfigPermissions"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil || args.InputBucket == nil {
		return nil, errors.New("missing required argument 'InputBucket'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil {
		args = &PipelineArgs{}
	}
	var resource Pipeline
	err := ctx.RegisterResource("aws:elastictranscoder/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws:elastictranscoder/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	Arn                        *string                             `pulumi:"arn"`
	AwsKmsKeyArn               *string                             `pulumi:"awsKmsKeyArn"`
	ContentConfig              *PipelineContentConfig              `pulumi:"contentConfig"`
	ContentConfigPermissions   []PipelineContentConfigPermission   `pulumi:"contentConfigPermissions"`
	InputBucket                *string                             `pulumi:"inputBucket"`
	Name                       *string                             `pulumi:"name"`
	Notifications              *PipelineNotifications              `pulumi:"notifications"`
	OutputBucket               *string                             `pulumi:"outputBucket"`
	Role                       *string                             `pulumi:"role"`
	ThumbnailConfig            *PipelineThumbnailConfig            `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

type PipelineState struct {
	Arn                        pulumi.StringPtrInput
	AwsKmsKeyArn               pulumi.StringPtrInput
	ContentConfig              PipelineContentConfigPtrInput
	ContentConfigPermissions   PipelineContentConfigPermissionArrayInput
	InputBucket                pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Notifications              PipelineNotificationsPtrInput
	OutputBucket               pulumi.StringPtrInput
	Role                       pulumi.StringPtrInput
	ThumbnailConfig            PipelineThumbnailConfigPtrInput
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	AwsKmsKeyArn               *string                             `pulumi:"awsKmsKeyArn"`
	ContentConfig              *PipelineContentConfig              `pulumi:"contentConfig"`
	ContentConfigPermissions   []PipelineContentConfigPermission   `pulumi:"contentConfigPermissions"`
	InputBucket                string                              `pulumi:"inputBucket"`
	Name                       *string                             `pulumi:"name"`
	Notifications              *PipelineNotifications              `pulumi:"notifications"`
	OutputBucket               *string                             `pulumi:"outputBucket"`
	Role                       string                              `pulumi:"role"`
	ThumbnailConfig            *PipelineThumbnailConfig            `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	AwsKmsKeyArn               pulumi.StringPtrInput
	ContentConfig              PipelineContentConfigPtrInput
	ContentConfigPermissions   PipelineContentConfigPermissionArrayInput
	InputBucket                pulumi.StringInput
	Name                       pulumi.StringPtrInput
	Notifications              PipelineNotificationsPtrInput
	OutputBucket               pulumi.StringPtrInput
	Role                       pulumi.StringInput
	ThumbnailConfig            PipelineThumbnailConfigPtrInput
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}
