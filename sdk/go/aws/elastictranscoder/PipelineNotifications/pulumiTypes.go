// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PipelineNotifications

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PipelineNotifications struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed *string `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error *string `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing *string `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning *string `pulumi:"warning"`
}

type PipelineNotificationsInput interface {
	pulumi.Input

	ToPipelineNotificationsOutput() PipelineNotificationsOutput
	ToPipelineNotificationsOutputWithContext(context.Context) PipelineNotificationsOutput
}

type PipelineNotificationsArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed pulumi.StringPtrInput `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing pulumi.StringPtrInput `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning pulumi.StringPtrInput `pulumi:"warning"`
}

func (PipelineNotificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return i.ToPipelineNotificationsOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsOutput)
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return i.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsOutput).ToPipelineNotificationsPtrOutputWithContext(ctx)
}

type PipelineNotificationsPtrInput interface {
	pulumi.Input

	ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput
	ToPipelineNotificationsPtrOutputWithContext(context.Context) PipelineNotificationsPtrOutput
}

type pipelineNotificationsPtrType PipelineNotificationsArgs

func PipelineNotificationsPtr(v *PipelineNotificationsArgs) PipelineNotificationsPtrInput {	return (*pipelineNotificationsPtrType)(v)
}

func (*pipelineNotificationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotifications)(nil)).Elem()
}

func (i *pipelineNotificationsPtrType) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return i.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (i *pipelineNotificationsPtrType) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsPtrOutput)
}

type PipelineNotificationsOutput struct { *pulumi.OutputState }

func (PipelineNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return o.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *PipelineNotifications {
		return &v
	}).(PipelineNotificationsPtrOutput)
}
// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineNotificationsPtrOutput struct { *pulumi.OutputState}

func (PipelineNotificationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotifications)(nil)).Elem()
}

func (o PipelineNotificationsPtrOutput) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return o
}

func (o PipelineNotificationsPtrOutput) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return o
}

func (o PipelineNotificationsPtrOutput) Elem() PipelineNotificationsOutput {
	return o.ApplyT(func (v *PipelineNotifications) PipelineNotifications { return *v }).(PipelineNotificationsOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PipelineNotifications) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineNotificationsOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsPtrOutput{})
}
