// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PresetThumbnails

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PresetThumbnails struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio *string `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `pulumi:"interval"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetThumbnailsInput interface {
	pulumi.Input

	ToPresetThumbnailsOutput() PresetThumbnailsOutput
	ToPresetThumbnailsOutputWithContext(context.Context) PresetThumbnailsOutput
}

type PresetThumbnailsArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The maximum height of the watermark.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetThumbnailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return i.ToPresetThumbnailsOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsOutput)
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return i.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsOutput).ToPresetThumbnailsPtrOutputWithContext(ctx)
}

type PresetThumbnailsPtrInput interface {
	pulumi.Input

	ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput
	ToPresetThumbnailsPtrOutputWithContext(context.Context) PresetThumbnailsPtrOutput
}

type presetThumbnailsPtrType PresetThumbnailsArgs

func PresetThumbnailsPtr(v *PresetThumbnailsArgs) PresetThumbnailsPtrInput {	return (*presetThumbnailsPtrType)(v)
}

func (*presetThumbnailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnails)(nil)).Elem()
}

func (i *presetThumbnailsPtrType) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return i.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (i *presetThumbnailsPtrType) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsPtrOutput)
}

type PresetThumbnailsOutput struct { *pulumi.OutputState }

func (PresetThumbnailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return o.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *PresetThumbnails {
		return &v
	}).(PresetThumbnailsPtrOutput)
}
// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetThumbnailsOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetThumbnailsOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetThumbnailsOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetThumbnailsOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetThumbnailsOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetThumbnailsOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetThumbnailsPtrOutput struct { *pulumi.OutputState}

func (PresetThumbnailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnails)(nil)).Elem()
}

func (o PresetThumbnailsPtrOutput) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return o
}

func (o PresetThumbnailsPtrOutput) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return o
}

func (o PresetThumbnailsPtrOutput) Elem() PresetThumbnailsOutput {
	return o.ApplyT(func (v *PresetThumbnails) PresetThumbnails { return *v }).(PresetThumbnailsOutput)
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetThumbnailsPtrOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetThumbnailsPtrOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetThumbnailsPtrOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetThumbnailsPtrOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetThumbnailsPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetThumbnailsPtrOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetThumbnails) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PresetThumbnailsOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsPtrOutput{})
}
