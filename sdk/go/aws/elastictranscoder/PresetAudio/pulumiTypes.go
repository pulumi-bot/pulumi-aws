// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PresetAudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PresetAudio struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `pulumi:"audioPackingMode"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate *string `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels *string `pulumi:"channels"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec *string `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate *string `pulumi:"sampleRate"`
}

type PresetAudioInput interface {
	pulumi.Input

	ToPresetAudioOutput() PresetAudioOutput
	ToPresetAudioOutputWithContext(context.Context) PresetAudioOutput
}

type PresetAudioArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode pulumi.StringPtrInput `pulumi:"audioPackingMode"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate pulumi.StringPtrInput `pulumi:"sampleRate"`
}

func (PresetAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (i PresetAudioArgs) ToPresetAudioOutput() PresetAudioOutput {
	return i.ToPresetAudioOutputWithContext(context.Background())
}

func (i PresetAudioArgs) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioOutput)
}

func (i PresetAudioArgs) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return i.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (i PresetAudioArgs) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioOutput).ToPresetAudioPtrOutputWithContext(ctx)
}

type PresetAudioPtrInput interface {
	pulumi.Input

	ToPresetAudioPtrOutput() PresetAudioPtrOutput
	ToPresetAudioPtrOutputWithContext(context.Context) PresetAudioPtrOutput
}

type presetAudioPtrType PresetAudioArgs

func PresetAudioPtr(v *PresetAudioArgs) PresetAudioPtrInput {	return (*presetAudioPtrType)(v)
}

func (*presetAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudio)(nil)).Elem()
}

func (i *presetAudioPtrType) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return i.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (i *presetAudioPtrType) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioPtrOutput)
}

type PresetAudioOutput struct { *pulumi.OutputState }

func (PresetAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (o PresetAudioOutput) ToPresetAudioOutput() PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return o.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (o PresetAudioOutput) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return o.ApplyT(func(v PresetAudio) *PresetAudio {
		return &v
	}).(PresetAudioPtrOutput)
}
// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetAudioOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetAudioOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetAudioPtrOutput struct { *pulumi.OutputState}

func (PresetAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudio)(nil)).Elem()
}

func (o PresetAudioPtrOutput) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return o
}

func (o PresetAudioPtrOutput) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return o
}

func (o PresetAudioPtrOutput) Elem() PresetAudioOutput {
	return o.ApplyT(func (v *PresetAudio) PresetAudio { return *v }).(PresetAudioOutput)
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioPtrOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetAudioPtrOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioPtrOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PresetAudio) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PresetAudioOutput{})
	pulumi.RegisterOutputType(PresetAudioPtrOutput{})
}
