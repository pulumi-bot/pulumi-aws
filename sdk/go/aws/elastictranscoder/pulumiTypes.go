// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PipelineContentConfig struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineContentConfigInput interface {
	pulumi.Input

	ToPipelineContentConfigOutput() PipelineContentConfigOutput
	ToPipelineContentConfigOutputWithContext(context.Context) PipelineContentConfigOutput
}

type PipelineContentConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineContentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfig)(nil)).Elem()
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigOutput() PipelineContentConfigOutput {
	return i.ToPipelineContentConfigOutputWithContext(context.Background())
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigOutputWithContext(ctx context.Context) PipelineContentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigOutput)
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigPtrOutput() PipelineContentConfigPtrOutput {
	return i.ToPipelineContentConfigPtrOutputWithContext(context.Background())
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigPtrOutputWithContext(ctx context.Context) PipelineContentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigOutput).ToPipelineContentConfigPtrOutputWithContext(ctx)
}

type PipelineContentConfigPtrInput interface {
	pulumi.Input

	ToPipelineContentConfigPtrOutput() PipelineContentConfigPtrOutput
	ToPipelineContentConfigPtrOutputWithContext(context.Context) PipelineContentConfigPtrOutput
}

type pipelineContentConfigPtrType PipelineContentConfigArgs

func PipelineContentConfigPtr(v *PipelineContentConfigArgs) PipelineContentConfigPtrInput {
	return (*pipelineContentConfigPtrType)(v)
}

func (*pipelineContentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineContentConfig)(nil)).Elem()
}

func (i *pipelineContentConfigPtrType) ToPipelineContentConfigPtrOutput() PipelineContentConfigPtrOutput {
	return i.ToPipelineContentConfigPtrOutputWithContext(context.Background())
}

func (i *pipelineContentConfigPtrType) ToPipelineContentConfigPtrOutputWithContext(ctx context.Context) PipelineContentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPtrOutput)
}

type PipelineContentConfigOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfig)(nil)).Elem()
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigOutput() PipelineContentConfigOutput {
	return o
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigOutputWithContext(ctx context.Context) PipelineContentConfigOutput {
	return o
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigPtrOutput() PipelineContentConfigPtrOutput {
	return o.ToPipelineContentConfigPtrOutputWithContext(context.Background())
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigPtrOutputWithContext(ctx context.Context) PipelineContentConfigPtrOutput {
	return o.ApplyT(func(v PipelineContentConfig) *PipelineContentConfig {
		return &v
	}).(PipelineContentConfigPtrOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineContentConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfig) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigPtrOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineContentConfig)(nil)).Elem()
}

func (o PipelineContentConfigPtrOutput) ToPipelineContentConfigPtrOutput() PipelineContentConfigPtrOutput {
	return o
}

func (o PipelineContentConfigPtrOutput) ToPipelineContentConfigPtrOutputWithContext(ctx context.Context) PipelineContentConfigPtrOutput {
	return o
}

func (o PipelineContentConfigPtrOutput) Elem() PipelineContentConfigOutput {
	return o.ApplyT(func(v *PipelineContentConfig) PipelineContentConfig { return *v }).(PipelineContentConfigOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigPtrOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineContentConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigPtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfig) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineContentConfigArgsInput interface {
	pulumi.Input

	ToPipelineContentConfigArgsOutput() PipelineContentConfigArgsOutput
	ToPipelineContentConfigArgsOutputWithContext(context.Context) PipelineContentConfigArgsOutput
}

type PipelineContentConfigArgsArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineContentConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigArgs)(nil)).Elem()
}

func (i PipelineContentConfigArgsArgs) ToPipelineContentConfigArgsOutput() PipelineContentConfigArgsOutput {
	return i.ToPipelineContentConfigArgsOutputWithContext(context.Background())
}

func (i PipelineContentConfigArgsArgs) ToPipelineContentConfigArgsOutputWithContext(ctx context.Context) PipelineContentConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigArgsOutput)
}

func (i PipelineContentConfigArgsArgs) ToPipelineContentConfigArgsPtrOutput() PipelineContentConfigArgsPtrOutput {
	return i.ToPipelineContentConfigArgsPtrOutputWithContext(context.Background())
}

func (i PipelineContentConfigArgsArgs) ToPipelineContentConfigArgsPtrOutputWithContext(ctx context.Context) PipelineContentConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigArgsOutput).ToPipelineContentConfigArgsPtrOutputWithContext(ctx)
}

type PipelineContentConfigArgsPtrInput interface {
	pulumi.Input

	ToPipelineContentConfigArgsPtrOutput() PipelineContentConfigArgsPtrOutput
	ToPipelineContentConfigArgsPtrOutputWithContext(context.Context) PipelineContentConfigArgsPtrOutput
}

type pipelineContentConfigArgsPtrType PipelineContentConfigArgsArgs

func PipelineContentConfigArgsPtr(v *PipelineContentConfigArgsArgs) PipelineContentConfigArgsPtrInput {
	return (*pipelineContentConfigArgsPtrType)(v)
}

func (*pipelineContentConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineContentConfigArgs)(nil)).Elem()
}

func (i *pipelineContentConfigArgsPtrType) ToPipelineContentConfigArgsPtrOutput() PipelineContentConfigArgsPtrOutput {
	return i.ToPipelineContentConfigArgsPtrOutputWithContext(context.Background())
}

func (i *pipelineContentConfigArgsPtrType) ToPipelineContentConfigArgsPtrOutputWithContext(ctx context.Context) PipelineContentConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigArgsPtrOutput)
}

type PipelineContentConfigArgsOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigArgs)(nil)).Elem()
}

func (o PipelineContentConfigArgsOutput) ToPipelineContentConfigArgsOutput() PipelineContentConfigArgsOutput {
	return o
}

func (o PipelineContentConfigArgsOutput) ToPipelineContentConfigArgsOutputWithContext(ctx context.Context) PipelineContentConfigArgsOutput {
	return o
}

func (o PipelineContentConfigArgsOutput) ToPipelineContentConfigArgsPtrOutput() PipelineContentConfigArgsPtrOutput {
	return o.ToPipelineContentConfigArgsPtrOutputWithContext(context.Background())
}

func (o PipelineContentConfigArgsOutput) ToPipelineContentConfigArgsPtrOutputWithContext(ctx context.Context) PipelineContentConfigArgsPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigArgs) *PipelineContentConfigArgs {
		return &v
	}).(PipelineContentConfigArgsPtrOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigArgsOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigArgs) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigArgsOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigArgs) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineContentConfigArgs)(nil)).Elem()
}

func (o PipelineContentConfigArgsPtrOutput) ToPipelineContentConfigArgsPtrOutput() PipelineContentConfigArgsPtrOutput {
	return o
}

func (o PipelineContentConfigArgsPtrOutput) ToPipelineContentConfigArgsPtrOutputWithContext(ctx context.Context) PipelineContentConfigArgsPtrOutput {
	return o
}

func (o PipelineContentConfigArgsPtrOutput) Elem() PipelineContentConfigArgsOutput {
	return o.ApplyT(func(v *PipelineContentConfigArgs) PipelineContentConfigArgs { return *v }).(PipelineContentConfigArgsOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigArgsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigArgs) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigArgsPtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigArgs) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigPermission struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineContentConfigPermissionInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionOutput() PipelineContentConfigPermissionOutput
	ToPipelineContentConfigPermissionOutputWithContext(context.Context) PipelineContentConfigPermissionOutput
}

type PipelineContentConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineContentConfigPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermission)(nil)).Elem()
}

func (i PipelineContentConfigPermissionArgs) ToPipelineContentConfigPermissionOutput() PipelineContentConfigPermissionOutput {
	return i.ToPipelineContentConfigPermissionOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionArgs) ToPipelineContentConfigPermissionOutputWithContext(ctx context.Context) PipelineContentConfigPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionOutput)
}

type PipelineContentConfigPermissionArrayInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionArrayOutput() PipelineContentConfigPermissionArrayOutput
	ToPipelineContentConfigPermissionArrayOutputWithContext(context.Context) PipelineContentConfigPermissionArrayOutput
}

type PipelineContentConfigPermissionArray []PipelineContentConfigPermissionInput

func (PipelineContentConfigPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermission)(nil)).Elem()
}

func (i PipelineContentConfigPermissionArray) ToPipelineContentConfigPermissionArrayOutput() PipelineContentConfigPermissionArrayOutput {
	return i.ToPipelineContentConfigPermissionArrayOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionArray) ToPipelineContentConfigPermissionArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionArrayOutput)
}

type PipelineContentConfigPermissionOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermission)(nil)).Elem()
}

func (o PipelineContentConfigPermissionOutput) ToPipelineContentConfigPermissionOutput() PipelineContentConfigPermissionOutput {
	return o
}

func (o PipelineContentConfigPermissionOutput) ToPipelineContentConfigPermissionOutputWithContext(ctx context.Context) PipelineContentConfigPermissionOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
func (o PipelineContentConfigPermissionOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineContentConfigPermission) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to transcoded files and playlists.
func (o PipelineContentConfigPermissionOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermission) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
func (o PipelineContentConfigPermissionOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermission) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigPermissionArrayOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermission)(nil)).Elem()
}

func (o PipelineContentConfigPermissionArrayOutput) ToPipelineContentConfigPermissionArrayOutput() PipelineContentConfigPermissionArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionArrayOutput) ToPipelineContentConfigPermissionArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionArrayOutput) Index(i pulumi.IntInput) PipelineContentConfigPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineContentConfigPermission {
		return vs[0].([]PipelineContentConfigPermission)[vs[1].(int)]
	}).(PipelineContentConfigPermissionOutput)
}

type PipelineContentConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineContentConfigPermissionArgsInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionArgsOutput() PipelineContentConfigPermissionArgsOutput
	ToPipelineContentConfigPermissionArgsOutputWithContext(context.Context) PipelineContentConfigPermissionArgsOutput
}

type PipelineContentConfigPermissionArgsArgs struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineContentConfigPermissionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermissionArgs)(nil)).Elem()
}

func (i PipelineContentConfigPermissionArgsArgs) ToPipelineContentConfigPermissionArgsOutput() PipelineContentConfigPermissionArgsOutput {
	return i.ToPipelineContentConfigPermissionArgsOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionArgsArgs) ToPipelineContentConfigPermissionArgsOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionArgsOutput)
}

type PipelineContentConfigPermissionArgsArrayInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionArgsArrayOutput() PipelineContentConfigPermissionArgsArrayOutput
	ToPipelineContentConfigPermissionArgsArrayOutputWithContext(context.Context) PipelineContentConfigPermissionArgsArrayOutput
}

type PipelineContentConfigPermissionArgsArray []PipelineContentConfigPermissionArgsInput

func (PipelineContentConfigPermissionArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermissionArgs)(nil)).Elem()
}

func (i PipelineContentConfigPermissionArgsArray) ToPipelineContentConfigPermissionArgsArrayOutput() PipelineContentConfigPermissionArgsArrayOutput {
	return i.ToPipelineContentConfigPermissionArgsArrayOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionArgsArray) ToPipelineContentConfigPermissionArgsArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionArgsArrayOutput)
}

type PipelineContentConfigPermissionArgsOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermissionArgs)(nil)).Elem()
}

func (o PipelineContentConfigPermissionArgsOutput) ToPipelineContentConfigPermissionArgsOutput() PipelineContentConfigPermissionArgsOutput {
	return o
}

func (o PipelineContentConfigPermissionArgsOutput) ToPipelineContentConfigPermissionArgsOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArgsOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
func (o PipelineContentConfigPermissionArgsOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionArgs) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to transcoded files and playlists.
func (o PipelineContentConfigPermissionArgsOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionArgs) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
func (o PipelineContentConfigPermissionArgsOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionArgs) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigPermissionArgsArrayOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermissionArgs)(nil)).Elem()
}

func (o PipelineContentConfigPermissionArgsArrayOutput) ToPipelineContentConfigPermissionArgsArrayOutput() PipelineContentConfigPermissionArgsArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionArgsArrayOutput) ToPipelineContentConfigPermissionArgsArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionArgsArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionArgsArrayOutput) Index(i pulumi.IntInput) PipelineContentConfigPermissionArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineContentConfigPermissionArgs {
		return vs[0].([]PipelineContentConfigPermissionArgs)[vs[1].(int)]
	}).(PipelineContentConfigPermissionArgsOutput)
}

type PipelineContentConfigPermissionState struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineContentConfigPermissionStateInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionStateOutput() PipelineContentConfigPermissionStateOutput
	ToPipelineContentConfigPermissionStateOutputWithContext(context.Context) PipelineContentConfigPermissionStateOutput
}

type PipelineContentConfigPermissionStateArgs struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineContentConfigPermissionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermissionState)(nil)).Elem()
}

func (i PipelineContentConfigPermissionStateArgs) ToPipelineContentConfigPermissionStateOutput() PipelineContentConfigPermissionStateOutput {
	return i.ToPipelineContentConfigPermissionStateOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionStateArgs) ToPipelineContentConfigPermissionStateOutputWithContext(ctx context.Context) PipelineContentConfigPermissionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionStateOutput)
}

type PipelineContentConfigPermissionStateArrayInput interface {
	pulumi.Input

	ToPipelineContentConfigPermissionStateArrayOutput() PipelineContentConfigPermissionStateArrayOutput
	ToPipelineContentConfigPermissionStateArrayOutputWithContext(context.Context) PipelineContentConfigPermissionStateArrayOutput
}

type PipelineContentConfigPermissionStateArray []PipelineContentConfigPermissionStateInput

func (PipelineContentConfigPermissionStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermissionState)(nil)).Elem()
}

func (i PipelineContentConfigPermissionStateArray) ToPipelineContentConfigPermissionStateArrayOutput() PipelineContentConfigPermissionStateArrayOutput {
	return i.ToPipelineContentConfigPermissionStateArrayOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionStateArray) ToPipelineContentConfigPermissionStateArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionStateArrayOutput)
}

type PipelineContentConfigPermissionStateOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermissionState)(nil)).Elem()
}

func (o PipelineContentConfigPermissionStateOutput) ToPipelineContentConfigPermissionStateOutput() PipelineContentConfigPermissionStateOutput {
	return o
}

func (o PipelineContentConfigPermissionStateOutput) ToPipelineContentConfigPermissionStateOutputWithContext(ctx context.Context) PipelineContentConfigPermissionStateOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
func (o PipelineContentConfigPermissionStateOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionState) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to transcoded files and playlists.
func (o PipelineContentConfigPermissionStateOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionState) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
func (o PipelineContentConfigPermissionStateOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigPermissionState) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineContentConfigPermissionStateArrayOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineContentConfigPermissionState)(nil)).Elem()
}

func (o PipelineContentConfigPermissionStateArrayOutput) ToPipelineContentConfigPermissionStateArrayOutput() PipelineContentConfigPermissionStateArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionStateArrayOutput) ToPipelineContentConfigPermissionStateArrayOutputWithContext(ctx context.Context) PipelineContentConfigPermissionStateArrayOutput {
	return o
}

func (o PipelineContentConfigPermissionStateArrayOutput) Index(i pulumi.IntInput) PipelineContentConfigPermissionStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineContentConfigPermissionState {
		return vs[0].([]PipelineContentConfigPermissionState)[vs[1].(int)]
	}).(PipelineContentConfigPermissionStateOutput)
}

type PipelineContentConfigState struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineContentConfigStateInput interface {
	pulumi.Input

	ToPipelineContentConfigStateOutput() PipelineContentConfigStateOutput
	ToPipelineContentConfigStateOutputWithContext(context.Context) PipelineContentConfigStateOutput
}

type PipelineContentConfigStateArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineContentConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigState)(nil)).Elem()
}

func (i PipelineContentConfigStateArgs) ToPipelineContentConfigStateOutput() PipelineContentConfigStateOutput {
	return i.ToPipelineContentConfigStateOutputWithContext(context.Background())
}

func (i PipelineContentConfigStateArgs) ToPipelineContentConfigStateOutputWithContext(ctx context.Context) PipelineContentConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigStateOutput)
}

type PipelineContentConfigStateOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigState)(nil)).Elem()
}

func (o PipelineContentConfigStateOutput) ToPipelineContentConfigStateOutput() PipelineContentConfigStateOutput {
	return o
}

func (o PipelineContentConfigStateOutput) ToPipelineContentConfigStateOutputWithContext(ctx context.Context) PipelineContentConfigStateOutput {
	return o
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigStateOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigState) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigStateOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineContentConfigState) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineNotifications struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed *string `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error *string `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing *string `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning *string `pulumi:"warning"`
}

type PipelineNotificationsInput interface {
	pulumi.Input

	ToPipelineNotificationsOutput() PipelineNotificationsOutput
	ToPipelineNotificationsOutputWithContext(context.Context) PipelineNotificationsOutput
}

type PipelineNotificationsArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed pulumi.StringPtrInput `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing pulumi.StringPtrInput `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning pulumi.StringPtrInput `pulumi:"warning"`
}

func (PipelineNotificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return i.ToPipelineNotificationsOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsOutput)
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return i.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsOutput).ToPipelineNotificationsPtrOutputWithContext(ctx)
}

type PipelineNotificationsPtrInput interface {
	pulumi.Input

	ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput
	ToPipelineNotificationsPtrOutputWithContext(context.Context) PipelineNotificationsPtrOutput
}

type pipelineNotificationsPtrType PipelineNotificationsArgs

func PipelineNotificationsPtr(v *PipelineNotificationsArgs) PipelineNotificationsPtrInput {
	return (*pipelineNotificationsPtrType)(v)
}

func (*pipelineNotificationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotifications)(nil)).Elem()
}

func (i *pipelineNotificationsPtrType) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return i.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (i *pipelineNotificationsPtrType) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsPtrOutput)
}

type PipelineNotificationsOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return o.ToPipelineNotificationsPtrOutputWithContext(context.Background())
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *PipelineNotifications {
		return &v
	}).(PipelineNotificationsPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineNotificationsPtrOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotifications)(nil)).Elem()
}

func (o PipelineNotificationsPtrOutput) ToPipelineNotificationsPtrOutput() PipelineNotificationsPtrOutput {
	return o
}

func (o PipelineNotificationsPtrOutput) ToPipelineNotificationsPtrOutputWithContext(ctx context.Context) PipelineNotificationsPtrOutput {
	return o
}

func (o PipelineNotificationsPtrOutput) Elem() PipelineNotificationsOutput {
	return o.ApplyT(func(v *PipelineNotifications) PipelineNotifications { return *v }).(PipelineNotificationsOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsPtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotifications) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineNotificationsArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed *string `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error *string `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing *string `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning *string `pulumi:"warning"`
}

type PipelineNotificationsArgsInput interface {
	pulumi.Input

	ToPipelineNotificationsArgsOutput() PipelineNotificationsArgsOutput
	ToPipelineNotificationsArgsOutputWithContext(context.Context) PipelineNotificationsArgsOutput
}

type PipelineNotificationsArgsArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed pulumi.StringPtrInput `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing pulumi.StringPtrInput `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning pulumi.StringPtrInput `pulumi:"warning"`
}

func (PipelineNotificationsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotificationsArgs)(nil)).Elem()
}

func (i PipelineNotificationsArgsArgs) ToPipelineNotificationsArgsOutput() PipelineNotificationsArgsOutput {
	return i.ToPipelineNotificationsArgsOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgsArgs) ToPipelineNotificationsArgsOutputWithContext(ctx context.Context) PipelineNotificationsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsArgsOutput)
}

func (i PipelineNotificationsArgsArgs) ToPipelineNotificationsArgsPtrOutput() PipelineNotificationsArgsPtrOutput {
	return i.ToPipelineNotificationsArgsPtrOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgsArgs) ToPipelineNotificationsArgsPtrOutputWithContext(ctx context.Context) PipelineNotificationsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsArgsOutput).ToPipelineNotificationsArgsPtrOutputWithContext(ctx)
}

type PipelineNotificationsArgsPtrInput interface {
	pulumi.Input

	ToPipelineNotificationsArgsPtrOutput() PipelineNotificationsArgsPtrOutput
	ToPipelineNotificationsArgsPtrOutputWithContext(context.Context) PipelineNotificationsArgsPtrOutput
}

type pipelineNotificationsArgsPtrType PipelineNotificationsArgsArgs

func PipelineNotificationsArgsPtr(v *PipelineNotificationsArgsArgs) PipelineNotificationsArgsPtrInput {
	return (*pipelineNotificationsArgsPtrType)(v)
}

func (*pipelineNotificationsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotificationsArgs)(nil)).Elem()
}

func (i *pipelineNotificationsArgsPtrType) ToPipelineNotificationsArgsPtrOutput() PipelineNotificationsArgsPtrOutput {
	return i.ToPipelineNotificationsArgsPtrOutputWithContext(context.Background())
}

func (i *pipelineNotificationsArgsPtrType) ToPipelineNotificationsArgsPtrOutputWithContext(ctx context.Context) PipelineNotificationsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsArgsPtrOutput)
}

type PipelineNotificationsArgsOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotificationsArgs)(nil)).Elem()
}

func (o PipelineNotificationsArgsOutput) ToPipelineNotificationsArgsOutput() PipelineNotificationsArgsOutput {
	return o
}

func (o PipelineNotificationsArgsOutput) ToPipelineNotificationsArgsOutputWithContext(ctx context.Context) PipelineNotificationsArgsOutput {
	return o
}

func (o PipelineNotificationsArgsOutput) ToPipelineNotificationsArgsPtrOutput() PipelineNotificationsArgsPtrOutput {
	return o.ToPipelineNotificationsArgsPtrOutputWithContext(context.Background())
}

func (o PipelineNotificationsArgsOutput) ToPipelineNotificationsArgsPtrOutputWithContext(ctx context.Context) PipelineNotificationsArgsPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *PipelineNotificationsArgs {
		return &v
	}).(PipelineNotificationsArgsPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsArgsOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsArgsOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsArgsOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsArgsOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineNotificationsArgsPtrOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineNotificationsArgs)(nil)).Elem()
}

func (o PipelineNotificationsArgsPtrOutput) ToPipelineNotificationsArgsPtrOutput() PipelineNotificationsArgsPtrOutput {
	return o
}

func (o PipelineNotificationsArgsPtrOutput) ToPipelineNotificationsArgsPtrOutputWithContext(ctx context.Context) PipelineNotificationsArgsPtrOutput {
	return o
}

func (o PipelineNotificationsArgsPtrOutput) Elem() PipelineNotificationsArgsOutput {
	return o.ApplyT(func(v *PipelineNotificationsArgs) PipelineNotificationsArgs { return *v }).(PipelineNotificationsArgsOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsArgsPtrOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsArgsPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsArgsPtrOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsArgsPtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsArgs) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineNotificationsState struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed *string `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error *string `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing *string `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning *string `pulumi:"warning"`
}

type PipelineNotificationsStateInput interface {
	pulumi.Input

	ToPipelineNotificationsStateOutput() PipelineNotificationsStateOutput
	ToPipelineNotificationsStateOutputWithContext(context.Context) PipelineNotificationsStateOutput
}

type PipelineNotificationsStateArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed pulumi.StringPtrInput `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing pulumi.StringPtrInput `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	Warning pulumi.StringPtrInput `pulumi:"warning"`
}

func (PipelineNotificationsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotificationsState)(nil)).Elem()
}

func (i PipelineNotificationsStateArgs) ToPipelineNotificationsStateOutput() PipelineNotificationsStateOutput {
	return i.ToPipelineNotificationsStateOutputWithContext(context.Background())
}

func (i PipelineNotificationsStateArgs) ToPipelineNotificationsStateOutputWithContext(ctx context.Context) PipelineNotificationsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsStateOutput)
}

type PipelineNotificationsStateOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotificationsState)(nil)).Elem()
}

func (o PipelineNotificationsStateOutput) ToPipelineNotificationsStateOutput() PipelineNotificationsStateOutput {
	return o
}

func (o PipelineNotificationsStateOutput) ToPipelineNotificationsStateOutputWithContext(ctx context.Context) PipelineNotificationsStateOutput {
	return o
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsStateOutput) Completed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsState) *string { return v.Completed }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsStateOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsState) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsStateOutput) Progressing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsState) *string { return v.Progressing }).(pulumi.StringPtrOutput)
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
func (o PipelineNotificationsStateOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineNotificationsState) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfig struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineThumbnailConfigInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigOutput() PipelineThumbnailConfigOutput
	ToPipelineThumbnailConfigOutputWithContext(context.Context) PipelineThumbnailConfigOutput
}

type PipelineThumbnailConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineThumbnailConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfig)(nil)).Elem()
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigOutput() PipelineThumbnailConfigOutput {
	return i.ToPipelineThumbnailConfigOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigOutputWithContext(ctx context.Context) PipelineThumbnailConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigOutput)
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigPtrOutput() PipelineThumbnailConfigPtrOutput {
	return i.ToPipelineThumbnailConfigPtrOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigOutput).ToPipelineThumbnailConfigPtrOutputWithContext(ctx)
}

type PipelineThumbnailConfigPtrInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPtrOutput() PipelineThumbnailConfigPtrOutput
	ToPipelineThumbnailConfigPtrOutputWithContext(context.Context) PipelineThumbnailConfigPtrOutput
}

type pipelineThumbnailConfigPtrType PipelineThumbnailConfigArgs

func PipelineThumbnailConfigPtr(v *PipelineThumbnailConfigArgs) PipelineThumbnailConfigPtrInput {
	return (*pipelineThumbnailConfigPtrType)(v)
}

func (*pipelineThumbnailConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineThumbnailConfig)(nil)).Elem()
}

func (i *pipelineThumbnailConfigPtrType) ToPipelineThumbnailConfigPtrOutput() PipelineThumbnailConfigPtrOutput {
	return i.ToPipelineThumbnailConfigPtrOutputWithContext(context.Background())
}

func (i *pipelineThumbnailConfigPtrType) ToPipelineThumbnailConfigPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPtrOutput)
}

type PipelineThumbnailConfigOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfig)(nil)).Elem()
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigOutput() PipelineThumbnailConfigOutput {
	return o
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigOutputWithContext(ctx context.Context) PipelineThumbnailConfigOutput {
	return o
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigPtrOutput() PipelineThumbnailConfigPtrOutput {
	return o.ToPipelineThumbnailConfigPtrOutputWithContext(context.Background())
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfig) *PipelineThumbnailConfig {
		return &v
	}).(PipelineThumbnailConfigPtrOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineThumbnailConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfig) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigPtrOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineThumbnailConfig)(nil)).Elem()
}

func (o PipelineThumbnailConfigPtrOutput) ToPipelineThumbnailConfigPtrOutput() PipelineThumbnailConfigPtrOutput {
	return o
}

func (o PipelineThumbnailConfigPtrOutput) ToPipelineThumbnailConfigPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigPtrOutput {
	return o
}

func (o PipelineThumbnailConfigPtrOutput) Elem() PipelineThumbnailConfigOutput {
	return o.ApplyT(func(v *PipelineThumbnailConfig) PipelineThumbnailConfig { return *v }).(PipelineThumbnailConfigOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigPtrOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineThumbnailConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigPtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfig) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineThumbnailConfigArgsInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigArgsOutput() PipelineThumbnailConfigArgsOutput
	ToPipelineThumbnailConfigArgsOutputWithContext(context.Context) PipelineThumbnailConfigArgsOutput
}

type PipelineThumbnailConfigArgsArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineThumbnailConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigArgs)(nil)).Elem()
}

func (i PipelineThumbnailConfigArgsArgs) ToPipelineThumbnailConfigArgsOutput() PipelineThumbnailConfigArgsOutput {
	return i.ToPipelineThumbnailConfigArgsOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigArgsArgs) ToPipelineThumbnailConfigArgsOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigArgsOutput)
}

func (i PipelineThumbnailConfigArgsArgs) ToPipelineThumbnailConfigArgsPtrOutput() PipelineThumbnailConfigArgsPtrOutput {
	return i.ToPipelineThumbnailConfigArgsPtrOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigArgsArgs) ToPipelineThumbnailConfigArgsPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigArgsOutput).ToPipelineThumbnailConfigArgsPtrOutputWithContext(ctx)
}

type PipelineThumbnailConfigArgsPtrInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigArgsPtrOutput() PipelineThumbnailConfigArgsPtrOutput
	ToPipelineThumbnailConfigArgsPtrOutputWithContext(context.Context) PipelineThumbnailConfigArgsPtrOutput
}

type pipelineThumbnailConfigArgsPtrType PipelineThumbnailConfigArgsArgs

func PipelineThumbnailConfigArgsPtr(v *PipelineThumbnailConfigArgsArgs) PipelineThumbnailConfigArgsPtrInput {
	return (*pipelineThumbnailConfigArgsPtrType)(v)
}

func (*pipelineThumbnailConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineThumbnailConfigArgs)(nil)).Elem()
}

func (i *pipelineThumbnailConfigArgsPtrType) ToPipelineThumbnailConfigArgsPtrOutput() PipelineThumbnailConfigArgsPtrOutput {
	return i.ToPipelineThumbnailConfigArgsPtrOutputWithContext(context.Background())
}

func (i *pipelineThumbnailConfigArgsPtrType) ToPipelineThumbnailConfigArgsPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigArgsPtrOutput)
}

type PipelineThumbnailConfigArgsOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigArgs)(nil)).Elem()
}

func (o PipelineThumbnailConfigArgsOutput) ToPipelineThumbnailConfigArgsOutput() PipelineThumbnailConfigArgsOutput {
	return o
}

func (o PipelineThumbnailConfigArgsOutput) ToPipelineThumbnailConfigArgsOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsOutput {
	return o
}

func (o PipelineThumbnailConfigArgsOutput) ToPipelineThumbnailConfigArgsPtrOutput() PipelineThumbnailConfigArgsPtrOutput {
	return o.ToPipelineThumbnailConfigArgsPtrOutputWithContext(context.Background())
}

func (o PipelineThumbnailConfigArgsOutput) ToPipelineThumbnailConfigArgsPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigArgs) *PipelineThumbnailConfigArgs {
		return &v
	}).(PipelineThumbnailConfigArgsPtrOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigArgsOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigArgs) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigArgsOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigArgs) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineThumbnailConfigArgs)(nil)).Elem()
}

func (o PipelineThumbnailConfigArgsPtrOutput) ToPipelineThumbnailConfigArgsPtrOutput() PipelineThumbnailConfigArgsPtrOutput {
	return o
}

func (o PipelineThumbnailConfigArgsPtrOutput) ToPipelineThumbnailConfigArgsPtrOutputWithContext(ctx context.Context) PipelineThumbnailConfigArgsPtrOutput {
	return o
}

func (o PipelineThumbnailConfigArgsPtrOutput) Elem() PipelineThumbnailConfigArgsOutput {
	return o.ApplyT(func(v *PipelineThumbnailConfigArgs) PipelineThumbnailConfigArgs { return *v }).(PipelineThumbnailConfigArgsOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigArgsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigArgs) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigArgsPtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigArgs) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigPermission struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineThumbnailConfigPermissionInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionOutput() PipelineThumbnailConfigPermissionOutput
	ToPipelineThumbnailConfigPermissionOutputWithContext(context.Context) PipelineThumbnailConfigPermissionOutput
}

type PipelineThumbnailConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineThumbnailConfigPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionArgs) ToPipelineThumbnailConfigPermissionOutput() PipelineThumbnailConfigPermissionOutput {
	return i.ToPipelineThumbnailConfigPermissionOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionArgs) ToPipelineThumbnailConfigPermissionOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionOutput)
}

type PipelineThumbnailConfigPermissionArrayInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionArrayOutput() PipelineThumbnailConfigPermissionArrayOutput
	ToPipelineThumbnailConfigPermissionArrayOutputWithContext(context.Context) PipelineThumbnailConfigPermissionArrayOutput
}

type PipelineThumbnailConfigPermissionArray []PipelineThumbnailConfigPermissionInput

func (PipelineThumbnailConfigPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionArray) ToPipelineThumbnailConfigPermissionArrayOutput() PipelineThumbnailConfigPermissionArrayOutput {
	return i.ToPipelineThumbnailConfigPermissionArrayOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionArray) ToPipelineThumbnailConfigPermissionArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionArrayOutput)
}

type PipelineThumbnailConfigPermissionOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionOutput) ToPipelineThumbnailConfigPermissionOutput() PipelineThumbnailConfigPermissionOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionOutput) ToPipelineThumbnailConfigPermissionOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
func (o PipelineThumbnailConfigPermissionOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermission) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to thumbnail files.
func (o PipelineThumbnailConfigPermissionOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermission) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
func (o PipelineThumbnailConfigPermissionOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermission) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigPermissionArrayOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionArrayOutput) ToPipelineThumbnailConfigPermissionArrayOutput() PipelineThumbnailConfigPermissionArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionArrayOutput) ToPipelineThumbnailConfigPermissionArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionArrayOutput) Index(i pulumi.IntInput) PipelineThumbnailConfigPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineThumbnailConfigPermission {
		return vs[0].([]PipelineThumbnailConfigPermission)[vs[1].(int)]
	}).(PipelineThumbnailConfigPermissionOutput)
}

type PipelineThumbnailConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineThumbnailConfigPermissionArgsInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionArgsOutput() PipelineThumbnailConfigPermissionArgsOutput
	ToPipelineThumbnailConfigPermissionArgsOutputWithContext(context.Context) PipelineThumbnailConfigPermissionArgsOutput
}

type PipelineThumbnailConfigPermissionArgsArgs struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineThumbnailConfigPermissionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermissionArgs)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionArgsArgs) ToPipelineThumbnailConfigPermissionArgsOutput() PipelineThumbnailConfigPermissionArgsOutput {
	return i.ToPipelineThumbnailConfigPermissionArgsOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionArgsArgs) ToPipelineThumbnailConfigPermissionArgsOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionArgsOutput)
}

type PipelineThumbnailConfigPermissionArgsArrayInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionArgsArrayOutput() PipelineThumbnailConfigPermissionArgsArrayOutput
	ToPipelineThumbnailConfigPermissionArgsArrayOutputWithContext(context.Context) PipelineThumbnailConfigPermissionArgsArrayOutput
}

type PipelineThumbnailConfigPermissionArgsArray []PipelineThumbnailConfigPermissionArgsInput

func (PipelineThumbnailConfigPermissionArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermissionArgs)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionArgsArray) ToPipelineThumbnailConfigPermissionArgsArrayOutput() PipelineThumbnailConfigPermissionArgsArrayOutput {
	return i.ToPipelineThumbnailConfigPermissionArgsArrayOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionArgsArray) ToPipelineThumbnailConfigPermissionArgsArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionArgsArrayOutput)
}

type PipelineThumbnailConfigPermissionArgsOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermissionArgs)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionArgsOutput) ToPipelineThumbnailConfigPermissionArgsOutput() PipelineThumbnailConfigPermissionArgsOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionArgsOutput) ToPipelineThumbnailConfigPermissionArgsOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArgsOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
func (o PipelineThumbnailConfigPermissionArgsOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionArgs) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to thumbnail files.
func (o PipelineThumbnailConfigPermissionArgsOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionArgs) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
func (o PipelineThumbnailConfigPermissionArgsOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionArgs) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigPermissionArgsArrayOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermissionArgs)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionArgsArrayOutput) ToPipelineThumbnailConfigPermissionArgsArrayOutput() PipelineThumbnailConfigPermissionArgsArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionArgsArrayOutput) ToPipelineThumbnailConfigPermissionArgsArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionArgsArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionArgsArrayOutput) Index(i pulumi.IntInput) PipelineThumbnailConfigPermissionArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineThumbnailConfigPermissionArgs {
		return vs[0].([]PipelineThumbnailConfigPermissionArgs)[vs[1].(int)]
	}).(PipelineThumbnailConfigPermissionArgsOutput)
}

type PipelineThumbnailConfigPermissionState struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineThumbnailConfigPermissionStateInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionStateOutput() PipelineThumbnailConfigPermissionStateOutput
	ToPipelineThumbnailConfigPermissionStateOutputWithContext(context.Context) PipelineThumbnailConfigPermissionStateOutput
}

type PipelineThumbnailConfigPermissionStateArgs struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
	Accesses pulumi.StringArrayInput `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee pulumi.StringPtrInput `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
}

func (PipelineThumbnailConfigPermissionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermissionState)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionStateArgs) ToPipelineThumbnailConfigPermissionStateOutput() PipelineThumbnailConfigPermissionStateOutput {
	return i.ToPipelineThumbnailConfigPermissionStateOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionStateArgs) ToPipelineThumbnailConfigPermissionStateOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionStateOutput)
}

type PipelineThumbnailConfigPermissionStateArrayInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigPermissionStateArrayOutput() PipelineThumbnailConfigPermissionStateArrayOutput
	ToPipelineThumbnailConfigPermissionStateArrayOutputWithContext(context.Context) PipelineThumbnailConfigPermissionStateArrayOutput
}

type PipelineThumbnailConfigPermissionStateArray []PipelineThumbnailConfigPermissionStateInput

func (PipelineThumbnailConfigPermissionStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermissionState)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionStateArray) ToPipelineThumbnailConfigPermissionStateArrayOutput() PipelineThumbnailConfigPermissionStateArrayOutput {
	return i.ToPipelineThumbnailConfigPermissionStateArrayOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionStateArray) ToPipelineThumbnailConfigPermissionStateArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionStateArrayOutput)
}

type PipelineThumbnailConfigPermissionStateOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermissionState)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionStateOutput) ToPipelineThumbnailConfigPermissionStateOutput() PipelineThumbnailConfigPermissionStateOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionStateOutput) ToPipelineThumbnailConfigPermissionStateOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionStateOutput {
	return o
}

// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
func (o PipelineThumbnailConfigPermissionStateOutput) Accesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionState) []string { return v.Accesses }).(pulumi.StringArrayOutput)
}

// The AWS user or group that you want to have access to thumbnail files.
func (o PipelineThumbnailConfigPermissionStateOutput) Grantee() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionState) *string { return v.Grantee }).(pulumi.StringPtrOutput)
}

// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
func (o PipelineThumbnailConfigPermissionStateOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigPermissionState) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

type PipelineThumbnailConfigPermissionStateArrayOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineThumbnailConfigPermissionState)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionStateArrayOutput) ToPipelineThumbnailConfigPermissionStateArrayOutput() PipelineThumbnailConfigPermissionStateArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionStateArrayOutput) ToPipelineThumbnailConfigPermissionStateArrayOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionStateArrayOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionStateArrayOutput) Index(i pulumi.IntInput) PipelineThumbnailConfigPermissionStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineThumbnailConfigPermissionState {
		return vs[0].([]PipelineThumbnailConfigPermissionState)[vs[1].(int)]
	}).(PipelineThumbnailConfigPermissionStateOutput)
}

type PipelineThumbnailConfigState struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineThumbnailConfigStateInput interface {
	pulumi.Input

	ToPipelineThumbnailConfigStateOutput() PipelineThumbnailConfigStateOutput
	ToPipelineThumbnailConfigStateOutputWithContext(context.Context) PipelineThumbnailConfigStateOutput
}

type PipelineThumbnailConfigStateArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (PipelineThumbnailConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigState)(nil)).Elem()
}

func (i PipelineThumbnailConfigStateArgs) ToPipelineThumbnailConfigStateOutput() PipelineThumbnailConfigStateOutput {
	return i.ToPipelineThumbnailConfigStateOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigStateArgs) ToPipelineThumbnailConfigStateOutputWithContext(ctx context.Context) PipelineThumbnailConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigStateOutput)
}

type PipelineThumbnailConfigStateOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigState)(nil)).Elem()
}

func (o PipelineThumbnailConfigStateOutput) ToPipelineThumbnailConfigStateOutput() PipelineThumbnailConfigStateOutput {
	return o
}

func (o PipelineThumbnailConfigStateOutput) ToPipelineThumbnailConfigStateOutputWithContext(ctx context.Context) PipelineThumbnailConfigStateOutput {
	return o
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigStateOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigState) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigStateOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineThumbnailConfigState) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type PresetAudio struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels *string `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec *string `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate *string `pulumi:"sampleRate"`
}

type PresetAudioInput interface {
	pulumi.Input

	ToPresetAudioOutput() PresetAudioOutput
	ToPresetAudioOutputWithContext(context.Context) PresetAudioOutput
}

type PresetAudioArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode pulumi.StringPtrInput `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate pulumi.StringPtrInput `pulumi:"sampleRate"`
}

func (PresetAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (i PresetAudioArgs) ToPresetAudioOutput() PresetAudioOutput {
	return i.ToPresetAudioOutputWithContext(context.Background())
}

func (i PresetAudioArgs) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioOutput)
}

func (i PresetAudioArgs) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return i.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (i PresetAudioArgs) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioOutput).ToPresetAudioPtrOutputWithContext(ctx)
}

type PresetAudioPtrInput interface {
	pulumi.Input

	ToPresetAudioPtrOutput() PresetAudioPtrOutput
	ToPresetAudioPtrOutputWithContext(context.Context) PresetAudioPtrOutput
}

type presetAudioPtrType PresetAudioArgs

func PresetAudioPtr(v *PresetAudioArgs) PresetAudioPtrInput {
	return (*presetAudioPtrType)(v)
}

func (*presetAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudio)(nil)).Elem()
}

func (i *presetAudioPtrType) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return i.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (i *presetAudioPtrType) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioPtrOutput)
}

type PresetAudioOutput struct{ *pulumi.OutputState }

func (PresetAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (o PresetAudioOutput) ToPresetAudioOutput() PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return o.ToPresetAudioPtrOutputWithContext(context.Background())
}

func (o PresetAudioOutput) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return o.ApplyT(func(v PresetAudio) *PresetAudio {
		return &v
	}).(PresetAudioPtrOutput)
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetAudioPtrOutput struct{ *pulumi.OutputState }

func (PresetAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudio)(nil)).Elem()
}

func (o PresetAudioPtrOutput) ToPresetAudioPtrOutput() PresetAudioPtrOutput {
	return o
}

func (o PresetAudioPtrOutput) ToPresetAudioPtrOutputWithContext(ctx context.Context) PresetAudioPtrOutput {
	return o
}

func (o PresetAudioPtrOutput) Elem() PresetAudioOutput {
	return o.ApplyT(func(v *PresetAudio) PresetAudio { return *v }).(PresetAudioOutput)
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioPtrOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioPtrOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioPtrOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudio) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetAudioArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels *string `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec *string `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate *string `pulumi:"sampleRate"`
}

type PresetAudioArgsInput interface {
	pulumi.Input

	ToPresetAudioArgsOutput() PresetAudioArgsOutput
	ToPresetAudioArgsOutputWithContext(context.Context) PresetAudioArgsOutput
}

type PresetAudioArgsArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode pulumi.StringPtrInput `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate pulumi.StringPtrInput `pulumi:"sampleRate"`
}

func (PresetAudioArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioArgs)(nil)).Elem()
}

func (i PresetAudioArgsArgs) ToPresetAudioArgsOutput() PresetAudioArgsOutput {
	return i.ToPresetAudioArgsOutputWithContext(context.Background())
}

func (i PresetAudioArgsArgs) ToPresetAudioArgsOutputWithContext(ctx context.Context) PresetAudioArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioArgsOutput)
}

func (i PresetAudioArgsArgs) ToPresetAudioArgsPtrOutput() PresetAudioArgsPtrOutput {
	return i.ToPresetAudioArgsPtrOutputWithContext(context.Background())
}

func (i PresetAudioArgsArgs) ToPresetAudioArgsPtrOutputWithContext(ctx context.Context) PresetAudioArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioArgsOutput).ToPresetAudioArgsPtrOutputWithContext(ctx)
}

type PresetAudioArgsPtrInput interface {
	pulumi.Input

	ToPresetAudioArgsPtrOutput() PresetAudioArgsPtrOutput
	ToPresetAudioArgsPtrOutputWithContext(context.Context) PresetAudioArgsPtrOutput
}

type presetAudioArgsPtrType PresetAudioArgsArgs

func PresetAudioArgsPtr(v *PresetAudioArgsArgs) PresetAudioArgsPtrInput {
	return (*presetAudioArgsPtrType)(v)
}

func (*presetAudioArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioArgs)(nil)).Elem()
}

func (i *presetAudioArgsPtrType) ToPresetAudioArgsPtrOutput() PresetAudioArgsPtrOutput {
	return i.ToPresetAudioArgsPtrOutputWithContext(context.Background())
}

func (i *presetAudioArgsPtrType) ToPresetAudioArgsPtrOutputWithContext(ctx context.Context) PresetAudioArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioArgsPtrOutput)
}

type PresetAudioArgsOutput struct{ *pulumi.OutputState }

func (PresetAudioArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioArgs)(nil)).Elem()
}

func (o PresetAudioArgsOutput) ToPresetAudioArgsOutput() PresetAudioArgsOutput {
	return o
}

func (o PresetAudioArgsOutput) ToPresetAudioArgsOutputWithContext(ctx context.Context) PresetAudioArgsOutput {
	return o
}

func (o PresetAudioArgsOutput) ToPresetAudioArgsPtrOutput() PresetAudioArgsPtrOutput {
	return o.ToPresetAudioArgsPtrOutputWithContext(context.Background())
}

func (o PresetAudioArgsOutput) ToPresetAudioArgsPtrOutputWithContext(ctx context.Context) PresetAudioArgsPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *PresetAudioArgs {
		return &v
	}).(PresetAudioArgsPtrOutput)
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioArgsOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioArgsOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioArgsOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioArgsOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioArgsOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetAudioArgsPtrOutput struct{ *pulumi.OutputState }

func (PresetAudioArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioArgs)(nil)).Elem()
}

func (o PresetAudioArgsPtrOutput) ToPresetAudioArgsPtrOutput() PresetAudioArgsPtrOutput {
	return o
}

func (o PresetAudioArgsPtrOutput) ToPresetAudioArgsPtrOutputWithContext(ctx context.Context) PresetAudioArgsPtrOutput {
	return o
}

func (o PresetAudioArgsPtrOutput) Elem() PresetAudioArgsOutput {
	return o.ApplyT(func(v *PresetAudioArgs) PresetAudioArgs { return *v }).(PresetAudioArgsOutput)
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioArgsPtrOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioArgsPtrOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioArgsPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioArgsPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioArgsPtrOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioArgs) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptions struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth *string `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `pulumi:"signed"`
}

type PresetAudioCodecOptionsInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput
	ToPresetAudioCodecOptionsOutputWithContext(context.Context) PresetAudioCodecOptionsOutput
}

type PresetAudioCodecOptionsArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth pulumi.StringPtrInput `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder pulumi.StringPtrInput `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed pulumi.StringPtrInput `pulumi:"signed"`
}

func (PresetAudioCodecOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return i.ToPresetAudioCodecOptionsOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsOutput)
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return i.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsOutput).ToPresetAudioCodecOptionsPtrOutputWithContext(ctx)
}

type PresetAudioCodecOptionsPtrInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput
	ToPresetAudioCodecOptionsPtrOutputWithContext(context.Context) PresetAudioCodecOptionsPtrOutput
}

type presetAudioCodecOptionsPtrType PresetAudioCodecOptionsArgs

func PresetAudioCodecOptionsPtr(v *PresetAudioCodecOptionsArgs) PresetAudioCodecOptionsPtrInput {
	return (*presetAudioCodecOptionsPtrType)(v)
}

func (*presetAudioCodecOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptions)(nil)).Elem()
}

func (i *presetAudioCodecOptionsPtrType) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return i.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (i *presetAudioCodecOptionsPtrType) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsPtrOutput)
}

type PresetAudioCodecOptionsOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return o.ToPresetAudioCodecOptionsPtrOutputWithContext(context.Background())
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *PresetAudioCodecOptions {
		return &v
	}).(PresetAudioCodecOptionsPtrOutput)
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptionsPtrOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptions)(nil)).Elem()
}

func (o PresetAudioCodecOptionsPtrOutput) ToPresetAudioCodecOptionsPtrOutput() PresetAudioCodecOptionsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsPtrOutput) ToPresetAudioCodecOptionsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsPtrOutput) Elem() PresetAudioCodecOptionsOutput {
	return o.ApplyT(func(v *PresetAudioCodecOptions) PresetAudioCodecOptions { return *v }).(PresetAudioCodecOptionsOutput)
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsPtrOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptions) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptionsArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth *string `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `pulumi:"signed"`
}

type PresetAudioCodecOptionsArgsInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsArgsOutput() PresetAudioCodecOptionsArgsOutput
	ToPresetAudioCodecOptionsArgsOutputWithContext(context.Context) PresetAudioCodecOptionsArgsOutput
}

type PresetAudioCodecOptionsArgsArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth pulumi.StringPtrInput `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder pulumi.StringPtrInput `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed pulumi.StringPtrInput `pulumi:"signed"`
}

func (PresetAudioCodecOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptionsArgs)(nil)).Elem()
}

func (i PresetAudioCodecOptionsArgsArgs) ToPresetAudioCodecOptionsArgsOutput() PresetAudioCodecOptionsArgsOutput {
	return i.ToPresetAudioCodecOptionsArgsOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgsArgs) ToPresetAudioCodecOptionsArgsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsArgsOutput)
}

func (i PresetAudioCodecOptionsArgsArgs) ToPresetAudioCodecOptionsArgsPtrOutput() PresetAudioCodecOptionsArgsPtrOutput {
	return i.ToPresetAudioCodecOptionsArgsPtrOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgsArgs) ToPresetAudioCodecOptionsArgsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsArgsOutput).ToPresetAudioCodecOptionsArgsPtrOutputWithContext(ctx)
}

type PresetAudioCodecOptionsArgsPtrInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsArgsPtrOutput() PresetAudioCodecOptionsArgsPtrOutput
	ToPresetAudioCodecOptionsArgsPtrOutputWithContext(context.Context) PresetAudioCodecOptionsArgsPtrOutput
}

type presetAudioCodecOptionsArgsPtrType PresetAudioCodecOptionsArgsArgs

func PresetAudioCodecOptionsArgsPtr(v *PresetAudioCodecOptionsArgsArgs) PresetAudioCodecOptionsArgsPtrInput {
	return (*presetAudioCodecOptionsArgsPtrType)(v)
}

func (*presetAudioCodecOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptionsArgs)(nil)).Elem()
}

func (i *presetAudioCodecOptionsArgsPtrType) ToPresetAudioCodecOptionsArgsPtrOutput() PresetAudioCodecOptionsArgsPtrOutput {
	return i.ToPresetAudioCodecOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *presetAudioCodecOptionsArgsPtrType) ToPresetAudioCodecOptionsArgsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsArgsPtrOutput)
}

type PresetAudioCodecOptionsArgsOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptionsArgs)(nil)).Elem()
}

func (o PresetAudioCodecOptionsArgsOutput) ToPresetAudioCodecOptionsArgsOutput() PresetAudioCodecOptionsArgsOutput {
	return o
}

func (o PresetAudioCodecOptionsArgsOutput) ToPresetAudioCodecOptionsArgsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsOutput {
	return o
}

func (o PresetAudioCodecOptionsArgsOutput) ToPresetAudioCodecOptionsArgsPtrOutput() PresetAudioCodecOptionsArgsPtrOutput {
	return o.ToPresetAudioCodecOptionsArgsPtrOutputWithContext(context.Background())
}

func (o PresetAudioCodecOptionsArgsOutput) ToPresetAudioCodecOptionsArgsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *PresetAudioCodecOptionsArgs {
		return &v
	}).(PresetAudioCodecOptionsArgsPtrOutput)
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsArgsOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsArgsOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsArgsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsArgsOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetAudioCodecOptionsArgs)(nil)).Elem()
}

func (o PresetAudioCodecOptionsArgsPtrOutput) ToPresetAudioCodecOptionsArgsPtrOutput() PresetAudioCodecOptionsArgsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsArgsPtrOutput) ToPresetAudioCodecOptionsArgsPtrOutputWithContext(ctx context.Context) PresetAudioCodecOptionsArgsPtrOutput {
	return o
}

func (o PresetAudioCodecOptionsArgsPtrOutput) Elem() PresetAudioCodecOptionsArgsOutput {
	return o.ApplyT(func(v *PresetAudioCodecOptionsArgs) PresetAudioCodecOptionsArgs { return *v }).(PresetAudioCodecOptionsArgsOutput)
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsArgsPtrOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsArgsPtrOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsArgsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsArgsPtrOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsArgs) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioCodecOptionsState struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth *string `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `pulumi:"signed"`
}

type PresetAudioCodecOptionsStateInput interface {
	pulumi.Input

	ToPresetAudioCodecOptionsStateOutput() PresetAudioCodecOptionsStateOutput
	ToPresetAudioCodecOptionsStateOutputWithContext(context.Context) PresetAudioCodecOptionsStateOutput
}

type PresetAudioCodecOptionsStateArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth pulumi.StringPtrInput `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder pulumi.StringPtrInput `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed pulumi.StringPtrInput `pulumi:"signed"`
}

func (PresetAudioCodecOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptionsState)(nil)).Elem()
}

func (i PresetAudioCodecOptionsStateArgs) ToPresetAudioCodecOptionsStateOutput() PresetAudioCodecOptionsStateOutput {
	return i.ToPresetAudioCodecOptionsStateOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsStateArgs) ToPresetAudioCodecOptionsStateOutputWithContext(ctx context.Context) PresetAudioCodecOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsStateOutput)
}

type PresetAudioCodecOptionsStateOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptionsState)(nil)).Elem()
}

func (o PresetAudioCodecOptionsStateOutput) ToPresetAudioCodecOptionsStateOutput() PresetAudioCodecOptionsStateOutput {
	return o
}

func (o PresetAudioCodecOptionsStateOutput) ToPresetAudioCodecOptionsStateOutputWithContext(ctx context.Context) PresetAudioCodecOptionsStateOutput {
	return o
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsStateOutput) BitDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsState) *string { return v.BitDepth }).(pulumi.StringPtrOutput)
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsStateOutput) BitOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsState) *string { return v.BitOrder }).(pulumi.StringPtrOutput)
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsStateOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsState) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsStateOutput) Signed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioCodecOptionsState) *string { return v.Signed }).(pulumi.StringPtrOutput)
}

type PresetAudioState struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels *string `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec *string `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate *string `pulumi:"sampleRate"`
}

type PresetAudioStateInput interface {
	pulumi.Input

	ToPresetAudioStateOutput() PresetAudioStateOutput
	ToPresetAudioStateOutputWithContext(context.Context) PresetAudioStateOutput
}

type PresetAudioStateArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode pulumi.StringPtrInput `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate pulumi.StringPtrInput `pulumi:"sampleRate"`
}

func (PresetAudioStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioState)(nil)).Elem()
}

func (i PresetAudioStateArgs) ToPresetAudioStateOutput() PresetAudioStateOutput {
	return i.ToPresetAudioStateOutputWithContext(context.Background())
}

func (i PresetAudioStateArgs) ToPresetAudioStateOutputWithContext(ctx context.Context) PresetAudioStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioStateOutput)
}

type PresetAudioStateOutput struct{ *pulumi.OutputState }

func (PresetAudioStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioState)(nil)).Elem()
}

func (o PresetAudioStateOutput) ToPresetAudioStateOutput() PresetAudioStateOutput {
	return o
}

func (o PresetAudioStateOutput) ToPresetAudioStateOutputWithContext(ctx context.Context) PresetAudioStateOutput {
	return o
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioStateOutput) AudioPackingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioState) *string { return v.AudioPackingMode }).(pulumi.StringPtrOutput)
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioStateOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioState) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The number of audio channels in the output file
func (o PresetAudioStateOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioState) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioStateOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioState) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioStateOutput) SampleRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetAudioState) *string { return v.SampleRate }).(pulumi.StringPtrOutput)
}

type PresetThumbnails struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetThumbnailsInput interface {
	pulumi.Input

	ToPresetThumbnailsOutput() PresetThumbnailsOutput
	ToPresetThumbnailsOutputWithContext(context.Context) PresetThumbnailsOutput
}

type PresetThumbnailsArgs struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetThumbnailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return i.ToPresetThumbnailsOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsOutput)
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return i.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsOutput).ToPresetThumbnailsPtrOutputWithContext(ctx)
}

type PresetThumbnailsPtrInput interface {
	pulumi.Input

	ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput
	ToPresetThumbnailsPtrOutputWithContext(context.Context) PresetThumbnailsPtrOutput
}

type presetThumbnailsPtrType PresetThumbnailsArgs

func PresetThumbnailsPtr(v *PresetThumbnailsArgs) PresetThumbnailsPtrInput {
	return (*presetThumbnailsPtrType)(v)
}

func (*presetThumbnailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnails)(nil)).Elem()
}

func (i *presetThumbnailsPtrType) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return i.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (i *presetThumbnailsPtrType) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsPtrOutput)
}

type PresetThumbnailsOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return o.ToPresetThumbnailsPtrOutputWithContext(context.Background())
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *PresetThumbnails {
		return &v
	}).(PresetThumbnailsPtrOutput)
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetThumbnailsPtrOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnails)(nil)).Elem()
}

func (o PresetThumbnailsPtrOutput) ToPresetThumbnailsPtrOutput() PresetThumbnailsPtrOutput {
	return o
}

func (o PresetThumbnailsPtrOutput) ToPresetThumbnailsPtrOutputWithContext(ctx context.Context) PresetThumbnailsPtrOutput {
	return o
}

func (o PresetThumbnailsPtrOutput) Elem() PresetThumbnailsOutput {
	return o.ApplyT(func(v *PresetThumbnails) PresetThumbnails { return *v }).(PresetThumbnailsOutput)
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsPtrOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsPtrOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsPtrOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsPtrOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsPtrOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnails) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetThumbnailsArgs struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetThumbnailsArgsInput interface {
	pulumi.Input

	ToPresetThumbnailsArgsOutput() PresetThumbnailsArgsOutput
	ToPresetThumbnailsArgsOutputWithContext(context.Context) PresetThumbnailsArgsOutput
}

type PresetThumbnailsArgsArgs struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetThumbnailsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnailsArgs)(nil)).Elem()
}

func (i PresetThumbnailsArgsArgs) ToPresetThumbnailsArgsOutput() PresetThumbnailsArgsOutput {
	return i.ToPresetThumbnailsArgsOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgsArgs) ToPresetThumbnailsArgsOutputWithContext(ctx context.Context) PresetThumbnailsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsArgsOutput)
}

func (i PresetThumbnailsArgsArgs) ToPresetThumbnailsArgsPtrOutput() PresetThumbnailsArgsPtrOutput {
	return i.ToPresetThumbnailsArgsPtrOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgsArgs) ToPresetThumbnailsArgsPtrOutputWithContext(ctx context.Context) PresetThumbnailsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsArgsOutput).ToPresetThumbnailsArgsPtrOutputWithContext(ctx)
}

type PresetThumbnailsArgsPtrInput interface {
	pulumi.Input

	ToPresetThumbnailsArgsPtrOutput() PresetThumbnailsArgsPtrOutput
	ToPresetThumbnailsArgsPtrOutputWithContext(context.Context) PresetThumbnailsArgsPtrOutput
}

type presetThumbnailsArgsPtrType PresetThumbnailsArgsArgs

func PresetThumbnailsArgsPtr(v *PresetThumbnailsArgsArgs) PresetThumbnailsArgsPtrInput {
	return (*presetThumbnailsArgsPtrType)(v)
}

func (*presetThumbnailsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnailsArgs)(nil)).Elem()
}

func (i *presetThumbnailsArgsPtrType) ToPresetThumbnailsArgsPtrOutput() PresetThumbnailsArgsPtrOutput {
	return i.ToPresetThumbnailsArgsPtrOutputWithContext(context.Background())
}

func (i *presetThumbnailsArgsPtrType) ToPresetThumbnailsArgsPtrOutputWithContext(ctx context.Context) PresetThumbnailsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsArgsPtrOutput)
}

type PresetThumbnailsArgsOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnailsArgs)(nil)).Elem()
}

func (o PresetThumbnailsArgsOutput) ToPresetThumbnailsArgsOutput() PresetThumbnailsArgsOutput {
	return o
}

func (o PresetThumbnailsArgsOutput) ToPresetThumbnailsArgsOutputWithContext(ctx context.Context) PresetThumbnailsArgsOutput {
	return o
}

func (o PresetThumbnailsArgsOutput) ToPresetThumbnailsArgsPtrOutput() PresetThumbnailsArgsPtrOutput {
	return o.ToPresetThumbnailsArgsPtrOutputWithContext(context.Background())
}

func (o PresetThumbnailsArgsOutput) ToPresetThumbnailsArgsPtrOutputWithContext(ctx context.Context) PresetThumbnailsArgsPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *PresetThumbnailsArgs {
		return &v
	}).(PresetThumbnailsArgsPtrOutput)
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsArgsOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsArgsOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsArgsOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsArgsOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsArgsOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsArgsOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsArgsOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsArgsOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetThumbnailsArgsPtrOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetThumbnailsArgs)(nil)).Elem()
}

func (o PresetThumbnailsArgsPtrOutput) ToPresetThumbnailsArgsPtrOutput() PresetThumbnailsArgsPtrOutput {
	return o
}

func (o PresetThumbnailsArgsPtrOutput) ToPresetThumbnailsArgsPtrOutputWithContext(ctx context.Context) PresetThumbnailsArgsPtrOutput {
	return o
}

func (o PresetThumbnailsArgsPtrOutput) Elem() PresetThumbnailsArgsOutput {
	return o.ApplyT(func(v *PresetThumbnailsArgs) PresetThumbnailsArgs { return *v }).(PresetThumbnailsArgsOutput)
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsArgsPtrOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsArgsPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsArgsPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsArgsPtrOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsArgsPtrOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsArgsPtrOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsArgsPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsArgsPtrOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsArgs) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetThumbnailsState struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetThumbnailsStateInput interface {
	pulumi.Input

	ToPresetThumbnailsStateOutput() PresetThumbnailsStateOutput
	ToPresetThumbnailsStateOutputWithContext(context.Context) PresetThumbnailsStateOutput
}

type PresetThumbnailsStateArgs struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetThumbnailsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnailsState)(nil)).Elem()
}

func (i PresetThumbnailsStateArgs) ToPresetThumbnailsStateOutput() PresetThumbnailsStateOutput {
	return i.ToPresetThumbnailsStateOutputWithContext(context.Background())
}

func (i PresetThumbnailsStateArgs) ToPresetThumbnailsStateOutputWithContext(ctx context.Context) PresetThumbnailsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsStateOutput)
}

type PresetThumbnailsStateOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnailsState)(nil)).Elem()
}

func (o PresetThumbnailsStateOutput) ToPresetThumbnailsStateOutput() PresetThumbnailsStateOutput {
	return o
}

func (o PresetThumbnailsStateOutput) ToPresetThumbnailsStateOutputWithContext(ctx context.Context) PresetThumbnailsStateOutput {
	return o
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsStateOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsStateOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsStateOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsStateOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsStateOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsStateOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsStateOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsStateOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetThumbnailsState) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideo struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio *string `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate *string `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec *string `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate *string `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetVideoInput interface {
	pulumi.Input

	ToPresetVideoOutput() PresetVideoOutput
	ToPresetVideoOutputWithContext(context.Context) PresetVideoOutput
}

type PresetVideoArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio pulumi.StringPtrInput `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop pulumi.StringPtrInput `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate pulumi.StringPtrInput `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist pulumi.StringPtrInput `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate pulumi.StringPtrInput `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideo)(nil)).Elem()
}

func (i PresetVideoArgs) ToPresetVideoOutput() PresetVideoOutput {
	return i.ToPresetVideoOutputWithContext(context.Background())
}

func (i PresetVideoArgs) ToPresetVideoOutputWithContext(ctx context.Context) PresetVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoOutput)
}

func (i PresetVideoArgs) ToPresetVideoPtrOutput() PresetVideoPtrOutput {
	return i.ToPresetVideoPtrOutputWithContext(context.Background())
}

func (i PresetVideoArgs) ToPresetVideoPtrOutputWithContext(ctx context.Context) PresetVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoOutput).ToPresetVideoPtrOutputWithContext(ctx)
}

type PresetVideoPtrInput interface {
	pulumi.Input

	ToPresetVideoPtrOutput() PresetVideoPtrOutput
	ToPresetVideoPtrOutputWithContext(context.Context) PresetVideoPtrOutput
}

type presetVideoPtrType PresetVideoArgs

func PresetVideoPtr(v *PresetVideoArgs) PresetVideoPtrInput {
	return (*presetVideoPtrType)(v)
}

func (*presetVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetVideo)(nil)).Elem()
}

func (i *presetVideoPtrType) ToPresetVideoPtrOutput() PresetVideoPtrOutput {
	return i.ToPresetVideoPtrOutputWithContext(context.Background())
}

func (i *presetVideoPtrType) ToPresetVideoPtrOutputWithContext(ctx context.Context) PresetVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoPtrOutput)
}

type PresetVideoOutput struct{ *pulumi.OutputState }

func (PresetVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideo)(nil)).Elem()
}

func (o PresetVideoOutput) ToPresetVideoOutput() PresetVideoOutput {
	return o
}

func (o PresetVideoOutput) ToPresetVideoOutputWithContext(ctx context.Context) PresetVideoOutput {
	return o
}

func (o PresetVideoOutput) ToPresetVideoPtrOutput() PresetVideoPtrOutput {
	return o.ToPresetVideoPtrOutputWithContext(context.Background())
}

func (o PresetVideoOutput) ToPresetVideoPtrOutputWithContext(ctx context.Context) PresetVideoPtrOutput {
	return o.ApplyT(func(v PresetVideo) *PresetVideo {
		return &v
	}).(PresetVideoPtrOutput)
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoOutput) DisplayAspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.DisplayAspectRatio }).(pulumi.StringPtrOutput)
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoOutput) FixedGop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.FixedGop }).(pulumi.StringPtrOutput)
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoOutput) KeyframesMaxDist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.KeyframesMaxDist }).(pulumi.StringPtrOutput)
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoOutput) MaxFrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxFrameRate }).(pulumi.StringPtrOutput)
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideoPtrOutput struct{ *pulumi.OutputState }

func (PresetVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetVideo)(nil)).Elem()
}

func (o PresetVideoPtrOutput) ToPresetVideoPtrOutput() PresetVideoPtrOutput {
	return o
}

func (o PresetVideoPtrOutput) ToPresetVideoPtrOutputWithContext(ctx context.Context) PresetVideoPtrOutput {
	return o
}

func (o PresetVideoPtrOutput) Elem() PresetVideoOutput {
	return o.ApplyT(func(v *PresetVideo) PresetVideo { return *v }).(PresetVideoOutput)
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoPtrOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoPtrOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoPtrOutput) DisplayAspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.DisplayAspectRatio }).(pulumi.StringPtrOutput)
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoPtrOutput) FixedGop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.FixedGop }).(pulumi.StringPtrOutput)
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoPtrOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoPtrOutput) KeyframesMaxDist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.KeyframesMaxDist }).(pulumi.StringPtrOutput)
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoPtrOutput) MaxFrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxFrameRate }).(pulumi.StringPtrOutput)
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoPtrOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoPtrOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoPtrOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoPtrOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideo) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideoArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio *string `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate *string `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec *string `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate *string `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetVideoArgsInput interface {
	pulumi.Input

	ToPresetVideoArgsOutput() PresetVideoArgsOutput
	ToPresetVideoArgsOutputWithContext(context.Context) PresetVideoArgsOutput
}

type PresetVideoArgsArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio pulumi.StringPtrInput `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop pulumi.StringPtrInput `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate pulumi.StringPtrInput `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist pulumi.StringPtrInput `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate pulumi.StringPtrInput `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetVideoArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoArgs)(nil)).Elem()
}

func (i PresetVideoArgsArgs) ToPresetVideoArgsOutput() PresetVideoArgsOutput {
	return i.ToPresetVideoArgsOutputWithContext(context.Background())
}

func (i PresetVideoArgsArgs) ToPresetVideoArgsOutputWithContext(ctx context.Context) PresetVideoArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoArgsOutput)
}

func (i PresetVideoArgsArgs) ToPresetVideoArgsPtrOutput() PresetVideoArgsPtrOutput {
	return i.ToPresetVideoArgsPtrOutputWithContext(context.Background())
}

func (i PresetVideoArgsArgs) ToPresetVideoArgsPtrOutputWithContext(ctx context.Context) PresetVideoArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoArgsOutput).ToPresetVideoArgsPtrOutputWithContext(ctx)
}

type PresetVideoArgsPtrInput interface {
	pulumi.Input

	ToPresetVideoArgsPtrOutput() PresetVideoArgsPtrOutput
	ToPresetVideoArgsPtrOutputWithContext(context.Context) PresetVideoArgsPtrOutput
}

type presetVideoArgsPtrType PresetVideoArgsArgs

func PresetVideoArgsPtr(v *PresetVideoArgsArgs) PresetVideoArgsPtrInput {
	return (*presetVideoArgsPtrType)(v)
}

func (*presetVideoArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetVideoArgs)(nil)).Elem()
}

func (i *presetVideoArgsPtrType) ToPresetVideoArgsPtrOutput() PresetVideoArgsPtrOutput {
	return i.ToPresetVideoArgsPtrOutputWithContext(context.Background())
}

func (i *presetVideoArgsPtrType) ToPresetVideoArgsPtrOutputWithContext(ctx context.Context) PresetVideoArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoArgsPtrOutput)
}

type PresetVideoArgsOutput struct{ *pulumi.OutputState }

func (PresetVideoArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoArgs)(nil)).Elem()
}

func (o PresetVideoArgsOutput) ToPresetVideoArgsOutput() PresetVideoArgsOutput {
	return o
}

func (o PresetVideoArgsOutput) ToPresetVideoArgsOutputWithContext(ctx context.Context) PresetVideoArgsOutput {
	return o
}

func (o PresetVideoArgsOutput) ToPresetVideoArgsPtrOutput() PresetVideoArgsPtrOutput {
	return o.ToPresetVideoArgsPtrOutputWithContext(context.Background())
}

func (o PresetVideoArgsOutput) ToPresetVideoArgsPtrOutputWithContext(ctx context.Context) PresetVideoArgsPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *PresetVideoArgs {
		return &v
	}).(PresetVideoArgsPtrOutput)
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoArgsOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoArgsOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoArgsOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoArgsOutput) DisplayAspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.DisplayAspectRatio }).(pulumi.StringPtrOutput)
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoArgsOutput) FixedGop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.FixedGop }).(pulumi.StringPtrOutput)
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoArgsOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoArgsOutput) KeyframesMaxDist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.KeyframesMaxDist }).(pulumi.StringPtrOutput)
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoArgsOutput) MaxFrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxFrameRate }).(pulumi.StringPtrOutput)
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoArgsOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoArgsOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoArgsOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoArgsOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoArgsOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideoArgsPtrOutput struct{ *pulumi.OutputState }

func (PresetVideoArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresetVideoArgs)(nil)).Elem()
}

func (o PresetVideoArgsPtrOutput) ToPresetVideoArgsPtrOutput() PresetVideoArgsPtrOutput {
	return o
}

func (o PresetVideoArgsPtrOutput) ToPresetVideoArgsPtrOutputWithContext(ctx context.Context) PresetVideoArgsPtrOutput {
	return o
}

func (o PresetVideoArgsPtrOutput) Elem() PresetVideoArgsOutput {
	return o.ApplyT(func(v *PresetVideoArgs) PresetVideoArgs { return *v }).(PresetVideoArgsOutput)
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoArgsPtrOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoArgsPtrOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoArgsPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoArgsPtrOutput) DisplayAspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.DisplayAspectRatio }).(pulumi.StringPtrOutput)
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoArgsPtrOutput) FixedGop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.FixedGop }).(pulumi.StringPtrOutput)
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoArgsPtrOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoArgsPtrOutput) KeyframesMaxDist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.KeyframesMaxDist }).(pulumi.StringPtrOutput)
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoArgsPtrOutput) MaxFrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxFrameRate }).(pulumi.StringPtrOutput)
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoArgsPtrOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoArgsPtrOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoArgsPtrOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoArgsPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoArgsPtrOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoArgs) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideoState struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio *string `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate *string `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec *string `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate *string `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetVideoStateInput interface {
	pulumi.Input

	ToPresetVideoStateOutput() PresetVideoStateOutput
	ToPresetVideoStateOutputWithContext(context.Context) PresetVideoStateOutput
}

type PresetVideoStateArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio pulumi.StringPtrInput `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate pulumi.StringPtrInput `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio pulumi.StringPtrInput `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop pulumi.StringPtrInput `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate pulumi.StringPtrInput `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist pulumi.StringPtrInput `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate pulumi.StringPtrInput `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy pulumi.StringPtrInput `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
}

func (PresetVideoStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoState)(nil)).Elem()
}

func (i PresetVideoStateArgs) ToPresetVideoStateOutput() PresetVideoStateOutput {
	return i.ToPresetVideoStateOutputWithContext(context.Background())
}

func (i PresetVideoStateArgs) ToPresetVideoStateOutputWithContext(ctx context.Context) PresetVideoStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoStateOutput)
}

type PresetVideoStateOutput struct{ *pulumi.OutputState }

func (PresetVideoStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoState)(nil)).Elem()
}

func (o PresetVideoStateOutput) ToPresetVideoStateOutput() PresetVideoStateOutput {
	return o
}

func (o PresetVideoStateOutput) ToPresetVideoStateOutputWithContext(ctx context.Context) PresetVideoStateOutput {
	return o
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoStateOutput) AspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.AspectRatio }).(pulumi.StringPtrOutput)
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoStateOutput) BitRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.BitRate }).(pulumi.StringPtrOutput)
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoStateOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoStateOutput) DisplayAspectRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.DisplayAspectRatio }).(pulumi.StringPtrOutput)
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoStateOutput) FixedGop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.FixedGop }).(pulumi.StringPtrOutput)
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoStateOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoStateOutput) KeyframesMaxDist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.KeyframesMaxDist }).(pulumi.StringPtrOutput)
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoStateOutput) MaxFrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.MaxFrameRate }).(pulumi.StringPtrOutput)
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoStateOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoStateOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoStateOutput) PaddingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.PaddingPolicy }).(pulumi.StringPtrOutput)
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoStateOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoStateOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoState) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

type PresetVideoWatermark struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign *string `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id *string `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target *string `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign *string `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset *string `pulumi:"verticalOffset"`
}

type PresetVideoWatermarkInput interface {
	pulumi.Input

	ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput
	ToPresetVideoWatermarkOutputWithContext(context.Context) PresetVideoWatermarkOutput
}

type PresetVideoWatermarkArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign pulumi.StringPtrInput `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset pulumi.StringPtrInput `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity pulumi.StringPtrInput `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign pulumi.StringPtrInput `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset pulumi.StringPtrInput `pulumi:"verticalOffset"`
}

func (PresetVideoWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return i.ToPresetVideoWatermarkOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkOutput)
}

type PresetVideoWatermarkArrayInput interface {
	pulumi.Input

	ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput
	ToPresetVideoWatermarkArrayOutputWithContext(context.Context) PresetVideoWatermarkArrayOutput
}

type PresetVideoWatermarkArray []PresetVideoWatermarkInput

func (PresetVideoWatermarkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermark)(nil)).Elem()
}

func (i PresetVideoWatermarkArray) ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput {
	return i.ToPresetVideoWatermarkArrayOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArray) ToPresetVideoWatermarkArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkArrayOutput)
}

type PresetVideoWatermarkOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return o
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return o
}

// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
func (o PresetVideoWatermarkOutput) HorizontalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.HorizontalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
func (o PresetVideoWatermarkOutput) HorizontalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.HorizontalOffset }).(pulumi.StringPtrOutput)
}

// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
func (o PresetVideoWatermarkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetVideoWatermarkOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetVideoWatermarkOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
func (o PresetVideoWatermarkOutput) Opacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.Opacity }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetVideoWatermarkOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
func (o PresetVideoWatermarkOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
func (o PresetVideoWatermarkOutput) VerticalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.VerticalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
func (o PresetVideoWatermarkOutput) VerticalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermark) *string { return v.VerticalOffset }).(pulumi.StringPtrOutput)
}

type PresetVideoWatermarkArrayOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermark)(nil)).Elem()
}

func (o PresetVideoWatermarkArrayOutput) ToPresetVideoWatermarkArrayOutput() PresetVideoWatermarkArrayOutput {
	return o
}

func (o PresetVideoWatermarkArrayOutput) ToPresetVideoWatermarkArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArrayOutput {
	return o
}

func (o PresetVideoWatermarkArrayOutput) Index(i pulumi.IntInput) PresetVideoWatermarkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PresetVideoWatermark {
		return vs[0].([]PresetVideoWatermark)[vs[1].(int)]
	}).(PresetVideoWatermarkOutput)
}

type PresetVideoWatermarkArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign *string `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id *string `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target *string `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign *string `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset *string `pulumi:"verticalOffset"`
}

type PresetVideoWatermarkArgsInput interface {
	pulumi.Input

	ToPresetVideoWatermarkArgsOutput() PresetVideoWatermarkArgsOutput
	ToPresetVideoWatermarkArgsOutputWithContext(context.Context) PresetVideoWatermarkArgsOutput
}

type PresetVideoWatermarkArgsArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign pulumi.StringPtrInput `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset pulumi.StringPtrInput `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity pulumi.StringPtrInput `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign pulumi.StringPtrInput `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset pulumi.StringPtrInput `pulumi:"verticalOffset"`
}

func (PresetVideoWatermarkArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermarkArgs)(nil)).Elem()
}

func (i PresetVideoWatermarkArgsArgs) ToPresetVideoWatermarkArgsOutput() PresetVideoWatermarkArgsOutput {
	return i.ToPresetVideoWatermarkArgsOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArgsArgs) ToPresetVideoWatermarkArgsOutputWithContext(ctx context.Context) PresetVideoWatermarkArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkArgsOutput)
}

type PresetVideoWatermarkArgsArrayInput interface {
	pulumi.Input

	ToPresetVideoWatermarkArgsArrayOutput() PresetVideoWatermarkArgsArrayOutput
	ToPresetVideoWatermarkArgsArrayOutputWithContext(context.Context) PresetVideoWatermarkArgsArrayOutput
}

type PresetVideoWatermarkArgsArray []PresetVideoWatermarkArgsInput

func (PresetVideoWatermarkArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermarkArgs)(nil)).Elem()
}

func (i PresetVideoWatermarkArgsArray) ToPresetVideoWatermarkArgsArrayOutput() PresetVideoWatermarkArgsArrayOutput {
	return i.ToPresetVideoWatermarkArgsArrayOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArgsArray) ToPresetVideoWatermarkArgsArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkArgsArrayOutput)
}

type PresetVideoWatermarkArgsOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermarkArgs)(nil)).Elem()
}

func (o PresetVideoWatermarkArgsOutput) ToPresetVideoWatermarkArgsOutput() PresetVideoWatermarkArgsOutput {
	return o
}

func (o PresetVideoWatermarkArgsOutput) ToPresetVideoWatermarkArgsOutputWithContext(ctx context.Context) PresetVideoWatermarkArgsOutput {
	return o
}

// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
func (o PresetVideoWatermarkArgsOutput) HorizontalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.HorizontalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
func (o PresetVideoWatermarkArgsOutput) HorizontalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.HorizontalOffset }).(pulumi.StringPtrOutput)
}

// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
func (o PresetVideoWatermarkArgsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetVideoWatermarkArgsOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetVideoWatermarkArgsOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
func (o PresetVideoWatermarkArgsOutput) Opacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.Opacity }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetVideoWatermarkArgsOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
func (o PresetVideoWatermarkArgsOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
func (o PresetVideoWatermarkArgsOutput) VerticalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.VerticalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
func (o PresetVideoWatermarkArgsOutput) VerticalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkArgs) *string { return v.VerticalOffset }).(pulumi.StringPtrOutput)
}

type PresetVideoWatermarkArgsArrayOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermarkArgs)(nil)).Elem()
}

func (o PresetVideoWatermarkArgsArrayOutput) ToPresetVideoWatermarkArgsArrayOutput() PresetVideoWatermarkArgsArrayOutput {
	return o
}

func (o PresetVideoWatermarkArgsArrayOutput) ToPresetVideoWatermarkArgsArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkArgsArrayOutput {
	return o
}

func (o PresetVideoWatermarkArgsArrayOutput) Index(i pulumi.IntInput) PresetVideoWatermarkArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PresetVideoWatermarkArgs {
		return vs[0].([]PresetVideoWatermarkArgs)[vs[1].(int)]
	}).(PresetVideoWatermarkArgsOutput)
}

type PresetVideoWatermarkState struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign *string `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id *string `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target *string `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign *string `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset *string `pulumi:"verticalOffset"`
}

type PresetVideoWatermarkStateInput interface {
	pulumi.Input

	ToPresetVideoWatermarkStateOutput() PresetVideoWatermarkStateOutput
	ToPresetVideoWatermarkStateOutputWithContext(context.Context) PresetVideoWatermarkStateOutput
}

type PresetVideoWatermarkStateArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign pulumi.StringPtrInput `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset pulumi.StringPtrInput `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight pulumi.StringPtrInput `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumi.StringPtrInput `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity pulumi.StringPtrInput `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumi.StringPtrInput `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign pulumi.StringPtrInput `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset pulumi.StringPtrInput `pulumi:"verticalOffset"`
}

func (PresetVideoWatermarkStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermarkState)(nil)).Elem()
}

func (i PresetVideoWatermarkStateArgs) ToPresetVideoWatermarkStateOutput() PresetVideoWatermarkStateOutput {
	return i.ToPresetVideoWatermarkStateOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkStateArgs) ToPresetVideoWatermarkStateOutputWithContext(ctx context.Context) PresetVideoWatermarkStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkStateOutput)
}

type PresetVideoWatermarkStateArrayInput interface {
	pulumi.Input

	ToPresetVideoWatermarkStateArrayOutput() PresetVideoWatermarkStateArrayOutput
	ToPresetVideoWatermarkStateArrayOutputWithContext(context.Context) PresetVideoWatermarkStateArrayOutput
}

type PresetVideoWatermarkStateArray []PresetVideoWatermarkStateInput

func (PresetVideoWatermarkStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermarkState)(nil)).Elem()
}

func (i PresetVideoWatermarkStateArray) ToPresetVideoWatermarkStateArrayOutput() PresetVideoWatermarkStateArrayOutput {
	return i.ToPresetVideoWatermarkStateArrayOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkStateArray) ToPresetVideoWatermarkStateArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkStateArrayOutput)
}

type PresetVideoWatermarkStateOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermarkState)(nil)).Elem()
}

func (o PresetVideoWatermarkStateOutput) ToPresetVideoWatermarkStateOutput() PresetVideoWatermarkStateOutput {
	return o
}

func (o PresetVideoWatermarkStateOutput) ToPresetVideoWatermarkStateOutputWithContext(ctx context.Context) PresetVideoWatermarkStateOutput {
	return o
}

// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
func (o PresetVideoWatermarkStateOutput) HorizontalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.HorizontalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
func (o PresetVideoWatermarkStateOutput) HorizontalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.HorizontalOffset }).(pulumi.StringPtrOutput)
}

// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
func (o PresetVideoWatermarkStateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The maximum height of the watermark.
func (o PresetVideoWatermarkStateOutput) MaxHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.MaxHeight }).(pulumi.StringPtrOutput)
}

// The maximum width of the watermark.
func (o PresetVideoWatermarkStateOutput) MaxWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.MaxWidth }).(pulumi.StringPtrOutput)
}

// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
func (o PresetVideoWatermarkStateOutput) Opacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.Opacity }).(pulumi.StringPtrOutput)
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetVideoWatermarkStateOutput) SizingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.SizingPolicy }).(pulumi.StringPtrOutput)
}

// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
func (o PresetVideoWatermarkStateOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
func (o PresetVideoWatermarkStateOutput) VerticalAlign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.VerticalAlign }).(pulumi.StringPtrOutput)
}

// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
func (o PresetVideoWatermarkStateOutput) VerticalOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PresetVideoWatermarkState) *string { return v.VerticalOffset }).(pulumi.StringPtrOutput)
}

type PresetVideoWatermarkStateArrayOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PresetVideoWatermarkState)(nil)).Elem()
}

func (o PresetVideoWatermarkStateArrayOutput) ToPresetVideoWatermarkStateArrayOutput() PresetVideoWatermarkStateArrayOutput {
	return o
}

func (o PresetVideoWatermarkStateArrayOutput) ToPresetVideoWatermarkStateArrayOutputWithContext(ctx context.Context) PresetVideoWatermarkStateArrayOutput {
	return o
}

func (o PresetVideoWatermarkStateArrayOutput) Index(i pulumi.IntInput) PresetVideoWatermarkStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PresetVideoWatermarkState {
		return vs[0].([]PresetVideoWatermarkState)[vs[1].(int)]
	}).(PresetVideoWatermarkStateOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineContentConfigOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPtrOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigArgsOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionArrayOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionArgsOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionArgsArrayOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionStateOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionStateArrayOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigStateOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsPtrOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsArgsOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsArgsPtrOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsStateOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPtrOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigArgsOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionArrayOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionArgsOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionArgsArrayOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionStateOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionStateArrayOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigStateOutput{})
	pulumi.RegisterOutputType(PresetAudioOutput{})
	pulumi.RegisterOutputType(PresetAudioPtrOutput{})
	pulumi.RegisterOutputType(PresetAudioArgsOutput{})
	pulumi.RegisterOutputType(PresetAudioArgsPtrOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsPtrOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsArgsOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsStateOutput{})
	pulumi.RegisterOutputType(PresetAudioStateOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsPtrOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsArgsOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsArgsPtrOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsStateOutput{})
	pulumi.RegisterOutputType(PresetVideoOutput{})
	pulumi.RegisterOutputType(PresetVideoPtrOutput{})
	pulumi.RegisterOutputType(PresetVideoArgsOutput{})
	pulumi.RegisterOutputType(PresetVideoArgsPtrOutput{})
	pulumi.RegisterOutputType(PresetVideoStateOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkArrayOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkArgsOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkArgsArrayOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkStateOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkStateArrayOutput{})
}
