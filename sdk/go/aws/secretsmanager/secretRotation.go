// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecretRotation struct {
	pulumi.CustomResourceState

	RotationEnabled   pulumi.BoolOutput                 `pulumi:"rotationEnabled"`
	RotationLambdaArn pulumi.StringOutput               `pulumi:"rotationLambdaArn"`
	RotationRules     SecretRotationRotationRulesOutput `pulumi:"rotationRules"`
	SecretId          pulumi.StringOutput               `pulumi:"secretId"`
	Tags              pulumi.StringMapOutput            `pulumi:"tags"`
}

// NewSecretRotation registers a new resource with the given unique name, arguments, and options.
func NewSecretRotation(ctx *pulumi.Context,
	name string, args *SecretRotationArgs, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	if args == nil || args.RotationLambdaArn == nil {
		return nil, errors.New("missing required argument 'RotationLambdaArn'")
	}
	if args == nil || args.RotationRules == nil {
		return nil, errors.New("missing required argument 'RotationRules'")
	}
	if args == nil || args.SecretId == nil {
		return nil, errors.New("missing required argument 'SecretId'")
	}
	if args == nil {
		args = &SecretRotationArgs{}
	}
	var resource SecretRotation
	err := ctx.RegisterResource("aws:secretsmanager/secretRotation:SecretRotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotation gets an existing SecretRotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationState, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	var resource SecretRotation
	err := ctx.ReadResource("aws:secretsmanager/secretRotation:SecretRotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotation resources.
type secretRotationState struct {
	RotationEnabled   *bool                        `pulumi:"rotationEnabled"`
	RotationLambdaArn *string                      `pulumi:"rotationLambdaArn"`
	RotationRules     *SecretRotationRotationRules `pulumi:"rotationRules"`
	SecretId          *string                      `pulumi:"secretId"`
	Tags              map[string]string            `pulumi:"tags"`
}

type SecretRotationState struct {
	RotationEnabled   pulumi.BoolPtrInput
	RotationLambdaArn pulumi.StringPtrInput
	RotationRules     SecretRotationRotationRulesPtrInput
	SecretId          pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
}

func (SecretRotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationState)(nil)).Elem()
}

type secretRotationArgs struct {
	RotationLambdaArn string                      `pulumi:"rotationLambdaArn"`
	RotationRules     SecretRotationRotationRules `pulumi:"rotationRules"`
	SecretId          string                      `pulumi:"secretId"`
	Tags              map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a SecretRotation resource.
type SecretRotationArgs struct {
	RotationLambdaArn pulumi.StringInput
	RotationRules     SecretRotationRotationRulesInput
	SecretId          pulumi.StringInput
	Tags              pulumi.StringMapInput
}

func (SecretRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationArgs)(nil)).Elem()
}
