// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"fmt"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Region represents any valid Amazon region that may be targeted with deployments.
type Region pulumi.String

const (
	RegionAFSouth1     = Region("af-south-1")
	RegionAPEast1      = Region("ap-east-1")
	RegionAPNortheast1 = Region("ap-northeast-1")
	RegionAPNortheast2 = Region("ap-northeast-2")
	RegionAPSouth1     = Region("ap-south-1")
	RegionAPSoutheast2 = Region("ap-southeast-2")
	RegionAPSoutheast1 = Region("ap-southeast-1")
	RegionCACentral    = Region("ca-central-1")
	RegionCNNorth1     = Region("cn-north-1")
	RegionCNNorthwest1 = Region("cn-northwest-1")
	RegionEUCentral1   = Region("eu-central-1")
	RegionEUNorth1     = Region("eu-north-1")
	RegionEUWest1      = Region("eu-west-1")
	RegionEUWest2      = Region("eu-west-2")
	RegionEUWest3      = Region("eu-west-3")
	RegionEUSouth1     = Region("eu-south-1")
	RegionMESouth1     = Region("me-south-1")
	RegionSAEast1      = Region("sa-east-1")
	RegionUSGovEast1   = Region("us-gov-east-1")
	RegionUSGovWest1   = Region("us-gov-west-1")
	RegionUSEast1      = Region("us-east-1")
	RegionUSEast2      = Region("us-east-2")
	RegionUSWest1      = Region("us-west-1")
	RegionUSWest2      = Region("us-west-2")
)

func (Region) possibleValues() map[Region]bool {
	return map[Region]bool{
		RegionAFSouth1:     true,
		RegionAPEast1:      true,
		RegionAPNortheast1: true,
		RegionAPNortheast2: true,
		RegionAPSouth1:     true,
		RegionAPSoutheast2: true,
		RegionAPSoutheast1: true,
		RegionCACentral:    true,
		RegionCNNorth1:     true,
		RegionCNNorthwest1: true,
		RegionEUCentral1:   true,
		RegionEUNorth1:     true,
		RegionEUWest1:      true,
		RegionEUWest2:      true,
		RegionEUWest3:      true,
		RegionEUSouth1:     true,
		RegionMESouth1:     true,
		RegionSAEast1:      true,
		RegionUSGovEast1:   true,
		RegionUSGovWest1:   true,
		RegionUSEast1:      true,
		RegionUSEast2:      true,
		RegionUSWest1:      true,
		RegionUSWest2:      true,
	}
}

func (e Region) Validate() error {
	if !e.possibleValues()[e] {
		return fmt.Errorf("unexpected value: %v", e)
	}
	return nil
}

func (Region) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e Region) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Region) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Region) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Region) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
