// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package EnvironmentAllSetting

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EnvironmentAllSetting struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
	Resource *string `pulumi:"resource"`
	Value string `pulumi:"value"`
}

type EnvironmentAllSettingInput interface {
	pulumi.Input

	ToEnvironmentAllSettingOutput() EnvironmentAllSettingOutput
	ToEnvironmentAllSettingOutputWithContext(context.Context) EnvironmentAllSettingOutput
}

type EnvironmentAllSettingArgs struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentAllSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentAllSetting)(nil)).Elem()
}

func (i EnvironmentAllSettingArgs) ToEnvironmentAllSettingOutput() EnvironmentAllSettingOutput {
	return i.ToEnvironmentAllSettingOutputWithContext(context.Background())
}

func (i EnvironmentAllSettingArgs) ToEnvironmentAllSettingOutputWithContext(ctx context.Context) EnvironmentAllSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentAllSettingOutput)
}

type EnvironmentAllSettingArrayInput interface {
	pulumi.Input

	ToEnvironmentAllSettingArrayOutput() EnvironmentAllSettingArrayOutput
	ToEnvironmentAllSettingArrayOutputWithContext(context.Context) EnvironmentAllSettingArrayOutput
}

type EnvironmentAllSettingArray []EnvironmentAllSettingInput

func (EnvironmentAllSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentAllSetting)(nil)).Elem()
}

func (i EnvironmentAllSettingArray) ToEnvironmentAllSettingArrayOutput() EnvironmentAllSettingArrayOutput {
	return i.ToEnvironmentAllSettingArrayOutputWithContext(context.Background())
}

func (i EnvironmentAllSettingArray) ToEnvironmentAllSettingArrayOutputWithContext(ctx context.Context) EnvironmentAllSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentAllSettingArrayOutput)
}

type EnvironmentAllSettingOutput struct { *pulumi.OutputState }

func (EnvironmentAllSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentAllSetting)(nil)).Elem()
}

func (o EnvironmentAllSettingOutput) ToEnvironmentAllSettingOutput() EnvironmentAllSettingOutput {
	return o
}

func (o EnvironmentAllSettingOutput) ToEnvironmentAllSettingOutputWithContext(ctx context.Context) EnvironmentAllSettingOutput {
	return o
}

// A unique name for this Environment. This name is used
// in the application URL
func (o EnvironmentAllSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v EnvironmentAllSetting) string { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentAllSettingOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func (v EnvironmentAllSetting) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o EnvironmentAllSettingOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EnvironmentAllSetting) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

func (o EnvironmentAllSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func (v EnvironmentAllSetting) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentAllSettingArrayOutput struct { *pulumi.OutputState}

func (EnvironmentAllSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentAllSetting)(nil)).Elem()
}

func (o EnvironmentAllSettingArrayOutput) ToEnvironmentAllSettingArrayOutput() EnvironmentAllSettingArrayOutput {
	return o
}

func (o EnvironmentAllSettingArrayOutput) ToEnvironmentAllSettingArrayOutputWithContext(ctx context.Context) EnvironmentAllSettingArrayOutput {
	return o
}

func (o EnvironmentAllSettingArrayOutput) Index(i pulumi.IntInput) EnvironmentAllSettingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) EnvironmentAllSetting {
		return vs[0].([]EnvironmentAllSetting)[vs[1].(int)]
	}).(EnvironmentAllSettingOutput)
}

func init() {
	pulumi.RegisterOutputType(EnvironmentAllSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentAllSettingArrayOutput{})
}
