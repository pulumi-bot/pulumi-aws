// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationVersion struct {
	pulumi.CustomResourceState

	Application pulumi.StringOutput    `pulumi:"application"`
	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Bucket      pulumi.StringOutput    `pulumi:"bucket"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	ForceDelete pulumi.BoolPtrOutput   `pulumi:"forceDelete"`
	Key         pulumi.StringOutput    `pulumi:"key"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
}

// NewApplicationVersion registers a new resource with the given unique name, arguments, and options.
func NewApplicationVersion(ctx *pulumi.Context,
	name string, args *ApplicationVersionArgs, opts ...pulumi.ResourceOption) (*ApplicationVersion, error) {
	if args == nil || args.Application == nil {
		return nil, errors.New("missing required argument 'Application'")
	}
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil {
		args = &ApplicationVersionArgs{}
	}
	var resource ApplicationVersion
	err := ctx.RegisterResource("aws:elasticbeanstalk/applicationVersion:ApplicationVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationVersion gets an existing ApplicationVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationVersionState, opts ...pulumi.ResourceOption) (*ApplicationVersion, error) {
	var resource ApplicationVersion
	err := ctx.ReadResource("aws:elasticbeanstalk/applicationVersion:ApplicationVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationVersion resources.
type applicationVersionState struct {
	Application *string           `pulumi:"application"`
	Arn         *string           `pulumi:"arn"`
	Bucket      *string           `pulumi:"bucket"`
	Description *string           `pulumi:"description"`
	ForceDelete *bool             `pulumi:"forceDelete"`
	Key         *string           `pulumi:"key"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
}

type ApplicationVersionState struct {
	Application pulumi.StringPtrInput
	Arn         pulumi.StringPtrInput
	Bucket      pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	ForceDelete pulumi.BoolPtrInput
	Key         pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
}

func (ApplicationVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationVersionState)(nil)).Elem()
}

type applicationVersionArgs struct {
	Application interface{}       `pulumi:"application"`
	Bucket      interface{}       `pulumi:"bucket"`
	Description *string           `pulumi:"description"`
	ForceDelete *bool             `pulumi:"forceDelete"`
	Key         string            `pulumi:"key"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApplicationVersion resource.
type ApplicationVersionArgs struct {
	Application pulumi.Input
	Bucket      pulumi.Input
	Description pulumi.StringPtrInput
	ForceDelete pulumi.BoolPtrInput
	Key         pulumi.StringInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
}

func (ApplicationVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationVersionArgs)(nil)).Elem()
}
