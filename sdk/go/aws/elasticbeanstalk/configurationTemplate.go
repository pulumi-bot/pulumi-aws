// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ConfigurationTemplate struct {
	pulumi.CustomResourceState

	Application       pulumi.StringOutput                     `pulumi:"application"`
	Description       pulumi.StringPtrOutput                  `pulumi:"description"`
	EnvironmentId     pulumi.StringPtrOutput                  `pulumi:"environmentId"`
	Name              pulumi.StringOutput                     `pulumi:"name"`
	Settings          ConfigurationTemplateSettingArrayOutput `pulumi:"settings"`
	SolutionStackName pulumi.StringPtrOutput                  `pulumi:"solutionStackName"`
}

// NewConfigurationTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigurationTemplate(ctx *pulumi.Context,
	name string, args *ConfigurationTemplateArgs, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	if args == nil || args.Application == nil {
		return nil, errors.New("missing required argument 'Application'")
	}
	if args == nil {
		args = &ConfigurationTemplateArgs{}
	}
	var resource ConfigurationTemplate
	err := ctx.RegisterResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationTemplate gets an existing ConfigurationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationTemplateState, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	var resource ConfigurationTemplate
	err := ctx.ReadResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationTemplate resources.
type configurationTemplateState struct {
	Application       *string                        `pulumi:"application"`
	Description       *string                        `pulumi:"description"`
	EnvironmentId     *string                        `pulumi:"environmentId"`
	Name              *string                        `pulumi:"name"`
	Settings          []ConfigurationTemplateSetting `pulumi:"settings"`
	SolutionStackName *string                        `pulumi:"solutionStackName"`
}

type ConfigurationTemplateState struct {
	Application       pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	EnvironmentId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Settings          ConfigurationTemplateSettingArrayInput
	SolutionStackName pulumi.StringPtrInput
}

func (ConfigurationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateState)(nil)).Elem()
}

type configurationTemplateArgs struct {
	Application       string                         `pulumi:"application"`
	Description       *string                        `pulumi:"description"`
	EnvironmentId     *string                        `pulumi:"environmentId"`
	Name              *string                        `pulumi:"name"`
	Settings          []ConfigurationTemplateSetting `pulumi:"settings"`
	SolutionStackName *string                        `pulumi:"solutionStackName"`
}

// The set of arguments for constructing a ConfigurationTemplate resource.
type ConfigurationTemplateArgs struct {
	Application       pulumi.StringInput
	Description       pulumi.StringPtrInput
	EnvironmentId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Settings          ConfigurationTemplateSettingArrayInput
	SolutionStackName pulumi.StringPtrInput
}

func (ConfigurationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateArgs)(nil)).Elem()
}
