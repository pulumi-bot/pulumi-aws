// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SamplingRule struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput    `pulumi:"arn"`
	Attributes    pulumi.StringMapOutput `pulumi:"attributes"`
	FixedRate     pulumi.Float64Output   `pulumi:"fixedRate"`
	Host          pulumi.StringOutput    `pulumi:"host"`
	HttpMethod    pulumi.StringOutput    `pulumi:"httpMethod"`
	Priority      pulumi.IntOutput       `pulumi:"priority"`
	ReservoirSize pulumi.IntOutput       `pulumi:"reservoirSize"`
	ResourceArn   pulumi.StringOutput    `pulumi:"resourceArn"`
	RuleName      pulumi.StringPtrOutput `pulumi:"ruleName"`
	ServiceName   pulumi.StringOutput    `pulumi:"serviceName"`
	ServiceType   pulumi.StringOutput    `pulumi:"serviceType"`
	UrlPath       pulumi.StringOutput    `pulumi:"urlPath"`
	Version       pulumi.IntOutput       `pulumi:"version"`
}

// NewSamplingRule registers a new resource with the given unique name, arguments, and options.
func NewSamplingRule(ctx *pulumi.Context,
	name string, args *SamplingRuleArgs, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	if args == nil || args.FixedRate == nil {
		return nil, errors.New("missing required argument 'FixedRate'")
	}
	if args == nil || args.Host == nil {
		return nil, errors.New("missing required argument 'Host'")
	}
	if args == nil || args.HttpMethod == nil {
		return nil, errors.New("missing required argument 'HttpMethod'")
	}
	if args == nil || args.Priority == nil {
		return nil, errors.New("missing required argument 'Priority'")
	}
	if args == nil || args.ReservoirSize == nil {
		return nil, errors.New("missing required argument 'ReservoirSize'")
	}
	if args == nil || args.ResourceArn == nil {
		return nil, errors.New("missing required argument 'ResourceArn'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.ServiceType == nil {
		return nil, errors.New("missing required argument 'ServiceType'")
	}
	if args == nil || args.UrlPath == nil {
		return nil, errors.New("missing required argument 'UrlPath'")
	}
	if args == nil || args.Version == nil {
		return nil, errors.New("missing required argument 'Version'")
	}
	if args == nil {
		args = &SamplingRuleArgs{}
	}
	var resource SamplingRule
	err := ctx.RegisterResource("aws:xray/samplingRule:SamplingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamplingRule gets an existing SamplingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamplingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamplingRuleState, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	var resource SamplingRule
	err := ctx.ReadResource("aws:xray/samplingRule:SamplingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamplingRule resources.
type samplingRuleState struct {
	Arn           *string           `pulumi:"arn"`
	Attributes    map[string]string `pulumi:"attributes"`
	FixedRate     *float64          `pulumi:"fixedRate"`
	Host          *string           `pulumi:"host"`
	HttpMethod    *string           `pulumi:"httpMethod"`
	Priority      *int              `pulumi:"priority"`
	ReservoirSize *int              `pulumi:"reservoirSize"`
	ResourceArn   *string           `pulumi:"resourceArn"`
	RuleName      *string           `pulumi:"ruleName"`
	ServiceName   *string           `pulumi:"serviceName"`
	ServiceType   *string           `pulumi:"serviceType"`
	UrlPath       *string           `pulumi:"urlPath"`
	Version       *int              `pulumi:"version"`
}

type SamplingRuleState struct {
	Arn           pulumi.StringPtrInput
	Attributes    pulumi.StringMapInput
	FixedRate     pulumi.Float64PtrInput
	Host          pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	Priority      pulumi.IntPtrInput
	ReservoirSize pulumi.IntPtrInput
	ResourceArn   pulumi.StringPtrInput
	RuleName      pulumi.StringPtrInput
	ServiceName   pulumi.StringPtrInput
	ServiceType   pulumi.StringPtrInput
	UrlPath       pulumi.StringPtrInput
	Version       pulumi.IntPtrInput
}

func (SamplingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleState)(nil)).Elem()
}

type samplingRuleArgs struct {
	Attributes    map[string]string `pulumi:"attributes"`
	FixedRate     float64           `pulumi:"fixedRate"`
	Host          string            `pulumi:"host"`
	HttpMethod    string            `pulumi:"httpMethod"`
	Priority      int               `pulumi:"priority"`
	ReservoirSize int               `pulumi:"reservoirSize"`
	ResourceArn   string            `pulumi:"resourceArn"`
	RuleName      *string           `pulumi:"ruleName"`
	ServiceName   string            `pulumi:"serviceName"`
	ServiceType   string            `pulumi:"serviceType"`
	UrlPath       string            `pulumi:"urlPath"`
	Version       int               `pulumi:"version"`
}

// The set of arguments for constructing a SamplingRule resource.
type SamplingRuleArgs struct {
	Attributes    pulumi.StringMapInput
	FixedRate     pulumi.Float64Input
	Host          pulumi.StringInput
	HttpMethod    pulumi.StringInput
	Priority      pulumi.IntInput
	ReservoirSize pulumi.IntInput
	ResourceArn   pulumi.StringInput
	RuleName      pulumi.StringPtrInput
	ServiceName   pulumi.StringInput
	ServiceType   pulumi.StringInput
	UrlPath       pulumi.StringInput
	Version       pulumi.IntInput
}

func (SamplingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleArgs)(nil)).Elem()
}
