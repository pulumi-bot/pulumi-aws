// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package UserPoolSmsConfiguration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type UserPoolSmsConfiguration struct {
	// The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
	ExternalId string `pulumi:"externalId"`
	// The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
	SnsCallerArn string `pulumi:"snsCallerArn"`
}

type UserPoolSmsConfigurationInput interface {
	pulumi.Input

	ToUserPoolSmsConfigurationOutput() UserPoolSmsConfigurationOutput
	ToUserPoolSmsConfigurationOutputWithContext(context.Context) UserPoolSmsConfigurationOutput
}

type UserPoolSmsConfigurationArgs struct {
	// The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
	ExternalId pulumi.StringInput `pulumi:"externalId"`
	// The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
	SnsCallerArn pulumi.StringInput `pulumi:"snsCallerArn"`
}

func (UserPoolSmsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSmsConfiguration)(nil)).Elem()
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationOutput() UserPoolSmsConfigurationOutput {
	return i.ToUserPoolSmsConfigurationOutputWithContext(context.Background())
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationOutputWithContext(ctx context.Context) UserPoolSmsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSmsConfigurationOutput)
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationPtrOutput() UserPoolSmsConfigurationPtrOutput {
	return i.ToUserPoolSmsConfigurationPtrOutputWithContext(context.Background())
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationPtrOutputWithContext(ctx context.Context) UserPoolSmsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSmsConfigurationOutput).ToUserPoolSmsConfigurationPtrOutputWithContext(ctx)
}

type UserPoolSmsConfigurationPtrInput interface {
	pulumi.Input

	ToUserPoolSmsConfigurationPtrOutput() UserPoolSmsConfigurationPtrOutput
	ToUserPoolSmsConfigurationPtrOutputWithContext(context.Context) UserPoolSmsConfigurationPtrOutput
}

type userPoolSmsConfigurationPtrType UserPoolSmsConfigurationArgs

func UserPoolSmsConfigurationPtr(v *UserPoolSmsConfigurationArgs) UserPoolSmsConfigurationPtrInput {	return (*userPoolSmsConfigurationPtrType)(v)
}

func (*userPoolSmsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolSmsConfiguration)(nil)).Elem()
}

func (i *userPoolSmsConfigurationPtrType) ToUserPoolSmsConfigurationPtrOutput() UserPoolSmsConfigurationPtrOutput {
	return i.ToUserPoolSmsConfigurationPtrOutputWithContext(context.Background())
}

func (i *userPoolSmsConfigurationPtrType) ToUserPoolSmsConfigurationPtrOutputWithContext(ctx context.Context) UserPoolSmsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSmsConfigurationPtrOutput)
}

type UserPoolSmsConfigurationOutput struct { *pulumi.OutputState }

func (UserPoolSmsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSmsConfiguration)(nil)).Elem()
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationOutput() UserPoolSmsConfigurationOutput {
	return o
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationOutputWithContext(ctx context.Context) UserPoolSmsConfigurationOutput {
	return o
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationPtrOutput() UserPoolSmsConfigurationPtrOutput {
	return o.ToUserPoolSmsConfigurationPtrOutputWithContext(context.Background())
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationPtrOutputWithContext(ctx context.Context) UserPoolSmsConfigurationPtrOutput {
	return o.ApplyT(func(v UserPoolSmsConfiguration) *UserPoolSmsConfiguration {
		return &v
	}).(UserPoolSmsConfigurationPtrOutput)
}
// The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
func (o UserPoolSmsConfigurationOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func (v UserPoolSmsConfiguration) string { return v.ExternalId }).(pulumi.StringOutput)
}

// The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
func (o UserPoolSmsConfigurationOutput) SnsCallerArn() pulumi.StringOutput {
	return o.ApplyT(func (v UserPoolSmsConfiguration) string { return v.SnsCallerArn }).(pulumi.StringOutput)
}

type UserPoolSmsConfigurationPtrOutput struct { *pulumi.OutputState}

func (UserPoolSmsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolSmsConfiguration)(nil)).Elem()
}

func (o UserPoolSmsConfigurationPtrOutput) ToUserPoolSmsConfigurationPtrOutput() UserPoolSmsConfigurationPtrOutput {
	return o
}

func (o UserPoolSmsConfigurationPtrOutput) ToUserPoolSmsConfigurationPtrOutputWithContext(ctx context.Context) UserPoolSmsConfigurationPtrOutput {
	return o
}

func (o UserPoolSmsConfigurationPtrOutput) Elem() UserPoolSmsConfigurationOutput {
	return o.ApplyT(func (v *UserPoolSmsConfiguration) UserPoolSmsConfiguration { return *v }).(UserPoolSmsConfigurationOutput)
}

// The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
func (o UserPoolSmsConfigurationPtrOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func (v UserPoolSmsConfiguration) string { return v.ExternalId }).(pulumi.StringOutput)
}

// The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
func (o UserPoolSmsConfigurationPtrOutput) SnsCallerArn() pulumi.StringOutput {
	return o.ApplyT(func (v UserPoolSmsConfiguration) string { return v.SnsCallerArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(UserPoolSmsConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolSmsConfigurationPtrOutput{})
}
