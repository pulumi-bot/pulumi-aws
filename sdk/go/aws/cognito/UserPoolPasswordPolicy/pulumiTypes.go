// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package UserPoolPasswordPolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type UserPoolPasswordPolicy struct {
	// The minimum length of the password policy that you have set.
	MinimumLength *int `pulumi:"minimumLength"`
	// Whether you have required users to use at least one lowercase letter in their password.
	RequireLowercase *bool `pulumi:"requireLowercase"`
	// Whether you have required users to use at least one number in their password.
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Whether you have required users to use at least one symbol in their password.
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Whether you have required users to use at least one uppercase letter in their password.
	RequireUppercase *bool `pulumi:"requireUppercase"`
}

type UserPoolPasswordPolicyInput interface {
	pulumi.Input

	ToUserPoolPasswordPolicyOutput() UserPoolPasswordPolicyOutput
	ToUserPoolPasswordPolicyOutputWithContext(context.Context) UserPoolPasswordPolicyOutput
}

type UserPoolPasswordPolicyArgs struct {
	// The minimum length of the password policy that you have set.
	MinimumLength pulumi.IntPtrInput `pulumi:"minimumLength"`
	// Whether you have required users to use at least one lowercase letter in their password.
	RequireLowercase pulumi.BoolPtrInput `pulumi:"requireLowercase"`
	// Whether you have required users to use at least one number in their password.
	RequireNumbers pulumi.BoolPtrInput `pulumi:"requireNumbers"`
	// Whether you have required users to use at least one symbol in their password.
	RequireSymbols pulumi.BoolPtrInput `pulumi:"requireSymbols"`
	// Whether you have required users to use at least one uppercase letter in their password.
	RequireUppercase pulumi.BoolPtrInput `pulumi:"requireUppercase"`
}

func (UserPoolPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolPasswordPolicy)(nil)).Elem()
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyOutput() UserPoolPasswordPolicyOutput {
	return i.ToUserPoolPasswordPolicyOutputWithContext(context.Background())
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyOutputWithContext(ctx context.Context) UserPoolPasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPasswordPolicyOutput)
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyPtrOutput() UserPoolPasswordPolicyPtrOutput {
	return i.ToUserPoolPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyPtrOutputWithContext(ctx context.Context) UserPoolPasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPasswordPolicyOutput).ToUserPoolPasswordPolicyPtrOutputWithContext(ctx)
}

type UserPoolPasswordPolicyPtrInput interface {
	pulumi.Input

	ToUserPoolPasswordPolicyPtrOutput() UserPoolPasswordPolicyPtrOutput
	ToUserPoolPasswordPolicyPtrOutputWithContext(context.Context) UserPoolPasswordPolicyPtrOutput
}

type userPoolPasswordPolicyPtrType UserPoolPasswordPolicyArgs

func UserPoolPasswordPolicyPtr(v *UserPoolPasswordPolicyArgs) UserPoolPasswordPolicyPtrInput {	return (*userPoolPasswordPolicyPtrType)(v)
}

func (*userPoolPasswordPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolPasswordPolicy)(nil)).Elem()
}

func (i *userPoolPasswordPolicyPtrType) ToUserPoolPasswordPolicyPtrOutput() UserPoolPasswordPolicyPtrOutput {
	return i.ToUserPoolPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i *userPoolPasswordPolicyPtrType) ToUserPoolPasswordPolicyPtrOutputWithContext(ctx context.Context) UserPoolPasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPasswordPolicyPtrOutput)
}

type UserPoolPasswordPolicyOutput struct { *pulumi.OutputState }

func (UserPoolPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolPasswordPolicy)(nil)).Elem()
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyOutput() UserPoolPasswordPolicyOutput {
	return o
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyOutputWithContext(ctx context.Context) UserPoolPasswordPolicyOutput {
	return o
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyPtrOutput() UserPoolPasswordPolicyPtrOutput {
	return o.ToUserPoolPasswordPolicyPtrOutputWithContext(context.Background())
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyPtrOutputWithContext(ctx context.Context) UserPoolPasswordPolicyPtrOutput {
	return o.ApplyT(func(v UserPoolPasswordPolicy) *UserPoolPasswordPolicy {
		return &v
	}).(UserPoolPasswordPolicyPtrOutput)
}
// The minimum length of the password policy that you have set.
func (o UserPoolPasswordPolicyOutput) MinimumLength() pulumi.IntPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *int { return v.MinimumLength }).(pulumi.IntPtrOutput)
}

// Whether you have required users to use at least one lowercase letter in their password.
func (o UserPoolPasswordPolicyOutput) RequireLowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireLowercase }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one number in their password.
func (o UserPoolPasswordPolicyOutput) RequireNumbers() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireNumbers }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one symbol in their password.
func (o UserPoolPasswordPolicyOutput) RequireSymbols() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireSymbols }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one uppercase letter in their password.
func (o UserPoolPasswordPolicyOutput) RequireUppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireUppercase }).(pulumi.BoolPtrOutput)
}

type UserPoolPasswordPolicyPtrOutput struct { *pulumi.OutputState}

func (UserPoolPasswordPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolPasswordPolicy)(nil)).Elem()
}

func (o UserPoolPasswordPolicyPtrOutput) ToUserPoolPasswordPolicyPtrOutput() UserPoolPasswordPolicyPtrOutput {
	return o
}

func (o UserPoolPasswordPolicyPtrOutput) ToUserPoolPasswordPolicyPtrOutputWithContext(ctx context.Context) UserPoolPasswordPolicyPtrOutput {
	return o
}

func (o UserPoolPasswordPolicyPtrOutput) Elem() UserPoolPasswordPolicyOutput {
	return o.ApplyT(func (v *UserPoolPasswordPolicy) UserPoolPasswordPolicy { return *v }).(UserPoolPasswordPolicyOutput)
}

// The minimum length of the password policy that you have set.
func (o UserPoolPasswordPolicyPtrOutput) MinimumLength() pulumi.IntPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *int { return v.MinimumLength }).(pulumi.IntPtrOutput)
}

// Whether you have required users to use at least one lowercase letter in their password.
func (o UserPoolPasswordPolicyPtrOutput) RequireLowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireLowercase }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one number in their password.
func (o UserPoolPasswordPolicyPtrOutput) RequireNumbers() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireNumbers }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one symbol in their password.
func (o UserPoolPasswordPolicyPtrOutput) RequireSymbols() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireSymbols }).(pulumi.BoolPtrOutput)
}

// Whether you have required users to use at least one uppercase letter in their password.
func (o UserPoolPasswordPolicyPtrOutput) RequireUppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v UserPoolPasswordPolicy) *bool { return v.RequireUppercase }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(UserPoolPasswordPolicyOutput{})
	pulumi.RegisterOutputType(UserPoolPasswordPolicyPtrOutput{})
}
