// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Cognito User Pool resource.
//
// ## Example Usage
// ### Basic configuration
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/cognito"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cognito.NewUserPool(ctx, "pool", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Enabling SMS and Software Token Multi-Factor Authentication
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/cognito"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
// 			MfaConfiguration:         pulumi.String("ON"),
// 			SmsAuthenticationMessage: pulumi.String("Your code is {####}"),
// 			SmsConfiguration: &cognito.UserPoolSmsConfigurationArgs{
// 				ExternalId:   pulumi.String("example"),
// 				SnsCallerArn: pulumi.Any(aws_iam_role.Example.Arn),
// 			},
// 			SoftwareTokenMfaConfiguration: &cognito.UserPoolSoftwareTokenMfaConfigurationArgs{
// 				Enabled: pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Using Account Recovery Setting
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/cognito"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cognito.NewUserPool(ctx, "test", &cognito.UserPoolArgs{
// 			AccountRecoverySetting: &cognito.UserPoolAccountRecoverySettingArgs{
// 				RecoveryMechanisms: cognito.UserPoolAccountRecoverySettingRecoveryMechanismArray{
// 					&cognito.UserPoolAccountRecoverySettingRecoveryMechanismArgs{
// 						Name:     pulumi.String("verified_email"),
// 						Priority: pulumi.Int(1),
// 					},
// 					&cognito.UserPoolAccountRecoverySettingRecoveryMechanismArgs{
// 						Name:     pulumi.String("verified_phone_number"),
// 						Priority: pulumi.Int(2),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cognito User Pools can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import aws:cognito/userPool:UserPool pool <id>
// ```
type UserPool struct {
	pulumi.CustomResourceState

	// The accountRecoverySetting configuration.
	AccountRecoverySetting UserPoolAccountRecoverySettingPtrOutput `pulumi:"accountRecoverySetting"`
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig UserPoolAdminCreateUserConfigOutput `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `usernameAttributes`.
	AliasAttributes pulumi.StringArrayOutput `pulumi:"aliasAttributes"`
	// The ARN of the user pool.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes pulumi.StringArrayOutput `pulumi:"autoVerifiedAttributes"`
	// The date the user pool was created.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The configuration for the user pool's device tracking.
	DeviceConfiguration UserPoolDeviceConfigurationPtrOutput `pulumi:"deviceConfiguration"`
	// The Email Configuration.
	EmailConfiguration UserPoolEmailConfigurationPtrOutput `pulumi:"emailConfiguration"`
	// A string representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumi.StringOutput `pulumi:"emailVerificationMessage"`
	// A string representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumi.StringOutput `pulumi:"emailVerificationSubject"`
	// The endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig UserPoolLambdaConfigOutput `pulumi:"lambdaConfig"`
	// The date the user pool was last modified.
	LastModifiedDate pulumi.StringOutput `pulumi:"lastModifiedDate"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values:
	MfaConfiguration pulumi.StringPtrOutput `pulumi:"mfaConfiguration"`
	// Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
	Name pulumi.StringOutput `pulumi:"name"`
	// A container for information about the user pool password policy.
	PasswordPolicy UserPoolPasswordPolicyOutput `pulumi:"passwordPolicy"`
	// A container with the schema attributes of a user pool. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Maximum of 50 attributes.
	Schemas UserPoolSchemaArrayOutput `pulumi:"schemas"`
	// A string representing the SMS authentication message. The message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumi.StringPtrOutput `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the [`up` command and use --replace](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
	SmsConfiguration UserPoolSmsConfigurationOutput `pulumi:"smsConfiguration"`
	// A string representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumi.StringOutput `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration UserPoolSoftwareTokenMfaConfigurationPtrOutput `pulumi:"softwareTokenMfaConfiguration"`
	// A map of tags to assign to the User Pool.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features.
	UserPoolAddOns UserPoolUserPoolAddOnsPtrOutput `pulumi:"userPoolAddOns"`
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumi.StringArrayOutput `pulumi:"usernameAttributes"`
	// The Username Configuration.
	UsernameConfiguration UserPoolUsernameConfigurationPtrOutput `pulumi:"usernameConfiguration"`
	// The verification message templates configuration.
	VerificationMessageTemplate UserPoolVerificationMessageTemplateOutput `pulumi:"verificationMessageTemplate"`
}

// NewUserPool registers a new resource with the given unique name, arguments, and options.
func NewUserPool(ctx *pulumi.Context,
	name string, args *UserPoolArgs, opts ...pulumi.ResourceOption) (*UserPool, error) {
	if args == nil {
		args = &UserPoolArgs{}
	}

	var resource UserPool
	err := ctx.RegisterResource("aws:cognito/userPool:UserPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPool gets an existing UserPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolState, opts ...pulumi.ResourceOption) (*UserPool, error) {
	var resource UserPool
	err := ctx.ReadResource("aws:cognito/userPool:UserPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPool resources.
type userPoolState struct {
	// The accountRecoverySetting configuration.
	AccountRecoverySetting *UserPoolAccountRecoverySetting `pulumi:"accountRecoverySetting"`
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig *UserPoolAdminCreateUserConfig `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `usernameAttributes`.
	AliasAttributes []string `pulumi:"aliasAttributes"`
	// The ARN of the user pool.
	Arn *string `pulumi:"arn"`
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes []string `pulumi:"autoVerifiedAttributes"`
	// The date the user pool was created.
	CreationDate *string `pulumi:"creationDate"`
	// The configuration for the user pool's device tracking.
	DeviceConfiguration *UserPoolDeviceConfiguration `pulumi:"deviceConfiguration"`
	// The Email Configuration.
	EmailConfiguration *UserPoolEmailConfiguration `pulumi:"emailConfiguration"`
	// A string representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage *string `pulumi:"emailVerificationMessage"`
	// A string representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject *string `pulumi:"emailVerificationSubject"`
	// The endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
	Endpoint *string `pulumi:"endpoint"`
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig *UserPoolLambdaConfig `pulumi:"lambdaConfig"`
	// The date the user pool was last modified.
	LastModifiedDate *string `pulumi:"lastModifiedDate"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values:
	MfaConfiguration *string `pulumi:"mfaConfiguration"`
	// Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
	Name *string `pulumi:"name"`
	// A container for information about the user pool password policy.
	PasswordPolicy *UserPoolPasswordPolicy `pulumi:"passwordPolicy"`
	// A container with the schema attributes of a user pool. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Maximum of 50 attributes.
	Schemas []UserPoolSchema `pulumi:"schemas"`
	// A string representing the SMS authentication message. The message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage *string `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the [`up` command and use --replace](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
	SmsConfiguration *UserPoolSmsConfiguration `pulumi:"smsConfiguration"`
	// A string representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage *string `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration *UserPoolSoftwareTokenMfaConfiguration `pulumi:"softwareTokenMfaConfiguration"`
	// A map of tags to assign to the User Pool.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features.
	UserPoolAddOns *UserPoolUserPoolAddOns `pulumi:"userPoolAddOns"`
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes []string `pulumi:"usernameAttributes"`
	// The Username Configuration.
	UsernameConfiguration *UserPoolUsernameConfiguration `pulumi:"usernameConfiguration"`
	// The verification message templates configuration.
	VerificationMessageTemplate *UserPoolVerificationMessageTemplate `pulumi:"verificationMessageTemplate"`
}

type UserPoolState struct {
	// The accountRecoverySetting configuration.
	AccountRecoverySetting UserPoolAccountRecoverySettingPtrInput
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig UserPoolAdminCreateUserConfigPtrInput
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `usernameAttributes`.
	AliasAttributes pulumi.StringArrayInput
	// The ARN of the user pool.
	Arn pulumi.StringPtrInput
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes pulumi.StringArrayInput
	// The date the user pool was created.
	CreationDate pulumi.StringPtrInput
	// The configuration for the user pool's device tracking.
	DeviceConfiguration UserPoolDeviceConfigurationPtrInput
	// The Email Configuration.
	EmailConfiguration UserPoolEmailConfigurationPtrInput
	// A string representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumi.StringPtrInput
	// A string representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumi.StringPtrInput
	// The endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
	Endpoint pulumi.StringPtrInput
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig UserPoolLambdaConfigPtrInput
	// The date the user pool was last modified.
	LastModifiedDate pulumi.StringPtrInput
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values:
	MfaConfiguration pulumi.StringPtrInput
	// Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
	Name pulumi.StringPtrInput
	// A container for information about the user pool password policy.
	PasswordPolicy UserPoolPasswordPolicyPtrInput
	// A container with the schema attributes of a user pool. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Maximum of 50 attributes.
	Schemas UserPoolSchemaArrayInput
	// A string representing the SMS authentication message. The message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumi.StringPtrInput
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the [`up` command and use --replace](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
	SmsConfiguration UserPoolSmsConfigurationPtrInput
	// A string representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumi.StringPtrInput
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration UserPoolSoftwareTokenMfaConfigurationPtrInput
	// A map of tags to assign to the User Pool.
	Tags pulumi.StringMapInput
	// Configuration block for user pool add-ons to enable user pool advanced security mode features.
	UserPoolAddOns UserPoolUserPoolAddOnsPtrInput
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumi.StringArrayInput
	// The Username Configuration.
	UsernameConfiguration UserPoolUsernameConfigurationPtrInput
	// The verification message templates configuration.
	VerificationMessageTemplate UserPoolVerificationMessageTemplatePtrInput
}

func (UserPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolState)(nil)).Elem()
}

type userPoolArgs struct {
	// The accountRecoverySetting configuration.
	AccountRecoverySetting *UserPoolAccountRecoverySetting `pulumi:"accountRecoverySetting"`
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig *UserPoolAdminCreateUserConfig `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `usernameAttributes`.
	AliasAttributes []string `pulumi:"aliasAttributes"`
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes []string `pulumi:"autoVerifiedAttributes"`
	// The configuration for the user pool's device tracking.
	DeviceConfiguration *UserPoolDeviceConfiguration `pulumi:"deviceConfiguration"`
	// The Email Configuration.
	EmailConfiguration *UserPoolEmailConfiguration `pulumi:"emailConfiguration"`
	// A string representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage *string `pulumi:"emailVerificationMessage"`
	// A string representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject *string `pulumi:"emailVerificationSubject"`
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig *UserPoolLambdaConfig `pulumi:"lambdaConfig"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values:
	MfaConfiguration *string `pulumi:"mfaConfiguration"`
	// Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
	Name *string `pulumi:"name"`
	// A container for information about the user pool password policy.
	PasswordPolicy *UserPoolPasswordPolicy `pulumi:"passwordPolicy"`
	// A container with the schema attributes of a user pool. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Maximum of 50 attributes.
	Schemas []UserPoolSchema `pulumi:"schemas"`
	// A string representing the SMS authentication message. The message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage *string `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the [`up` command and use --replace](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
	SmsConfiguration *UserPoolSmsConfiguration `pulumi:"smsConfiguration"`
	// A string representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage *string `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration *UserPoolSoftwareTokenMfaConfiguration `pulumi:"softwareTokenMfaConfiguration"`
	// A map of tags to assign to the User Pool.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features.
	UserPoolAddOns *UserPoolUserPoolAddOns `pulumi:"userPoolAddOns"`
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes []string `pulumi:"usernameAttributes"`
	// The Username Configuration.
	UsernameConfiguration *UserPoolUsernameConfiguration `pulumi:"usernameConfiguration"`
	// The verification message templates configuration.
	VerificationMessageTemplate *UserPoolVerificationMessageTemplate `pulumi:"verificationMessageTemplate"`
}

// The set of arguments for constructing a UserPool resource.
type UserPoolArgs struct {
	// The accountRecoverySetting configuration.
	AccountRecoverySetting UserPoolAccountRecoverySettingPtrInput
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig UserPoolAdminCreateUserConfigPtrInput
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `usernameAttributes`.
	AliasAttributes pulumi.StringArrayInput
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes pulumi.StringArrayInput
	// The configuration for the user pool's device tracking.
	DeviceConfiguration UserPoolDeviceConfigurationPtrInput
	// The Email Configuration.
	EmailConfiguration UserPoolEmailConfigurationPtrInput
	// A string representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumi.StringPtrInput
	// A string representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumi.StringPtrInput
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig UserPoolLambdaConfigPtrInput
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values:
	MfaConfiguration pulumi.StringPtrInput
	// Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
	Name pulumi.StringPtrInput
	// A container for information about the user pool password policy.
	PasswordPolicy UserPoolPasswordPolicyPtrInput
	// A container with the schema attributes of a user pool. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Maximum of 50 attributes.
	Schemas UserPoolSchemaArrayInput
	// A string representing the SMS authentication message. The message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumi.StringPtrInput
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the [`up` command and use --replace](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
	SmsConfiguration UserPoolSmsConfigurationPtrInput
	// A string representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumi.StringPtrInput
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration UserPoolSoftwareTokenMfaConfigurationPtrInput
	// A map of tags to assign to the User Pool.
	Tags pulumi.StringMapInput
	// Configuration block for user pool add-ons to enable user pool advanced security mode features.
	UserPoolAddOns UserPoolUserPoolAddOnsPtrInput
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumi.StringArrayInput
	// The Username Configuration.
	UsernameConfiguration UserPoolUsernameConfigurationPtrInput
	// The verification message templates configuration.
	VerificationMessageTemplate UserPoolVerificationMessageTemplatePtrInput
}

func (UserPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolArgs)(nil)).Elem()
}

type UserPoolInput interface {
	pulumi.Input

	ToUserPoolOutput() UserPoolOutput
	ToUserPoolOutputWithContext(ctx context.Context) UserPoolOutput
}

func (*UserPool) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPool)(nil))
}

func (i *UserPool) ToUserPoolOutput() UserPoolOutput {
	return i.ToUserPoolOutputWithContext(context.Background())
}

func (i *UserPool) ToUserPoolOutputWithContext(ctx context.Context) UserPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolOutput)
}

func (i *UserPool) ToUserPoolPtrOutput() UserPoolPtrOutput {
	return i.ToUserPoolPtrOutputWithContext(context.Background())
}

func (i *UserPool) ToUserPoolPtrOutputWithContext(ctx context.Context) UserPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPtrOutput)
}

type UserPoolPtrInput interface {
	pulumi.Input

	ToUserPoolPtrOutput() UserPoolPtrOutput
	ToUserPoolPtrOutputWithContext(ctx context.Context) UserPoolPtrOutput
}

type userPoolPtrType UserPoolArgs

func (*userPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPool)(nil))
}

func (i *userPoolPtrType) ToUserPoolPtrOutput() UserPoolPtrOutput {
	return i.ToUserPoolPtrOutputWithContext(context.Background())
}

func (i *userPoolPtrType) ToUserPoolPtrOutputWithContext(ctx context.Context) UserPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPtrOutput)
}

// UserPoolArrayInput is an input type that accepts UserPoolArray and UserPoolArrayOutput values.
// You can construct a concrete instance of `UserPoolArrayInput` via:
//
//          UserPoolArray{ UserPoolArgs{...} }
type UserPoolArrayInput interface {
	pulumi.Input

	ToUserPoolArrayOutput() UserPoolArrayOutput
	ToUserPoolArrayOutputWithContext(context.Context) UserPoolArrayOutput
}

type UserPoolArray []UserPoolInput

func (UserPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*UserPool)(nil))
}

func (i UserPoolArray) ToUserPoolArrayOutput() UserPoolArrayOutput {
	return i.ToUserPoolArrayOutputWithContext(context.Background())
}

func (i UserPoolArray) ToUserPoolArrayOutputWithContext(ctx context.Context) UserPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolArrayOutput)
}

// UserPoolMapInput is an input type that accepts UserPoolMap and UserPoolMapOutput values.
// You can construct a concrete instance of `UserPoolMapInput` via:
//
//          UserPoolMap{ "key": UserPoolArgs{...} }
type UserPoolMapInput interface {
	pulumi.Input

	ToUserPoolMapOutput() UserPoolMapOutput
	ToUserPoolMapOutputWithContext(context.Context) UserPoolMapOutput
}

type UserPoolMap map[string]UserPoolInput

func (UserPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*UserPool)(nil))
}

func (i UserPoolMap) ToUserPoolMapOutput() UserPoolMapOutput {
	return i.ToUserPoolMapOutputWithContext(context.Background())
}

func (i UserPoolMap) ToUserPoolMapOutputWithContext(ctx context.Context) UserPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolMapOutput)
}

type UserPoolOutput struct {
	*pulumi.OutputState
}

func (UserPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPool)(nil))
}

func (o UserPoolOutput) ToUserPoolOutput() UserPoolOutput {
	return o
}

func (o UserPoolOutput) ToUserPoolOutputWithContext(ctx context.Context) UserPoolOutput {
	return o
}

func (o UserPoolOutput) ToUserPoolPtrOutput() UserPoolPtrOutput {
	return o.ToUserPoolPtrOutputWithContext(context.Background())
}

func (o UserPoolOutput) ToUserPoolPtrOutputWithContext(ctx context.Context) UserPoolPtrOutput {
	return o.ApplyT(func(v UserPool) *UserPool {
		return &v
	}).(UserPoolPtrOutput)
}

type UserPoolPtrOutput struct {
	*pulumi.OutputState
}

func (UserPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPool)(nil))
}

func (o UserPoolPtrOutput) ToUserPoolPtrOutput() UserPoolPtrOutput {
	return o
}

func (o UserPoolPtrOutput) ToUserPoolPtrOutputWithContext(ctx context.Context) UserPoolPtrOutput {
	return o
}

type UserPoolArrayOutput struct{ *pulumi.OutputState }

func (UserPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPool)(nil))
}

func (o UserPoolArrayOutput) ToUserPoolArrayOutput() UserPoolArrayOutput {
	return o
}

func (o UserPoolArrayOutput) ToUserPoolArrayOutputWithContext(ctx context.Context) UserPoolArrayOutput {
	return o
}

func (o UserPoolArrayOutput) Index(i pulumi.IntInput) UserPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPool {
		return vs[0].([]UserPool)[vs[1].(int)]
	}).(UserPoolOutput)
}

type UserPoolMapOutput struct{ *pulumi.OutputState }

func (UserPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserPool)(nil))
}

func (o UserPoolMapOutput) ToUserPoolMapOutput() UserPoolMapOutput {
	return o
}

func (o UserPoolMapOutput) ToUserPoolMapOutputWithContext(ctx context.Context) UserPoolMapOutput {
	return o
}

func (o UserPoolMapOutput) MapIndex(k pulumi.StringInput) UserPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserPool {
		return vs[0].(map[string]UserPool)[vs[1].(string)]
	}).(UserPoolOutput)
}

func init() {
	pulumi.RegisterOutputType(UserPoolOutput{})
	pulumi.RegisterOutputType(UserPoolPtrOutput{})
	pulumi.RegisterOutputType(UserPoolArrayOutput{})
	pulumi.RegisterOutputType(UserPoolMapOutput{})
}
