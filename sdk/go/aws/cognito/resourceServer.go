// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ResourceServer struct {
	pulumi.CustomResourceState

	Identifier       pulumi.StringOutput            `pulumi:"identifier"`
	Name             pulumi.StringOutput            `pulumi:"name"`
	ScopeIdentifiers pulumi.StringArrayOutput       `pulumi:"scopeIdentifiers"`
	Scopes           ResourceServerScopeArrayOutput `pulumi:"scopes"`
	UserPoolId       pulumi.StringOutput            `pulumi:"userPoolId"`
}

// NewResourceServer registers a new resource with the given unique name, arguments, and options.
func NewResourceServer(ctx *pulumi.Context,
	name string, args *ResourceServerArgs, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	if args == nil || args.Identifier == nil {
		return nil, errors.New("missing required argument 'Identifier'")
	}
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	if args == nil {
		args = &ResourceServerArgs{}
	}
	var resource ResourceServer
	err := ctx.RegisterResource("aws:cognito/resourceServer:ResourceServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceServer gets an existing ResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceServerState, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	var resource ResourceServer
	err := ctx.ReadResource("aws:cognito/resourceServer:ResourceServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceServer resources.
type resourceServerState struct {
	Identifier       *string               `pulumi:"identifier"`
	Name             *string               `pulumi:"name"`
	ScopeIdentifiers []string              `pulumi:"scopeIdentifiers"`
	Scopes           []ResourceServerScope `pulumi:"scopes"`
	UserPoolId       *string               `pulumi:"userPoolId"`
}

type ResourceServerState struct {
	Identifier       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	ScopeIdentifiers pulumi.StringArrayInput
	Scopes           ResourceServerScopeArrayInput
	UserPoolId       pulumi.StringPtrInput
}

func (ResourceServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceServerState)(nil)).Elem()
}

type resourceServerArgs struct {
	Identifier string                `pulumi:"identifier"`
	Name       *string               `pulumi:"name"`
	Scopes     []ResourceServerScope `pulumi:"scopes"`
	UserPoolId string                `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ResourceServer resource.
type ResourceServerArgs struct {
	Identifier pulumi.StringInput
	Name       pulumi.StringPtrInput
	Scopes     ResourceServerScopeArrayInput
	UserPoolId pulumi.StringInput
}

func (ResourceServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceServerArgs)(nil)).Elem()
}
