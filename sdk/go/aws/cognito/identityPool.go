// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IdentityPool struct {
	pulumi.CustomResourceState

	AllowUnauthenticatedIdentities pulumi.BoolPtrOutput                           `pulumi:"allowUnauthenticatedIdentities"`
	Arn                            pulumi.StringOutput                            `pulumi:"arn"`
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayOutput `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          pulumi.StringPtrOutput                         `pulumi:"developerProviderName"`
	IdentityPoolName               pulumi.StringOutput                            `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      pulumi.StringArrayOutput                       `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               pulumi.StringArrayOutput                       `pulumi:"samlProviderArns"`
	SupportedLoginProviders        pulumi.StringMapOutput                         `pulumi:"supportedLoginProviders"`
	Tags                           pulumi.StringMapOutput                         `pulumi:"tags"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	if args == nil || args.IdentityPoolName == nil {
		return nil, errors.New("missing required argument 'IdentityPoolName'")
	}
	if args == nil {
		args = &IdentityPoolArgs{}
	}
	var resource IdentityPool
	err := ctx.RegisterResource("aws:cognito/identityPool:IdentityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolState, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	var resource IdentityPool
	err := ctx.ReadResource("aws:cognito/identityPool:IdentityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPool resources.
type identityPoolState struct {
	AllowUnauthenticatedIdentities *bool                                 `pulumi:"allowUnauthenticatedIdentities"`
	Arn                            *string                               `pulumi:"arn"`
	CognitoIdentityProviders       []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          *string                               `pulumi:"developerProviderName"`
	IdentityPoolName               *string                               `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      []string                              `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               []string                              `pulumi:"samlProviderArns"`
	SupportedLoginProviders        map[string]string                     `pulumi:"supportedLoginProviders"`
	Tags                           map[string]string                     `pulumi:"tags"`
}

type IdentityPoolState struct {
	AllowUnauthenticatedIdentities pulumi.BoolPtrInput
	Arn                            pulumi.StringPtrInput
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayInput
	DeveloperProviderName          pulumi.StringPtrInput
	IdentityPoolName               pulumi.StringPtrInput
	OpenidConnectProviderArns      pulumi.StringArrayInput
	SamlProviderArns               pulumi.StringArrayInput
	SupportedLoginProviders        pulumi.StringMapInput
	Tags                           pulumi.StringMapInput
}

func (IdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolState)(nil)).Elem()
}

type identityPoolArgs struct {
	AllowUnauthenticatedIdentities *bool                                 `pulumi:"allowUnauthenticatedIdentities"`
	CognitoIdentityProviders       []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          *string                               `pulumi:"developerProviderName"`
	IdentityPoolName               string                                `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      []string                              `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               []string                              `pulumi:"samlProviderArns"`
	SupportedLoginProviders        map[string]string                     `pulumi:"supportedLoginProviders"`
	Tags                           map[string]string                     `pulumi:"tags"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	AllowUnauthenticatedIdentities pulumi.BoolPtrInput
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayInput
	DeveloperProviderName          pulumi.StringPtrInput
	IdentityPoolName               pulumi.StringInput
	OpenidConnectProviderArns      pulumi.StringArrayInput
	SamlProviderArns               pulumi.StringArrayInput
	SupportedLoginProviders        pulumi.StringMapInput
	Tags                           pulumi.StringMapInput
}

func (IdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolArgs)(nil)).Elem()
}
