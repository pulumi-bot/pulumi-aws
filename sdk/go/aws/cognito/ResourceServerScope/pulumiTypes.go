// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ResourceServerScope

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ResourceServerScope struct {
	// The scope description.
	ScopeDescription string `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName string `pulumi:"scopeName"`
}

type ResourceServerScopeInput interface {
	pulumi.Input

	ToResourceServerScopeOutput() ResourceServerScopeOutput
	ToResourceServerScopeOutputWithContext(context.Context) ResourceServerScopeOutput
}

type ResourceServerScopeArgs struct {
	// The scope description.
	ScopeDescription pulumi.StringInput `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName pulumi.StringInput `pulumi:"scopeName"`
}

func (ResourceServerScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceServerScope)(nil)).Elem()
}

func (i ResourceServerScopeArgs) ToResourceServerScopeOutput() ResourceServerScopeOutput {
	return i.ToResourceServerScopeOutputWithContext(context.Background())
}

func (i ResourceServerScopeArgs) ToResourceServerScopeOutputWithContext(ctx context.Context) ResourceServerScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceServerScopeOutput)
}

type ResourceServerScopeArrayInput interface {
	pulumi.Input

	ToResourceServerScopeArrayOutput() ResourceServerScopeArrayOutput
	ToResourceServerScopeArrayOutputWithContext(context.Context) ResourceServerScopeArrayOutput
}

type ResourceServerScopeArray []ResourceServerScopeInput

func (ResourceServerScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceServerScope)(nil)).Elem()
}

func (i ResourceServerScopeArray) ToResourceServerScopeArrayOutput() ResourceServerScopeArrayOutput {
	return i.ToResourceServerScopeArrayOutputWithContext(context.Background())
}

func (i ResourceServerScopeArray) ToResourceServerScopeArrayOutputWithContext(ctx context.Context) ResourceServerScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceServerScopeArrayOutput)
}

type ResourceServerScopeOutput struct { *pulumi.OutputState }

func (ResourceServerScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceServerScope)(nil)).Elem()
}

func (o ResourceServerScopeOutput) ToResourceServerScopeOutput() ResourceServerScopeOutput {
	return o
}

func (o ResourceServerScopeOutput) ToResourceServerScopeOutputWithContext(ctx context.Context) ResourceServerScopeOutput {
	return o
}

// The scope description.
func (o ResourceServerScopeOutput) ScopeDescription() pulumi.StringOutput {
	return o.ApplyT(func (v ResourceServerScope) string { return v.ScopeDescription }).(pulumi.StringOutput)
}

// The scope name.
func (o ResourceServerScopeOutput) ScopeName() pulumi.StringOutput {
	return o.ApplyT(func (v ResourceServerScope) string { return v.ScopeName }).(pulumi.StringOutput)
}

type ResourceServerScopeArrayOutput struct { *pulumi.OutputState}

func (ResourceServerScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceServerScope)(nil)).Elem()
}

func (o ResourceServerScopeArrayOutput) ToResourceServerScopeArrayOutput() ResourceServerScopeArrayOutput {
	return o
}

func (o ResourceServerScopeArrayOutput) ToResourceServerScopeArrayOutputWithContext(ctx context.Context) ResourceServerScopeArrayOutput {
	return o
}

func (o ResourceServerScopeArrayOutput) Index(i pulumi.IntInput) ResourceServerScopeOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ResourceServerScope {
		return vs[0].([]ResourceServerScope)[vs[1].(int)]
	}).(ResourceServerScopeOutput)
}

func init() {
	pulumi.RegisterOutputType(ResourceServerScopeOutput{})
	pulumi.RegisterOutputType(ResourceServerScopeArrayOutput{})
}
