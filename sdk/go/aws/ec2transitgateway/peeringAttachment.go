// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PeeringAttachment struct {
	pulumi.CustomResourceState

	PeerAccountId        pulumi.StringOutput    `pulumi:"peerAccountId"`
	PeerRegion           pulumi.StringOutput    `pulumi:"peerRegion"`
	PeerTransitGatewayId pulumi.StringOutput    `pulumi:"peerTransitGatewayId"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TransitGatewayId     pulumi.StringOutput    `pulumi:"transitGatewayId"`
}

// NewPeeringAttachment registers a new resource with the given unique name, arguments, and options.
func NewPeeringAttachment(ctx *pulumi.Context,
	name string, args *PeeringAttachmentArgs, opts ...pulumi.ResourceOption) (*PeeringAttachment, error) {
	if args == nil || args.PeerRegion == nil {
		return nil, errors.New("missing required argument 'PeerRegion'")
	}
	if args == nil || args.PeerTransitGatewayId == nil {
		return nil, errors.New("missing required argument 'PeerTransitGatewayId'")
	}
	if args == nil || args.TransitGatewayId == nil {
		return nil, errors.New("missing required argument 'TransitGatewayId'")
	}
	if args == nil {
		args = &PeeringAttachmentArgs{}
	}
	var resource PeeringAttachment
	err := ctx.RegisterResource("aws:ec2transitgateway/peeringAttachment:PeeringAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringAttachment gets an existing PeeringAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringAttachmentState, opts ...pulumi.ResourceOption) (*PeeringAttachment, error) {
	var resource PeeringAttachment
	err := ctx.ReadResource("aws:ec2transitgateway/peeringAttachment:PeeringAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringAttachment resources.
type peeringAttachmentState struct {
	PeerAccountId        *string           `pulumi:"peerAccountId"`
	PeerRegion           *string           `pulumi:"peerRegion"`
	PeerTransitGatewayId *string           `pulumi:"peerTransitGatewayId"`
	Tags                 map[string]string `pulumi:"tags"`
	TransitGatewayId     *string           `pulumi:"transitGatewayId"`
}

type PeeringAttachmentState struct {
	PeerAccountId        pulumi.StringPtrInput
	PeerRegion           pulumi.StringPtrInput
	PeerTransitGatewayId pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TransitGatewayId     pulumi.StringPtrInput
}

func (PeeringAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentState)(nil)).Elem()
}

type peeringAttachmentArgs struct {
	PeerAccountId        *string           `pulumi:"peerAccountId"`
	PeerRegion           string            `pulumi:"peerRegion"`
	PeerTransitGatewayId string            `pulumi:"peerTransitGatewayId"`
	Tags                 map[string]string `pulumi:"tags"`
	TransitGatewayId     string            `pulumi:"transitGatewayId"`
}

// The set of arguments for constructing a PeeringAttachment resource.
type PeeringAttachmentArgs struct {
	PeerAccountId        pulumi.StringPtrInput
	PeerRegion           pulumi.StringInput
	PeerTransitGatewayId pulumi.StringInput
	Tags                 pulumi.StringMapInput
	TransitGatewayId     pulumi.StringInput
}

func (PeeringAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentArgs)(nil)).Elem()
}
