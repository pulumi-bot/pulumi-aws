// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages the accepter's side of an EC2 Transit Gateway VPC Attachment.
// 
// When a cross-account (requester's AWS account differs from the accepter's AWS account) EC2 Transit Gateway VPC Attachment
// is created, an EC2 Transit Gateway VPC Attachment resource is automatically created in the accepter's account.
// The requester can use the `ec2transitgateway.VpcAttachment` resource to manage its side of the connection
// and the accepter can use the `ec2transitgateway.VpcAttachmentAccepter` resource to "adopt" its side of the
// connection into management.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_transit_gateway_vpc_attachment_accepter.html.markdown.
type VpcAttachmentAccepter struct {
	s *pulumi.ResourceState
}

// NewVpcAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, args *VpcAttachmentAccepterArgs, opts ...pulumi.ResourceOpt) (*VpcAttachmentAccepter, error) {
	if args == nil || args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("missing required argument 'TransitGatewayAttachmentId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["tags"] = nil
		inputs["transitGatewayAttachmentId"] = nil
		inputs["transitGatewayDefaultRouteTableAssociation"] = nil
		inputs["transitGatewayDefaultRouteTablePropagation"] = nil
	} else {
		inputs["tags"] = args.Tags
		inputs["transitGatewayAttachmentId"] = args.TransitGatewayAttachmentId
		inputs["transitGatewayDefaultRouteTableAssociation"] = args.TransitGatewayDefaultRouteTableAssociation
		inputs["transitGatewayDefaultRouteTablePropagation"] = args.TransitGatewayDefaultRouteTablePropagation
	}
	inputs["dnsSupport"] = nil
	inputs["ipv6Support"] = nil
	inputs["subnetIds"] = nil
	inputs["transitGatewayId"] = nil
	inputs["vpcId"] = nil
	inputs["vpcOwnerId"] = nil
	s, err := ctx.RegisterResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcAttachmentAccepter{s: s}, nil
}

// GetVpcAttachmentAccepter gets an existing VpcAttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpcAttachmentAccepterState, opts ...pulumi.ResourceOpt) (*VpcAttachmentAccepter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dnsSupport"] = state.DnsSupport
		inputs["ipv6Support"] = state.Ipv6Support
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["transitGatewayAttachmentId"] = state.TransitGatewayAttachmentId
		inputs["transitGatewayDefaultRouteTableAssociation"] = state.TransitGatewayDefaultRouteTableAssociation
		inputs["transitGatewayDefaultRouteTablePropagation"] = state.TransitGatewayDefaultRouteTablePropagation
		inputs["transitGatewayId"] = state.TransitGatewayId
		inputs["vpcId"] = state.VpcId
		inputs["vpcOwnerId"] = state.VpcOwnerId
	}
	s, err := ctx.ReadResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcAttachmentAccepter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpcAttachmentAccepter) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpcAttachmentAccepter) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether DNS support is enabled. Valid values: `disable`, `enable`.
func (r *VpcAttachmentAccepter) DnsSupport() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsSupport"])
}

// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
func (r *VpcAttachmentAccepter) Ipv6Support() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6Support"])
}

// Identifiers of EC2 Subnets.
func (r *VpcAttachmentAccepter) SubnetIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnetIds"])
}

// Key-value tags for the EC2 Transit Gateway VPC Attachment.
func (r *VpcAttachmentAccepter) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The ID of the EC2 Transit Gateway Attachment to manage.
func (r *VpcAttachmentAccepter) TransitGatewayAttachmentId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transitGatewayAttachmentId"])
}

// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
func (r *VpcAttachmentAccepter) TransitGatewayDefaultRouteTableAssociation() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["transitGatewayDefaultRouteTableAssociation"])
}

// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
func (r *VpcAttachmentAccepter) TransitGatewayDefaultRouteTablePropagation() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["transitGatewayDefaultRouteTablePropagation"])
}

// Identifier of EC2 Transit Gateway.
func (r *VpcAttachmentAccepter) TransitGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transitGatewayId"])
}

// Identifier of EC2 VPC.
func (r *VpcAttachmentAccepter) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Identifier of the AWS account that owns the EC2 VPC.
func (r *VpcAttachmentAccepter) VpcOwnerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcOwnerId"])
}

// Input properties used for looking up and filtering VpcAttachmentAccepter resources.
type VpcAttachmentAccepterState struct {
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport interface{}
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support interface{}
	// Identifiers of EC2 Subnets.
	SubnetIds interface{}
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags interface{}
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId interface{}
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation interface{}
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation interface{}
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId interface{}
	// Identifier of EC2 VPC.
	VpcId interface{}
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId interface{}
}

// The set of arguments for constructing a VpcAttachmentAccepter resource.
type VpcAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags interface{}
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId interface{}
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation interface{}
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation interface{}
}
