// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package MemcachedLayerEbsVolume

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MemcachedLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	Iops *int `pulumi:"iops"`
	MountPoint string `pulumi:"mountPoint"`
	NumberOfDisks int `pulumi:"numberOfDisks"`
	RaidLevel *string `pulumi:"raidLevel"`
	Size int `pulumi:"size"`
	Type *string `pulumi:"type"`
}

type MemcachedLayerEbsVolumeInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput
	ToMemcachedLayerEbsVolumeOutputWithContext(context.Context) MemcachedLayerEbsVolumeOutput
}

type MemcachedLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	Size pulumi.IntInput `pulumi:"size"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MemcachedLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return i.ToMemcachedLayerEbsVolumeOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeOutput)
}

type MemcachedLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput
	ToMemcachedLayerEbsVolumeArrayOutputWithContext(context.Context) MemcachedLayerEbsVolumeArrayOutput
}

type MemcachedLayerEbsVolumeArray []MemcachedLayerEbsVolumeInput

func (MemcachedLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolume)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArray) ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput {
	return i.ToMemcachedLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArray) ToMemcachedLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeArrayOutput)
}

type MemcachedLayerEbsVolumeOutput struct { *pulumi.OutputState }

func (MemcachedLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o MemcachedLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o MemcachedLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

func (o MemcachedLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

func (o MemcachedLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

func (o MemcachedLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o MemcachedLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MemcachedLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MemcachedLayerEbsVolumeArrayOutput struct { *pulumi.OutputState}

func (MemcachedLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolume)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeArrayOutput) ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArrayOutput) ToMemcachedLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) MemcachedLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) MemcachedLayerEbsVolume {
		return vs[0].([]MemcachedLayerEbsVolume)[vs[1].(int)]
	}).(MemcachedLayerEbsVolumeOutput)
}

func init() {
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeArrayOutput{})
}
