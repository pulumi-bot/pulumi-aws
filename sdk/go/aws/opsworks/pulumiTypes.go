// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ApplicationAppSource struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the app resource can be found.
	Url *string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type ApplicationAppSourceInput interface {
	pulumi.Input

	ToApplicationAppSourceOutput() ApplicationAppSourceOutput
	ToApplicationAppSourceOutputWithContext(context.Context) ApplicationAppSourceOutput
}

type ApplicationAppSourceArgs struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the app resource can be found.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ApplicationAppSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSource)(nil)).Elem()
}

func (i ApplicationAppSourceArgs) ToApplicationAppSourceOutput() ApplicationAppSourceOutput {
	return i.ToApplicationAppSourceOutputWithContext(context.Background())
}

func (i ApplicationAppSourceArgs) ToApplicationAppSourceOutputWithContext(ctx context.Context) ApplicationAppSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceOutput)
}

type ApplicationAppSourceArrayInput interface {
	pulumi.Input

	ToApplicationAppSourceArrayOutput() ApplicationAppSourceArrayOutput
	ToApplicationAppSourceArrayOutputWithContext(context.Context) ApplicationAppSourceArrayOutput
}

type ApplicationAppSourceArray []ApplicationAppSourceInput

func (ApplicationAppSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSource)(nil)).Elem()
}

func (i ApplicationAppSourceArray) ToApplicationAppSourceArrayOutput() ApplicationAppSourceArrayOutput {
	return i.ToApplicationAppSourceArrayOutputWithContext(context.Background())
}

func (i ApplicationAppSourceArray) ToApplicationAppSourceArrayOutputWithContext(ctx context.Context) ApplicationAppSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceArrayOutput)
}

type ApplicationAppSourceOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSource)(nil)).Elem()
}

func (o ApplicationAppSourceOutput) ToApplicationAppSourceOutput() ApplicationAppSourceOutput {
	return o
}

func (o ApplicationAppSourceOutput) ToApplicationAppSourceOutputWithContext(ctx context.Context) ApplicationAppSourceOutput {
	return o
}

// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o ApplicationAppSourceOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSource) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSource) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o ApplicationAppSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppSource) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the app resource can be found.
func (o ApplicationAppSourceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSource) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username to use when authenticating to the source.
func (o ApplicationAppSourceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSource) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ApplicationAppSourceArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSource)(nil)).Elem()
}

func (o ApplicationAppSourceArrayOutput) ToApplicationAppSourceArrayOutput() ApplicationAppSourceArrayOutput {
	return o
}

func (o ApplicationAppSourceArrayOutput) ToApplicationAppSourceArrayOutputWithContext(ctx context.Context) ApplicationAppSourceArrayOutput {
	return o
}

func (o ApplicationAppSourceArrayOutput) Index(i pulumi.IntInput) ApplicationAppSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppSource {
		return vs[0].([]ApplicationAppSource)[vs[1].(int)]
	}).(ApplicationAppSourceOutput)
}

type ApplicationAppSourceArgs struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the app resource can be found.
	Url *string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type ApplicationAppSourceArgsInput interface {
	pulumi.Input

	ToApplicationAppSourceArgsOutput() ApplicationAppSourceArgsOutput
	ToApplicationAppSourceArgsOutputWithContext(context.Context) ApplicationAppSourceArgsOutput
}

type ApplicationAppSourceArgsArgs struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the app resource can be found.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ApplicationAppSourceArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSourceArgs)(nil)).Elem()
}

func (i ApplicationAppSourceArgsArgs) ToApplicationAppSourceArgsOutput() ApplicationAppSourceArgsOutput {
	return i.ToApplicationAppSourceArgsOutputWithContext(context.Background())
}

func (i ApplicationAppSourceArgsArgs) ToApplicationAppSourceArgsOutputWithContext(ctx context.Context) ApplicationAppSourceArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceArgsOutput)
}

type ApplicationAppSourceArgsArrayInput interface {
	pulumi.Input

	ToApplicationAppSourceArgsArrayOutput() ApplicationAppSourceArgsArrayOutput
	ToApplicationAppSourceArgsArrayOutputWithContext(context.Context) ApplicationAppSourceArgsArrayOutput
}

type ApplicationAppSourceArgsArray []ApplicationAppSourceArgsInput

func (ApplicationAppSourceArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSourceArgs)(nil)).Elem()
}

func (i ApplicationAppSourceArgsArray) ToApplicationAppSourceArgsArrayOutput() ApplicationAppSourceArgsArrayOutput {
	return i.ToApplicationAppSourceArgsArrayOutputWithContext(context.Background())
}

func (i ApplicationAppSourceArgsArray) ToApplicationAppSourceArgsArrayOutputWithContext(ctx context.Context) ApplicationAppSourceArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceArgsArrayOutput)
}

type ApplicationAppSourceArgsOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSourceArgs)(nil)).Elem()
}

func (o ApplicationAppSourceArgsOutput) ToApplicationAppSourceArgsOutput() ApplicationAppSourceArgsOutput {
	return o
}

func (o ApplicationAppSourceArgsOutput) ToApplicationAppSourceArgsOutputWithContext(ctx context.Context) ApplicationAppSourceArgsOutput {
	return o
}

// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceArgsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o ApplicationAppSourceArgsOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceArgsOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o ApplicationAppSourceArgsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the app resource can be found.
func (o ApplicationAppSourceArgsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username to use when authenticating to the source.
func (o ApplicationAppSourceArgsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceArgs) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ApplicationAppSourceArgsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSourceArgs)(nil)).Elem()
}

func (o ApplicationAppSourceArgsArrayOutput) ToApplicationAppSourceArgsArrayOutput() ApplicationAppSourceArgsArrayOutput {
	return o
}

func (o ApplicationAppSourceArgsArrayOutput) ToApplicationAppSourceArgsArrayOutputWithContext(ctx context.Context) ApplicationAppSourceArgsArrayOutput {
	return o
}

func (o ApplicationAppSourceArgsArrayOutput) Index(i pulumi.IntInput) ApplicationAppSourceArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppSourceArgs {
		return vs[0].([]ApplicationAppSourceArgs)[vs[1].(int)]
	}).(ApplicationAppSourceArgsOutput)
}

type ApplicationAppSourceState struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the app resource can be found.
	Url *string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type ApplicationAppSourceStateInput interface {
	pulumi.Input

	ToApplicationAppSourceStateOutput() ApplicationAppSourceStateOutput
	ToApplicationAppSourceStateOutputWithContext(context.Context) ApplicationAppSourceStateOutput
}

type ApplicationAppSourceStateArgs struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the app resource can be found.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ApplicationAppSourceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSourceState)(nil)).Elem()
}

func (i ApplicationAppSourceStateArgs) ToApplicationAppSourceStateOutput() ApplicationAppSourceStateOutput {
	return i.ToApplicationAppSourceStateOutputWithContext(context.Background())
}

func (i ApplicationAppSourceStateArgs) ToApplicationAppSourceStateOutputWithContext(ctx context.Context) ApplicationAppSourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceStateOutput)
}

type ApplicationAppSourceStateArrayInput interface {
	pulumi.Input

	ToApplicationAppSourceStateArrayOutput() ApplicationAppSourceStateArrayOutput
	ToApplicationAppSourceStateArrayOutputWithContext(context.Context) ApplicationAppSourceStateArrayOutput
}

type ApplicationAppSourceStateArray []ApplicationAppSourceStateInput

func (ApplicationAppSourceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSourceState)(nil)).Elem()
}

func (i ApplicationAppSourceStateArray) ToApplicationAppSourceStateArrayOutput() ApplicationAppSourceStateArrayOutput {
	return i.ToApplicationAppSourceStateArrayOutputWithContext(context.Background())
}

func (i ApplicationAppSourceStateArray) ToApplicationAppSourceStateArrayOutputWithContext(ctx context.Context) ApplicationAppSourceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceStateArrayOutput)
}

type ApplicationAppSourceStateOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSourceState)(nil)).Elem()
}

func (o ApplicationAppSourceStateOutput) ToApplicationAppSourceStateOutput() ApplicationAppSourceStateOutput {
	return o
}

func (o ApplicationAppSourceStateOutput) ToApplicationAppSourceStateOutputWithContext(ctx context.Context) ApplicationAppSourceStateOutput {
	return o
}

// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceStateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o ApplicationAppSourceStateOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceStateOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o ApplicationAppSourceStateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the app resource can be found.
func (o ApplicationAppSourceStateOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username to use when authenticating to the source.
func (o ApplicationAppSourceStateOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppSourceState) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ApplicationAppSourceStateArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppSourceState)(nil)).Elem()
}

func (o ApplicationAppSourceStateArrayOutput) ToApplicationAppSourceStateArrayOutput() ApplicationAppSourceStateArrayOutput {
	return o
}

func (o ApplicationAppSourceStateArrayOutput) ToApplicationAppSourceStateArrayOutputWithContext(ctx context.Context) ApplicationAppSourceStateArrayOutput {
	return o
}

func (o ApplicationAppSourceStateArrayOutput) Index(i pulumi.IntInput) ApplicationAppSourceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppSourceState {
		return vs[0].([]ApplicationAppSourceState)[vs[1].(int)]
	}).(ApplicationAppSourceStateOutput)
}

type ApplicationEnvironment struct {
	// Variable name.
	Key string `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure *bool `pulumi:"secure"`
	// Variable value.
	Value string `pulumi:"value"`
}

type ApplicationEnvironmentInput interface {
	pulumi.Input

	ToApplicationEnvironmentOutput() ApplicationEnvironmentOutput
	ToApplicationEnvironmentOutputWithContext(context.Context) ApplicationEnvironmentOutput
}

type ApplicationEnvironmentArgs struct {
	// Variable name.
	Key pulumi.StringInput `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure pulumi.BoolPtrInput `pulumi:"secure"`
	// Variable value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironment)(nil)).Elem()
}

func (i ApplicationEnvironmentArgs) ToApplicationEnvironmentOutput() ApplicationEnvironmentOutput {
	return i.ToApplicationEnvironmentOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentArgs) ToApplicationEnvironmentOutputWithContext(ctx context.Context) ApplicationEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentOutput)
}

type ApplicationEnvironmentArrayInput interface {
	pulumi.Input

	ToApplicationEnvironmentArrayOutput() ApplicationEnvironmentArrayOutput
	ToApplicationEnvironmentArrayOutputWithContext(context.Context) ApplicationEnvironmentArrayOutput
}

type ApplicationEnvironmentArray []ApplicationEnvironmentInput

func (ApplicationEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironment)(nil)).Elem()
}

func (i ApplicationEnvironmentArray) ToApplicationEnvironmentArrayOutput() ApplicationEnvironmentArrayOutput {
	return i.ToApplicationEnvironmentArrayOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentArray) ToApplicationEnvironmentArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentArrayOutput)
}

type ApplicationEnvironmentOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironment)(nil)).Elem()
}

func (o ApplicationEnvironmentOutput) ToApplicationEnvironmentOutput() ApplicationEnvironmentOutput {
	return o
}

func (o ApplicationEnvironmentOutput) ToApplicationEnvironmentOutputWithContext(ctx context.Context) ApplicationEnvironmentOutput {
	return o
}

// Variable name.
func (o ApplicationEnvironmentOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironment) string { return v.Key }).(pulumi.StringOutput)
}

// Set visibility of the variable value to `true` or `false`.
func (o ApplicationEnvironmentOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationEnvironment) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

// Variable value.
func (o ApplicationEnvironmentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironment) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironment)(nil)).Elem()
}

func (o ApplicationEnvironmentArrayOutput) ToApplicationEnvironmentArrayOutput() ApplicationEnvironmentArrayOutput {
	return o
}

func (o ApplicationEnvironmentArrayOutput) ToApplicationEnvironmentArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentArrayOutput {
	return o
}

func (o ApplicationEnvironmentArrayOutput) Index(i pulumi.IntInput) ApplicationEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationEnvironment {
		return vs[0].([]ApplicationEnvironment)[vs[1].(int)]
	}).(ApplicationEnvironmentOutput)
}

type ApplicationEnvironmentArgs struct {
	// Variable name.
	Key string `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure *bool `pulumi:"secure"`
	// Variable value.
	Value string `pulumi:"value"`
}

type ApplicationEnvironmentArgsInput interface {
	pulumi.Input

	ToApplicationEnvironmentArgsOutput() ApplicationEnvironmentArgsOutput
	ToApplicationEnvironmentArgsOutputWithContext(context.Context) ApplicationEnvironmentArgsOutput
}

type ApplicationEnvironmentArgsArgs struct {
	// Variable name.
	Key pulumi.StringInput `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure pulumi.BoolPtrInput `pulumi:"secure"`
	// Variable value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationEnvironmentArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentArgs)(nil)).Elem()
}

func (i ApplicationEnvironmentArgsArgs) ToApplicationEnvironmentArgsOutput() ApplicationEnvironmentArgsOutput {
	return i.ToApplicationEnvironmentArgsOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentArgsArgs) ToApplicationEnvironmentArgsOutputWithContext(ctx context.Context) ApplicationEnvironmentArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentArgsOutput)
}

type ApplicationEnvironmentArgsArrayInput interface {
	pulumi.Input

	ToApplicationEnvironmentArgsArrayOutput() ApplicationEnvironmentArgsArrayOutput
	ToApplicationEnvironmentArgsArrayOutputWithContext(context.Context) ApplicationEnvironmentArgsArrayOutput
}

type ApplicationEnvironmentArgsArray []ApplicationEnvironmentArgsInput

func (ApplicationEnvironmentArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironmentArgs)(nil)).Elem()
}

func (i ApplicationEnvironmentArgsArray) ToApplicationEnvironmentArgsArrayOutput() ApplicationEnvironmentArgsArrayOutput {
	return i.ToApplicationEnvironmentArgsArrayOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentArgsArray) ToApplicationEnvironmentArgsArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentArgsArrayOutput)
}

type ApplicationEnvironmentArgsOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentArgs)(nil)).Elem()
}

func (o ApplicationEnvironmentArgsOutput) ToApplicationEnvironmentArgsOutput() ApplicationEnvironmentArgsOutput {
	return o
}

func (o ApplicationEnvironmentArgsOutput) ToApplicationEnvironmentArgsOutputWithContext(ctx context.Context) ApplicationEnvironmentArgsOutput {
	return o
}

// Variable name.
func (o ApplicationEnvironmentArgsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironmentArgs) string { return v.Key }).(pulumi.StringOutput)
}

// Set visibility of the variable value to `true` or `false`.
func (o ApplicationEnvironmentArgsOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationEnvironmentArgs) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

// Variable value.
func (o ApplicationEnvironmentArgsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironmentArgs) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationEnvironmentArgsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironmentArgs)(nil)).Elem()
}

func (o ApplicationEnvironmentArgsArrayOutput) ToApplicationEnvironmentArgsArrayOutput() ApplicationEnvironmentArgsArrayOutput {
	return o
}

func (o ApplicationEnvironmentArgsArrayOutput) ToApplicationEnvironmentArgsArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentArgsArrayOutput {
	return o
}

func (o ApplicationEnvironmentArgsArrayOutput) Index(i pulumi.IntInput) ApplicationEnvironmentArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationEnvironmentArgs {
		return vs[0].([]ApplicationEnvironmentArgs)[vs[1].(int)]
	}).(ApplicationEnvironmentArgsOutput)
}

type ApplicationEnvironmentState struct {
	// Variable name.
	Key string `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure *bool `pulumi:"secure"`
	// Variable value.
	Value string `pulumi:"value"`
}

type ApplicationEnvironmentStateInput interface {
	pulumi.Input

	ToApplicationEnvironmentStateOutput() ApplicationEnvironmentStateOutput
	ToApplicationEnvironmentStateOutputWithContext(context.Context) ApplicationEnvironmentStateOutput
}

type ApplicationEnvironmentStateArgs struct {
	// Variable name.
	Key pulumi.StringInput `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure pulumi.BoolPtrInput `pulumi:"secure"`
	// Variable value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationEnvironmentStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentState)(nil)).Elem()
}

func (i ApplicationEnvironmentStateArgs) ToApplicationEnvironmentStateOutput() ApplicationEnvironmentStateOutput {
	return i.ToApplicationEnvironmentStateOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentStateArgs) ToApplicationEnvironmentStateOutputWithContext(ctx context.Context) ApplicationEnvironmentStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentStateOutput)
}

type ApplicationEnvironmentStateArrayInput interface {
	pulumi.Input

	ToApplicationEnvironmentStateArrayOutput() ApplicationEnvironmentStateArrayOutput
	ToApplicationEnvironmentStateArrayOutputWithContext(context.Context) ApplicationEnvironmentStateArrayOutput
}

type ApplicationEnvironmentStateArray []ApplicationEnvironmentStateInput

func (ApplicationEnvironmentStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironmentState)(nil)).Elem()
}

func (i ApplicationEnvironmentStateArray) ToApplicationEnvironmentStateArrayOutput() ApplicationEnvironmentStateArrayOutput {
	return i.ToApplicationEnvironmentStateArrayOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentStateArray) ToApplicationEnvironmentStateArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentStateArrayOutput)
}

type ApplicationEnvironmentStateOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentState)(nil)).Elem()
}

func (o ApplicationEnvironmentStateOutput) ToApplicationEnvironmentStateOutput() ApplicationEnvironmentStateOutput {
	return o
}

func (o ApplicationEnvironmentStateOutput) ToApplicationEnvironmentStateOutputWithContext(ctx context.Context) ApplicationEnvironmentStateOutput {
	return o
}

// Variable name.
func (o ApplicationEnvironmentStateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironmentState) string { return v.Key }).(pulumi.StringOutput)
}

// Set visibility of the variable value to `true` or `false`.
func (o ApplicationEnvironmentStateOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationEnvironmentState) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

// Variable value.
func (o ApplicationEnvironmentStateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationEnvironmentState) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationEnvironmentStateArrayOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationEnvironmentState)(nil)).Elem()
}

func (o ApplicationEnvironmentStateArrayOutput) ToApplicationEnvironmentStateArrayOutput() ApplicationEnvironmentStateArrayOutput {
	return o
}

func (o ApplicationEnvironmentStateArrayOutput) ToApplicationEnvironmentStateArrayOutputWithContext(ctx context.Context) ApplicationEnvironmentStateArrayOutput {
	return o
}

func (o ApplicationEnvironmentStateArrayOutput) Index(i pulumi.IntInput) ApplicationEnvironmentStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationEnvironmentState {
		return vs[0].([]ApplicationEnvironmentState)[vs[1].(int)]
	}).(ApplicationEnvironmentStateOutput)
}

type ApplicationSslConfiguration struct {
	// The contents of the certificate's domain.crt file.
	Certificate string `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain *string `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey string `pulumi:"privateKey"`
}

type ApplicationSslConfigurationInput interface {
	pulumi.Input

	ToApplicationSslConfigurationOutput() ApplicationSslConfigurationOutput
	ToApplicationSslConfigurationOutputWithContext(context.Context) ApplicationSslConfigurationOutput
}

type ApplicationSslConfigurationArgs struct {
	// The contents of the certificate's domain.crt file.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain pulumi.StringPtrInput `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (ApplicationSslConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfiguration)(nil)).Elem()
}

func (i ApplicationSslConfigurationArgs) ToApplicationSslConfigurationOutput() ApplicationSslConfigurationOutput {
	return i.ToApplicationSslConfigurationOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationArgs) ToApplicationSslConfigurationOutputWithContext(ctx context.Context) ApplicationSslConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationOutput)
}

type ApplicationSslConfigurationArrayInput interface {
	pulumi.Input

	ToApplicationSslConfigurationArrayOutput() ApplicationSslConfigurationArrayOutput
	ToApplicationSslConfigurationArrayOutputWithContext(context.Context) ApplicationSslConfigurationArrayOutput
}

type ApplicationSslConfigurationArray []ApplicationSslConfigurationInput

func (ApplicationSslConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfiguration)(nil)).Elem()
}

func (i ApplicationSslConfigurationArray) ToApplicationSslConfigurationArrayOutput() ApplicationSslConfigurationArrayOutput {
	return i.ToApplicationSslConfigurationArrayOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationArray) ToApplicationSslConfigurationArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationArrayOutput)
}

type ApplicationSslConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfiguration)(nil)).Elem()
}

func (o ApplicationSslConfigurationOutput) ToApplicationSslConfigurationOutput() ApplicationSslConfigurationOutput {
	return o
}

func (o ApplicationSslConfigurationOutput) ToApplicationSslConfigurationOutputWithContext(ctx context.Context) ApplicationSslConfigurationOutput {
	return o
}

// The contents of the certificate's domain.crt file.
func (o ApplicationSslConfigurationOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfiguration) string { return v.Certificate }).(pulumi.StringOutput)
}

// Can be used to specify an intermediate certificate authority key or client authentication.
func (o ApplicationSslConfigurationOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSslConfiguration) *string { return v.Chain }).(pulumi.StringPtrOutput)
}

// The private key; the contents of the certificate's domain.key file.
func (o ApplicationSslConfigurationOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfiguration) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type ApplicationSslConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfiguration)(nil)).Elem()
}

func (o ApplicationSslConfigurationArrayOutput) ToApplicationSslConfigurationArrayOutput() ApplicationSslConfigurationArrayOutput {
	return o
}

func (o ApplicationSslConfigurationArrayOutput) ToApplicationSslConfigurationArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationArrayOutput {
	return o
}

func (o ApplicationSslConfigurationArrayOutput) Index(i pulumi.IntInput) ApplicationSslConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSslConfiguration {
		return vs[0].([]ApplicationSslConfiguration)[vs[1].(int)]
	}).(ApplicationSslConfigurationOutput)
}

type ApplicationSslConfigurationArgs struct {
	// The contents of the certificate's domain.crt file.
	Certificate string `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain *string `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey string `pulumi:"privateKey"`
}

type ApplicationSslConfigurationArgsInput interface {
	pulumi.Input

	ToApplicationSslConfigurationArgsOutput() ApplicationSslConfigurationArgsOutput
	ToApplicationSslConfigurationArgsOutputWithContext(context.Context) ApplicationSslConfigurationArgsOutput
}

type ApplicationSslConfigurationArgsArgs struct {
	// The contents of the certificate's domain.crt file.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain pulumi.StringPtrInput `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (ApplicationSslConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfigurationArgs)(nil)).Elem()
}

func (i ApplicationSslConfigurationArgsArgs) ToApplicationSslConfigurationArgsOutput() ApplicationSslConfigurationArgsOutput {
	return i.ToApplicationSslConfigurationArgsOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationArgsArgs) ToApplicationSslConfigurationArgsOutputWithContext(ctx context.Context) ApplicationSslConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationArgsOutput)
}

type ApplicationSslConfigurationArgsArrayInput interface {
	pulumi.Input

	ToApplicationSslConfigurationArgsArrayOutput() ApplicationSslConfigurationArgsArrayOutput
	ToApplicationSslConfigurationArgsArrayOutputWithContext(context.Context) ApplicationSslConfigurationArgsArrayOutput
}

type ApplicationSslConfigurationArgsArray []ApplicationSslConfigurationArgsInput

func (ApplicationSslConfigurationArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfigurationArgs)(nil)).Elem()
}

func (i ApplicationSslConfigurationArgsArray) ToApplicationSslConfigurationArgsArrayOutput() ApplicationSslConfigurationArgsArrayOutput {
	return i.ToApplicationSslConfigurationArgsArrayOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationArgsArray) ToApplicationSslConfigurationArgsArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationArgsArrayOutput)
}

type ApplicationSslConfigurationArgsOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfigurationArgs)(nil)).Elem()
}

func (o ApplicationSslConfigurationArgsOutput) ToApplicationSslConfigurationArgsOutput() ApplicationSslConfigurationArgsOutput {
	return o
}

func (o ApplicationSslConfigurationArgsOutput) ToApplicationSslConfigurationArgsOutputWithContext(ctx context.Context) ApplicationSslConfigurationArgsOutput {
	return o
}

// The contents of the certificate's domain.crt file.
func (o ApplicationSslConfigurationArgsOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationArgs) string { return v.Certificate }).(pulumi.StringOutput)
}

// Can be used to specify an intermediate certificate authority key or client authentication.
func (o ApplicationSslConfigurationArgsOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationArgs) *string { return v.Chain }).(pulumi.StringPtrOutput)
}

// The private key; the contents of the certificate's domain.key file.
func (o ApplicationSslConfigurationArgsOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationArgs) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type ApplicationSslConfigurationArgsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfigurationArgs)(nil)).Elem()
}

func (o ApplicationSslConfigurationArgsArrayOutput) ToApplicationSslConfigurationArgsArrayOutput() ApplicationSslConfigurationArgsArrayOutput {
	return o
}

func (o ApplicationSslConfigurationArgsArrayOutput) ToApplicationSslConfigurationArgsArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationArgsArrayOutput {
	return o
}

func (o ApplicationSslConfigurationArgsArrayOutput) Index(i pulumi.IntInput) ApplicationSslConfigurationArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSslConfigurationArgs {
		return vs[0].([]ApplicationSslConfigurationArgs)[vs[1].(int)]
	}).(ApplicationSslConfigurationArgsOutput)
}

type ApplicationSslConfigurationState struct {
	// The contents of the certificate's domain.crt file.
	Certificate string `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain *string `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey string `pulumi:"privateKey"`
}

type ApplicationSslConfigurationStateInput interface {
	pulumi.Input

	ToApplicationSslConfigurationStateOutput() ApplicationSslConfigurationStateOutput
	ToApplicationSslConfigurationStateOutputWithContext(context.Context) ApplicationSslConfigurationStateOutput
}

type ApplicationSslConfigurationStateArgs struct {
	// The contents of the certificate's domain.crt file.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain pulumi.StringPtrInput `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (ApplicationSslConfigurationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfigurationState)(nil)).Elem()
}

func (i ApplicationSslConfigurationStateArgs) ToApplicationSslConfigurationStateOutput() ApplicationSslConfigurationStateOutput {
	return i.ToApplicationSslConfigurationStateOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationStateArgs) ToApplicationSslConfigurationStateOutputWithContext(ctx context.Context) ApplicationSslConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationStateOutput)
}

type ApplicationSslConfigurationStateArrayInput interface {
	pulumi.Input

	ToApplicationSslConfigurationStateArrayOutput() ApplicationSslConfigurationStateArrayOutput
	ToApplicationSslConfigurationStateArrayOutputWithContext(context.Context) ApplicationSslConfigurationStateArrayOutput
}

type ApplicationSslConfigurationStateArray []ApplicationSslConfigurationStateInput

func (ApplicationSslConfigurationStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfigurationState)(nil)).Elem()
}

func (i ApplicationSslConfigurationStateArray) ToApplicationSslConfigurationStateArrayOutput() ApplicationSslConfigurationStateArrayOutput {
	return i.ToApplicationSslConfigurationStateArrayOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationStateArray) ToApplicationSslConfigurationStateArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationStateArrayOutput)
}

type ApplicationSslConfigurationStateOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfigurationState)(nil)).Elem()
}

func (o ApplicationSslConfigurationStateOutput) ToApplicationSslConfigurationStateOutput() ApplicationSslConfigurationStateOutput {
	return o
}

func (o ApplicationSslConfigurationStateOutput) ToApplicationSslConfigurationStateOutputWithContext(ctx context.Context) ApplicationSslConfigurationStateOutput {
	return o
}

// The contents of the certificate's domain.crt file.
func (o ApplicationSslConfigurationStateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationState) string { return v.Certificate }).(pulumi.StringOutput)
}

// Can be used to specify an intermediate certificate authority key or client authentication.
func (o ApplicationSslConfigurationStateOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationState) *string { return v.Chain }).(pulumi.StringPtrOutput)
}

// The private key; the contents of the certificate's domain.key file.
func (o ApplicationSslConfigurationStateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSslConfigurationState) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type ApplicationSslConfigurationStateArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSslConfigurationState)(nil)).Elem()
}

func (o ApplicationSslConfigurationStateArrayOutput) ToApplicationSslConfigurationStateArrayOutput() ApplicationSslConfigurationStateArrayOutput {
	return o
}

func (o ApplicationSslConfigurationStateArrayOutput) ToApplicationSslConfigurationStateArrayOutputWithContext(ctx context.Context) ApplicationSslConfigurationStateArrayOutput {
	return o
}

func (o ApplicationSslConfigurationStateArrayOutput) Index(i pulumi.IntInput) ApplicationSslConfigurationStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSslConfigurationState {
		return vs[0].([]ApplicationSslConfigurationState)[vs[1].(int)]
	}).(ApplicationSslConfigurationStateOutput)
}

type CustomLayerEbsVolume struct {
	// Encrypt the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type CustomLayerEbsVolumeInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeOutput() CustomLayerEbsVolumeOutput
	ToCustomLayerEbsVolumeOutputWithContext(context.Context) CustomLayerEbsVolumeOutput
}

type CustomLayerEbsVolumeArgs struct {
	// Encrypt the volume.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolume)(nil)).Elem()
}

func (i CustomLayerEbsVolumeArgs) ToCustomLayerEbsVolumeOutput() CustomLayerEbsVolumeOutput {
	return i.ToCustomLayerEbsVolumeOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeArgs) ToCustomLayerEbsVolumeOutputWithContext(ctx context.Context) CustomLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeOutput)
}

type CustomLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeArrayOutput() CustomLayerEbsVolumeArrayOutput
	ToCustomLayerEbsVolumeArrayOutputWithContext(context.Context) CustomLayerEbsVolumeArrayOutput
}

type CustomLayerEbsVolumeArray []CustomLayerEbsVolumeInput

func (CustomLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolume)(nil)).Elem()
}

func (i CustomLayerEbsVolumeArray) ToCustomLayerEbsVolumeArrayOutput() CustomLayerEbsVolumeArrayOutput {
	return i.ToCustomLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeArray) ToCustomLayerEbsVolumeArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeArrayOutput)
}

type CustomLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolume)(nil)).Elem()
}

func (o CustomLayerEbsVolumeOutput) ToCustomLayerEbsVolumeOutput() CustomLayerEbsVolumeOutput {
	return o
}

func (o CustomLayerEbsVolumeOutput) ToCustomLayerEbsVolumeOutputWithContext(ctx context.Context) CustomLayerEbsVolumeOutput {
	return o
}

// Encrypt the volume.
func (o CustomLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o CustomLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o CustomLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o CustomLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o CustomLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o CustomLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o CustomLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolume)(nil)).Elem()
}

func (o CustomLayerEbsVolumeArrayOutput) ToCustomLayerEbsVolumeArrayOutput() CustomLayerEbsVolumeArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeArrayOutput) ToCustomLayerEbsVolumeArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) CustomLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomLayerEbsVolume {
		return vs[0].([]CustomLayerEbsVolume)[vs[1].(int)]
	}).(CustomLayerEbsVolumeOutput)
}

type CustomLayerEbsVolumeArgs struct {
	// Encrypt the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type CustomLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeArgsOutput() CustomLayerEbsVolumeArgsOutput
	ToCustomLayerEbsVolumeArgsOutputWithContext(context.Context) CustomLayerEbsVolumeArgsOutput
}

type CustomLayerEbsVolumeArgsArgs struct {
	// Encrypt the volume.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolumeArgs)(nil)).Elem()
}

func (i CustomLayerEbsVolumeArgsArgs) ToCustomLayerEbsVolumeArgsOutput() CustomLayerEbsVolumeArgsOutput {
	return i.ToCustomLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeArgsArgs) ToCustomLayerEbsVolumeArgsOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeArgsOutput)
}

type CustomLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeArgsArrayOutput() CustomLayerEbsVolumeArgsArrayOutput
	ToCustomLayerEbsVolumeArgsArrayOutputWithContext(context.Context) CustomLayerEbsVolumeArgsArrayOutput
}

type CustomLayerEbsVolumeArgsArray []CustomLayerEbsVolumeArgsInput

func (CustomLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolumeArgs)(nil)).Elem()
}

func (i CustomLayerEbsVolumeArgsArray) ToCustomLayerEbsVolumeArgsArrayOutput() CustomLayerEbsVolumeArgsArrayOutput {
	return i.ToCustomLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeArgsArray) ToCustomLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeArgsArrayOutput)
}

type CustomLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolumeArgs)(nil)).Elem()
}

func (o CustomLayerEbsVolumeArgsOutput) ToCustomLayerEbsVolumeArgsOutput() CustomLayerEbsVolumeArgsOutput {
	return o
}

func (o CustomLayerEbsVolumeArgsOutput) ToCustomLayerEbsVolumeArgsOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArgsOutput {
	return o
}

// Encrypt the volume.
func (o CustomLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o CustomLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o CustomLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o CustomLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o CustomLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o CustomLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o CustomLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolumeArgs)(nil)).Elem()
}

func (o CustomLayerEbsVolumeArgsArrayOutput) ToCustomLayerEbsVolumeArgsArrayOutput() CustomLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeArgsArrayOutput) ToCustomLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) CustomLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomLayerEbsVolumeArgs {
		return vs[0].([]CustomLayerEbsVolumeArgs)[vs[1].(int)]
	}).(CustomLayerEbsVolumeArgsOutput)
}

type CustomLayerEbsVolumeState struct {
	// Encrypt the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type CustomLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeStateOutput() CustomLayerEbsVolumeStateOutput
	ToCustomLayerEbsVolumeStateOutputWithContext(context.Context) CustomLayerEbsVolumeStateOutput
}

type CustomLayerEbsVolumeStateArgs struct {
	// Encrypt the volume.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolumeState)(nil)).Elem()
}

func (i CustomLayerEbsVolumeStateArgs) ToCustomLayerEbsVolumeStateOutput() CustomLayerEbsVolumeStateOutput {
	return i.ToCustomLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeStateArgs) ToCustomLayerEbsVolumeStateOutputWithContext(ctx context.Context) CustomLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeStateOutput)
}

type CustomLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToCustomLayerEbsVolumeStateArrayOutput() CustomLayerEbsVolumeStateArrayOutput
	ToCustomLayerEbsVolumeStateArrayOutputWithContext(context.Context) CustomLayerEbsVolumeStateArrayOutput
}

type CustomLayerEbsVolumeStateArray []CustomLayerEbsVolumeStateInput

func (CustomLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolumeState)(nil)).Elem()
}

func (i CustomLayerEbsVolumeStateArray) ToCustomLayerEbsVolumeStateArrayOutput() CustomLayerEbsVolumeStateArrayOutput {
	return i.ToCustomLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeStateArray) ToCustomLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeStateArrayOutput)
}

type CustomLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolumeState)(nil)).Elem()
}

func (o CustomLayerEbsVolumeStateOutput) ToCustomLayerEbsVolumeStateOutput() CustomLayerEbsVolumeStateOutput {
	return o
}

func (o CustomLayerEbsVolumeStateOutput) ToCustomLayerEbsVolumeStateOutputWithContext(ctx context.Context) CustomLayerEbsVolumeStateOutput {
	return o
}

// Encrypt the volume.
func (o CustomLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o CustomLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o CustomLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o CustomLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o CustomLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o CustomLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o CustomLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomLayerEbsVolumeState)(nil)).Elem()
}

func (o CustomLayerEbsVolumeStateArrayOutput) ToCustomLayerEbsVolumeStateArrayOutput() CustomLayerEbsVolumeStateArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeStateArrayOutput) ToCustomLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) CustomLayerEbsVolumeStateArrayOutput {
	return o
}

func (o CustomLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) CustomLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomLayerEbsVolumeState {
		return vs[0].([]CustomLayerEbsVolumeState)[vs[1].(int)]
	}).(CustomLayerEbsVolumeStateOutput)
}

type GangliaLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type GangliaLayerEbsVolumeInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeOutput() GangliaLayerEbsVolumeOutput
	ToGangliaLayerEbsVolumeOutputWithContext(context.Context) GangliaLayerEbsVolumeOutput
}

type GangliaLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GangliaLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolume)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeArgs) ToGangliaLayerEbsVolumeOutput() GangliaLayerEbsVolumeOutput {
	return i.ToGangliaLayerEbsVolumeOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeArgs) ToGangliaLayerEbsVolumeOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeOutput)
}

type GangliaLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeArrayOutput() GangliaLayerEbsVolumeArrayOutput
	ToGangliaLayerEbsVolumeArrayOutputWithContext(context.Context) GangliaLayerEbsVolumeArrayOutput
}

type GangliaLayerEbsVolumeArray []GangliaLayerEbsVolumeInput

func (GangliaLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolume)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeArray) ToGangliaLayerEbsVolumeArrayOutput() GangliaLayerEbsVolumeArrayOutput {
	return i.ToGangliaLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeArray) ToGangliaLayerEbsVolumeArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeArrayOutput)
}

type GangliaLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolume)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeOutput) ToGangliaLayerEbsVolumeOutput() GangliaLayerEbsVolumeOutput {
	return o
}

func (o GangliaLayerEbsVolumeOutput) ToGangliaLayerEbsVolumeOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeOutput {
	return o
}

func (o GangliaLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o GangliaLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o GangliaLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o GangliaLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o GangliaLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o GangliaLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o GangliaLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GangliaLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolume)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeArrayOutput) ToGangliaLayerEbsVolumeArrayOutput() GangliaLayerEbsVolumeArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeArrayOutput) ToGangliaLayerEbsVolumeArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) GangliaLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GangliaLayerEbsVolume {
		return vs[0].([]GangliaLayerEbsVolume)[vs[1].(int)]
	}).(GangliaLayerEbsVolumeOutput)
}

type GangliaLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type GangliaLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeArgsOutput() GangliaLayerEbsVolumeArgsOutput
	ToGangliaLayerEbsVolumeArgsOutputWithContext(context.Context) GangliaLayerEbsVolumeArgsOutput
}

type GangliaLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GangliaLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolumeArgs)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeArgsArgs) ToGangliaLayerEbsVolumeArgsOutput() GangliaLayerEbsVolumeArgsOutput {
	return i.ToGangliaLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeArgsArgs) ToGangliaLayerEbsVolumeArgsOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeArgsOutput)
}

type GangliaLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeArgsArrayOutput() GangliaLayerEbsVolumeArgsArrayOutput
	ToGangliaLayerEbsVolumeArgsArrayOutputWithContext(context.Context) GangliaLayerEbsVolumeArgsArrayOutput
}

type GangliaLayerEbsVolumeArgsArray []GangliaLayerEbsVolumeArgsInput

func (GangliaLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolumeArgs)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeArgsArray) ToGangliaLayerEbsVolumeArgsArrayOutput() GangliaLayerEbsVolumeArgsArrayOutput {
	return i.ToGangliaLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeArgsArray) ToGangliaLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeArgsArrayOutput)
}

type GangliaLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolumeArgs)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeArgsOutput) ToGangliaLayerEbsVolumeArgsOutput() GangliaLayerEbsVolumeArgsOutput {
	return o
}

func (o GangliaLayerEbsVolumeArgsOutput) ToGangliaLayerEbsVolumeArgsOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArgsOutput {
	return o
}

func (o GangliaLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o GangliaLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o GangliaLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o GangliaLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o GangliaLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o GangliaLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o GangliaLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GangliaLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolumeArgs)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeArgsArrayOutput) ToGangliaLayerEbsVolumeArgsArrayOutput() GangliaLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeArgsArrayOutput) ToGangliaLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) GangliaLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GangliaLayerEbsVolumeArgs {
		return vs[0].([]GangliaLayerEbsVolumeArgs)[vs[1].(int)]
	}).(GangliaLayerEbsVolumeArgsOutput)
}

type GangliaLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type GangliaLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeStateOutput() GangliaLayerEbsVolumeStateOutput
	ToGangliaLayerEbsVolumeStateOutputWithContext(context.Context) GangliaLayerEbsVolumeStateOutput
}

type GangliaLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GangliaLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolumeState)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeStateArgs) ToGangliaLayerEbsVolumeStateOutput() GangliaLayerEbsVolumeStateOutput {
	return i.ToGangliaLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeStateArgs) ToGangliaLayerEbsVolumeStateOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeStateOutput)
}

type GangliaLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToGangliaLayerEbsVolumeStateArrayOutput() GangliaLayerEbsVolumeStateArrayOutput
	ToGangliaLayerEbsVolumeStateArrayOutputWithContext(context.Context) GangliaLayerEbsVolumeStateArrayOutput
}

type GangliaLayerEbsVolumeStateArray []GangliaLayerEbsVolumeStateInput

func (GangliaLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolumeState)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeStateArray) ToGangliaLayerEbsVolumeStateArrayOutput() GangliaLayerEbsVolumeStateArrayOutput {
	return i.ToGangliaLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeStateArray) ToGangliaLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeStateArrayOutput)
}

type GangliaLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolumeState)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeStateOutput) ToGangliaLayerEbsVolumeStateOutput() GangliaLayerEbsVolumeStateOutput {
	return o
}

func (o GangliaLayerEbsVolumeStateOutput) ToGangliaLayerEbsVolumeStateOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeStateOutput {
	return o
}

func (o GangliaLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o GangliaLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o GangliaLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o GangliaLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o GangliaLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o GangliaLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o GangliaLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GangliaLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GangliaLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GangliaLayerEbsVolumeState)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeStateArrayOutput) ToGangliaLayerEbsVolumeStateArrayOutput() GangliaLayerEbsVolumeStateArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeStateArrayOutput) ToGangliaLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeStateArrayOutput {
	return o
}

func (o GangliaLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) GangliaLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GangliaLayerEbsVolumeState {
		return vs[0].([]GangliaLayerEbsVolumeState)[vs[1].(int)]
	}).(GangliaLayerEbsVolumeStateOutput)
}

type HaproxyLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type HaproxyLayerEbsVolumeInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeOutput() HaproxyLayerEbsVolumeOutput
	ToHaproxyLayerEbsVolumeOutputWithContext(context.Context) HaproxyLayerEbsVolumeOutput
}

type HaproxyLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HaproxyLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolume)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeArgs) ToHaproxyLayerEbsVolumeOutput() HaproxyLayerEbsVolumeOutput {
	return i.ToHaproxyLayerEbsVolumeOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeArgs) ToHaproxyLayerEbsVolumeOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeOutput)
}

type HaproxyLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeArrayOutput() HaproxyLayerEbsVolumeArrayOutput
	ToHaproxyLayerEbsVolumeArrayOutputWithContext(context.Context) HaproxyLayerEbsVolumeArrayOutput
}

type HaproxyLayerEbsVolumeArray []HaproxyLayerEbsVolumeInput

func (HaproxyLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolume)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeArray) ToHaproxyLayerEbsVolumeArrayOutput() HaproxyLayerEbsVolumeArrayOutput {
	return i.ToHaproxyLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeArray) ToHaproxyLayerEbsVolumeArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeArrayOutput)
}

type HaproxyLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolume)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeOutput) ToHaproxyLayerEbsVolumeOutput() HaproxyLayerEbsVolumeOutput {
	return o
}

func (o HaproxyLayerEbsVolumeOutput) ToHaproxyLayerEbsVolumeOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeOutput {
	return o
}

func (o HaproxyLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o HaproxyLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o HaproxyLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o HaproxyLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o HaproxyLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o HaproxyLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o HaproxyLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HaproxyLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolume)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeArrayOutput) ToHaproxyLayerEbsVolumeArrayOutput() HaproxyLayerEbsVolumeArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArrayOutput) ToHaproxyLayerEbsVolumeArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) HaproxyLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HaproxyLayerEbsVolume {
		return vs[0].([]HaproxyLayerEbsVolume)[vs[1].(int)]
	}).(HaproxyLayerEbsVolumeOutput)
}

type HaproxyLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type HaproxyLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeArgsOutput() HaproxyLayerEbsVolumeArgsOutput
	ToHaproxyLayerEbsVolumeArgsOutputWithContext(context.Context) HaproxyLayerEbsVolumeArgsOutput
}

type HaproxyLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HaproxyLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolumeArgs)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeArgsArgs) ToHaproxyLayerEbsVolumeArgsOutput() HaproxyLayerEbsVolumeArgsOutput {
	return i.ToHaproxyLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeArgsArgs) ToHaproxyLayerEbsVolumeArgsOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeArgsOutput)
}

type HaproxyLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeArgsArrayOutput() HaproxyLayerEbsVolumeArgsArrayOutput
	ToHaproxyLayerEbsVolumeArgsArrayOutputWithContext(context.Context) HaproxyLayerEbsVolumeArgsArrayOutput
}

type HaproxyLayerEbsVolumeArgsArray []HaproxyLayerEbsVolumeArgsInput

func (HaproxyLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolumeArgs)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeArgsArray) ToHaproxyLayerEbsVolumeArgsArrayOutput() HaproxyLayerEbsVolumeArgsArrayOutput {
	return i.ToHaproxyLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeArgsArray) ToHaproxyLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeArgsArrayOutput)
}

type HaproxyLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolumeArgs)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeArgsOutput) ToHaproxyLayerEbsVolumeArgsOutput() HaproxyLayerEbsVolumeArgsOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArgsOutput) ToHaproxyLayerEbsVolumeArgsOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArgsOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o HaproxyLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o HaproxyLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o HaproxyLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o HaproxyLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o HaproxyLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o HaproxyLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HaproxyLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolumeArgs)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeArgsArrayOutput) ToHaproxyLayerEbsVolumeArgsArrayOutput() HaproxyLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArgsArrayOutput) ToHaproxyLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) HaproxyLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HaproxyLayerEbsVolumeArgs {
		return vs[0].([]HaproxyLayerEbsVolumeArgs)[vs[1].(int)]
	}).(HaproxyLayerEbsVolumeArgsOutput)
}

type HaproxyLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type HaproxyLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeStateOutput() HaproxyLayerEbsVolumeStateOutput
	ToHaproxyLayerEbsVolumeStateOutputWithContext(context.Context) HaproxyLayerEbsVolumeStateOutput
}

type HaproxyLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HaproxyLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolumeState)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeStateArgs) ToHaproxyLayerEbsVolumeStateOutput() HaproxyLayerEbsVolumeStateOutput {
	return i.ToHaproxyLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeStateArgs) ToHaproxyLayerEbsVolumeStateOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeStateOutput)
}

type HaproxyLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToHaproxyLayerEbsVolumeStateArrayOutput() HaproxyLayerEbsVolumeStateArrayOutput
	ToHaproxyLayerEbsVolumeStateArrayOutputWithContext(context.Context) HaproxyLayerEbsVolumeStateArrayOutput
}

type HaproxyLayerEbsVolumeStateArray []HaproxyLayerEbsVolumeStateInput

func (HaproxyLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolumeState)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeStateArray) ToHaproxyLayerEbsVolumeStateArrayOutput() HaproxyLayerEbsVolumeStateArrayOutput {
	return i.ToHaproxyLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeStateArray) ToHaproxyLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeStateArrayOutput)
}

type HaproxyLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolumeState)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeStateOutput) ToHaproxyLayerEbsVolumeStateOutput() HaproxyLayerEbsVolumeStateOutput {
	return o
}

func (o HaproxyLayerEbsVolumeStateOutput) ToHaproxyLayerEbsVolumeStateOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeStateOutput {
	return o
}

func (o HaproxyLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o HaproxyLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o HaproxyLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o HaproxyLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o HaproxyLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o HaproxyLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o HaproxyLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaproxyLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HaproxyLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaproxyLayerEbsVolumeState)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeStateArrayOutput) ToHaproxyLayerEbsVolumeStateArrayOutput() HaproxyLayerEbsVolumeStateArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeStateArrayOutput) ToHaproxyLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeStateArrayOutput {
	return o
}

func (o HaproxyLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) HaproxyLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HaproxyLayerEbsVolumeState {
		return vs[0].([]HaproxyLayerEbsVolumeState)[vs[1].(int)]
	}).(HaproxyLayerEbsVolumeStateOutput)
}

type InstanceEbsBlockDevice struct {
	DeleteOnTermination *bool  `pulumi:"deleteOnTermination"`
	DeviceName          string `pulumi:"deviceName"`
	Iops                int    `pulumi:"iops"`
	SnapshotId          string `pulumi:"snapshotId"`
	VolumeSize          int    `pulumi:"volumeSize"`
	VolumeType          string `pulumi:"volumeType"`
}

type InstanceEbsBlockDeviceInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceOutput() InstanceEbsBlockDeviceOutput
	ToInstanceEbsBlockDeviceOutputWithContext(context.Context) InstanceEbsBlockDeviceOutput
}

type InstanceEbsBlockDeviceArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	DeviceName          pulumi.StringInput  `pulumi:"deviceName"`
	Iops                pulumi.IntInput     `pulumi:"iops"`
	SnapshotId          pulumi.StringInput  `pulumi:"snapshotId"`
	VolumeSize          pulumi.IntInput     `pulumi:"volumeSize"`
	VolumeType          pulumi.StringInput  `pulumi:"volumeType"`
}

func (InstanceEbsBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDevice)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceArgs) ToInstanceEbsBlockDeviceOutput() InstanceEbsBlockDeviceOutput {
	return i.ToInstanceEbsBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceArgs) ToInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceOutput)
}

type InstanceEbsBlockDeviceArrayInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceArrayOutput() InstanceEbsBlockDeviceArrayOutput
	ToInstanceEbsBlockDeviceArrayOutputWithContext(context.Context) InstanceEbsBlockDeviceArrayOutput
}

type InstanceEbsBlockDeviceArray []InstanceEbsBlockDeviceInput

func (InstanceEbsBlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDevice)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceArray) ToInstanceEbsBlockDeviceArrayOutput() InstanceEbsBlockDeviceArrayOutput {
	return i.ToInstanceEbsBlockDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceArray) ToInstanceEbsBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceArrayOutput)
}

type InstanceEbsBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDevice)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceOutput) ToInstanceEbsBlockDeviceOutput() InstanceEbsBlockDeviceOutput {
	return o
}

func (o InstanceEbsBlockDeviceOutput) ToInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceOutput {
	return o
}

func (o InstanceEbsBlockDeviceOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceEbsBlockDeviceOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEbsBlockDeviceOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) int { return v.Iops }).(pulumi.IntOutput)
}

func (o InstanceEbsBlockDeviceOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) string { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o InstanceEbsBlockDeviceOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) int { return v.VolumeSize }).(pulumi.IntOutput)
}

func (o InstanceEbsBlockDeviceOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEbsBlockDevice) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceEbsBlockDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDevice)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceArrayOutput) ToInstanceEbsBlockDeviceArrayOutput() InstanceEbsBlockDeviceArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceArrayOutput) ToInstanceEbsBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceArrayOutput) Index(i pulumi.IntInput) InstanceEbsBlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEbsBlockDevice {
		return vs[0].([]InstanceEbsBlockDevice)[vs[1].(int)]
	}).(InstanceEbsBlockDeviceOutput)
}

type InstanceEbsBlockDeviceArgs struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	DeviceName          string  `pulumi:"deviceName"`
	Iops                *int    `pulumi:"iops"`
	SnapshotId          *string `pulumi:"snapshotId"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceEbsBlockDeviceArgsInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceArgsOutput() InstanceEbsBlockDeviceArgsOutput
	ToInstanceEbsBlockDeviceArgsOutputWithContext(context.Context) InstanceEbsBlockDeviceArgsOutput
}

type InstanceEbsBlockDeviceArgsArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput   `pulumi:"deleteOnTermination"`
	DeviceName          pulumi.StringInput    `pulumi:"deviceName"`
	Iops                pulumi.IntPtrInput    `pulumi:"iops"`
	SnapshotId          pulumi.StringPtrInput `pulumi:"snapshotId"`
	VolumeSize          pulumi.IntPtrInput    `pulumi:"volumeSize"`
	VolumeType          pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (InstanceEbsBlockDeviceArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceArgsArgs) ToInstanceEbsBlockDeviceArgsOutput() InstanceEbsBlockDeviceArgsOutput {
	return i.ToInstanceEbsBlockDeviceArgsOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceArgsArgs) ToInstanceEbsBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceArgsOutput)
}

type InstanceEbsBlockDeviceArgsArrayInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceArgsArrayOutput() InstanceEbsBlockDeviceArgsArrayOutput
	ToInstanceEbsBlockDeviceArgsArrayOutputWithContext(context.Context) InstanceEbsBlockDeviceArgsArrayOutput
}

type InstanceEbsBlockDeviceArgsArray []InstanceEbsBlockDeviceArgsInput

func (InstanceEbsBlockDeviceArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceArgsArray) ToInstanceEbsBlockDeviceArgsArrayOutput() InstanceEbsBlockDeviceArgsArrayOutput {
	return i.ToInstanceEbsBlockDeviceArgsArrayOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceArgsArray) ToInstanceEbsBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceArgsArrayOutput)
}

type InstanceEbsBlockDeviceArgsOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceArgsOutput) ToInstanceEbsBlockDeviceArgsOutput() InstanceEbsBlockDeviceArgsOutput {
	return o
}

func (o InstanceEbsBlockDeviceArgsOutput) ToInstanceEbsBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArgsOutput {
	return o
}

func (o InstanceEbsBlockDeviceArgsOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceEbsBlockDeviceArgsOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEbsBlockDeviceArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o InstanceEbsBlockDeviceArgsOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o InstanceEbsBlockDeviceArgsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

func (o InstanceEbsBlockDeviceArgsOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceArgs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceEbsBlockDeviceArgsArrayOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceArgsArrayOutput) ToInstanceEbsBlockDeviceArgsArrayOutput() InstanceEbsBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceArgsArrayOutput) ToInstanceEbsBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceArgsArrayOutput) Index(i pulumi.IntInput) InstanceEbsBlockDeviceArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEbsBlockDeviceArgs {
		return vs[0].([]InstanceEbsBlockDeviceArgs)[vs[1].(int)]
	}).(InstanceEbsBlockDeviceArgsOutput)
}

type InstanceEbsBlockDeviceState struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	DeviceName          string  `pulumi:"deviceName"`
	Iops                *int    `pulumi:"iops"`
	SnapshotId          *string `pulumi:"snapshotId"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceEbsBlockDeviceStateInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceStateOutput() InstanceEbsBlockDeviceStateOutput
	ToInstanceEbsBlockDeviceStateOutputWithContext(context.Context) InstanceEbsBlockDeviceStateOutput
}

type InstanceEbsBlockDeviceStateArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput   `pulumi:"deleteOnTermination"`
	DeviceName          pulumi.StringInput    `pulumi:"deviceName"`
	Iops                pulumi.IntPtrInput    `pulumi:"iops"`
	SnapshotId          pulumi.StringPtrInput `pulumi:"snapshotId"`
	VolumeSize          pulumi.IntPtrInput    `pulumi:"volumeSize"`
	VolumeType          pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (InstanceEbsBlockDeviceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDeviceState)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceStateArgs) ToInstanceEbsBlockDeviceStateOutput() InstanceEbsBlockDeviceStateOutput {
	return i.ToInstanceEbsBlockDeviceStateOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceStateArgs) ToInstanceEbsBlockDeviceStateOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceStateOutput)
}

type InstanceEbsBlockDeviceStateArrayInput interface {
	pulumi.Input

	ToInstanceEbsBlockDeviceStateArrayOutput() InstanceEbsBlockDeviceStateArrayOutput
	ToInstanceEbsBlockDeviceStateArrayOutputWithContext(context.Context) InstanceEbsBlockDeviceStateArrayOutput
}

type InstanceEbsBlockDeviceStateArray []InstanceEbsBlockDeviceStateInput

func (InstanceEbsBlockDeviceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDeviceState)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceStateArray) ToInstanceEbsBlockDeviceStateArrayOutput() InstanceEbsBlockDeviceStateArrayOutput {
	return i.ToInstanceEbsBlockDeviceStateArrayOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceStateArray) ToInstanceEbsBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceStateArrayOutput)
}

type InstanceEbsBlockDeviceStateOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDeviceState)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceStateOutput) ToInstanceEbsBlockDeviceStateOutput() InstanceEbsBlockDeviceStateOutput {
	return o
}

func (o InstanceEbsBlockDeviceStateOutput) ToInstanceEbsBlockDeviceStateOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceStateOutput {
	return o
}

func (o InstanceEbsBlockDeviceStateOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceEbsBlockDeviceStateOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEbsBlockDeviceStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o InstanceEbsBlockDeviceStateOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o InstanceEbsBlockDeviceStateOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

func (o InstanceEbsBlockDeviceStateOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEbsBlockDeviceState) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceEbsBlockDeviceStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEbsBlockDeviceState)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceStateArrayOutput) ToInstanceEbsBlockDeviceStateArrayOutput() InstanceEbsBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceStateArrayOutput) ToInstanceEbsBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceEbsBlockDeviceStateArrayOutput) Index(i pulumi.IntInput) InstanceEbsBlockDeviceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEbsBlockDeviceState {
		return vs[0].([]InstanceEbsBlockDeviceState)[vs[1].(int)]
	}).(InstanceEbsBlockDeviceStateOutput)
}

type InstanceEphemeralBlockDevice struct {
	DeviceName  string `pulumi:"deviceName"`
	VirtualName string `pulumi:"virtualName"`
}

type InstanceEphemeralBlockDeviceInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceOutput() InstanceEphemeralBlockDeviceOutput
	ToInstanceEphemeralBlockDeviceOutputWithContext(context.Context) InstanceEphemeralBlockDeviceOutput
}

type InstanceEphemeralBlockDeviceArgs struct {
	DeviceName  pulumi.StringInput `pulumi:"deviceName"`
	VirtualName pulumi.StringInput `pulumi:"virtualName"`
}

func (InstanceEphemeralBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceArgs) ToInstanceEphemeralBlockDeviceOutput() InstanceEphemeralBlockDeviceOutput {
	return i.ToInstanceEphemeralBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceArgs) ToInstanceEphemeralBlockDeviceOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceOutput)
}

type InstanceEphemeralBlockDeviceArrayInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceArrayOutput() InstanceEphemeralBlockDeviceArrayOutput
	ToInstanceEphemeralBlockDeviceArrayOutputWithContext(context.Context) InstanceEphemeralBlockDeviceArrayOutput
}

type InstanceEphemeralBlockDeviceArray []InstanceEphemeralBlockDeviceInput

func (InstanceEphemeralBlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceArray) ToInstanceEphemeralBlockDeviceArrayOutput() InstanceEphemeralBlockDeviceArrayOutput {
	return i.ToInstanceEphemeralBlockDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceArray) ToInstanceEphemeralBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceArrayOutput)
}

type InstanceEphemeralBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceOutput) ToInstanceEphemeralBlockDeviceOutput() InstanceEphemeralBlockDeviceOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceOutput) ToInstanceEphemeralBlockDeviceOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDevice) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEphemeralBlockDeviceOutput) VirtualName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDevice) string { return v.VirtualName }).(pulumi.StringOutput)
}

type InstanceEphemeralBlockDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceArrayOutput) ToInstanceEphemeralBlockDeviceArrayOutput() InstanceEphemeralBlockDeviceArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArrayOutput) ToInstanceEphemeralBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArrayOutput) Index(i pulumi.IntInput) InstanceEphemeralBlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEphemeralBlockDevice {
		return vs[0].([]InstanceEphemeralBlockDevice)[vs[1].(int)]
	}).(InstanceEphemeralBlockDeviceOutput)
}

type InstanceEphemeralBlockDeviceArgs struct {
	DeviceName  string `pulumi:"deviceName"`
	VirtualName string `pulumi:"virtualName"`
}

type InstanceEphemeralBlockDeviceArgsInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceArgsOutput() InstanceEphemeralBlockDeviceArgsOutput
	ToInstanceEphemeralBlockDeviceArgsOutputWithContext(context.Context) InstanceEphemeralBlockDeviceArgsOutput
}

type InstanceEphemeralBlockDeviceArgsArgs struct {
	DeviceName  pulumi.StringInput `pulumi:"deviceName"`
	VirtualName pulumi.StringInput `pulumi:"virtualName"`
}

func (InstanceEphemeralBlockDeviceArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceArgsArgs) ToInstanceEphemeralBlockDeviceArgsOutput() InstanceEphemeralBlockDeviceArgsOutput {
	return i.ToInstanceEphemeralBlockDeviceArgsOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceArgsArgs) ToInstanceEphemeralBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceArgsOutput)
}

type InstanceEphemeralBlockDeviceArgsArrayInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceArgsArrayOutput() InstanceEphemeralBlockDeviceArgsArrayOutput
	ToInstanceEphemeralBlockDeviceArgsArrayOutputWithContext(context.Context) InstanceEphemeralBlockDeviceArgsArrayOutput
}

type InstanceEphemeralBlockDeviceArgsArray []InstanceEphemeralBlockDeviceArgsInput

func (InstanceEphemeralBlockDeviceArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceArgsArray) ToInstanceEphemeralBlockDeviceArgsArrayOutput() InstanceEphemeralBlockDeviceArgsArrayOutput {
	return i.ToInstanceEphemeralBlockDeviceArgsArrayOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceArgsArray) ToInstanceEphemeralBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceArgsArrayOutput)
}

type InstanceEphemeralBlockDeviceArgsOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceArgsOutput) ToInstanceEphemeralBlockDeviceArgsOutput() InstanceEphemeralBlockDeviceArgsOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArgsOutput) ToInstanceEphemeralBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArgsOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArgsOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDeviceArgs) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEphemeralBlockDeviceArgsOutput) VirtualName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDeviceArgs) string { return v.VirtualName }).(pulumi.StringOutput)
}

type InstanceEphemeralBlockDeviceArgsArrayOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceArgsArrayOutput) ToInstanceEphemeralBlockDeviceArgsArrayOutput() InstanceEphemeralBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArgsArrayOutput) ToInstanceEphemeralBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceArgsArrayOutput) Index(i pulumi.IntInput) InstanceEphemeralBlockDeviceArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEphemeralBlockDeviceArgs {
		return vs[0].([]InstanceEphemeralBlockDeviceArgs)[vs[1].(int)]
	}).(InstanceEphemeralBlockDeviceArgsOutput)
}

type InstanceEphemeralBlockDeviceState struct {
	DeviceName  string `pulumi:"deviceName"`
	VirtualName string `pulumi:"virtualName"`
}

type InstanceEphemeralBlockDeviceStateInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceStateOutput() InstanceEphemeralBlockDeviceStateOutput
	ToInstanceEphemeralBlockDeviceStateOutputWithContext(context.Context) InstanceEphemeralBlockDeviceStateOutput
}

type InstanceEphemeralBlockDeviceStateArgs struct {
	DeviceName  pulumi.StringInput `pulumi:"deviceName"`
	VirtualName pulumi.StringInput `pulumi:"virtualName"`
}

func (InstanceEphemeralBlockDeviceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDeviceState)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceStateArgs) ToInstanceEphemeralBlockDeviceStateOutput() InstanceEphemeralBlockDeviceStateOutput {
	return i.ToInstanceEphemeralBlockDeviceStateOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceStateArgs) ToInstanceEphemeralBlockDeviceStateOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceStateOutput)
}

type InstanceEphemeralBlockDeviceStateArrayInput interface {
	pulumi.Input

	ToInstanceEphemeralBlockDeviceStateArrayOutput() InstanceEphemeralBlockDeviceStateArrayOutput
	ToInstanceEphemeralBlockDeviceStateArrayOutputWithContext(context.Context) InstanceEphemeralBlockDeviceStateArrayOutput
}

type InstanceEphemeralBlockDeviceStateArray []InstanceEphemeralBlockDeviceStateInput

func (InstanceEphemeralBlockDeviceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDeviceState)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceStateArray) ToInstanceEphemeralBlockDeviceStateArrayOutput() InstanceEphemeralBlockDeviceStateArrayOutput {
	return i.ToInstanceEphemeralBlockDeviceStateArrayOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceStateArray) ToInstanceEphemeralBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceStateArrayOutput)
}

type InstanceEphemeralBlockDeviceStateOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDeviceState)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceStateOutput) ToInstanceEphemeralBlockDeviceStateOutput() InstanceEphemeralBlockDeviceStateOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceStateOutput) ToInstanceEphemeralBlockDeviceStateOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceStateOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceStateOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDeviceState) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o InstanceEphemeralBlockDeviceStateOutput) VirtualName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceEphemeralBlockDeviceState) string { return v.VirtualName }).(pulumi.StringOutput)
}

type InstanceEphemeralBlockDeviceStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEphemeralBlockDeviceState)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceStateArrayOutput) ToInstanceEphemeralBlockDeviceStateArrayOutput() InstanceEphemeralBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceStateArrayOutput) ToInstanceEphemeralBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceStateArrayOutput) Index(i pulumi.IntInput) InstanceEphemeralBlockDeviceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEphemeralBlockDeviceState {
		return vs[0].([]InstanceEphemeralBlockDeviceState)[vs[1].(int)]
	}).(InstanceEphemeralBlockDeviceStateOutput)
}

type InstanceRootBlockDevice struct {
	DeleteOnTermination *bool  `pulumi:"deleteOnTermination"`
	Iops                int    `pulumi:"iops"`
	VolumeSize          int    `pulumi:"volumeSize"`
	VolumeType          string `pulumi:"volumeType"`
}

type InstanceRootBlockDeviceInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceOutput() InstanceRootBlockDeviceOutput
	ToInstanceRootBlockDeviceOutputWithContext(context.Context) InstanceRootBlockDeviceOutput
}

type InstanceRootBlockDeviceArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	Iops                pulumi.IntInput     `pulumi:"iops"`
	VolumeSize          pulumi.IntInput     `pulumi:"volumeSize"`
	VolumeType          pulumi.StringInput  `pulumi:"volumeType"`
}

func (InstanceRootBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDevice)(nil)).Elem()
}

func (i InstanceRootBlockDeviceArgs) ToInstanceRootBlockDeviceOutput() InstanceRootBlockDeviceOutput {
	return i.ToInstanceRootBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceArgs) ToInstanceRootBlockDeviceOutputWithContext(ctx context.Context) InstanceRootBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceOutput)
}

type InstanceRootBlockDeviceArrayInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceArrayOutput() InstanceRootBlockDeviceArrayOutput
	ToInstanceRootBlockDeviceArrayOutputWithContext(context.Context) InstanceRootBlockDeviceArrayOutput
}

type InstanceRootBlockDeviceArray []InstanceRootBlockDeviceInput

func (InstanceRootBlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDevice)(nil)).Elem()
}

func (i InstanceRootBlockDeviceArray) ToInstanceRootBlockDeviceArrayOutput() InstanceRootBlockDeviceArrayOutput {
	return i.ToInstanceRootBlockDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceArray) ToInstanceRootBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceArrayOutput)
}

type InstanceRootBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDevice)(nil)).Elem()
}

func (o InstanceRootBlockDeviceOutput) ToInstanceRootBlockDeviceOutput() InstanceRootBlockDeviceOutput {
	return o
}

func (o InstanceRootBlockDeviceOutput) ToInstanceRootBlockDeviceOutputWithContext(ctx context.Context) InstanceRootBlockDeviceOutput {
	return o
}

func (o InstanceRootBlockDeviceOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDevice) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceRootBlockDeviceOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceRootBlockDevice) int { return v.Iops }).(pulumi.IntOutput)
}

func (o InstanceRootBlockDeviceOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceRootBlockDevice) int { return v.VolumeSize }).(pulumi.IntOutput)
}

func (o InstanceRootBlockDeviceOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceRootBlockDevice) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceRootBlockDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDevice)(nil)).Elem()
}

func (o InstanceRootBlockDeviceArrayOutput) ToInstanceRootBlockDeviceArrayOutput() InstanceRootBlockDeviceArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceArrayOutput) ToInstanceRootBlockDeviceArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceArrayOutput) Index(i pulumi.IntInput) InstanceRootBlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceRootBlockDevice {
		return vs[0].([]InstanceRootBlockDevice)[vs[1].(int)]
	}).(InstanceRootBlockDeviceOutput)
}

type InstanceRootBlockDeviceArgs struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	Iops                *int    `pulumi:"iops"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceRootBlockDeviceArgsInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceArgsOutput() InstanceRootBlockDeviceArgsOutput
	ToInstanceRootBlockDeviceArgsOutputWithContext(context.Context) InstanceRootBlockDeviceArgsOutput
}

type InstanceRootBlockDeviceArgsArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput   `pulumi:"deleteOnTermination"`
	Iops                pulumi.IntPtrInput    `pulumi:"iops"`
	VolumeSize          pulumi.IntPtrInput    `pulumi:"volumeSize"`
	VolumeType          pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (InstanceRootBlockDeviceArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceRootBlockDeviceArgsArgs) ToInstanceRootBlockDeviceArgsOutput() InstanceRootBlockDeviceArgsOutput {
	return i.ToInstanceRootBlockDeviceArgsOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceArgsArgs) ToInstanceRootBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceArgsOutput)
}

type InstanceRootBlockDeviceArgsArrayInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceArgsArrayOutput() InstanceRootBlockDeviceArgsArrayOutput
	ToInstanceRootBlockDeviceArgsArrayOutputWithContext(context.Context) InstanceRootBlockDeviceArgsArrayOutput
}

type InstanceRootBlockDeviceArgsArray []InstanceRootBlockDeviceArgsInput

func (InstanceRootBlockDeviceArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDeviceArgs)(nil)).Elem()
}

func (i InstanceRootBlockDeviceArgsArray) ToInstanceRootBlockDeviceArgsArrayOutput() InstanceRootBlockDeviceArgsArrayOutput {
	return i.ToInstanceRootBlockDeviceArgsArrayOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceArgsArray) ToInstanceRootBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceArgsArrayOutput)
}

type InstanceRootBlockDeviceArgsOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceRootBlockDeviceArgsOutput) ToInstanceRootBlockDeviceArgsOutput() InstanceRootBlockDeviceArgsOutput {
	return o
}

func (o InstanceRootBlockDeviceArgsOutput) ToInstanceRootBlockDeviceArgsOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArgsOutput {
	return o
}

func (o InstanceRootBlockDeviceArgsOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceArgs) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceRootBlockDeviceArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o InstanceRootBlockDeviceArgsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceArgs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

func (o InstanceRootBlockDeviceArgsOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceArgs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceRootBlockDeviceArgsArrayOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDeviceArgs)(nil)).Elem()
}

func (o InstanceRootBlockDeviceArgsArrayOutput) ToInstanceRootBlockDeviceArgsArrayOutput() InstanceRootBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceArgsArrayOutput) ToInstanceRootBlockDeviceArgsArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceArgsArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceArgsArrayOutput) Index(i pulumi.IntInput) InstanceRootBlockDeviceArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceRootBlockDeviceArgs {
		return vs[0].([]InstanceRootBlockDeviceArgs)[vs[1].(int)]
	}).(InstanceRootBlockDeviceArgsOutput)
}

type InstanceRootBlockDeviceState struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	Iops                *int    `pulumi:"iops"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceRootBlockDeviceStateInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceStateOutput() InstanceRootBlockDeviceStateOutput
	ToInstanceRootBlockDeviceStateOutputWithContext(context.Context) InstanceRootBlockDeviceStateOutput
}

type InstanceRootBlockDeviceStateArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput   `pulumi:"deleteOnTermination"`
	Iops                pulumi.IntPtrInput    `pulumi:"iops"`
	VolumeSize          pulumi.IntPtrInput    `pulumi:"volumeSize"`
	VolumeType          pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (InstanceRootBlockDeviceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDeviceState)(nil)).Elem()
}

func (i InstanceRootBlockDeviceStateArgs) ToInstanceRootBlockDeviceStateOutput() InstanceRootBlockDeviceStateOutput {
	return i.ToInstanceRootBlockDeviceStateOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceStateArgs) ToInstanceRootBlockDeviceStateOutputWithContext(ctx context.Context) InstanceRootBlockDeviceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceStateOutput)
}

type InstanceRootBlockDeviceStateArrayInput interface {
	pulumi.Input

	ToInstanceRootBlockDeviceStateArrayOutput() InstanceRootBlockDeviceStateArrayOutput
	ToInstanceRootBlockDeviceStateArrayOutputWithContext(context.Context) InstanceRootBlockDeviceStateArrayOutput
}

type InstanceRootBlockDeviceStateArray []InstanceRootBlockDeviceStateInput

func (InstanceRootBlockDeviceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDeviceState)(nil)).Elem()
}

func (i InstanceRootBlockDeviceStateArray) ToInstanceRootBlockDeviceStateArrayOutput() InstanceRootBlockDeviceStateArrayOutput {
	return i.ToInstanceRootBlockDeviceStateArrayOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceStateArray) ToInstanceRootBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceStateArrayOutput)
}

type InstanceRootBlockDeviceStateOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDeviceState)(nil)).Elem()
}

func (o InstanceRootBlockDeviceStateOutput) ToInstanceRootBlockDeviceStateOutput() InstanceRootBlockDeviceStateOutput {
	return o
}

func (o InstanceRootBlockDeviceStateOutput) ToInstanceRootBlockDeviceStateOutputWithContext(ctx context.Context) InstanceRootBlockDeviceStateOutput {
	return o
}

func (o InstanceRootBlockDeviceStateOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceState) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o InstanceRootBlockDeviceStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o InstanceRootBlockDeviceStateOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceState) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

func (o InstanceRootBlockDeviceStateOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceRootBlockDeviceState) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceRootBlockDeviceStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceRootBlockDeviceState)(nil)).Elem()
}

func (o InstanceRootBlockDeviceStateArrayOutput) ToInstanceRootBlockDeviceStateArrayOutput() InstanceRootBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceStateArrayOutput) ToInstanceRootBlockDeviceStateArrayOutputWithContext(ctx context.Context) InstanceRootBlockDeviceStateArrayOutput {
	return o
}

func (o InstanceRootBlockDeviceStateArrayOutput) Index(i pulumi.IntInput) InstanceRootBlockDeviceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceRootBlockDeviceState {
		return vs[0].([]InstanceRootBlockDeviceState)[vs[1].(int)]
	}).(InstanceRootBlockDeviceStateOutput)
}

type JavaAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type JavaAppLayerEbsVolumeInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeOutput() JavaAppLayerEbsVolumeOutput
	ToJavaAppLayerEbsVolumeOutputWithContext(context.Context) JavaAppLayerEbsVolumeOutput
}

type JavaAppLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JavaAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolume)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeArgs) ToJavaAppLayerEbsVolumeOutput() JavaAppLayerEbsVolumeOutput {
	return i.ToJavaAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeArgs) ToJavaAppLayerEbsVolumeOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeOutput)
}

type JavaAppLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeArrayOutput() JavaAppLayerEbsVolumeArrayOutput
	ToJavaAppLayerEbsVolumeArrayOutputWithContext(context.Context) JavaAppLayerEbsVolumeArrayOutput
}

type JavaAppLayerEbsVolumeArray []JavaAppLayerEbsVolumeInput

func (JavaAppLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolume)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeArray) ToJavaAppLayerEbsVolumeArrayOutput() JavaAppLayerEbsVolumeArrayOutput {
	return i.ToJavaAppLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeArray) ToJavaAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeArrayOutput)
}

type JavaAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolume)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeOutput) ToJavaAppLayerEbsVolumeOutput() JavaAppLayerEbsVolumeOutput {
	return o
}

func (o JavaAppLayerEbsVolumeOutput) ToJavaAppLayerEbsVolumeOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeOutput {
	return o
}

func (o JavaAppLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o JavaAppLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o JavaAppLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o JavaAppLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o JavaAppLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o JavaAppLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o JavaAppLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JavaAppLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolume)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeArrayOutput) ToJavaAppLayerEbsVolumeArrayOutput() JavaAppLayerEbsVolumeArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArrayOutput) ToJavaAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) JavaAppLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JavaAppLayerEbsVolume {
		return vs[0].([]JavaAppLayerEbsVolume)[vs[1].(int)]
	}).(JavaAppLayerEbsVolumeOutput)
}

type JavaAppLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type JavaAppLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeArgsOutput() JavaAppLayerEbsVolumeArgsOutput
	ToJavaAppLayerEbsVolumeArgsOutputWithContext(context.Context) JavaAppLayerEbsVolumeArgsOutput
}

type JavaAppLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JavaAppLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeArgsArgs) ToJavaAppLayerEbsVolumeArgsOutput() JavaAppLayerEbsVolumeArgsOutput {
	return i.ToJavaAppLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeArgsArgs) ToJavaAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeArgsOutput)
}

type JavaAppLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeArgsArrayOutput() JavaAppLayerEbsVolumeArgsArrayOutput
	ToJavaAppLayerEbsVolumeArgsArrayOutputWithContext(context.Context) JavaAppLayerEbsVolumeArgsArrayOutput
}

type JavaAppLayerEbsVolumeArgsArray []JavaAppLayerEbsVolumeArgsInput

func (JavaAppLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeArgsArray) ToJavaAppLayerEbsVolumeArgsArrayOutput() JavaAppLayerEbsVolumeArgsArrayOutput {
	return i.ToJavaAppLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeArgsArray) ToJavaAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeArgsArrayOutput)
}

type JavaAppLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeArgsOutput) ToJavaAppLayerEbsVolumeArgsOutput() JavaAppLayerEbsVolumeArgsOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArgsOutput) ToJavaAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArgsOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o JavaAppLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o JavaAppLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o JavaAppLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o JavaAppLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o JavaAppLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o JavaAppLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JavaAppLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeArgsArrayOutput) ToJavaAppLayerEbsVolumeArgsArrayOutput() JavaAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArgsArrayOutput) ToJavaAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) JavaAppLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JavaAppLayerEbsVolumeArgs {
		return vs[0].([]JavaAppLayerEbsVolumeArgs)[vs[1].(int)]
	}).(JavaAppLayerEbsVolumeArgsOutput)
}

type JavaAppLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type JavaAppLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeStateOutput() JavaAppLayerEbsVolumeStateOutput
	ToJavaAppLayerEbsVolumeStateOutputWithContext(context.Context) JavaAppLayerEbsVolumeStateOutput
}

type JavaAppLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JavaAppLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolumeState)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeStateArgs) ToJavaAppLayerEbsVolumeStateOutput() JavaAppLayerEbsVolumeStateOutput {
	return i.ToJavaAppLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeStateArgs) ToJavaAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeStateOutput)
}

type JavaAppLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToJavaAppLayerEbsVolumeStateArrayOutput() JavaAppLayerEbsVolumeStateArrayOutput
	ToJavaAppLayerEbsVolumeStateArrayOutputWithContext(context.Context) JavaAppLayerEbsVolumeStateArrayOutput
}

type JavaAppLayerEbsVolumeStateArray []JavaAppLayerEbsVolumeStateInput

func (JavaAppLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolumeState)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeStateArray) ToJavaAppLayerEbsVolumeStateArrayOutput() JavaAppLayerEbsVolumeStateArrayOutput {
	return i.ToJavaAppLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeStateArray) ToJavaAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeStateArrayOutput)
}

type JavaAppLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolumeState)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeStateOutput) ToJavaAppLayerEbsVolumeStateOutput() JavaAppLayerEbsVolumeStateOutput {
	return o
}

func (o JavaAppLayerEbsVolumeStateOutput) ToJavaAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeStateOutput {
	return o
}

func (o JavaAppLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o JavaAppLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o JavaAppLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o JavaAppLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o JavaAppLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o JavaAppLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o JavaAppLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaAppLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JavaAppLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JavaAppLayerEbsVolumeState)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeStateArrayOutput) ToJavaAppLayerEbsVolumeStateArrayOutput() JavaAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeStateArrayOutput) ToJavaAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o JavaAppLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) JavaAppLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JavaAppLayerEbsVolumeState {
		return vs[0].([]JavaAppLayerEbsVolumeState)[vs[1].(int)]
	}).(JavaAppLayerEbsVolumeStateOutput)
}

type MemcachedLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MemcachedLayerEbsVolumeInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput
	ToMemcachedLayerEbsVolumeOutputWithContext(context.Context) MemcachedLayerEbsVolumeOutput
}

type MemcachedLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MemcachedLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return i.ToMemcachedLayerEbsVolumeOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeOutput)
}

type MemcachedLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput
	ToMemcachedLayerEbsVolumeArrayOutputWithContext(context.Context) MemcachedLayerEbsVolumeArrayOutput
}

type MemcachedLayerEbsVolumeArray []MemcachedLayerEbsVolumeInput

func (MemcachedLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolume)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArray) ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput {
	return i.ToMemcachedLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArray) ToMemcachedLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeArrayOutput)
}

type MemcachedLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MemcachedLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MemcachedLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MemcachedLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MemcachedLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MemcachedLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MemcachedLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MemcachedLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolume)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeArrayOutput) ToMemcachedLayerEbsVolumeArrayOutput() MemcachedLayerEbsVolumeArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArrayOutput) ToMemcachedLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) MemcachedLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemcachedLayerEbsVolume {
		return vs[0].([]MemcachedLayerEbsVolume)[vs[1].(int)]
	}).(MemcachedLayerEbsVolumeOutput)
}

type MemcachedLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MemcachedLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeArgsOutput() MemcachedLayerEbsVolumeArgsOutput
	ToMemcachedLayerEbsVolumeArgsOutputWithContext(context.Context) MemcachedLayerEbsVolumeArgsOutput
}

type MemcachedLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MemcachedLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolumeArgs)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArgsArgs) ToMemcachedLayerEbsVolumeArgsOutput() MemcachedLayerEbsVolumeArgsOutput {
	return i.ToMemcachedLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArgsArgs) ToMemcachedLayerEbsVolumeArgsOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeArgsOutput)
}

type MemcachedLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeArgsArrayOutput() MemcachedLayerEbsVolumeArgsArrayOutput
	ToMemcachedLayerEbsVolumeArgsArrayOutputWithContext(context.Context) MemcachedLayerEbsVolumeArgsArrayOutput
}

type MemcachedLayerEbsVolumeArgsArray []MemcachedLayerEbsVolumeArgsInput

func (MemcachedLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolumeArgs)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArgsArray) ToMemcachedLayerEbsVolumeArgsArrayOutput() MemcachedLayerEbsVolumeArgsArrayOutput {
	return i.ToMemcachedLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArgsArray) ToMemcachedLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeArgsArrayOutput)
}

type MemcachedLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolumeArgs)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeArgsOutput) ToMemcachedLayerEbsVolumeArgsOutput() MemcachedLayerEbsVolumeArgsOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArgsOutput) ToMemcachedLayerEbsVolumeArgsOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArgsOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MemcachedLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MemcachedLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MemcachedLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MemcachedLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MemcachedLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MemcachedLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MemcachedLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolumeArgs)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeArgsArrayOutput) ToMemcachedLayerEbsVolumeArgsArrayOutput() MemcachedLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArgsArrayOutput) ToMemcachedLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) MemcachedLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemcachedLayerEbsVolumeArgs {
		return vs[0].([]MemcachedLayerEbsVolumeArgs)[vs[1].(int)]
	}).(MemcachedLayerEbsVolumeArgsOutput)
}

type MemcachedLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MemcachedLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeStateOutput() MemcachedLayerEbsVolumeStateOutput
	ToMemcachedLayerEbsVolumeStateOutputWithContext(context.Context) MemcachedLayerEbsVolumeStateOutput
}

type MemcachedLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MemcachedLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolumeState)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeStateArgs) ToMemcachedLayerEbsVolumeStateOutput() MemcachedLayerEbsVolumeStateOutput {
	return i.ToMemcachedLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeStateArgs) ToMemcachedLayerEbsVolumeStateOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeStateOutput)
}

type MemcachedLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToMemcachedLayerEbsVolumeStateArrayOutput() MemcachedLayerEbsVolumeStateArrayOutput
	ToMemcachedLayerEbsVolumeStateArrayOutputWithContext(context.Context) MemcachedLayerEbsVolumeStateArrayOutput
}

type MemcachedLayerEbsVolumeStateArray []MemcachedLayerEbsVolumeStateInput

func (MemcachedLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolumeState)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeStateArray) ToMemcachedLayerEbsVolumeStateArrayOutput() MemcachedLayerEbsVolumeStateArrayOutput {
	return i.ToMemcachedLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeStateArray) ToMemcachedLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeStateArrayOutput)
}

type MemcachedLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolumeState)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeStateOutput) ToMemcachedLayerEbsVolumeStateOutput() MemcachedLayerEbsVolumeStateOutput {
	return o
}

func (o MemcachedLayerEbsVolumeStateOutput) ToMemcachedLayerEbsVolumeStateOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeStateOutput {
	return o
}

func (o MemcachedLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MemcachedLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MemcachedLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MemcachedLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MemcachedLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MemcachedLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MemcachedLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MemcachedLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedLayerEbsVolumeState)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeStateArrayOutput) ToMemcachedLayerEbsVolumeStateArrayOutput() MemcachedLayerEbsVolumeStateArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeStateArrayOutput) ToMemcachedLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeStateArrayOutput {
	return o
}

func (o MemcachedLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) MemcachedLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemcachedLayerEbsVolumeState {
		return vs[0].([]MemcachedLayerEbsVolumeState)[vs[1].(int)]
	}).(MemcachedLayerEbsVolumeStateOutput)
}

type MysqlLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MysqlLayerEbsVolumeInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeOutput() MysqlLayerEbsVolumeOutput
	ToMysqlLayerEbsVolumeOutputWithContext(context.Context) MysqlLayerEbsVolumeOutput
}

type MysqlLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MysqlLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolume)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeArgs) ToMysqlLayerEbsVolumeOutput() MysqlLayerEbsVolumeOutput {
	return i.ToMysqlLayerEbsVolumeOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeArgs) ToMysqlLayerEbsVolumeOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeOutput)
}

type MysqlLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeArrayOutput() MysqlLayerEbsVolumeArrayOutput
	ToMysqlLayerEbsVolumeArrayOutputWithContext(context.Context) MysqlLayerEbsVolumeArrayOutput
}

type MysqlLayerEbsVolumeArray []MysqlLayerEbsVolumeInput

func (MysqlLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolume)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeArray) ToMysqlLayerEbsVolumeArrayOutput() MysqlLayerEbsVolumeArrayOutput {
	return i.ToMysqlLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeArray) ToMysqlLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeArrayOutput)
}

type MysqlLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolume)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeOutput) ToMysqlLayerEbsVolumeOutput() MysqlLayerEbsVolumeOutput {
	return o
}

func (o MysqlLayerEbsVolumeOutput) ToMysqlLayerEbsVolumeOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeOutput {
	return o
}

func (o MysqlLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MysqlLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MysqlLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MysqlLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MysqlLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MysqlLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MysqlLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MysqlLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolume)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeArrayOutput) ToMysqlLayerEbsVolumeArrayOutput() MysqlLayerEbsVolumeArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeArrayOutput) ToMysqlLayerEbsVolumeArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) MysqlLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlLayerEbsVolume {
		return vs[0].([]MysqlLayerEbsVolume)[vs[1].(int)]
	}).(MysqlLayerEbsVolumeOutput)
}

type MysqlLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MysqlLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeArgsOutput() MysqlLayerEbsVolumeArgsOutput
	ToMysqlLayerEbsVolumeArgsOutputWithContext(context.Context) MysqlLayerEbsVolumeArgsOutput
}

type MysqlLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MysqlLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolumeArgs)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeArgsArgs) ToMysqlLayerEbsVolumeArgsOutput() MysqlLayerEbsVolumeArgsOutput {
	return i.ToMysqlLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeArgsArgs) ToMysqlLayerEbsVolumeArgsOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeArgsOutput)
}

type MysqlLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeArgsArrayOutput() MysqlLayerEbsVolumeArgsArrayOutput
	ToMysqlLayerEbsVolumeArgsArrayOutputWithContext(context.Context) MysqlLayerEbsVolumeArgsArrayOutput
}

type MysqlLayerEbsVolumeArgsArray []MysqlLayerEbsVolumeArgsInput

func (MysqlLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolumeArgs)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeArgsArray) ToMysqlLayerEbsVolumeArgsArrayOutput() MysqlLayerEbsVolumeArgsArrayOutput {
	return i.ToMysqlLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeArgsArray) ToMysqlLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeArgsArrayOutput)
}

type MysqlLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolumeArgs)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeArgsOutput) ToMysqlLayerEbsVolumeArgsOutput() MysqlLayerEbsVolumeArgsOutput {
	return o
}

func (o MysqlLayerEbsVolumeArgsOutput) ToMysqlLayerEbsVolumeArgsOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArgsOutput {
	return o
}

func (o MysqlLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MysqlLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MysqlLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MysqlLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MysqlLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MysqlLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MysqlLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MysqlLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolumeArgs)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeArgsArrayOutput) ToMysqlLayerEbsVolumeArgsArrayOutput() MysqlLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeArgsArrayOutput) ToMysqlLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) MysqlLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlLayerEbsVolumeArgs {
		return vs[0].([]MysqlLayerEbsVolumeArgs)[vs[1].(int)]
	}).(MysqlLayerEbsVolumeArgsOutput)
}

type MysqlLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MysqlLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeStateOutput() MysqlLayerEbsVolumeStateOutput
	ToMysqlLayerEbsVolumeStateOutputWithContext(context.Context) MysqlLayerEbsVolumeStateOutput
}

type MysqlLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MysqlLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolumeState)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeStateArgs) ToMysqlLayerEbsVolumeStateOutput() MysqlLayerEbsVolumeStateOutput {
	return i.ToMysqlLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeStateArgs) ToMysqlLayerEbsVolumeStateOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeStateOutput)
}

type MysqlLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToMysqlLayerEbsVolumeStateArrayOutput() MysqlLayerEbsVolumeStateArrayOutput
	ToMysqlLayerEbsVolumeStateArrayOutputWithContext(context.Context) MysqlLayerEbsVolumeStateArrayOutput
}

type MysqlLayerEbsVolumeStateArray []MysqlLayerEbsVolumeStateInput

func (MysqlLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolumeState)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeStateArray) ToMysqlLayerEbsVolumeStateArrayOutput() MysqlLayerEbsVolumeStateArrayOutput {
	return i.ToMysqlLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeStateArray) ToMysqlLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeStateArrayOutput)
}

type MysqlLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolumeState)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeStateOutput) ToMysqlLayerEbsVolumeStateOutput() MysqlLayerEbsVolumeStateOutput {
	return o
}

func (o MysqlLayerEbsVolumeStateOutput) ToMysqlLayerEbsVolumeStateOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeStateOutput {
	return o
}

func (o MysqlLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o MysqlLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o MysqlLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o MysqlLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o MysqlLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o MysqlLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MysqlLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MysqlLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlLayerEbsVolumeState)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeStateArrayOutput) ToMysqlLayerEbsVolumeStateArrayOutput() MysqlLayerEbsVolumeStateArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeStateArrayOutput) ToMysqlLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeStateArrayOutput {
	return o
}

func (o MysqlLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) MysqlLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlLayerEbsVolumeState {
		return vs[0].([]MysqlLayerEbsVolumeState)[vs[1].(int)]
	}).(MysqlLayerEbsVolumeStateOutput)
}

type NodejsAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type NodejsAppLayerEbsVolumeInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeOutput() NodejsAppLayerEbsVolumeOutput
	ToNodejsAppLayerEbsVolumeOutputWithContext(context.Context) NodejsAppLayerEbsVolumeOutput
}

type NodejsAppLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodejsAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeArgs) ToNodejsAppLayerEbsVolumeOutput() NodejsAppLayerEbsVolumeOutput {
	return i.ToNodejsAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeArgs) ToNodejsAppLayerEbsVolumeOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeOutput)
}

type NodejsAppLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeArrayOutput() NodejsAppLayerEbsVolumeArrayOutput
	ToNodejsAppLayerEbsVolumeArrayOutputWithContext(context.Context) NodejsAppLayerEbsVolumeArrayOutput
}

type NodejsAppLayerEbsVolumeArray []NodejsAppLayerEbsVolumeInput

func (NodejsAppLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeArray) ToNodejsAppLayerEbsVolumeArrayOutput() NodejsAppLayerEbsVolumeArrayOutput {
	return i.ToNodejsAppLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeArray) ToNodejsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeArrayOutput)
}

type NodejsAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeOutput) ToNodejsAppLayerEbsVolumeOutput() NodejsAppLayerEbsVolumeOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeOutput) ToNodejsAppLayerEbsVolumeOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o NodejsAppLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o NodejsAppLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o NodejsAppLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o NodejsAppLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o NodejsAppLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o NodejsAppLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodejsAppLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeArrayOutput) ToNodejsAppLayerEbsVolumeArrayOutput() NodejsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArrayOutput) ToNodejsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) NodejsAppLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodejsAppLayerEbsVolume {
		return vs[0].([]NodejsAppLayerEbsVolume)[vs[1].(int)]
	}).(NodejsAppLayerEbsVolumeOutput)
}

type NodejsAppLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type NodejsAppLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeArgsOutput() NodejsAppLayerEbsVolumeArgsOutput
	ToNodejsAppLayerEbsVolumeArgsOutputWithContext(context.Context) NodejsAppLayerEbsVolumeArgsOutput
}

type NodejsAppLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodejsAppLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeArgsArgs) ToNodejsAppLayerEbsVolumeArgsOutput() NodejsAppLayerEbsVolumeArgsOutput {
	return i.ToNodejsAppLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeArgsArgs) ToNodejsAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeArgsOutput)
}

type NodejsAppLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeArgsArrayOutput() NodejsAppLayerEbsVolumeArgsArrayOutput
	ToNodejsAppLayerEbsVolumeArgsArrayOutputWithContext(context.Context) NodejsAppLayerEbsVolumeArgsArrayOutput
}

type NodejsAppLayerEbsVolumeArgsArray []NodejsAppLayerEbsVolumeArgsInput

func (NodejsAppLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeArgsArray) ToNodejsAppLayerEbsVolumeArgsArrayOutput() NodejsAppLayerEbsVolumeArgsArrayOutput {
	return i.ToNodejsAppLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeArgsArray) ToNodejsAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeArgsArrayOutput)
}

type NodejsAppLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeArgsOutput) ToNodejsAppLayerEbsVolumeArgsOutput() NodejsAppLayerEbsVolumeArgsOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArgsOutput) ToNodejsAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArgsOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o NodejsAppLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o NodejsAppLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o NodejsAppLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o NodejsAppLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o NodejsAppLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o NodejsAppLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodejsAppLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeArgsArrayOutput) ToNodejsAppLayerEbsVolumeArgsArrayOutput() NodejsAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArgsArrayOutput) ToNodejsAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) NodejsAppLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodejsAppLayerEbsVolumeArgs {
		return vs[0].([]NodejsAppLayerEbsVolumeArgs)[vs[1].(int)]
	}).(NodejsAppLayerEbsVolumeArgsOutput)
}

type NodejsAppLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type NodejsAppLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeStateOutput() NodejsAppLayerEbsVolumeStateOutput
	ToNodejsAppLayerEbsVolumeStateOutputWithContext(context.Context) NodejsAppLayerEbsVolumeStateOutput
}

type NodejsAppLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NodejsAppLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolumeState)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeStateArgs) ToNodejsAppLayerEbsVolumeStateOutput() NodejsAppLayerEbsVolumeStateOutput {
	return i.ToNodejsAppLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeStateArgs) ToNodejsAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeStateOutput)
}

type NodejsAppLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToNodejsAppLayerEbsVolumeStateArrayOutput() NodejsAppLayerEbsVolumeStateArrayOutput
	ToNodejsAppLayerEbsVolumeStateArrayOutputWithContext(context.Context) NodejsAppLayerEbsVolumeStateArrayOutput
}

type NodejsAppLayerEbsVolumeStateArray []NodejsAppLayerEbsVolumeStateInput

func (NodejsAppLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolumeState)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeStateArray) ToNodejsAppLayerEbsVolumeStateArrayOutput() NodejsAppLayerEbsVolumeStateArrayOutput {
	return i.ToNodejsAppLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeStateArray) ToNodejsAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeStateArrayOutput)
}

type NodejsAppLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolumeState)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeStateOutput) ToNodejsAppLayerEbsVolumeStateOutput() NodejsAppLayerEbsVolumeStateOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeStateOutput) ToNodejsAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeStateOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o NodejsAppLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o NodejsAppLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o NodejsAppLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o NodejsAppLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o NodejsAppLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o NodejsAppLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodejsAppLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodejsAppLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodejsAppLayerEbsVolumeState)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeStateArrayOutput) ToNodejsAppLayerEbsVolumeStateArrayOutput() NodejsAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeStateArrayOutput) ToNodejsAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) NodejsAppLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodejsAppLayerEbsVolumeState {
		return vs[0].([]NodejsAppLayerEbsVolumeState)[vs[1].(int)]
	}).(NodejsAppLayerEbsVolumeStateOutput)
}

type PhpAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type PhpAppLayerEbsVolumeInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeOutput() PhpAppLayerEbsVolumeOutput
	ToPhpAppLayerEbsVolumeOutputWithContext(context.Context) PhpAppLayerEbsVolumeOutput
}

type PhpAppLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PhpAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolume)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeArgs) ToPhpAppLayerEbsVolumeOutput() PhpAppLayerEbsVolumeOutput {
	return i.ToPhpAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeArgs) ToPhpAppLayerEbsVolumeOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeOutput)
}

type PhpAppLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeArrayOutput() PhpAppLayerEbsVolumeArrayOutput
	ToPhpAppLayerEbsVolumeArrayOutputWithContext(context.Context) PhpAppLayerEbsVolumeArrayOutput
}

type PhpAppLayerEbsVolumeArray []PhpAppLayerEbsVolumeInput

func (PhpAppLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolume)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeArray) ToPhpAppLayerEbsVolumeArrayOutput() PhpAppLayerEbsVolumeArrayOutput {
	return i.ToPhpAppLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeArray) ToPhpAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeArrayOutput)
}

type PhpAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolume)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeOutput) ToPhpAppLayerEbsVolumeOutput() PhpAppLayerEbsVolumeOutput {
	return o
}

func (o PhpAppLayerEbsVolumeOutput) ToPhpAppLayerEbsVolumeOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeOutput {
	return o
}

func (o PhpAppLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o PhpAppLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o PhpAppLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o PhpAppLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o PhpAppLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o PhpAppLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o PhpAppLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PhpAppLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolume)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeArrayOutput) ToPhpAppLayerEbsVolumeArrayOutput() PhpAppLayerEbsVolumeArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArrayOutput) ToPhpAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) PhpAppLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhpAppLayerEbsVolume {
		return vs[0].([]PhpAppLayerEbsVolume)[vs[1].(int)]
	}).(PhpAppLayerEbsVolumeOutput)
}

type PhpAppLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type PhpAppLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeArgsOutput() PhpAppLayerEbsVolumeArgsOutput
	ToPhpAppLayerEbsVolumeArgsOutputWithContext(context.Context) PhpAppLayerEbsVolumeArgsOutput
}

type PhpAppLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PhpAppLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeArgsArgs) ToPhpAppLayerEbsVolumeArgsOutput() PhpAppLayerEbsVolumeArgsOutput {
	return i.ToPhpAppLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeArgsArgs) ToPhpAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeArgsOutput)
}

type PhpAppLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeArgsArrayOutput() PhpAppLayerEbsVolumeArgsArrayOutput
	ToPhpAppLayerEbsVolumeArgsArrayOutputWithContext(context.Context) PhpAppLayerEbsVolumeArgsArrayOutput
}

type PhpAppLayerEbsVolumeArgsArray []PhpAppLayerEbsVolumeArgsInput

func (PhpAppLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeArgsArray) ToPhpAppLayerEbsVolumeArgsArrayOutput() PhpAppLayerEbsVolumeArgsArrayOutput {
	return i.ToPhpAppLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeArgsArray) ToPhpAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeArgsArrayOutput)
}

type PhpAppLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeArgsOutput) ToPhpAppLayerEbsVolumeArgsOutput() PhpAppLayerEbsVolumeArgsOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArgsOutput) ToPhpAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArgsOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o PhpAppLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o PhpAppLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o PhpAppLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o PhpAppLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o PhpAppLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o PhpAppLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PhpAppLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeArgsArrayOutput) ToPhpAppLayerEbsVolumeArgsArrayOutput() PhpAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArgsArrayOutput) ToPhpAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) PhpAppLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhpAppLayerEbsVolumeArgs {
		return vs[0].([]PhpAppLayerEbsVolumeArgs)[vs[1].(int)]
	}).(PhpAppLayerEbsVolumeArgsOutput)
}

type PhpAppLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type PhpAppLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeStateOutput() PhpAppLayerEbsVolumeStateOutput
	ToPhpAppLayerEbsVolumeStateOutputWithContext(context.Context) PhpAppLayerEbsVolumeStateOutput
}

type PhpAppLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PhpAppLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolumeState)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeStateArgs) ToPhpAppLayerEbsVolumeStateOutput() PhpAppLayerEbsVolumeStateOutput {
	return i.ToPhpAppLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeStateArgs) ToPhpAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeStateOutput)
}

type PhpAppLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToPhpAppLayerEbsVolumeStateArrayOutput() PhpAppLayerEbsVolumeStateArrayOutput
	ToPhpAppLayerEbsVolumeStateArrayOutputWithContext(context.Context) PhpAppLayerEbsVolumeStateArrayOutput
}

type PhpAppLayerEbsVolumeStateArray []PhpAppLayerEbsVolumeStateInput

func (PhpAppLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolumeState)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeStateArray) ToPhpAppLayerEbsVolumeStateArrayOutput() PhpAppLayerEbsVolumeStateArrayOutput {
	return i.ToPhpAppLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeStateArray) ToPhpAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeStateArrayOutput)
}

type PhpAppLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolumeState)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeStateOutput) ToPhpAppLayerEbsVolumeStateOutput() PhpAppLayerEbsVolumeStateOutput {
	return o
}

func (o PhpAppLayerEbsVolumeStateOutput) ToPhpAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeStateOutput {
	return o
}

func (o PhpAppLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o PhpAppLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o PhpAppLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o PhpAppLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o PhpAppLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o PhpAppLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o PhpAppLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhpAppLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PhpAppLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhpAppLayerEbsVolumeState)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeStateArrayOutput) ToPhpAppLayerEbsVolumeStateArrayOutput() PhpAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeStateArrayOutput) ToPhpAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o PhpAppLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) PhpAppLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhpAppLayerEbsVolumeState {
		return vs[0].([]PhpAppLayerEbsVolumeState)[vs[1].(int)]
	}).(PhpAppLayerEbsVolumeStateOutput)
}

type RailsAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type RailsAppLayerEbsVolumeInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput
	ToRailsAppLayerEbsVolumeOutputWithContext(context.Context) RailsAppLayerEbsVolumeOutput
}

type RailsAppLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RailsAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return i.ToRailsAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeOutput)
}

type RailsAppLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput
	ToRailsAppLayerEbsVolumeArrayOutputWithContext(context.Context) RailsAppLayerEbsVolumeArrayOutput
}

type RailsAppLayerEbsVolumeArray []RailsAppLayerEbsVolumeInput

func (RailsAppLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolume)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArray) ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput {
	return i.ToRailsAppLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArray) ToRailsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeArrayOutput)
}

type RailsAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o RailsAppLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o RailsAppLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o RailsAppLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o RailsAppLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o RailsAppLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o RailsAppLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RailsAppLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolume)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeArrayOutput) ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArrayOutput) ToRailsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) RailsAppLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RailsAppLayerEbsVolume {
		return vs[0].([]RailsAppLayerEbsVolume)[vs[1].(int)]
	}).(RailsAppLayerEbsVolumeOutput)
}

type RailsAppLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type RailsAppLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeArgsOutput() RailsAppLayerEbsVolumeArgsOutput
	ToRailsAppLayerEbsVolumeArgsOutputWithContext(context.Context) RailsAppLayerEbsVolumeArgsOutput
}

type RailsAppLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RailsAppLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArgsArgs) ToRailsAppLayerEbsVolumeArgsOutput() RailsAppLayerEbsVolumeArgsOutput {
	return i.ToRailsAppLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArgsArgs) ToRailsAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeArgsOutput)
}

type RailsAppLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeArgsArrayOutput() RailsAppLayerEbsVolumeArgsArrayOutput
	ToRailsAppLayerEbsVolumeArgsArrayOutputWithContext(context.Context) RailsAppLayerEbsVolumeArgsArrayOutput
}

type RailsAppLayerEbsVolumeArgsArray []RailsAppLayerEbsVolumeArgsInput

func (RailsAppLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArgsArray) ToRailsAppLayerEbsVolumeArgsArrayOutput() RailsAppLayerEbsVolumeArgsArrayOutput {
	return i.ToRailsAppLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArgsArray) ToRailsAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeArgsArrayOutput)
}

type RailsAppLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeArgsOutput) ToRailsAppLayerEbsVolumeArgsOutput() RailsAppLayerEbsVolumeArgsOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArgsOutput) ToRailsAppLayerEbsVolumeArgsOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArgsOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o RailsAppLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o RailsAppLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o RailsAppLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o RailsAppLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o RailsAppLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o RailsAppLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RailsAppLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolumeArgs)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeArgsArrayOutput) ToRailsAppLayerEbsVolumeArgsArrayOutput() RailsAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArgsArrayOutput) ToRailsAppLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) RailsAppLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RailsAppLayerEbsVolumeArgs {
		return vs[0].([]RailsAppLayerEbsVolumeArgs)[vs[1].(int)]
	}).(RailsAppLayerEbsVolumeArgsOutput)
}

type RailsAppLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type RailsAppLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeStateOutput() RailsAppLayerEbsVolumeStateOutput
	ToRailsAppLayerEbsVolumeStateOutputWithContext(context.Context) RailsAppLayerEbsVolumeStateOutput
}

type RailsAppLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RailsAppLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolumeState)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeStateArgs) ToRailsAppLayerEbsVolumeStateOutput() RailsAppLayerEbsVolumeStateOutput {
	return i.ToRailsAppLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeStateArgs) ToRailsAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeStateOutput)
}

type RailsAppLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeStateArrayOutput() RailsAppLayerEbsVolumeStateArrayOutput
	ToRailsAppLayerEbsVolumeStateArrayOutputWithContext(context.Context) RailsAppLayerEbsVolumeStateArrayOutput
}

type RailsAppLayerEbsVolumeStateArray []RailsAppLayerEbsVolumeStateInput

func (RailsAppLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolumeState)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeStateArray) ToRailsAppLayerEbsVolumeStateArrayOutput() RailsAppLayerEbsVolumeStateArrayOutput {
	return i.ToRailsAppLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeStateArray) ToRailsAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeStateArrayOutput)
}

type RailsAppLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolumeState)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeStateOutput) ToRailsAppLayerEbsVolumeStateOutput() RailsAppLayerEbsVolumeStateOutput {
	return o
}

func (o RailsAppLayerEbsVolumeStateOutput) ToRailsAppLayerEbsVolumeStateOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeStateOutput {
	return o
}

func (o RailsAppLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o RailsAppLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o RailsAppLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o RailsAppLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o RailsAppLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o RailsAppLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o RailsAppLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RailsAppLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RailsAppLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolumeState)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeStateArrayOutput) ToRailsAppLayerEbsVolumeStateArrayOutput() RailsAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeStateArrayOutput) ToRailsAppLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeStateArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) RailsAppLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RailsAppLayerEbsVolumeState {
		return vs[0].([]RailsAppLayerEbsVolumeState)[vs[1].(int)]
	}).(RailsAppLayerEbsVolumeStateOutput)
}

type StackCustomCookbooksSource struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type StackCustomCookbooksSourceInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceOutput() StackCustomCookbooksSourceOutput
	ToStackCustomCookbooksSourceOutputWithContext(context.Context) StackCustomCookbooksSourceOutput
}

type StackCustomCookbooksSourceArgs struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url pulumi.StringInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (StackCustomCookbooksSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSource)(nil)).Elem()
}

func (i StackCustomCookbooksSourceArgs) ToStackCustomCookbooksSourceOutput() StackCustomCookbooksSourceOutput {
	return i.ToStackCustomCookbooksSourceOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceArgs) ToStackCustomCookbooksSourceOutputWithContext(ctx context.Context) StackCustomCookbooksSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceOutput)
}

type StackCustomCookbooksSourceArrayInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceArrayOutput() StackCustomCookbooksSourceArrayOutput
	ToStackCustomCookbooksSourceArrayOutputWithContext(context.Context) StackCustomCookbooksSourceArrayOutput
}

type StackCustomCookbooksSourceArray []StackCustomCookbooksSourceInput

func (StackCustomCookbooksSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSource)(nil)).Elem()
}

func (i StackCustomCookbooksSourceArray) ToStackCustomCookbooksSourceArrayOutput() StackCustomCookbooksSourceArrayOutput {
	return i.ToStackCustomCookbooksSourceArrayOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceArray) ToStackCustomCookbooksSourceArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceArrayOutput)
}

type StackCustomCookbooksSourceOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSource)(nil)).Elem()
}

func (o StackCustomCookbooksSourceOutput) ToStackCustomCookbooksSourceOutput() StackCustomCookbooksSourceOutput {
	return o
}

func (o StackCustomCookbooksSourceOutput) ToStackCustomCookbooksSourceOutputWithContext(ctx context.Context) StackCustomCookbooksSourceOutput {
	return o
}

// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o StackCustomCookbooksSourceOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o StackCustomCookbooksSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the cookbooks resource can be found.
func (o StackCustomCookbooksSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) string { return v.Url }).(pulumi.StringOutput)
}

// Username to use when authenticating to the source.
func (o StackCustomCookbooksSourceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSource) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type StackCustomCookbooksSourceArrayOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSource)(nil)).Elem()
}

func (o StackCustomCookbooksSourceArrayOutput) ToStackCustomCookbooksSourceArrayOutput() StackCustomCookbooksSourceArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceArrayOutput) ToStackCustomCookbooksSourceArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceArrayOutput) Index(i pulumi.IntInput) StackCustomCookbooksSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackCustomCookbooksSource {
		return vs[0].([]StackCustomCookbooksSource)[vs[1].(int)]
	}).(StackCustomCookbooksSourceOutput)
}

type StackCustomCookbooksSourceArgs struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type StackCustomCookbooksSourceArgsInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceArgsOutput() StackCustomCookbooksSourceArgsOutput
	ToStackCustomCookbooksSourceArgsOutputWithContext(context.Context) StackCustomCookbooksSourceArgsOutput
}

type StackCustomCookbooksSourceArgsArgs struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url pulumi.StringInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (StackCustomCookbooksSourceArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSourceArgs)(nil)).Elem()
}

func (i StackCustomCookbooksSourceArgsArgs) ToStackCustomCookbooksSourceArgsOutput() StackCustomCookbooksSourceArgsOutput {
	return i.ToStackCustomCookbooksSourceArgsOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceArgsArgs) ToStackCustomCookbooksSourceArgsOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceArgsOutput)
}

type StackCustomCookbooksSourceArgsArrayInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceArgsArrayOutput() StackCustomCookbooksSourceArgsArrayOutput
	ToStackCustomCookbooksSourceArgsArrayOutputWithContext(context.Context) StackCustomCookbooksSourceArgsArrayOutput
}

type StackCustomCookbooksSourceArgsArray []StackCustomCookbooksSourceArgsInput

func (StackCustomCookbooksSourceArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSourceArgs)(nil)).Elem()
}

func (i StackCustomCookbooksSourceArgsArray) ToStackCustomCookbooksSourceArgsArrayOutput() StackCustomCookbooksSourceArgsArrayOutput {
	return i.ToStackCustomCookbooksSourceArgsArrayOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceArgsArray) ToStackCustomCookbooksSourceArgsArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceArgsArrayOutput)
}

type StackCustomCookbooksSourceArgsOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSourceArgs)(nil)).Elem()
}

func (o StackCustomCookbooksSourceArgsOutput) ToStackCustomCookbooksSourceArgsOutput() StackCustomCookbooksSourceArgsOutput {
	return o
}

func (o StackCustomCookbooksSourceArgsOutput) ToStackCustomCookbooksSourceArgsOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArgsOutput {
	return o
}

// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceArgsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o StackCustomCookbooksSourceArgsOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceArgsOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o StackCustomCookbooksSourceArgsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the cookbooks resource can be found.
func (o StackCustomCookbooksSourceArgsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) string { return v.Url }).(pulumi.StringOutput)
}

// Username to use when authenticating to the source.
func (o StackCustomCookbooksSourceArgsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceArgs) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type StackCustomCookbooksSourceArgsArrayOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSourceArgs)(nil)).Elem()
}

func (o StackCustomCookbooksSourceArgsArrayOutput) ToStackCustomCookbooksSourceArgsArrayOutput() StackCustomCookbooksSourceArgsArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceArgsArrayOutput) ToStackCustomCookbooksSourceArgsArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceArgsArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceArgsArrayOutput) Index(i pulumi.IntInput) StackCustomCookbooksSourceArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackCustomCookbooksSourceArgs {
		return vs[0].([]StackCustomCookbooksSourceArgs)[vs[1].(int)]
	}).(StackCustomCookbooksSourceArgsOutput)
}

type StackCustomCookbooksSourceState struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type StackCustomCookbooksSourceStateInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceStateOutput() StackCustomCookbooksSourceStateOutput
	ToStackCustomCookbooksSourceStateOutputWithContext(context.Context) StackCustomCookbooksSourceStateOutput
}

type StackCustomCookbooksSourceStateArgs struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	SshKey pulumi.StringPtrInput `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url pulumi.StringInput `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (StackCustomCookbooksSourceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSourceState)(nil)).Elem()
}

func (i StackCustomCookbooksSourceStateArgs) ToStackCustomCookbooksSourceStateOutput() StackCustomCookbooksSourceStateOutput {
	return i.ToStackCustomCookbooksSourceStateOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceStateArgs) ToStackCustomCookbooksSourceStateOutputWithContext(ctx context.Context) StackCustomCookbooksSourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceStateOutput)
}

type StackCustomCookbooksSourceStateArrayInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourceStateArrayOutput() StackCustomCookbooksSourceStateArrayOutput
	ToStackCustomCookbooksSourceStateArrayOutputWithContext(context.Context) StackCustomCookbooksSourceStateArrayOutput
}

type StackCustomCookbooksSourceStateArray []StackCustomCookbooksSourceStateInput

func (StackCustomCookbooksSourceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSourceState)(nil)).Elem()
}

func (i StackCustomCookbooksSourceStateArray) ToStackCustomCookbooksSourceStateArrayOutput() StackCustomCookbooksSourceStateArrayOutput {
	return i.ToStackCustomCookbooksSourceStateArrayOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceStateArray) ToStackCustomCookbooksSourceStateArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceStateArrayOutput)
}

type StackCustomCookbooksSourceStateOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSourceState)(nil)).Elem()
}

func (o StackCustomCookbooksSourceStateOutput) ToStackCustomCookbooksSourceStateOutput() StackCustomCookbooksSourceStateOutput {
	return o
}

func (o StackCustomCookbooksSourceStateOutput) ToStackCustomCookbooksSourceStateOutputWithContext(ctx context.Context) StackCustomCookbooksSourceStateOutput {
	return o
}

// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceStateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// For sources that are version-aware, the revision to use.
func (o StackCustomCookbooksSourceStateOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceStateOutput) SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) *string { return v.SshKey }).(pulumi.StringPtrOutput)
}

// The type of source to use. For example, "archive".
func (o StackCustomCookbooksSourceStateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) string { return v.Type }).(pulumi.StringOutput)
}

// The URL where the cookbooks resource can be found.
func (o StackCustomCookbooksSourceStateOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) string { return v.Url }).(pulumi.StringOutput)
}

// Username to use when authenticating to the source.
func (o StackCustomCookbooksSourceStateOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackCustomCookbooksSourceState) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type StackCustomCookbooksSourceStateArrayOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackCustomCookbooksSourceState)(nil)).Elem()
}

func (o StackCustomCookbooksSourceStateArrayOutput) ToStackCustomCookbooksSourceStateArrayOutput() StackCustomCookbooksSourceStateArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceStateArrayOutput) ToStackCustomCookbooksSourceStateArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourceStateArrayOutput {
	return o
}

func (o StackCustomCookbooksSourceStateArrayOutput) Index(i pulumi.IntInput) StackCustomCookbooksSourceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackCustomCookbooksSourceState {
		return vs[0].([]StackCustomCookbooksSourceState)[vs[1].(int)]
	}).(StackCustomCookbooksSourceStateOutput)
}

type StaticWebLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type StaticWebLayerEbsVolumeInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeOutput() StaticWebLayerEbsVolumeOutput
	ToStaticWebLayerEbsVolumeOutputWithContext(context.Context) StaticWebLayerEbsVolumeOutput
}

type StaticWebLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StaticWebLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolume)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeArgs) ToStaticWebLayerEbsVolumeOutput() StaticWebLayerEbsVolumeOutput {
	return i.ToStaticWebLayerEbsVolumeOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeArgs) ToStaticWebLayerEbsVolumeOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeOutput)
}

type StaticWebLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeArrayOutput() StaticWebLayerEbsVolumeArrayOutput
	ToStaticWebLayerEbsVolumeArrayOutputWithContext(context.Context) StaticWebLayerEbsVolumeArrayOutput
}

type StaticWebLayerEbsVolumeArray []StaticWebLayerEbsVolumeInput

func (StaticWebLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolume)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeArray) ToStaticWebLayerEbsVolumeArrayOutput() StaticWebLayerEbsVolumeArrayOutput {
	return i.ToStaticWebLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeArray) ToStaticWebLayerEbsVolumeArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeArrayOutput)
}

type StaticWebLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolume)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeOutput) ToStaticWebLayerEbsVolumeOutput() StaticWebLayerEbsVolumeOutput {
	return o
}

func (o StaticWebLayerEbsVolumeOutput) ToStaticWebLayerEbsVolumeOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeOutput {
	return o
}

func (o StaticWebLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o StaticWebLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o StaticWebLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o StaticWebLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o StaticWebLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o StaticWebLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o StaticWebLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StaticWebLayerEbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolume)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeArrayOutput) ToStaticWebLayerEbsVolumeArrayOutput() StaticWebLayerEbsVolumeArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArrayOutput) ToStaticWebLayerEbsVolumeArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) StaticWebLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticWebLayerEbsVolume {
		return vs[0].([]StaticWebLayerEbsVolume)[vs[1].(int)]
	}).(StaticWebLayerEbsVolumeOutput)
}

type StaticWebLayerEbsVolumeArgs struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type StaticWebLayerEbsVolumeArgsInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeArgsOutput() StaticWebLayerEbsVolumeArgsOutput
	ToStaticWebLayerEbsVolumeArgsOutputWithContext(context.Context) StaticWebLayerEbsVolumeArgsOutput
}

type StaticWebLayerEbsVolumeArgsArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StaticWebLayerEbsVolumeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolumeArgs)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeArgsArgs) ToStaticWebLayerEbsVolumeArgsOutput() StaticWebLayerEbsVolumeArgsOutput {
	return i.ToStaticWebLayerEbsVolumeArgsOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeArgsArgs) ToStaticWebLayerEbsVolumeArgsOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeArgsOutput)
}

type StaticWebLayerEbsVolumeArgsArrayInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeArgsArrayOutput() StaticWebLayerEbsVolumeArgsArrayOutput
	ToStaticWebLayerEbsVolumeArgsArrayOutputWithContext(context.Context) StaticWebLayerEbsVolumeArgsArrayOutput
}

type StaticWebLayerEbsVolumeArgsArray []StaticWebLayerEbsVolumeArgsInput

func (StaticWebLayerEbsVolumeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolumeArgs)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeArgsArray) ToStaticWebLayerEbsVolumeArgsArrayOutput() StaticWebLayerEbsVolumeArgsArrayOutput {
	return i.ToStaticWebLayerEbsVolumeArgsArrayOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeArgsArray) ToStaticWebLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeArgsArrayOutput)
}

type StaticWebLayerEbsVolumeArgsOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolumeArgs)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeArgsOutput) ToStaticWebLayerEbsVolumeArgsOutput() StaticWebLayerEbsVolumeArgsOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArgsOutput) ToStaticWebLayerEbsVolumeArgsOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArgsOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArgsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o StaticWebLayerEbsVolumeArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o StaticWebLayerEbsVolumeArgsOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o StaticWebLayerEbsVolumeArgsOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o StaticWebLayerEbsVolumeArgsOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o StaticWebLayerEbsVolumeArgsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o StaticWebLayerEbsVolumeArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StaticWebLayerEbsVolumeArgsArrayOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolumeArgs)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeArgsArrayOutput) ToStaticWebLayerEbsVolumeArgsArrayOutput() StaticWebLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArgsArrayOutput) ToStaticWebLayerEbsVolumeArgsArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeArgsArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeArgsArrayOutput) Index(i pulumi.IntInput) StaticWebLayerEbsVolumeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticWebLayerEbsVolumeArgs {
		return vs[0].([]StaticWebLayerEbsVolumeArgs)[vs[1].(int)]
	}).(StaticWebLayerEbsVolumeArgsOutput)
}

type StaticWebLayerEbsVolumeState struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type StaticWebLayerEbsVolumeStateInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeStateOutput() StaticWebLayerEbsVolumeStateOutput
	ToStaticWebLayerEbsVolumeStateOutputWithContext(context.Context) StaticWebLayerEbsVolumeStateOutput
}

type StaticWebLayerEbsVolumeStateArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StaticWebLayerEbsVolumeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolumeState)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeStateArgs) ToStaticWebLayerEbsVolumeStateOutput() StaticWebLayerEbsVolumeStateOutput {
	return i.ToStaticWebLayerEbsVolumeStateOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeStateArgs) ToStaticWebLayerEbsVolumeStateOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeStateOutput)
}

type StaticWebLayerEbsVolumeStateArrayInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumeStateArrayOutput() StaticWebLayerEbsVolumeStateArrayOutput
	ToStaticWebLayerEbsVolumeStateArrayOutputWithContext(context.Context) StaticWebLayerEbsVolumeStateArrayOutput
}

type StaticWebLayerEbsVolumeStateArray []StaticWebLayerEbsVolumeStateInput

func (StaticWebLayerEbsVolumeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolumeState)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeStateArray) ToStaticWebLayerEbsVolumeStateArrayOutput() StaticWebLayerEbsVolumeStateArrayOutput {
	return i.ToStaticWebLayerEbsVolumeStateArrayOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeStateArray) ToStaticWebLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeStateArrayOutput)
}

type StaticWebLayerEbsVolumeStateOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolumeState)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeStateOutput) ToStaticWebLayerEbsVolumeStateOutput() StaticWebLayerEbsVolumeStateOutput {
	return o
}

func (o StaticWebLayerEbsVolumeStateOutput) ToStaticWebLayerEbsVolumeStateOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeStateOutput {
	return o
}

func (o StaticWebLayerEbsVolumeStateOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// For PIOPS volumes, the IOPS per disk.
func (o StaticWebLayerEbsVolumeStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The path to mount the EBS volume on the layer's instances.
func (o StaticWebLayerEbsVolumeStateOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The number of disks to use for the EBS volume.
func (o StaticWebLayerEbsVolumeStateOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

// The RAID level to use for the volume.
func (o StaticWebLayerEbsVolumeStateOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

// The size of the volume in gigabytes.
func (o StaticWebLayerEbsVolumeStateOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o StaticWebLayerEbsVolumeStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticWebLayerEbsVolumeState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StaticWebLayerEbsVolumeStateArrayOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticWebLayerEbsVolumeState)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeStateArrayOutput) ToStaticWebLayerEbsVolumeStateArrayOutput() StaticWebLayerEbsVolumeStateArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeStateArrayOutput) ToStaticWebLayerEbsVolumeStateArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeStateArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumeStateArrayOutput) Index(i pulumi.IntInput) StaticWebLayerEbsVolumeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticWebLayerEbsVolumeState {
		return vs[0].([]StaticWebLayerEbsVolumeState)[vs[1].(int)]
	}).(StaticWebLayerEbsVolumeStateOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppSourceOutput{})
	pulumi.RegisterOutputType(ApplicationAppSourceArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAppSourceArgsOutput{})
	pulumi.RegisterOutputType(ApplicationAppSourceArgsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAppSourceStateOutput{})
	pulumi.RegisterOutputType(ApplicationAppSourceStateArrayOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentArgsOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentArgsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentStateOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentStateArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationArgsOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationArgsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationStateOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationStateArrayOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceArgsOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceArgsArrayOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceStateOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceArgsOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceArgsArrayOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceStateOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceArgsOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceArgsArrayOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceStateOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceStateArrayOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeStateArrayOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceArrayOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceArgsOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceArgsArrayOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceStateOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceStateArrayOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeArgsOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeArgsArrayOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeStateOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeStateArrayOutput{})
}
