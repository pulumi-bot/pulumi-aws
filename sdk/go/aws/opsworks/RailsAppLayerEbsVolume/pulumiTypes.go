// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RailsAppLayerEbsVolume

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RailsAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	Iops *int `pulumi:"iops"`
	MountPoint string `pulumi:"mountPoint"`
	NumberOfDisks int `pulumi:"numberOfDisks"`
	RaidLevel *string `pulumi:"raidLevel"`
	Size int `pulumi:"size"`
	Type *string `pulumi:"type"`
}

type RailsAppLayerEbsVolumeInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput
	ToRailsAppLayerEbsVolumeOutputWithContext(context.Context) RailsAppLayerEbsVolumeOutput
}

type RailsAppLayerEbsVolumeArgs struct {
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	RaidLevel pulumi.StringPtrInput `pulumi:"raidLevel"`
	Size pulumi.IntInput `pulumi:"size"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RailsAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return i.ToRailsAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeOutput)
}

type RailsAppLayerEbsVolumeArrayInput interface {
	pulumi.Input

	ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput
	ToRailsAppLayerEbsVolumeArrayOutputWithContext(context.Context) RailsAppLayerEbsVolumeArrayOutput
}

type RailsAppLayerEbsVolumeArray []RailsAppLayerEbsVolumeInput

func (RailsAppLayerEbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolume)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArray) ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput {
	return i.ToRailsAppLayerEbsVolumeArrayOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArray) ToRailsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeArrayOutput)
}

type RailsAppLayerEbsVolumeOutput struct { *pulumi.OutputState }

func (RailsAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o RailsAppLayerEbsVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o RailsAppLayerEbsVolumeOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) string { return v.MountPoint }).(pulumi.StringOutput)
}

func (o RailsAppLayerEbsVolumeOutput) NumberOfDisks() pulumi.IntOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) int { return v.NumberOfDisks }).(pulumi.IntOutput)
}

func (o RailsAppLayerEbsVolumeOutput) RaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) *string { return v.RaidLevel }).(pulumi.StringPtrOutput)
}

func (o RailsAppLayerEbsVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o RailsAppLayerEbsVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v RailsAppLayerEbsVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RailsAppLayerEbsVolumeArrayOutput struct { *pulumi.OutputState}

func (RailsAppLayerEbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RailsAppLayerEbsVolume)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeArrayOutput) ToRailsAppLayerEbsVolumeArrayOutput() RailsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArrayOutput) ToRailsAppLayerEbsVolumeArrayOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeArrayOutput {
	return o
}

func (o RailsAppLayerEbsVolumeArrayOutput) Index(i pulumi.IntInput) RailsAppLayerEbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RailsAppLayerEbsVolume {
		return vs[0].([]RailsAppLayerEbsVolume)[vs[1].(int)]
	}).(RailsAppLayerEbsVolumeOutput)
}

func init() {
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeArrayOutput{})
}
