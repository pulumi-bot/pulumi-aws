// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type InstanceGroup struct {
	pulumi.CustomResourceState

	AutoscalingPolicy    pulumi.StringPtrOutput            `pulumi:"autoscalingPolicy"`
	BidPrice             pulumi.StringPtrOutput            `pulumi:"bidPrice"`
	ClusterId            pulumi.StringOutput               `pulumi:"clusterId"`
	ConfigurationsJson   pulumi.StringPtrOutput            `pulumi:"configurationsJson"`
	EbsConfigs           InstanceGroupEbsConfigArrayOutput `pulumi:"ebsConfigs"`
	EbsOptimized         pulumi.BoolPtrOutput              `pulumi:"ebsOptimized"`
	InstanceCount        pulumi.IntPtrOutput               `pulumi:"instanceCount"`
	InstanceType         pulumi.StringOutput               `pulumi:"instanceType"`
	Name                 pulumi.StringOutput               `pulumi:"name"`
	RunningInstanceCount pulumi.IntOutput                  `pulumi:"runningInstanceCount"`
	Status               pulumi.StringOutput               `pulumi:"status"`
}

// NewInstanceGroup registers a new resource with the given unique name, arguments, and options.
func NewInstanceGroup(ctx *pulumi.Context,
	name string, args *InstanceGroupArgs, opts ...pulumi.ResourceOption) (*InstanceGroup, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	if args == nil {
		args = &InstanceGroupArgs{}
	}
	var resource InstanceGroup
	err := ctx.RegisterResource("aws:emr/instanceGroup:InstanceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceGroup gets an existing InstanceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceGroupState, opts ...pulumi.ResourceOption) (*InstanceGroup, error) {
	var resource InstanceGroup
	err := ctx.ReadResource("aws:emr/instanceGroup:InstanceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceGroup resources.
type instanceGroupState struct {
	AutoscalingPolicy    *string                  `pulumi:"autoscalingPolicy"`
	BidPrice             *string                  `pulumi:"bidPrice"`
	ClusterId            *string                  `pulumi:"clusterId"`
	ConfigurationsJson   *string                  `pulumi:"configurationsJson"`
	EbsConfigs           []InstanceGroupEbsConfig `pulumi:"ebsConfigs"`
	EbsOptimized         *bool                    `pulumi:"ebsOptimized"`
	InstanceCount        *int                     `pulumi:"instanceCount"`
	InstanceType         *string                  `pulumi:"instanceType"`
	Name                 *string                  `pulumi:"name"`
	RunningInstanceCount *int                     `pulumi:"runningInstanceCount"`
	Status               *string                  `pulumi:"status"`
}

type InstanceGroupState struct {
	AutoscalingPolicy    pulumi.StringPtrInput
	BidPrice             pulumi.StringPtrInput
	ClusterId            pulumi.StringPtrInput
	ConfigurationsJson   pulumi.StringPtrInput
	EbsConfigs           InstanceGroupEbsConfigArrayInput
	EbsOptimized         pulumi.BoolPtrInput
	InstanceCount        pulumi.IntPtrInput
	InstanceType         pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	RunningInstanceCount pulumi.IntPtrInput
	Status               pulumi.StringPtrInput
}

func (InstanceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupState)(nil)).Elem()
}

type instanceGroupArgs struct {
	AutoscalingPolicy  *string                  `pulumi:"autoscalingPolicy"`
	BidPrice           *string                  `pulumi:"bidPrice"`
	ClusterId          string                   `pulumi:"clusterId"`
	ConfigurationsJson *string                  `pulumi:"configurationsJson"`
	EbsConfigs         []InstanceGroupEbsConfig `pulumi:"ebsConfigs"`
	EbsOptimized       *bool                    `pulumi:"ebsOptimized"`
	InstanceCount      *int                     `pulumi:"instanceCount"`
	InstanceType       string                   `pulumi:"instanceType"`
	Name               *string                  `pulumi:"name"`
}

// The set of arguments for constructing a InstanceGroup resource.
type InstanceGroupArgs struct {
	AutoscalingPolicy  pulumi.StringPtrInput
	BidPrice           pulumi.StringPtrInput
	ClusterId          pulumi.StringInput
	ConfigurationsJson pulumi.StringPtrInput
	EbsConfigs         InstanceGroupEbsConfigArrayInput
	EbsOptimized       pulumi.BoolPtrInput
	InstanceCount      pulumi.IntPtrInput
	InstanceType       pulumi.StringInput
	Name               pulumi.StringPtrInput
}

func (InstanceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupArgs)(nil)).Elem()
}
