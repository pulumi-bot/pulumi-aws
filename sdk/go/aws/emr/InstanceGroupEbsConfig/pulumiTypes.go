// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package InstanceGroupEbsConfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type InstanceGroupEbsConfig struct {
	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size int `pulumi:"size"`
	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type string `pulumi:"type"`
	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type InstanceGroupEbsConfigInput interface {
	pulumi.Input

	ToInstanceGroupEbsConfigOutput() InstanceGroupEbsConfigOutput
	ToInstanceGroupEbsConfigOutputWithContext(context.Context) InstanceGroupEbsConfigOutput
}

type InstanceGroupEbsConfigArgs struct {
	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size pulumi.IntInput `pulumi:"size"`
	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type pulumi.StringInput `pulumi:"type"`
	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance pulumi.IntPtrInput `pulumi:"volumesPerInstance"`
}

func (InstanceGroupEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupEbsConfig)(nil)).Elem()
}

func (i InstanceGroupEbsConfigArgs) ToInstanceGroupEbsConfigOutput() InstanceGroupEbsConfigOutput {
	return i.ToInstanceGroupEbsConfigOutputWithContext(context.Background())
}

func (i InstanceGroupEbsConfigArgs) ToInstanceGroupEbsConfigOutputWithContext(ctx context.Context) InstanceGroupEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupEbsConfigOutput)
}

type InstanceGroupEbsConfigArrayInput interface {
	pulumi.Input

	ToInstanceGroupEbsConfigArrayOutput() InstanceGroupEbsConfigArrayOutput
	ToInstanceGroupEbsConfigArrayOutputWithContext(context.Context) InstanceGroupEbsConfigArrayOutput
}

type InstanceGroupEbsConfigArray []InstanceGroupEbsConfigInput

func (InstanceGroupEbsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupEbsConfig)(nil)).Elem()
}

func (i InstanceGroupEbsConfigArray) ToInstanceGroupEbsConfigArrayOutput() InstanceGroupEbsConfigArrayOutput {
	return i.ToInstanceGroupEbsConfigArrayOutputWithContext(context.Background())
}

func (i InstanceGroupEbsConfigArray) ToInstanceGroupEbsConfigArrayOutputWithContext(ctx context.Context) InstanceGroupEbsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupEbsConfigArrayOutput)
}

type InstanceGroupEbsConfigOutput struct { *pulumi.OutputState }

func (InstanceGroupEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupEbsConfig)(nil)).Elem()
}

func (o InstanceGroupEbsConfigOutput) ToInstanceGroupEbsConfigOutput() InstanceGroupEbsConfigOutput {
	return o
}

func (o InstanceGroupEbsConfigOutput) ToInstanceGroupEbsConfigOutputWithContext(ctx context.Context) InstanceGroupEbsConfigOutput {
	return o
}

// The number of I/O operations per second (IOPS) that the volume supports.
func (o InstanceGroupEbsConfigOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func (v InstanceGroupEbsConfig) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
func (o InstanceGroupEbsConfigOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func (v InstanceGroupEbsConfig) int { return v.Size }).(pulumi.IntOutput)
}

// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
func (o InstanceGroupEbsConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceGroupEbsConfig) string { return v.Type }).(pulumi.StringOutput)
}

// The number of EBS Volumes to attach per instance.
func (o InstanceGroupEbsConfigOutput) VolumesPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func (v InstanceGroupEbsConfig) *int { return v.VolumesPerInstance }).(pulumi.IntPtrOutput)
}

type InstanceGroupEbsConfigArrayOutput struct { *pulumi.OutputState}

func (InstanceGroupEbsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupEbsConfig)(nil)).Elem()
}

func (o InstanceGroupEbsConfigArrayOutput) ToInstanceGroupEbsConfigArrayOutput() InstanceGroupEbsConfigArrayOutput {
	return o
}

func (o InstanceGroupEbsConfigArrayOutput) ToInstanceGroupEbsConfigArrayOutputWithContext(ctx context.Context) InstanceGroupEbsConfigArrayOutput {
	return o
}

func (o InstanceGroupEbsConfigArrayOutput) Index(i pulumi.IntInput) InstanceGroupEbsConfigOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) InstanceGroupEbsConfig {
		return vs[0].([]InstanceGroupEbsConfig)[vs[1].(int)]
	}).(InstanceGroupEbsConfigOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceGroupEbsConfigOutput{})
	pulumi.RegisterOutputType(InstanceGroupEbsConfigArrayOutput{})
}
