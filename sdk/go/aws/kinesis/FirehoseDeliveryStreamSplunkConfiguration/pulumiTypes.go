// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package FirehoseDeliveryStreamSplunkConfiguration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter"
)

type FirehoseDeliveryStreamSplunkConfiguration struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions *kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
	HecAcknowledgmentTimeout *int `pulumi:"hecAcknowledgmentTimeout"`
	// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
	HecEndpoint string `pulumi:"hecEndpoint"`
	// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
	HecEndpointType *string `pulumi:"hecEndpointType"`
	// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
	HecToken string `pulumi:"hecToken"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration *int `pulumi:"retryDuration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
}

type FirehoseDeliveryStreamSplunkConfigurationInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamSplunkConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationOutput
	ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(context.Context) FirehoseDeliveryStreamSplunkConfigurationOutput
}

type FirehoseDeliveryStreamSplunkConfigurationArgs struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsPtrInput `pulumi:"cloudwatchLoggingOptions"`
	// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
	HecAcknowledgmentTimeout pulumi.IntPtrInput `pulumi:"hecAcknowledgmentTimeout"`
	// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
	HecEndpoint pulumi.StringInput `pulumi:"hecEndpoint"`
	// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
	HecEndpointType pulumi.StringPtrInput `pulumi:"hecEndpointType"`
	// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
	HecToken pulumi.StringInput `pulumi:"hecToken"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationPtrInput `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration pulumi.IntPtrInput `pulumi:"retryDuration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode pulumi.StringPtrInput `pulumi:"s3BackupMode"`
}

func (FirehoseDeliveryStreamSplunkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationOutput)
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutput() FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationOutput).ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(ctx)
}

type FirehoseDeliveryStreamSplunkConfigurationPtrInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamSplunkConfigurationPtrOutput() FirehoseDeliveryStreamSplunkConfigurationPtrOutput
	ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(context.Context) FirehoseDeliveryStreamSplunkConfigurationPtrOutput
}

type firehoseDeliveryStreamSplunkConfigurationPtrType FirehoseDeliveryStreamSplunkConfigurationArgs

func FirehoseDeliveryStreamSplunkConfigurationPtr(v *FirehoseDeliveryStreamSplunkConfigurationArgs) FirehoseDeliveryStreamSplunkConfigurationPtrInput {	return (*firehoseDeliveryStreamSplunkConfigurationPtrType)(v)
}

func (*firehoseDeliveryStreamSplunkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (i *firehoseDeliveryStreamSplunkConfigurationPtrType) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutput() FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(context.Background())
}

func (i *firehoseDeliveryStreamSplunkConfigurationPtrType) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationPtrOutput)
}

type FirehoseDeliveryStreamSplunkConfigurationOutput struct { *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutput() FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return o.ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(context.Background())
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return o.ApplyT(func(v FirehoseDeliveryStreamSplunkConfiguration) *FirehoseDeliveryStreamSplunkConfiguration {
		return &v
	}).(FirehoseDeliveryStreamSplunkConfigurationPtrOutput)
}
// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecAcknowledgmentTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.HecAcknowledgmentTimeout }).(pulumi.IntPtrOutput)
}

// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecEndpoint() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecEndpoint }).(pulumi.StringOutput)
}

// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecEndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.HecEndpointType }).(pulumi.StringPtrOutput)
}

// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecToken() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecToken }).(pulumi.StringOutput)
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ProcessingConfiguration() kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration { return v.ProcessingConfiguration }).(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationPtrOutput)
}

// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) RetryDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.RetryDuration }).(pulumi.IntPtrOutput)
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) S3BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.S3BackupMode }).(pulumi.StringPtrOutput)
}

type FirehoseDeliveryStreamSplunkConfigurationPtrOutput struct { *pulumi.OutputState}

func (FirehoseDeliveryStreamSplunkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutput() FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) ToFirehoseDeliveryStreamSplunkConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) Elem() FirehoseDeliveryStreamSplunkConfigurationOutput {
	return o.ApplyT(func (v *FirehoseDeliveryStreamSplunkConfiguration) FirehoseDeliveryStreamSplunkConfiguration { return *v }).(FirehoseDeliveryStreamSplunkConfigurationOutput)
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) HecAcknowledgmentTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.HecAcknowledgmentTimeout }).(pulumi.IntPtrOutput)
}

// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) HecEndpoint() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecEndpoint }).(pulumi.StringOutput)
}

// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) HecEndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.HecEndpointType }).(pulumi.StringPtrOutput)
}

// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) HecToken() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecToken }).(pulumi.StringOutput)
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) ProcessingConfiguration() kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration { return v.ProcessingConfiguration }).(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationPtrOutput)
}

// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) RetryDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.RetryDuration }).(pulumi.IntPtrOutput)
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
func (o FirehoseDeliveryStreamSplunkConfigurationPtrOutput) S3BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.S3BackupMode }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationPtrOutput{})
}
