// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type FirehoseDeliveryStream struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                                       `pulumi:"arn"`
	Destination                pulumi.StringOutput                                       `pulumi:"destination"`
	DestinationId              pulumi.StringOutput                                       `pulumi:"destinationId"`
	ElasticsearchConfiguration FirehoseDeliveryStreamElasticsearchConfigurationPtrOutput `pulumi:"elasticsearchConfiguration"`
	ExtendedS3Configuration    FirehoseDeliveryStreamExtendedS3ConfigurationPtrOutput    `pulumi:"extendedS3Configuration"`
	KinesisSourceConfiguration FirehoseDeliveryStreamKinesisSourceConfigurationPtrOutput `pulumi:"kinesisSourceConfiguration"`
	Name                       pulumi.StringOutput                                       `pulumi:"name"`
	RedshiftConfiguration      FirehoseDeliveryStreamRedshiftConfigurationPtrOutput      `pulumi:"redshiftConfiguration"`
	S3Configuration            FirehoseDeliveryStreamS3ConfigurationPtrOutput            `pulumi:"s3Configuration"`
	ServerSideEncryption       FirehoseDeliveryStreamServerSideEncryptionPtrOutput       `pulumi:"serverSideEncryption"`
	SplunkConfiguration        FirehoseDeliveryStreamSplunkConfigurationPtrOutput        `pulumi:"splunkConfiguration"`
	Tags                       pulumi.StringMapOutput                                    `pulumi:"tags"`
	VersionId                  pulumi.StringOutput                                       `pulumi:"versionId"`
}

// NewFirehoseDeliveryStream registers a new resource with the given unique name, arguments, and options.
func NewFirehoseDeliveryStream(ctx *pulumi.Context,
	name string, args *FirehoseDeliveryStreamArgs, opts ...pulumi.ResourceOption) (*FirehoseDeliveryStream, error) {
	if args == nil || args.Destination == nil {
		return nil, errors.New("missing required argument 'Destination'")
	}
	if args == nil {
		args = &FirehoseDeliveryStreamArgs{}
	}
	var resource FirehoseDeliveryStream
	err := ctx.RegisterResource("aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirehoseDeliveryStream gets an existing FirehoseDeliveryStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirehoseDeliveryStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirehoseDeliveryStreamState, opts ...pulumi.ResourceOption) (*FirehoseDeliveryStream, error) {
	var resource FirehoseDeliveryStream
	err := ctx.ReadResource("aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirehoseDeliveryStream resources.
type firehoseDeliveryStreamState struct {
	Arn                        *string                                           `pulumi:"arn"`
	Destination                *string                                           `pulumi:"destination"`
	DestinationId              *string                                           `pulumi:"destinationId"`
	ElasticsearchConfiguration *FirehoseDeliveryStreamElasticsearchConfiguration `pulumi:"elasticsearchConfiguration"`
	ExtendedS3Configuration    *FirehoseDeliveryStreamExtendedS3Configuration    `pulumi:"extendedS3Configuration"`
	KinesisSourceConfiguration *FirehoseDeliveryStreamKinesisSourceConfiguration `pulumi:"kinesisSourceConfiguration"`
	Name                       *string                                           `pulumi:"name"`
	RedshiftConfiguration      *FirehoseDeliveryStreamRedshiftConfiguration      `pulumi:"redshiftConfiguration"`
	S3Configuration            *FirehoseDeliveryStreamS3Configuration            `pulumi:"s3Configuration"`
	ServerSideEncryption       *FirehoseDeliveryStreamServerSideEncryption       `pulumi:"serverSideEncryption"`
	SplunkConfiguration        *FirehoseDeliveryStreamSplunkConfiguration        `pulumi:"splunkConfiguration"`
	Tags                       map[string]string                                 `pulumi:"tags"`
	VersionId                  *string                                           `pulumi:"versionId"`
}

type FirehoseDeliveryStreamState struct {
	Arn                        pulumi.StringPtrInput
	Destination                pulumi.StringPtrInput
	DestinationId              pulumi.StringPtrInput
	ElasticsearchConfiguration FirehoseDeliveryStreamElasticsearchConfigurationPtrInput
	ExtendedS3Configuration    FirehoseDeliveryStreamExtendedS3ConfigurationPtrInput
	KinesisSourceConfiguration FirehoseDeliveryStreamKinesisSourceConfigurationPtrInput
	Name                       pulumi.StringPtrInput
	RedshiftConfiguration      FirehoseDeliveryStreamRedshiftConfigurationPtrInput
	S3Configuration            FirehoseDeliveryStreamS3ConfigurationPtrInput
	ServerSideEncryption       FirehoseDeliveryStreamServerSideEncryptionPtrInput
	SplunkConfiguration        FirehoseDeliveryStreamSplunkConfigurationPtrInput
	Tags                       pulumi.StringMapInput
	VersionId                  pulumi.StringPtrInput
}

func (FirehoseDeliveryStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*firehoseDeliveryStreamState)(nil)).Elem()
}

type firehoseDeliveryStreamArgs struct {
	Arn                        *string                                           `pulumi:"arn"`
	Destination                string                                            `pulumi:"destination"`
	DestinationId              *string                                           `pulumi:"destinationId"`
	ElasticsearchConfiguration *FirehoseDeliveryStreamElasticsearchConfiguration `pulumi:"elasticsearchConfiguration"`
	ExtendedS3Configuration    *FirehoseDeliveryStreamExtendedS3Configuration    `pulumi:"extendedS3Configuration"`
	KinesisSourceConfiguration *FirehoseDeliveryStreamKinesisSourceConfiguration `pulumi:"kinesisSourceConfiguration"`
	Name                       *string                                           `pulumi:"name"`
	RedshiftConfiguration      *FirehoseDeliveryStreamRedshiftConfiguration      `pulumi:"redshiftConfiguration"`
	S3Configuration            *FirehoseDeliveryStreamS3Configuration            `pulumi:"s3Configuration"`
	ServerSideEncryption       *FirehoseDeliveryStreamServerSideEncryption       `pulumi:"serverSideEncryption"`
	SplunkConfiguration        *FirehoseDeliveryStreamSplunkConfiguration        `pulumi:"splunkConfiguration"`
	Tags                       map[string]string                                 `pulumi:"tags"`
	VersionId                  *string                                           `pulumi:"versionId"`
}

// The set of arguments for constructing a FirehoseDeliveryStream resource.
type FirehoseDeliveryStreamArgs struct {
	Arn                        pulumi.StringPtrInput
	Destination                pulumi.StringInput
	DestinationId              pulumi.StringPtrInput
	ElasticsearchConfiguration FirehoseDeliveryStreamElasticsearchConfigurationPtrInput
	ExtendedS3Configuration    FirehoseDeliveryStreamExtendedS3ConfigurationPtrInput
	KinesisSourceConfiguration FirehoseDeliveryStreamKinesisSourceConfigurationPtrInput
	Name                       pulumi.StringPtrInput
	RedshiftConfiguration      FirehoseDeliveryStreamRedshiftConfigurationPtrInput
	S3Configuration            FirehoseDeliveryStreamS3ConfigurationPtrInput
	ServerSideEncryption       FirehoseDeliveryStreamServerSideEncryptionPtrInput
	SplunkConfiguration        FirehoseDeliveryStreamSplunkConfigurationPtrInput
	Tags                       pulumi.StringMapInput
	VersionId                  pulumi.StringPtrInput
}

func (FirehoseDeliveryStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firehoseDeliveryStreamArgs)(nil)).Elem()
}
