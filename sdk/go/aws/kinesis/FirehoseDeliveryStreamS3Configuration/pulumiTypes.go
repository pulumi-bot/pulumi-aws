// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package FirehoseDeliveryStreamS3Configuration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions"
)

type FirehoseDeliveryStreamS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
	BufferInterval *int `pulumi:"bufferInterval"`
	// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferSize *int `pulumi:"bufferSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions *kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamS3ConfigurationInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamS3ConfigurationOutput() FirehoseDeliveryStreamS3ConfigurationOutput
	ToFirehoseDeliveryStreamS3ConfigurationOutputWithContext(context.Context) FirehoseDeliveryStreamS3ConfigurationOutput
}

type FirehoseDeliveryStreamS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumi.StringInput `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
	BufferInterval pulumi.IntPtrInput `pulumi:"bufferInterval"`
	// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferSize pulumi.IntPtrInput `pulumi:"bufferSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsPtrInput `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
	CompressionFormat pulumi.StringPtrInput `pulumi:"compressionFormat"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamS3ConfigurationArgs) ToFirehoseDeliveryStreamS3ConfigurationOutput() FirehoseDeliveryStreamS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamS3ConfigurationArgs) ToFirehoseDeliveryStreamS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamS3ConfigurationOutput)
}

func (i FirehoseDeliveryStreamS3ConfigurationArgs) ToFirehoseDeliveryStreamS3ConfigurationPtrOutput() FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamS3ConfigurationArgs) ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamS3ConfigurationOutput).ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(ctx)
}

type FirehoseDeliveryStreamS3ConfigurationPtrInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamS3ConfigurationPtrOutput() FirehoseDeliveryStreamS3ConfigurationPtrOutput
	ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(context.Context) FirehoseDeliveryStreamS3ConfigurationPtrOutput
}

type firehoseDeliveryStreamS3ConfigurationPtrType FirehoseDeliveryStreamS3ConfigurationArgs

func FirehoseDeliveryStreamS3ConfigurationPtr(v *FirehoseDeliveryStreamS3ConfigurationArgs) FirehoseDeliveryStreamS3ConfigurationPtrInput {	return (*firehoseDeliveryStreamS3ConfigurationPtrType)(v)
}

func (*firehoseDeliveryStreamS3ConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamS3Configuration)(nil)).Elem()
}

func (i *firehoseDeliveryStreamS3ConfigurationPtrType) ToFirehoseDeliveryStreamS3ConfigurationPtrOutput() FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(context.Background())
}

func (i *firehoseDeliveryStreamS3ConfigurationPtrType) ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamS3ConfigurationPtrOutput)
}

type FirehoseDeliveryStreamS3ConfigurationOutput struct { *pulumi.OutputState }

func (FirehoseDeliveryStreamS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamS3ConfigurationOutput) ToFirehoseDeliveryStreamS3ConfigurationOutput() FirehoseDeliveryStreamS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamS3ConfigurationOutput) ToFirehoseDeliveryStreamS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamS3ConfigurationOutput) ToFirehoseDeliveryStreamS3ConfigurationPtrOutput() FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return o.ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(context.Background())
}

func (o FirehoseDeliveryStreamS3ConfigurationOutput) ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return o.ApplyT(func(v FirehoseDeliveryStreamS3Configuration) *FirehoseDeliveryStreamS3Configuration {
		return &v
	}).(FirehoseDeliveryStreamS3ConfigurationPtrOutput)
}
// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamS3ConfigurationOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) string { return v.BucketArn }).(pulumi.StringOutput)
}

// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) BufferInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *int { return v.BufferInterval }).(pulumi.IntPtrOutput)
}

// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) BufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *int { return v.BufferSize }).(pulumi.IntPtrOutput)
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) CompressionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.CompressionFormat }).(pulumi.StringPtrOutput)
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamS3ConfigurationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
func (o FirehoseDeliveryStreamS3ConfigurationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) string { return v.RoleArn }).(pulumi.StringOutput)
}

type FirehoseDeliveryStreamS3ConfigurationPtrOutput struct { *pulumi.OutputState}

func (FirehoseDeliveryStreamS3ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) ToFirehoseDeliveryStreamS3ConfigurationPtrOutput() FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) ToFirehoseDeliveryStreamS3ConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamS3ConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) Elem() FirehoseDeliveryStreamS3ConfigurationOutput {
	return o.ApplyT(func (v *FirehoseDeliveryStreamS3Configuration) FirehoseDeliveryStreamS3Configuration { return *v }).(FirehoseDeliveryStreamS3ConfigurationOutput)
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) string { return v.BucketArn }).(pulumi.StringOutput)
}

// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) BufferInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *int { return v.BufferInterval }).(pulumi.IntPtrOutput)
}

// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) BufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *int { return v.BufferSize }).(pulumi.IntPtrOutput)
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) CompressionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.CompressionFormat }).(pulumi.StringPtrOutput)
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
func (o FirehoseDeliveryStreamS3ConfigurationPtrOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamS3Configuration) string { return v.RoleArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FirehoseDeliveryStreamS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamS3ConfigurationPtrOutput{})
}
