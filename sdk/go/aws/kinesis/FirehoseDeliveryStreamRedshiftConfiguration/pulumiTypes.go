// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package FirehoseDeliveryStreamRedshiftConfiguration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration"
	"https:/github.com/pulumi/pulumi-aws/kinesis/FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions"
)

type FirehoseDeliveryStreamRedshiftConfiguration struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions *kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The jdbcurl of the redshift cluster.
	ClusterJdbcurl string `pulumi:"clusterJdbcurl"`
	// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
	CopyOptions *string `pulumi:"copyOptions"`
	// The data table columns that will be targeted by the copy command.
	DataTableColumns *string `pulumi:"dataTableColumns"`
	// The name of the table in the redshift cluster that the s3 bucket will copy to.
	DataTableName string `pulumi:"dataTableName"`
	// The password for the username above.
	Password string `pulumi:"password"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration *int `pulumi:"retryDuration"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn string `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration *kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration `pulumi:"s3BackupConfiguration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
	Username string `pulumi:"username"`
}

type FirehoseDeliveryStreamRedshiftConfigurationInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamRedshiftConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationOutput
	ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(context.Context) FirehoseDeliveryStreamRedshiftConfigurationOutput
}

type FirehoseDeliveryStreamRedshiftConfigurationArgs struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsPtrInput `pulumi:"cloudwatchLoggingOptions"`
	// The jdbcurl of the redshift cluster.
	ClusterJdbcurl pulumi.StringInput `pulumi:"clusterJdbcurl"`
	// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
	CopyOptions pulumi.StringPtrInput `pulumi:"copyOptions"`
	// The data table columns that will be targeted by the copy command.
	DataTableColumns pulumi.StringPtrInput `pulumi:"dataTableColumns"`
	// The name of the table in the redshift cluster that the s3 bucket will copy to.
	DataTableName pulumi.StringInput `pulumi:"dataTableName"`
	// The password for the username above.
	Password pulumi.StringInput `pulumi:"password"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationPtrInput `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration pulumi.IntPtrInput `pulumi:"retryDuration"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationPtrInput `pulumi:"s3BackupConfiguration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode pulumi.StringPtrInput `pulumi:"s3BackupMode"`
	// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
	Username pulumi.StringInput `pulumi:"username"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationOutput)
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutput() FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationOutput).ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(ctx)
}

type FirehoseDeliveryStreamRedshiftConfigurationPtrInput interface {
	pulumi.Input

	ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutput() FirehoseDeliveryStreamRedshiftConfigurationPtrOutput
	ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(context.Context) FirehoseDeliveryStreamRedshiftConfigurationPtrOutput
}

type firehoseDeliveryStreamRedshiftConfigurationPtrType FirehoseDeliveryStreamRedshiftConfigurationArgs

func FirehoseDeliveryStreamRedshiftConfigurationPtr(v *FirehoseDeliveryStreamRedshiftConfigurationArgs) FirehoseDeliveryStreamRedshiftConfigurationPtrInput {	return (*firehoseDeliveryStreamRedshiftConfigurationPtrType)(v)
}

func (*firehoseDeliveryStreamRedshiftConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (i *firehoseDeliveryStreamRedshiftConfigurationPtrType) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutput() FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(context.Background())
}

func (i *firehoseDeliveryStreamRedshiftConfigurationPtrType) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationPtrOutput)
}

type FirehoseDeliveryStreamRedshiftConfigurationOutput struct { *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutput() FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return o.ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(context.Background())
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return o.ApplyT(func(v FirehoseDeliveryStreamRedshiftConfiguration) *FirehoseDeliveryStreamRedshiftConfiguration {
		return &v
	}).(FirehoseDeliveryStreamRedshiftConfigurationPtrOutput)
}
// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The jdbcurl of the redshift cluster.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ClusterJdbcurl() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.ClusterJdbcurl }).(pulumi.StringOutput)
}

// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) CopyOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.CopyOptions }).(pulumi.StringPtrOutput)
}

// The data table columns that will be targeted by the copy command.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) DataTableColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.DataTableColumns }).(pulumi.StringPtrOutput)
}

// The name of the table in the redshift cluster that the s3 bucket will copy to.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) DataTableName() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.DataTableName }).(pulumi.StringOutput)
}

// The password for the username above.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Password }).(pulumi.StringOutput)
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ProcessingConfiguration() kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration { return v.ProcessingConfiguration }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationPtrOutput)
}

// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) RetryDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *int { return v.RetryDuration }).(pulumi.IntPtrOutput)
}

// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) S3BackupConfiguration() kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration { return v.S3BackupConfiguration }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationPtrOutput)
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) S3BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.S3BackupMode }).(pulumi.StringPtrOutput)
}

// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Username }).(pulumi.StringOutput)
}

type FirehoseDeliveryStreamRedshiftConfigurationPtrOutput struct { *pulumi.OutputState}

func (FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutput() FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) ToFirehoseDeliveryStreamRedshiftConfigurationPtrOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationPtrOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) Elem() FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return o.ApplyT(func (v *FirehoseDeliveryStreamRedshiftConfiguration) FirehoseDeliveryStreamRedshiftConfiguration { return *v }).(FirehoseDeliveryStreamRedshiftConfigurationOutput)
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) CloudwatchLoggingOptions() kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions { return v.CloudwatchLoggingOptions }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsPtrOutput)
}

// The jdbcurl of the redshift cluster.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) ClusterJdbcurl() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.ClusterJdbcurl }).(pulumi.StringOutput)
}

// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) CopyOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.CopyOptions }).(pulumi.StringPtrOutput)
}

// The data table columns that will be targeted by the copy command.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) DataTableColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.DataTableColumns }).(pulumi.StringPtrOutput)
}

// The name of the table in the redshift cluster that the s3 bucket will copy to.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) DataTableName() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.DataTableName }).(pulumi.StringOutput)
}

// The password for the username above.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Password }).(pulumi.StringOutput)
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) ProcessingConfiguration() kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration { return v.ProcessingConfiguration }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationPtrOutput)
}

// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) RetryDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *int { return v.RetryDuration }).(pulumi.IntPtrOutput)
}

// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) S3BackupConfiguration() kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration { return v.S3BackupConfiguration }).(kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationPtrOutput)
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) S3BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.S3BackupMode }).(pulumi.StringPtrOutput)
}

// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
func (o FirehoseDeliveryStreamRedshiftConfigurationPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func (v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationPtrOutput{})
}
