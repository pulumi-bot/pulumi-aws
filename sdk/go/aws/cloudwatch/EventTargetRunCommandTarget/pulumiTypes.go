// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package EventTargetRunCommandTarget

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EventTargetRunCommandTarget struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key string `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

type EventTargetRunCommandTargetInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput
	ToEventTargetRunCommandTargetOutputWithContext(context.Context) EventTargetRunCommandTargetOutput
}

type EventTargetRunCommandTargetArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key pulumi.StringInput `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventTargetRunCommandTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return i.ToEventTargetRunCommandTargetOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetOutput)
}

type EventTargetRunCommandTargetArrayInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput
	ToEventTargetRunCommandTargetArrayOutputWithContext(context.Context) EventTargetRunCommandTargetArrayOutput
}

type EventTargetRunCommandTargetArray []EventTargetRunCommandTargetInput

func (EventTargetRunCommandTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return i.ToEventTargetRunCommandTargetArrayOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetArrayOutput)
}

type EventTargetRunCommandTargetOutput struct { *pulumi.OutputState }

func (EventTargetRunCommandTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return o
}

// Can be either `tag:tag-key` or `InstanceIds`.
func (o EventTargetRunCommandTargetOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func (v EventTargetRunCommandTarget) string { return v.Key }).(pulumi.StringOutput)
}

// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
func (o EventTargetRunCommandTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func (v EventTargetRunCommandTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventTargetRunCommandTargetArrayOutput struct { *pulumi.OutputState}

func (EventTargetRunCommandTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) Index(i pulumi.IntInput) EventTargetRunCommandTargetOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) EventTargetRunCommandTarget {
		return vs[0].([]EventTargetRunCommandTarget)[vs[1].(int)]
	}).(EventTargetRunCommandTargetOutput)
}

func init() {
	pulumi.RegisterOutputType(EventTargetRunCommandTargetOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetArrayOutput{})
}
