// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LogMetricFilter struct {
	pulumi.CustomResourceState

	LogGroupName         pulumi.StringOutput                       `pulumi:"logGroupName"`
	MetricTransformation LogMetricFilterMetricTransformationOutput `pulumi:"metricTransformation"`
	Name                 pulumi.StringOutput                       `pulumi:"name"`
	Pattern              pulumi.StringOutput                       `pulumi:"pattern"`
}

// NewLogMetricFilter registers a new resource with the given unique name, arguments, and options.
func NewLogMetricFilter(ctx *pulumi.Context,
	name string, args *LogMetricFilterArgs, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	if args == nil || args.LogGroupName == nil {
		return nil, errors.New("missing required argument 'LogGroupName'")
	}
	if args == nil || args.MetricTransformation == nil {
		return nil, errors.New("missing required argument 'MetricTransformation'")
	}
	if args == nil || args.Pattern == nil {
		return nil, errors.New("missing required argument 'Pattern'")
	}
	if args == nil {
		args = &LogMetricFilterArgs{}
	}
	var resource LogMetricFilter
	err := ctx.RegisterResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogMetricFilter gets an existing LogMetricFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogMetricFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogMetricFilterState, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	var resource LogMetricFilter
	err := ctx.ReadResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogMetricFilter resources.
type logMetricFilterState struct {
	LogGroupName         *string                              `pulumi:"logGroupName"`
	MetricTransformation *LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	Name                 *string                              `pulumi:"name"`
	Pattern              *string                              `pulumi:"pattern"`
}

type LogMetricFilterState struct {
	LogGroupName         pulumi.StringPtrInput
	MetricTransformation LogMetricFilterMetricTransformationPtrInput
	Name                 pulumi.StringPtrInput
	Pattern              pulumi.StringPtrInput
}

func (LogMetricFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterState)(nil)).Elem()
}

type logMetricFilterArgs struct {
	LogGroupName         string                              `pulumi:"logGroupName"`
	MetricTransformation LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	Name                 *string                             `pulumi:"name"`
	Pattern              string                              `pulumi:"pattern"`
}

// The set of arguments for constructing a LogMetricFilter resource.
type LogMetricFilterArgs struct {
	LogGroupName         pulumi.StringInput
	MetricTransformation LogMetricFilterMetricTransformationInput
	Name                 pulumi.StringPtrInput
	Pattern              pulumi.StringInput
}

func (LogMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterArgs)(nil)).Elem()
}
