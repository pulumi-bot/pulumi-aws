// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventRule struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput    `pulumi:"arn"`
	Description        pulumi.StringPtrOutput `pulumi:"description"`
	EventPattern       pulumi.StringPtrOutput `pulumi:"eventPattern"`
	IsEnabled          pulumi.BoolPtrOutput   `pulumi:"isEnabled"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	NamePrefix         pulumi.StringPtrOutput `pulumi:"namePrefix"`
	RoleArn            pulumi.StringPtrOutput `pulumi:"roleArn"`
	ScheduleExpression pulumi.StringPtrOutput `pulumi:"scheduleExpression"`
	Tags               pulumi.StringMapOutput `pulumi:"tags"`
}

// NewEventRule registers a new resource with the given unique name, arguments, and options.
func NewEventRule(ctx *pulumi.Context,
	name string, args *EventRuleArgs, opts ...pulumi.ResourceOption) (*EventRule, error) {
	if args == nil {
		args = &EventRuleArgs{}
	}
	var resource EventRule
	err := ctx.RegisterResource("aws:cloudwatch/eventRule:EventRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventRule gets an existing EventRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventRuleState, opts ...pulumi.ResourceOption) (*EventRule, error) {
	var resource EventRule
	err := ctx.ReadResource("aws:cloudwatch/eventRule:EventRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventRule resources.
type eventRuleState struct {
	Arn                *string           `pulumi:"arn"`
	Description        *string           `pulumi:"description"`
	EventPattern       *string           `pulumi:"eventPattern"`
	IsEnabled          *bool             `pulumi:"isEnabled"`
	Name               *string           `pulumi:"name"`
	NamePrefix         *string           `pulumi:"namePrefix"`
	RoleArn            *string           `pulumi:"roleArn"`
	ScheduleExpression *string           `pulumi:"scheduleExpression"`
	Tags               map[string]string `pulumi:"tags"`
}

type EventRuleState struct {
	Arn                pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	EventPattern       pulumi.StringPtrInput
	IsEnabled          pulumi.BoolPtrInput
	Name               pulumi.StringPtrInput
	NamePrefix         pulumi.StringPtrInput
	RoleArn            pulumi.StringPtrInput
	ScheduleExpression pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
}

func (EventRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleState)(nil)).Elem()
}

type eventRuleArgs struct {
	Description        *string           `pulumi:"description"`
	EventPattern       *string           `pulumi:"eventPattern"`
	IsEnabled          *bool             `pulumi:"isEnabled"`
	Name               *string           `pulumi:"name"`
	NamePrefix         *string           `pulumi:"namePrefix"`
	RoleArn            *string           `pulumi:"roleArn"`
	ScheduleExpression *string           `pulumi:"scheduleExpression"`
	Tags               map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EventRule resource.
type EventRuleArgs struct {
	Description        pulumi.StringPtrInput
	EventPattern       pulumi.StringPtrInput
	IsEnabled          pulumi.BoolPtrInput
	Name               pulumi.StringPtrInput
	NamePrefix         pulumi.StringPtrInput
	RoleArn            pulumi.StringPtrInput
	ScheduleExpression pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
}

func (EventRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleArgs)(nil)).Elem()
}
