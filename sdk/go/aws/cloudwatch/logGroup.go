// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LogGroup struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput    `pulumi:"arn"`
	KmsKeyId        pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	NamePrefix      pulumi.StringPtrOutput `pulumi:"namePrefix"`
	RetentionInDays pulumi.IntPtrOutput    `pulumi:"retentionInDays"`
	Tags            pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLogGroup registers a new resource with the given unique name, arguments, and options.
func NewLogGroup(ctx *pulumi.Context,
	name string, args *LogGroupArgs, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	if args == nil {
		args = &LogGroupArgs{}
	}
	var resource LogGroup
	err := ctx.RegisterResource("aws:cloudwatch/logGroup:LogGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogGroup gets an existing LogGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogGroupState, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	var resource LogGroup
	err := ctx.ReadResource("aws:cloudwatch/logGroup:LogGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogGroup resources.
type logGroupState struct {
	Arn             *string           `pulumi:"arn"`
	KmsKeyId        *string           `pulumi:"kmsKeyId"`
	Name            *string           `pulumi:"name"`
	NamePrefix      *string           `pulumi:"namePrefix"`
	RetentionInDays *int              `pulumi:"retentionInDays"`
	Tags            map[string]string `pulumi:"tags"`
}

type LogGroupState struct {
	Arn             pulumi.StringPtrInput
	KmsKeyId        pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	RetentionInDays pulumi.IntPtrInput
	Tags            pulumi.StringMapInput
}

func (LogGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupState)(nil)).Elem()
}

type logGroupArgs struct {
	KmsKeyId        *string           `pulumi:"kmsKeyId"`
	Name            *string           `pulumi:"name"`
	NamePrefix      *string           `pulumi:"namePrefix"`
	RetentionInDays *int              `pulumi:"retentionInDays"`
	Tags            map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogGroup resource.
type LogGroupArgs struct {
	KmsKeyId        pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	RetentionInDays pulumi.IntPtrInput
	Tags            pulumi.StringMapInput
}

func (LogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupArgs)(nil)).Elem()
}
