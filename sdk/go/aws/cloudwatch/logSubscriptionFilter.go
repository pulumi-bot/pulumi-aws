// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LogSubscriptionFilter struct {
	pulumi.CustomResourceState

	DestinationArn pulumi.StringOutput    `pulumi:"destinationArn"`
	Distribution   pulumi.StringPtrOutput `pulumi:"distribution"`
	FilterPattern  pulumi.StringOutput    `pulumi:"filterPattern"`
	LogGroup       pulumi.StringOutput    `pulumi:"logGroup"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	RoleArn        pulumi.StringOutput    `pulumi:"roleArn"`
}

// NewLogSubscriptionFilter registers a new resource with the given unique name, arguments, and options.
func NewLogSubscriptionFilter(ctx *pulumi.Context,
	name string, args *LogSubscriptionFilterArgs, opts ...pulumi.ResourceOption) (*LogSubscriptionFilter, error) {
	if args == nil || args.DestinationArn == nil {
		return nil, errors.New("missing required argument 'DestinationArn'")
	}
	if args == nil || args.FilterPattern == nil {
		return nil, errors.New("missing required argument 'FilterPattern'")
	}
	if args == nil || args.LogGroup == nil {
		return nil, errors.New("missing required argument 'LogGroup'")
	}
	if args == nil {
		args = &LogSubscriptionFilterArgs{}
	}
	var resource LogSubscriptionFilter
	err := ctx.RegisterResource("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogSubscriptionFilter gets an existing LogSubscriptionFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogSubscriptionFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogSubscriptionFilterState, opts ...pulumi.ResourceOption) (*LogSubscriptionFilter, error) {
	var resource LogSubscriptionFilter
	err := ctx.ReadResource("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogSubscriptionFilter resources.
type logSubscriptionFilterState struct {
	DestinationArn *string `pulumi:"destinationArn"`
	Distribution   *string `pulumi:"distribution"`
	FilterPattern  *string `pulumi:"filterPattern"`
	LogGroup       *string `pulumi:"logGroup"`
	Name           *string `pulumi:"name"`
	RoleArn        *string `pulumi:"roleArn"`
}

type LogSubscriptionFilterState struct {
	DestinationArn pulumi.StringPtrInput
	Distribution   pulumi.StringPtrInput
	FilterPattern  pulumi.StringPtrInput
	LogGroup       pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	RoleArn        pulumi.StringPtrInput
}

func (LogSubscriptionFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logSubscriptionFilterState)(nil)).Elem()
}

type logSubscriptionFilterArgs struct {
	DestinationArn string      `pulumi:"destinationArn"`
	Distribution   *string     `pulumi:"distribution"`
	FilterPattern  string      `pulumi:"filterPattern"`
	LogGroup       interface{} `pulumi:"logGroup"`
	Name           *string     `pulumi:"name"`
	RoleArn        *string     `pulumi:"roleArn"`
}

// The set of arguments for constructing a LogSubscriptionFilter resource.
type LogSubscriptionFilterArgs struct {
	DestinationArn pulumi.StringInput
	Distribution   pulumi.StringPtrInput
	FilterPattern  pulumi.StringInput
	LogGroup       pulumi.Input
	Name           pulumi.StringPtrInput
	RoleArn        pulumi.StringPtrInput
}

func (LogSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logSubscriptionFilterArgs)(nil)).Elem()
}
