// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package EventTargetEcsTarget

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/cloudwatch/EventTargetEcsTargetNetworkConfiguration"
)

type EventTargetEcsTarget struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType *string `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration *cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type EventTargetEcsTargetInput interface {
	pulumi.Input

	ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput
	ToEventTargetEcsTargetOutputWithContext(context.Context) EventTargetEcsTargetOutput
}

type EventTargetEcsTargetArgs struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return i.ToEventTargetEcsTargetOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput)
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput).ToEventTargetEcsTargetPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput
	ToEventTargetEcsTargetPtrOutputWithContext(context.Context) EventTargetEcsTargetPtrOutput
}

type eventTargetEcsTargetPtrType EventTargetEcsTargetArgs

func EventTargetEcsTargetPtr(v *EventTargetEcsTargetArgs) EventTargetEcsTargetPtrInput {	return (*eventTargetEcsTargetPtrType)(v)
}

func (*eventTargetEcsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetPtrOutput)
}

type EventTargetEcsTargetOutput struct { *pulumi.OutputState }

func (EventTargetEcsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTarget {
		return &v
	}).(EventTargetEcsTargetPtrOutput)
}
// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetOutput) NetworkConfiguration() cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration }).(cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetPtrOutput struct { *pulumi.OutputState}

func (EventTargetEcsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) Elem() EventTargetEcsTargetOutput {
	return o.ApplyT(func (v *EventTargetEcsTarget) EventTargetEcsTarget { return *v }).(EventTargetEcsTargetOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetPtrOutput) NetworkConfiguration() cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration }).(cloudwatchEventTargetEcsTargetNetworkConfiguration.EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetPtrOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func (v EventTargetEcsTarget) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EventTargetEcsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetPtrOutput{})
}
