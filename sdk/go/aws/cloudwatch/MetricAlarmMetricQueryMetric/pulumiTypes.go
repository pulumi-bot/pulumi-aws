// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package MetricAlarmMetricQueryMetric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MetricAlarmMetricQueryMetric struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]interface{} `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName string `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period int `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat string `pulumi:"stat"`
	// The unit for this metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmMetricQueryMetricInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput
	ToMetricAlarmMetricQueryMetricOutputWithContext(context.Context) MetricAlarmMetricQueryMetricOutput
}

type MetricAlarmMetricQueryMetricArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumi.MapInput `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat pulumi.StringInput `pulumi:"stat"`
	// The unit for this metric.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (MetricAlarmMetricQueryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return i.ToMetricAlarmMetricQueryMetricOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput)
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput).ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx)
}

type MetricAlarmMetricQueryMetricPtrInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput
	ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Context) MetricAlarmMetricQueryMetricPtrOutput
}

type metricAlarmMetricQueryMetricPtrType MetricAlarmMetricQueryMetricArgs

func MetricAlarmMetricQueryMetricPtr(v *MetricAlarmMetricQueryMetricArgs) MetricAlarmMetricQueryMetricPtrInput {	return (*metricAlarmMetricQueryMetricPtrType)(v)
}

func (*metricAlarmMetricQueryMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricPtrOutput)
}

type MetricAlarmMetricQueryMetricOutput struct { *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *MetricAlarmMetricQueryMetric {
		return &v
	}).(MetricAlarmMetricQueryMetricPtrOutput)
}
// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryMetricPtrOutput struct { *pulumi.OutputState}

func (MetricAlarmMetricQueryMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Elem() MetricAlarmMetricQueryMetricOutput {
	return o.ApplyT(func (v *MetricAlarmMetricQueryMetric) MetricAlarmMetricQueryMetric { return *v }).(MetricAlarmMetricQueryMetricOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricPtrOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricPtrOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQueryMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricPtrOutput{})
}
