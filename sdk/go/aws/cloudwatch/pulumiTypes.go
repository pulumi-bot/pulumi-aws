// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EventPermissionCondition struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key string `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type string `pulumi:"type"`
	// Value for the key.
	Value string `pulumi:"value"`
}

type EventPermissionConditionInput interface {
	pulumi.Input

	ToEventPermissionConditionOutput() EventPermissionConditionOutput
	ToEventPermissionConditionOutputWithContext(context.Context) EventPermissionConditionOutput
}

type EventPermissionConditionArgs struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key pulumi.StringInput `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type pulumi.StringInput `pulumi:"type"`
	// Value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventPermissionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return i.ToEventPermissionConditionOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionOutput)
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return i.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionOutput).ToEventPermissionConditionPtrOutputWithContext(ctx)
}

type EventPermissionConditionPtrInput interface {
	pulumi.Input

	ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput
	ToEventPermissionConditionPtrOutputWithContext(context.Context) EventPermissionConditionPtrOutput
}

type eventPermissionConditionPtrType EventPermissionConditionArgs

func EventPermissionConditionPtr(v *EventPermissionConditionArgs) EventPermissionConditionPtrInput {
	return (*eventPermissionConditionPtrType)(v)
}

func (*eventPermissionConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionCondition)(nil)).Elem()
}

func (i *eventPermissionConditionPtrType) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return i.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (i *eventPermissionConditionPtrType) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionPtrOutput)
}

type EventPermissionConditionOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return o.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return o.ApplyT(func(v EventPermissionCondition) *EventPermissionCondition {
		return &v
	}).(EventPermissionConditionPtrOutput)
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Key }).(pulumi.StringOutput)
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Type }).(pulumi.StringOutput)
}

// Value for the key.
func (o EventPermissionConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Value }).(pulumi.StringOutput)
}

type EventPermissionConditionPtrOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionCondition)(nil)).Elem()
}

func (o EventPermissionConditionPtrOutput) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return o
}

func (o EventPermissionConditionPtrOutput) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return o
}

func (o EventPermissionConditionPtrOutput) Elem() EventPermissionConditionOutput {
	return o.ApplyT(func(v *EventPermissionCondition) EventPermissionCondition { return *v }).(EventPermissionConditionOutput)
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionPtrOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Key }).(pulumi.StringOutput)
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Type }).(pulumi.StringOutput)
}

// Value for the key.
func (o EventPermissionConditionPtrOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Value }).(pulumi.StringOutput)
}

type EventPermissionConditionArgs struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key string `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type string `pulumi:"type"`
	// Value for the key.
	Value string `pulumi:"value"`
}

type EventPermissionConditionArgsInput interface {
	pulumi.Input

	ToEventPermissionConditionArgsOutput() EventPermissionConditionArgsOutput
	ToEventPermissionConditionArgsOutputWithContext(context.Context) EventPermissionConditionArgsOutput
}

type EventPermissionConditionArgsArgs struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key pulumi.StringInput `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type pulumi.StringInput `pulumi:"type"`
	// Value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventPermissionConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionConditionArgs)(nil)).Elem()
}

func (i EventPermissionConditionArgsArgs) ToEventPermissionConditionArgsOutput() EventPermissionConditionArgsOutput {
	return i.ToEventPermissionConditionArgsOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgsArgs) ToEventPermissionConditionArgsOutputWithContext(ctx context.Context) EventPermissionConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionArgsOutput)
}

func (i EventPermissionConditionArgsArgs) ToEventPermissionConditionArgsPtrOutput() EventPermissionConditionArgsPtrOutput {
	return i.ToEventPermissionConditionArgsPtrOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgsArgs) ToEventPermissionConditionArgsPtrOutputWithContext(ctx context.Context) EventPermissionConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionArgsOutput).ToEventPermissionConditionArgsPtrOutputWithContext(ctx)
}

type EventPermissionConditionArgsPtrInput interface {
	pulumi.Input

	ToEventPermissionConditionArgsPtrOutput() EventPermissionConditionArgsPtrOutput
	ToEventPermissionConditionArgsPtrOutputWithContext(context.Context) EventPermissionConditionArgsPtrOutput
}

type eventPermissionConditionArgsPtrType EventPermissionConditionArgsArgs

func EventPermissionConditionArgsPtr(v *EventPermissionConditionArgsArgs) EventPermissionConditionArgsPtrInput {
	return (*eventPermissionConditionArgsPtrType)(v)
}

func (*eventPermissionConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionConditionArgs)(nil)).Elem()
}

func (i *eventPermissionConditionArgsPtrType) ToEventPermissionConditionArgsPtrOutput() EventPermissionConditionArgsPtrOutput {
	return i.ToEventPermissionConditionArgsPtrOutputWithContext(context.Background())
}

func (i *eventPermissionConditionArgsPtrType) ToEventPermissionConditionArgsPtrOutputWithContext(ctx context.Context) EventPermissionConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionArgsPtrOutput)
}

type EventPermissionConditionArgsOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionConditionArgs)(nil)).Elem()
}

func (o EventPermissionConditionArgsOutput) ToEventPermissionConditionArgsOutput() EventPermissionConditionArgsOutput {
	return o
}

func (o EventPermissionConditionArgsOutput) ToEventPermissionConditionArgsOutputWithContext(ctx context.Context) EventPermissionConditionArgsOutput {
	return o
}

func (o EventPermissionConditionArgsOutput) ToEventPermissionConditionArgsPtrOutput() EventPermissionConditionArgsPtrOutput {
	return o.ToEventPermissionConditionArgsPtrOutputWithContext(context.Background())
}

func (o EventPermissionConditionArgsOutput) ToEventPermissionConditionArgsPtrOutputWithContext(ctx context.Context) EventPermissionConditionArgsPtrOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) *EventPermissionConditionArgs {
		return &v
	}).(EventPermissionConditionArgsPtrOutput)
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionArgsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Key }).(pulumi.StringOutput)
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionArgsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Type }).(pulumi.StringOutput)
}

// Value for the key.
func (o EventPermissionConditionArgsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Value }).(pulumi.StringOutput)
}

type EventPermissionConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionConditionArgs)(nil)).Elem()
}

func (o EventPermissionConditionArgsPtrOutput) ToEventPermissionConditionArgsPtrOutput() EventPermissionConditionArgsPtrOutput {
	return o
}

func (o EventPermissionConditionArgsPtrOutput) ToEventPermissionConditionArgsPtrOutputWithContext(ctx context.Context) EventPermissionConditionArgsPtrOutput {
	return o
}

func (o EventPermissionConditionArgsPtrOutput) Elem() EventPermissionConditionArgsOutput {
	return o.ApplyT(func(v *EventPermissionConditionArgs) EventPermissionConditionArgs { return *v }).(EventPermissionConditionArgsOutput)
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionArgsPtrOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Key }).(pulumi.StringOutput)
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionArgsPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Type }).(pulumi.StringOutput)
}

// Value for the key.
func (o EventPermissionConditionArgsPtrOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionArgs) string { return v.Value }).(pulumi.StringOutput)
}

type EventPermissionConditionState struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key string `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type string `pulumi:"type"`
	// Value for the key.
	Value string `pulumi:"value"`
}

type EventPermissionConditionStateInput interface {
	pulumi.Input

	ToEventPermissionConditionStateOutput() EventPermissionConditionStateOutput
	ToEventPermissionConditionStateOutputWithContext(context.Context) EventPermissionConditionStateOutput
}

type EventPermissionConditionStateArgs struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key pulumi.StringInput `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type pulumi.StringInput `pulumi:"type"`
	// Value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventPermissionConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionConditionState)(nil)).Elem()
}

func (i EventPermissionConditionStateArgs) ToEventPermissionConditionStateOutput() EventPermissionConditionStateOutput {
	return i.ToEventPermissionConditionStateOutputWithContext(context.Background())
}

func (i EventPermissionConditionStateArgs) ToEventPermissionConditionStateOutputWithContext(ctx context.Context) EventPermissionConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionStateOutput)
}

type EventPermissionConditionStateOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionConditionState)(nil)).Elem()
}

func (o EventPermissionConditionStateOutput) ToEventPermissionConditionStateOutput() EventPermissionConditionStateOutput {
	return o
}

func (o EventPermissionConditionStateOutput) ToEventPermissionConditionStateOutputWithContext(ctx context.Context) EventPermissionConditionStateOutput {
	return o
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionStateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionState) string { return v.Key }).(pulumi.StringOutput)
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionStateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionState) string { return v.Type }).(pulumi.StringOutput)
}

// Value for the key.
func (o EventPermissionConditionStateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionConditionState) string { return v.Value }).(pulumi.StringOutput)
}

type EventTargetBatchTarget struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize *int `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts *int `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName string `pulumi:"jobName"`
}

type EventTargetBatchTargetInput interface {
	pulumi.Input

	ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput
	ToEventTargetBatchTargetOutputWithContext(context.Context) EventTargetBatchTargetOutput
}

type EventTargetBatchTargetArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize pulumi.IntPtrInput `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts pulumi.IntPtrInput `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName pulumi.StringInput `pulumi:"jobName"`
}

func (EventTargetBatchTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return i.ToEventTargetBatchTargetOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetOutput)
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return i.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetOutput).ToEventTargetBatchTargetPtrOutputWithContext(ctx)
}

type EventTargetBatchTargetPtrInput interface {
	pulumi.Input

	ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput
	ToEventTargetBatchTargetPtrOutputWithContext(context.Context) EventTargetBatchTargetPtrOutput
}

type eventTargetBatchTargetPtrType EventTargetBatchTargetArgs

func EventTargetBatchTargetPtr(v *EventTargetBatchTargetArgs) EventTargetBatchTargetPtrInput {
	return (*eventTargetBatchTargetPtrType)(v)
}

func (*eventTargetBatchTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTarget)(nil)).Elem()
}

func (i *eventTargetBatchTargetPtrType) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return i.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetBatchTargetPtrType) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetPtrOutput)
}

type EventTargetBatchTargetOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return o.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *EventTargetBatchTarget {
		return &v
	}).(EventTargetBatchTargetPtrOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetBatchTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTarget)(nil)).Elem()
}

func (o EventTargetBatchTargetPtrOutput) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return o
}

func (o EventTargetBatchTargetPtrOutput) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return o
}

func (o EventTargetBatchTargetPtrOutput) Elem() EventTargetBatchTargetOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) EventTargetBatchTarget { return *v }).(EventTargetBatchTargetOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetPtrOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetPtrOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetPtrOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetPtrOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetBatchTargetArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize *int `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts *int `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName string `pulumi:"jobName"`
}

type EventTargetBatchTargetArgsInput interface {
	pulumi.Input

	ToEventTargetBatchTargetArgsOutput() EventTargetBatchTargetArgsOutput
	ToEventTargetBatchTargetArgsOutputWithContext(context.Context) EventTargetBatchTargetArgsOutput
}

type EventTargetBatchTargetArgsArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize pulumi.IntPtrInput `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts pulumi.IntPtrInput `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName pulumi.StringInput `pulumi:"jobName"`
}

func (EventTargetBatchTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTargetArgs)(nil)).Elem()
}

func (i EventTargetBatchTargetArgsArgs) ToEventTargetBatchTargetArgsOutput() EventTargetBatchTargetArgsOutput {
	return i.ToEventTargetBatchTargetArgsOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgsArgs) ToEventTargetBatchTargetArgsOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetArgsOutput)
}

func (i EventTargetBatchTargetArgsArgs) ToEventTargetBatchTargetArgsPtrOutput() EventTargetBatchTargetArgsPtrOutput {
	return i.ToEventTargetBatchTargetArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgsArgs) ToEventTargetBatchTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetArgsOutput).ToEventTargetBatchTargetArgsPtrOutputWithContext(ctx)
}

type EventTargetBatchTargetArgsPtrInput interface {
	pulumi.Input

	ToEventTargetBatchTargetArgsPtrOutput() EventTargetBatchTargetArgsPtrOutput
	ToEventTargetBatchTargetArgsPtrOutputWithContext(context.Context) EventTargetBatchTargetArgsPtrOutput
}

type eventTargetBatchTargetArgsPtrType EventTargetBatchTargetArgsArgs

func EventTargetBatchTargetArgsPtr(v *EventTargetBatchTargetArgsArgs) EventTargetBatchTargetArgsPtrInput {
	return (*eventTargetBatchTargetArgsPtrType)(v)
}

func (*eventTargetBatchTargetArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTargetArgs)(nil)).Elem()
}

func (i *eventTargetBatchTargetArgsPtrType) ToEventTargetBatchTargetArgsPtrOutput() EventTargetBatchTargetArgsPtrOutput {
	return i.ToEventTargetBatchTargetArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetBatchTargetArgsPtrType) ToEventTargetBatchTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetArgsPtrOutput)
}

type EventTargetBatchTargetArgsOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTargetArgs)(nil)).Elem()
}

func (o EventTargetBatchTargetArgsOutput) ToEventTargetBatchTargetArgsOutput() EventTargetBatchTargetArgsOutput {
	return o
}

func (o EventTargetBatchTargetArgsOutput) ToEventTargetBatchTargetArgsOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsOutput {
	return o
}

func (o EventTargetBatchTargetArgsOutput) ToEventTargetBatchTargetArgsPtrOutput() EventTargetBatchTargetArgsPtrOutput {
	return o.ToEventTargetBatchTargetArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetBatchTargetArgsOutput) ToEventTargetBatchTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) *EventTargetBatchTargetArgs {
		return &v
	}).(EventTargetBatchTargetArgsPtrOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetArgsOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetArgsOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetArgsOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetArgsOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetBatchTargetArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTargetArgs)(nil)).Elem()
}

func (o EventTargetBatchTargetArgsPtrOutput) ToEventTargetBatchTargetArgsPtrOutput() EventTargetBatchTargetArgsPtrOutput {
	return o
}

func (o EventTargetBatchTargetArgsPtrOutput) ToEventTargetBatchTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetArgsPtrOutput {
	return o
}

func (o EventTargetBatchTargetArgsPtrOutput) Elem() EventTargetBatchTargetArgsOutput {
	return o.ApplyT(func(v *EventTargetBatchTargetArgs) EventTargetBatchTargetArgs { return *v }).(EventTargetBatchTargetArgsOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetArgsPtrOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetArgsPtrOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetArgsPtrOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetArgsPtrOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetArgs) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetBatchTargetState struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize *int `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts *int `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName string `pulumi:"jobName"`
}

type EventTargetBatchTargetStateInput interface {
	pulumi.Input

	ToEventTargetBatchTargetStateOutput() EventTargetBatchTargetStateOutput
	ToEventTargetBatchTargetStateOutputWithContext(context.Context) EventTargetBatchTargetStateOutput
}

type EventTargetBatchTargetStateArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize pulumi.IntPtrInput `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts pulumi.IntPtrInput `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName pulumi.StringInput `pulumi:"jobName"`
}

func (EventTargetBatchTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTargetState)(nil)).Elem()
}

func (i EventTargetBatchTargetStateArgs) ToEventTargetBatchTargetStateOutput() EventTargetBatchTargetStateOutput {
	return i.ToEventTargetBatchTargetStateOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetStateArgs) ToEventTargetBatchTargetStateOutputWithContext(ctx context.Context) EventTargetBatchTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetStateOutput)
}

type EventTargetBatchTargetStateOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTargetState)(nil)).Elem()
}

func (o EventTargetBatchTargetStateOutput) ToEventTargetBatchTargetStateOutput() EventTargetBatchTargetStateOutput {
	return o
}

func (o EventTargetBatchTargetStateOutput) ToEventTargetBatchTargetStateOutputWithContext(ctx context.Context) EventTargetBatchTargetStateOutput {
	return o
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetStateOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetState) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetStateOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTargetState) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetStateOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetState) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetStateOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTargetState) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetEcsTarget struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType *string `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration *EventTargetEcsTargetNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type EventTargetEcsTargetInput interface {
	pulumi.Input

	ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput
	ToEventTargetEcsTargetOutputWithContext(context.Context) EventTargetEcsTargetOutput
}

type EventTargetEcsTargetArgs struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration EventTargetEcsTargetNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return i.ToEventTargetEcsTargetOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput)
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput).ToEventTargetEcsTargetPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput
	ToEventTargetEcsTargetPtrOutputWithContext(context.Context) EventTargetEcsTargetPtrOutput
}

type eventTargetEcsTargetPtrType EventTargetEcsTargetArgs

func EventTargetEcsTargetPtr(v *EventTargetEcsTargetArgs) EventTargetEcsTargetPtrInput {
	return (*eventTargetEcsTargetPtrType)(v)
}

func (*eventTargetEcsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetPtrOutput)
}

type EventTargetEcsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTarget {
		return &v
	}).(EventTargetEcsTargetPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration }).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) Elem() EventTargetEcsTargetOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) EventTargetEcsTarget { return *v }).(EventTargetEcsTargetOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetPtrOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration }).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetPtrOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetArgs struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType *string `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration *EventTargetEcsTargetNetworkConfigurationArgs `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type EventTargetEcsTargetArgsInput interface {
	pulumi.Input

	ToEventTargetEcsTargetArgsOutput() EventTargetEcsTargetArgsOutput
	ToEventTargetEcsTargetArgsOutputWithContext(context.Context) EventTargetEcsTargetArgsOutput
}

type EventTargetEcsTargetArgsArgs struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration EventTargetEcsTargetNetworkConfigurationArgsPtrInput `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetArgs)(nil)).Elem()
}

func (i EventTargetEcsTargetArgsArgs) ToEventTargetEcsTargetArgsOutput() EventTargetEcsTargetArgsOutput {
	return i.ToEventTargetEcsTargetArgsOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgsArgs) ToEventTargetEcsTargetArgsOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetArgsOutput)
}

func (i EventTargetEcsTargetArgsArgs) ToEventTargetEcsTargetArgsPtrOutput() EventTargetEcsTargetArgsPtrOutput {
	return i.ToEventTargetEcsTargetArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgsArgs) ToEventTargetEcsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetArgsOutput).ToEventTargetEcsTargetArgsPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetArgsPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetArgsPtrOutput() EventTargetEcsTargetArgsPtrOutput
	ToEventTargetEcsTargetArgsPtrOutputWithContext(context.Context) EventTargetEcsTargetArgsPtrOutput
}

type eventTargetEcsTargetArgsPtrType EventTargetEcsTargetArgsArgs

func EventTargetEcsTargetArgsPtr(v *EventTargetEcsTargetArgsArgs) EventTargetEcsTargetArgsPtrInput {
	return (*eventTargetEcsTargetArgsPtrType)(v)
}

func (*eventTargetEcsTargetArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetArgs)(nil)).Elem()
}

func (i *eventTargetEcsTargetArgsPtrType) ToEventTargetEcsTargetArgsPtrOutput() EventTargetEcsTargetArgsPtrOutput {
	return i.ToEventTargetEcsTargetArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetArgsPtrType) ToEventTargetEcsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetArgsPtrOutput)
}

type EventTargetEcsTargetArgsOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetArgs)(nil)).Elem()
}

func (o EventTargetEcsTargetArgsOutput) ToEventTargetEcsTargetArgsOutput() EventTargetEcsTargetArgsOutput {
	return o
}

func (o EventTargetEcsTargetArgsOutput) ToEventTargetEcsTargetArgsOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsOutput {
	return o
}

func (o EventTargetEcsTargetArgsOutput) ToEventTargetEcsTargetArgsPtrOutput() EventTargetEcsTargetArgsPtrOutput {
	return o.ToEventTargetEcsTargetArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetArgsOutput) ToEventTargetEcsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *EventTargetEcsTargetArgs {
		return &v
	}).(EventTargetEcsTargetArgsPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetArgsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetArgsOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetArgsOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *EventTargetEcsTargetNetworkConfigurationArgs {
		return v.NetworkConfiguration
	}).(EventTargetEcsTargetNetworkConfigurationArgsPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetArgsOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetArgsOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetArgsOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetArgs)(nil)).Elem()
}

func (o EventTargetEcsTargetArgsPtrOutput) ToEventTargetEcsTargetArgsPtrOutput() EventTargetEcsTargetArgsPtrOutput {
	return o
}

func (o EventTargetEcsTargetArgsPtrOutput) ToEventTargetEcsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetArgsPtrOutput {
	return o
}

func (o EventTargetEcsTargetArgsPtrOutput) Elem() EventTargetEcsTargetArgsOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetArgs) EventTargetEcsTargetArgs { return *v }).(EventTargetEcsTargetArgsOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetArgsPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetArgsPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetArgsPtrOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *EventTargetEcsTargetNetworkConfigurationArgs {
		return v.NetworkConfiguration
	}).(EventTargetEcsTargetNetworkConfigurationArgsPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetArgsPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetArgsPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetArgsPtrOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTargetArgs) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type EventTargetEcsTargetNetworkConfigurationInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput
	ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationOutput
}

type EventTargetEcsTargetNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (EventTargetEcsTargetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationOutput)
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationOutput).ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput
	ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput
}

type eventTargetEcsTargetNetworkConfigurationPtrType EventTargetEcsTargetNetworkConfigurationArgs

func EventTargetEcsTargetNetworkConfigurationPtr(v *EventTargetEcsTargetNetworkConfigurationArgs) EventTargetEcsTargetNetworkConfigurationPtrInput {
	return (*eventTargetEcsTargetNetworkConfigurationPtrType)(v)
}

func (*eventTargetEcsTargetNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (i *eventTargetEcsTargetNetworkConfigurationPtrType) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetNetworkConfigurationPtrType) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

type EventTargetEcsTargetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) *EventTargetEcsTargetNetworkConfiguration {
		return &v
	}).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) Elem() EventTargetEcsTargetNetworkConfigurationOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfiguration) EventTargetEcsTargetNetworkConfiguration { return *v }).(EventTargetEcsTargetNetworkConfigurationOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type EventTargetEcsTargetNetworkConfigurationArgsInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationArgsOutput() EventTargetEcsTargetNetworkConfigurationArgsOutput
	ToEventTargetEcsTargetNetworkConfigurationArgsOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationArgsOutput
}

type EventTargetEcsTargetNetworkConfigurationArgsArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (EventTargetEcsTargetNetworkConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfigurationArgs)(nil)).Elem()
}

func (i EventTargetEcsTargetNetworkConfigurationArgsArgs) ToEventTargetEcsTargetNetworkConfigurationArgsOutput() EventTargetEcsTargetNetworkConfigurationArgsOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationArgsOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgsArgs) ToEventTargetEcsTargetNetworkConfigurationArgsOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationArgsOutput)
}

func (i EventTargetEcsTargetNetworkConfigurationArgsArgs) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutput() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgsArgs) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationArgsOutput).ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetNetworkConfigurationArgsPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutput() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput
	ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationArgsPtrOutput
}

type eventTargetEcsTargetNetworkConfigurationArgsPtrType EventTargetEcsTargetNetworkConfigurationArgsArgs

func EventTargetEcsTargetNetworkConfigurationArgsPtr(v *EventTargetEcsTargetNetworkConfigurationArgsArgs) EventTargetEcsTargetNetworkConfigurationArgsPtrInput {
	return (*eventTargetEcsTargetNetworkConfigurationArgsPtrType)(v)
}

func (*eventTargetEcsTargetNetworkConfigurationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfigurationArgs)(nil)).Elem()
}

func (i *eventTargetEcsTargetNetworkConfigurationArgsPtrType) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutput() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetNetworkConfigurationArgsPtrType) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationArgsPtrOutput)
}

type EventTargetEcsTargetNetworkConfigurationArgsOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfigurationArgs)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) ToEventTargetEcsTargetNetworkConfigurationArgsOutput() EventTargetEcsTargetNetworkConfigurationArgsOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) ToEventTargetEcsTargetNetworkConfigurationArgsOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutput() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o.ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) *EventTargetEcsTargetNetworkConfigurationArgs {
		return &v
	}).(EventTargetEcsTargetNetworkConfigurationArgsPtrOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetNetworkConfigurationArgsOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetNetworkConfigurationArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfigurationArgs)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutput() EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) ToEventTargetEcsTargetNetworkConfigurationArgsPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationArgsPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) Elem() EventTargetEcsTargetNetworkConfigurationArgsOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfigurationArgs) EventTargetEcsTargetNetworkConfigurationArgs {
		return *v
	}).(EventTargetEcsTargetNetworkConfigurationArgsOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetNetworkConfigurationArgsPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfigurationArgs) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetState struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType *string `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration *EventTargetEcsTargetStateNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type EventTargetEcsTargetStateInput interface {
	pulumi.Input

	ToEventTargetEcsTargetStateOutput() EventTargetEcsTargetStateOutput
	ToEventTargetEcsTargetStateOutputWithContext(context.Context) EventTargetEcsTargetStateOutput
}

type EventTargetEcsTargetStateArgs struct {
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration EventTargetEcsTargetStateNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// The number of tasks to create based on the TaskDefinition. The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetState)(nil)).Elem()
}

func (i EventTargetEcsTargetStateArgs) ToEventTargetEcsTargetStateOutput() EventTargetEcsTargetStateOutput {
	return i.ToEventTargetEcsTargetStateOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetStateArgs) ToEventTargetEcsTargetStateOutputWithContext(ctx context.Context) EventTargetEcsTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetStateOutput)
}

type EventTargetEcsTargetStateOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetState)(nil)).Elem()
}

func (o EventTargetEcsTargetStateOutput) ToEventTargetEcsTargetStateOutput() EventTargetEcsTargetStateOutput {
	return o
}

func (o EventTargetEcsTargetStateOutput) ToEventTargetEcsTargetStateOutputWithContext(ctx context.Context) EventTargetEcsTargetStateOutput {
	return o
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetStateOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are EC2 or FARGATE.
func (o EventTargetEcsTargetStateOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetStateOutput) NetworkConfiguration() EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) *EventTargetEcsTargetStateNetworkConfiguration {
		return v.NetworkConfiguration
	}).(EventTargetEcsTargetStateNetworkConfigurationPtrOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetStateOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// The number of tasks to create based on the TaskDefinition. The default is 1.
func (o EventTargetEcsTargetStateOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetStateOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTargetState) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetStateNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type EventTargetEcsTargetStateNetworkConfigurationInput interface {
	pulumi.Input

	ToEventTargetEcsTargetStateNetworkConfigurationOutput() EventTargetEcsTargetStateNetworkConfigurationOutput
	ToEventTargetEcsTargetStateNetworkConfigurationOutputWithContext(context.Context) EventTargetEcsTargetStateNetworkConfigurationOutput
}

type EventTargetEcsTargetStateNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (EventTargetEcsTargetStateNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetStateNetworkConfiguration)(nil)).Elem()
}

func (i EventTargetEcsTargetStateNetworkConfigurationArgs) ToEventTargetEcsTargetStateNetworkConfigurationOutput() EventTargetEcsTargetStateNetworkConfigurationOutput {
	return i.ToEventTargetEcsTargetStateNetworkConfigurationOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetStateNetworkConfigurationArgs) ToEventTargetEcsTargetStateNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetStateNetworkConfigurationOutput)
}

func (i EventTargetEcsTargetStateNetworkConfigurationArgs) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutput() EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetStateNetworkConfigurationArgs) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetStateNetworkConfigurationOutput).ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(ctx)
}

type EventTargetEcsTargetStateNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetStateNetworkConfigurationPtrOutput() EventTargetEcsTargetStateNetworkConfigurationPtrOutput
	ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(context.Context) EventTargetEcsTargetStateNetworkConfigurationPtrOutput
}

type eventTargetEcsTargetStateNetworkConfigurationPtrType EventTargetEcsTargetStateNetworkConfigurationArgs

func EventTargetEcsTargetStateNetworkConfigurationPtr(v *EventTargetEcsTargetStateNetworkConfigurationArgs) EventTargetEcsTargetStateNetworkConfigurationPtrInput {
	return (*eventTargetEcsTargetStateNetworkConfigurationPtrType)(v)
}

func (*eventTargetEcsTargetStateNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetStateNetworkConfiguration)(nil)).Elem()
}

func (i *eventTargetEcsTargetStateNetworkConfigurationPtrType) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutput() EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetStateNetworkConfigurationPtrType) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetStateNetworkConfigurationPtrOutput)
}

type EventTargetEcsTargetStateNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetStateNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetStateNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetStateNetworkConfigurationOutput) ToEventTargetEcsTargetStateNetworkConfigurationOutput() EventTargetEcsTargetStateNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetStateNetworkConfigurationOutput) ToEventTargetEcsTargetStateNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetStateNetworkConfigurationOutput) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutput() EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return o.ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetStateNetworkConfigurationOutput) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) *EventTargetEcsTargetStateNetworkConfiguration {
		return &v
	}).(EventTargetEcsTargetStateNetworkConfigurationPtrOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetStateNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetStateNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetStateNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetStateNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetStateNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetStateNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutput() EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) ToEventTargetEcsTargetStateNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetStateNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) Elem() EventTargetEcsTargetStateNetworkConfigurationOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetStateNetworkConfiguration) EventTargetEcsTargetStateNetworkConfiguration {
		return *v
	}).(EventTargetEcsTargetStateNetworkConfigurationOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetStateNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetStateNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetInputTransformer struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths map[string]interface{} `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate string `pulumi:"inputTemplate"`
}

type EventTargetInputTransformerInput interface {
	pulumi.Input

	ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput
	ToEventTargetInputTransformerOutputWithContext(context.Context) EventTargetInputTransformerOutput
}

type EventTargetInputTransformerArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths pulumi.MapInput `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate pulumi.StringInput `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return i.ToEventTargetInputTransformerOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput)
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput).ToEventTargetInputTransformerPtrOutputWithContext(ctx)
}

type EventTargetInputTransformerPtrInput interface {
	pulumi.Input

	ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput
	ToEventTargetInputTransformerPtrOutputWithContext(context.Context) EventTargetInputTransformerPtrOutput
}

type eventTargetInputTransformerPtrType EventTargetInputTransformerArgs

func EventTargetInputTransformerPtr(v *EventTargetInputTransformerArgs) EventTargetInputTransformerPtrInput {
	return (*eventTargetInputTransformerPtrType)(v)
}

func (*eventTargetInputTransformerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerPtrOutput)
}

type EventTargetInputTransformerOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) *EventTargetInputTransformer {
		return &v
	}).(EventTargetInputTransformerPtrOutput)
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerPtrOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) Elem() EventTargetInputTransformerOutput {
	return o.ApplyT(func(v *EventTargetInputTransformer) EventTargetInputTransformer { return *v }).(EventTargetInputTransformerOutput)
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerPtrOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerPtrOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths map[string]interface{} `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate string `pulumi:"inputTemplate"`
}

type EventTargetInputTransformerArgsInput interface {
	pulumi.Input

	ToEventTargetInputTransformerArgsOutput() EventTargetInputTransformerArgsOutput
	ToEventTargetInputTransformerArgsOutputWithContext(context.Context) EventTargetInputTransformerArgsOutput
}

type EventTargetInputTransformerArgsArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths pulumi.MapInput `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate pulumi.StringInput `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformerArgs)(nil)).Elem()
}

func (i EventTargetInputTransformerArgsArgs) ToEventTargetInputTransformerArgsOutput() EventTargetInputTransformerArgsOutput {
	return i.ToEventTargetInputTransformerArgsOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgsArgs) ToEventTargetInputTransformerArgsOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerArgsOutput)
}

func (i EventTargetInputTransformerArgsArgs) ToEventTargetInputTransformerArgsPtrOutput() EventTargetInputTransformerArgsPtrOutput {
	return i.ToEventTargetInputTransformerArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgsArgs) ToEventTargetInputTransformerArgsPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerArgsOutput).ToEventTargetInputTransformerArgsPtrOutputWithContext(ctx)
}

type EventTargetInputTransformerArgsPtrInput interface {
	pulumi.Input

	ToEventTargetInputTransformerArgsPtrOutput() EventTargetInputTransformerArgsPtrOutput
	ToEventTargetInputTransformerArgsPtrOutputWithContext(context.Context) EventTargetInputTransformerArgsPtrOutput
}

type eventTargetInputTransformerArgsPtrType EventTargetInputTransformerArgsArgs

func EventTargetInputTransformerArgsPtr(v *EventTargetInputTransformerArgsArgs) EventTargetInputTransformerArgsPtrInput {
	return (*eventTargetInputTransformerArgsPtrType)(v)
}

func (*eventTargetInputTransformerArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformerArgs)(nil)).Elem()
}

func (i *eventTargetInputTransformerArgsPtrType) ToEventTargetInputTransformerArgsPtrOutput() EventTargetInputTransformerArgsPtrOutput {
	return i.ToEventTargetInputTransformerArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetInputTransformerArgsPtrType) ToEventTargetInputTransformerArgsPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerArgsPtrOutput)
}

type EventTargetInputTransformerArgsOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformerArgs)(nil)).Elem()
}

func (o EventTargetInputTransformerArgsOutput) ToEventTargetInputTransformerArgsOutput() EventTargetInputTransformerArgsOutput {
	return o
}

func (o EventTargetInputTransformerArgsOutput) ToEventTargetInputTransformerArgsOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsOutput {
	return o
}

func (o EventTargetInputTransformerArgsOutput) ToEventTargetInputTransformerArgsPtrOutput() EventTargetInputTransformerArgsPtrOutput {
	return o.ToEventTargetInputTransformerArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetInputTransformerArgsOutput) ToEventTargetInputTransformerArgsPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsPtrOutput {
	return o.ApplyT(func(v EventTargetInputTransformerArgs) *EventTargetInputTransformerArgs {
		return &v
	}).(EventTargetInputTransformerArgsPtrOutput)
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerArgsOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func(v EventTargetInputTransformerArgs) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerArgsOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformerArgs) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformerArgs)(nil)).Elem()
}

func (o EventTargetInputTransformerArgsPtrOutput) ToEventTargetInputTransformerArgsPtrOutput() EventTargetInputTransformerArgsPtrOutput {
	return o
}

func (o EventTargetInputTransformerArgsPtrOutput) ToEventTargetInputTransformerArgsPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerArgsPtrOutput {
	return o
}

func (o EventTargetInputTransformerArgsPtrOutput) Elem() EventTargetInputTransformerArgsOutput {
	return o.ApplyT(func(v *EventTargetInputTransformerArgs) EventTargetInputTransformerArgs { return *v }).(EventTargetInputTransformerArgsOutput)
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerArgsPtrOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func(v EventTargetInputTransformerArgs) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerArgsPtrOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformerArgs) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerState struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths map[string]interface{} `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate string `pulumi:"inputTemplate"`
}

type EventTargetInputTransformerStateInput interface {
	pulumi.Input

	ToEventTargetInputTransformerStateOutput() EventTargetInputTransformerStateOutput
	ToEventTargetInputTransformerStateOutputWithContext(context.Context) EventTargetInputTransformerStateOutput
}

type EventTargetInputTransformerStateArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths pulumi.MapInput `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate pulumi.StringInput `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformerState)(nil)).Elem()
}

func (i EventTargetInputTransformerStateArgs) ToEventTargetInputTransformerStateOutput() EventTargetInputTransformerStateOutput {
	return i.ToEventTargetInputTransformerStateOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerStateArgs) ToEventTargetInputTransformerStateOutputWithContext(ctx context.Context) EventTargetInputTransformerStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerStateOutput)
}

type EventTargetInputTransformerStateOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformerState)(nil)).Elem()
}

func (o EventTargetInputTransformerStateOutput) ToEventTargetInputTransformerStateOutput() EventTargetInputTransformerStateOutput {
	return o
}

func (o EventTargetInputTransformerStateOutput) ToEventTargetInputTransformerStateOutputWithContext(ctx context.Context) EventTargetInputTransformerStateOutput {
	return o
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerStateOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func(v EventTargetInputTransformerState) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerStateOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformerState) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetKinesisTarget struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath *string `pulumi:"partitionKeyPath"`
}

type EventTargetKinesisTargetInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput
	ToEventTargetKinesisTargetOutputWithContext(context.Context) EventTargetKinesisTargetOutput
}

type EventTargetKinesisTargetArgs struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath pulumi.StringPtrInput `pulumi:"partitionKeyPath"`
}

func (EventTargetKinesisTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return i.ToEventTargetKinesisTargetOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetOutput)
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return i.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetOutput).ToEventTargetKinesisTargetPtrOutputWithContext(ctx)
}

type EventTargetKinesisTargetPtrInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput
	ToEventTargetKinesisTargetPtrOutputWithContext(context.Context) EventTargetKinesisTargetPtrOutput
}

type eventTargetKinesisTargetPtrType EventTargetKinesisTargetArgs

func EventTargetKinesisTargetPtr(v *EventTargetKinesisTargetArgs) EventTargetKinesisTargetPtrInput {
	return (*eventTargetKinesisTargetPtrType)(v)
}

func (*eventTargetKinesisTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTarget)(nil)).Elem()
}

func (i *eventTargetKinesisTargetPtrType) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return i.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetKinesisTargetPtrType) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetPtrOutput)
}

type EventTargetKinesisTargetOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return o.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTarget) *EventTargetKinesisTarget {
		return &v
	}).(EventTargetKinesisTargetPtrOutput)
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTarget) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTarget)(nil)).Elem()
}

func (o EventTargetKinesisTargetPtrOutput) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return o
}

func (o EventTargetKinesisTargetPtrOutput) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return o
}

func (o EventTargetKinesisTargetPtrOutput) Elem() EventTargetKinesisTargetOutput {
	return o.ApplyT(func(v *EventTargetKinesisTarget) EventTargetKinesisTarget { return *v }).(EventTargetKinesisTargetOutput)
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetPtrOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTarget) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTargetArgs struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath *string `pulumi:"partitionKeyPath"`
}

type EventTargetKinesisTargetArgsInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetArgsOutput() EventTargetKinesisTargetArgsOutput
	ToEventTargetKinesisTargetArgsOutputWithContext(context.Context) EventTargetKinesisTargetArgsOutput
}

type EventTargetKinesisTargetArgsArgs struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath pulumi.StringPtrInput `pulumi:"partitionKeyPath"`
}

func (EventTargetKinesisTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTargetArgs)(nil)).Elem()
}

func (i EventTargetKinesisTargetArgsArgs) ToEventTargetKinesisTargetArgsOutput() EventTargetKinesisTargetArgsOutput {
	return i.ToEventTargetKinesisTargetArgsOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgsArgs) ToEventTargetKinesisTargetArgsOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetArgsOutput)
}

func (i EventTargetKinesisTargetArgsArgs) ToEventTargetKinesisTargetArgsPtrOutput() EventTargetKinesisTargetArgsPtrOutput {
	return i.ToEventTargetKinesisTargetArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgsArgs) ToEventTargetKinesisTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetArgsOutput).ToEventTargetKinesisTargetArgsPtrOutputWithContext(ctx)
}

type EventTargetKinesisTargetArgsPtrInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetArgsPtrOutput() EventTargetKinesisTargetArgsPtrOutput
	ToEventTargetKinesisTargetArgsPtrOutputWithContext(context.Context) EventTargetKinesisTargetArgsPtrOutput
}

type eventTargetKinesisTargetArgsPtrType EventTargetKinesisTargetArgsArgs

func EventTargetKinesisTargetArgsPtr(v *EventTargetKinesisTargetArgsArgs) EventTargetKinesisTargetArgsPtrInput {
	return (*eventTargetKinesisTargetArgsPtrType)(v)
}

func (*eventTargetKinesisTargetArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTargetArgs)(nil)).Elem()
}

func (i *eventTargetKinesisTargetArgsPtrType) ToEventTargetKinesisTargetArgsPtrOutput() EventTargetKinesisTargetArgsPtrOutput {
	return i.ToEventTargetKinesisTargetArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetKinesisTargetArgsPtrType) ToEventTargetKinesisTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetArgsPtrOutput)
}

type EventTargetKinesisTargetArgsOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTargetArgs)(nil)).Elem()
}

func (o EventTargetKinesisTargetArgsOutput) ToEventTargetKinesisTargetArgsOutput() EventTargetKinesisTargetArgsOutput {
	return o
}

func (o EventTargetKinesisTargetArgsOutput) ToEventTargetKinesisTargetArgsOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsOutput {
	return o
}

func (o EventTargetKinesisTargetArgsOutput) ToEventTargetKinesisTargetArgsPtrOutput() EventTargetKinesisTargetArgsPtrOutput {
	return o.ToEventTargetKinesisTargetArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetKinesisTargetArgsOutput) ToEventTargetKinesisTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTargetArgs) *EventTargetKinesisTargetArgs {
		return &v
	}).(EventTargetKinesisTargetArgsPtrOutput)
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetArgsOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTargetArgs) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTargetArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTargetArgs)(nil)).Elem()
}

func (o EventTargetKinesisTargetArgsPtrOutput) ToEventTargetKinesisTargetArgsPtrOutput() EventTargetKinesisTargetArgsPtrOutput {
	return o
}

func (o EventTargetKinesisTargetArgsPtrOutput) ToEventTargetKinesisTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetArgsPtrOutput {
	return o
}

func (o EventTargetKinesisTargetArgsPtrOutput) Elem() EventTargetKinesisTargetArgsOutput {
	return o.ApplyT(func(v *EventTargetKinesisTargetArgs) EventTargetKinesisTargetArgs { return *v }).(EventTargetKinesisTargetArgsOutput)
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetArgsPtrOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTargetArgs) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTargetState struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath *string `pulumi:"partitionKeyPath"`
}

type EventTargetKinesisTargetStateInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetStateOutput() EventTargetKinesisTargetStateOutput
	ToEventTargetKinesisTargetStateOutputWithContext(context.Context) EventTargetKinesisTargetStateOutput
}

type EventTargetKinesisTargetStateArgs struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath pulumi.StringPtrInput `pulumi:"partitionKeyPath"`
}

func (EventTargetKinesisTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTargetState)(nil)).Elem()
}

func (i EventTargetKinesisTargetStateArgs) ToEventTargetKinesisTargetStateOutput() EventTargetKinesisTargetStateOutput {
	return i.ToEventTargetKinesisTargetStateOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetStateArgs) ToEventTargetKinesisTargetStateOutputWithContext(ctx context.Context) EventTargetKinesisTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetStateOutput)
}

type EventTargetKinesisTargetStateOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTargetState)(nil)).Elem()
}

func (o EventTargetKinesisTargetStateOutput) ToEventTargetKinesisTargetStateOutput() EventTargetKinesisTargetStateOutput {
	return o
}

func (o EventTargetKinesisTargetStateOutput) ToEventTargetKinesisTargetStateOutputWithContext(ctx context.Context) EventTargetKinesisTargetStateOutput {
	return o
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetStateOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTargetState) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetRunCommandTarget struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key string `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

type EventTargetRunCommandTargetInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput
	ToEventTargetRunCommandTargetOutputWithContext(context.Context) EventTargetRunCommandTargetOutput
}

type EventTargetRunCommandTargetArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key pulumi.StringInput `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventTargetRunCommandTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return i.ToEventTargetRunCommandTargetOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetOutput)
}

type EventTargetRunCommandTargetArrayInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput
	ToEventTargetRunCommandTargetArrayOutputWithContext(context.Context) EventTargetRunCommandTargetArrayOutput
}

type EventTargetRunCommandTargetArray []EventTargetRunCommandTargetInput

func (EventTargetRunCommandTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return i.ToEventTargetRunCommandTargetArrayOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetArrayOutput)
}

type EventTargetRunCommandTargetOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return o
}

// Can be either `tag:tag-key` or `InstanceIds`.
func (o EventTargetRunCommandTargetOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetRunCommandTarget) string { return v.Key }).(pulumi.StringOutput)
}

// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
func (o EventTargetRunCommandTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetRunCommandTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventTargetRunCommandTargetArrayOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) Index(i pulumi.IntInput) EventTargetRunCommandTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTargetRunCommandTarget {
		return vs[0].([]EventTargetRunCommandTarget)[vs[1].(int)]
	}).(EventTargetRunCommandTargetOutput)
}

type EventTargetRunCommandTargetArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key string `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

type EventTargetRunCommandTargetArgsInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetArgsOutput() EventTargetRunCommandTargetArgsOutput
	ToEventTargetRunCommandTargetArgsOutputWithContext(context.Context) EventTargetRunCommandTargetArgsOutput
}

type EventTargetRunCommandTargetArgsArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key pulumi.StringInput `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventTargetRunCommandTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTargetArgs)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgsArgs) ToEventTargetRunCommandTargetArgsOutput() EventTargetRunCommandTargetArgsOutput {
	return i.ToEventTargetRunCommandTargetArgsOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgsArgs) ToEventTargetRunCommandTargetArgsOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetArgsOutput)
}

type EventTargetRunCommandTargetArgsArrayInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetArgsArrayOutput() EventTargetRunCommandTargetArgsArrayOutput
	ToEventTargetRunCommandTargetArgsArrayOutputWithContext(context.Context) EventTargetRunCommandTargetArgsArrayOutput
}

type EventTargetRunCommandTargetArgsArray []EventTargetRunCommandTargetArgsInput

func (EventTargetRunCommandTargetArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTargetArgs)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgsArray) ToEventTargetRunCommandTargetArgsArrayOutput() EventTargetRunCommandTargetArgsArrayOutput {
	return i.ToEventTargetRunCommandTargetArgsArrayOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgsArray) ToEventTargetRunCommandTargetArgsArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetArgsArrayOutput)
}

type EventTargetRunCommandTargetArgsOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTargetArgs)(nil)).Elem()
}

func (o EventTargetRunCommandTargetArgsOutput) ToEventTargetRunCommandTargetArgsOutput() EventTargetRunCommandTargetArgsOutput {
	return o
}

func (o EventTargetRunCommandTargetArgsOutput) ToEventTargetRunCommandTargetArgsOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArgsOutput {
	return o
}

// Can be either `tag:tag-key` or `InstanceIds`.
func (o EventTargetRunCommandTargetArgsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetRunCommandTargetArgs) string { return v.Key }).(pulumi.StringOutput)
}

// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
func (o EventTargetRunCommandTargetArgsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetRunCommandTargetArgs) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventTargetRunCommandTargetArgsArrayOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTargetArgs)(nil)).Elem()
}

func (o EventTargetRunCommandTargetArgsArrayOutput) ToEventTargetRunCommandTargetArgsArrayOutput() EventTargetRunCommandTargetArgsArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArgsArrayOutput) ToEventTargetRunCommandTargetArgsArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArgsArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArgsArrayOutput) Index(i pulumi.IntInput) EventTargetRunCommandTargetArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTargetRunCommandTargetArgs {
		return vs[0].([]EventTargetRunCommandTargetArgs)[vs[1].(int)]
	}).(EventTargetRunCommandTargetArgsOutput)
}

type EventTargetRunCommandTargetState struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key string `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

type EventTargetRunCommandTargetStateInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetStateOutput() EventTargetRunCommandTargetStateOutput
	ToEventTargetRunCommandTargetStateOutputWithContext(context.Context) EventTargetRunCommandTargetStateOutput
}

type EventTargetRunCommandTargetStateArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key pulumi.StringInput `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventTargetRunCommandTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTargetState)(nil)).Elem()
}

func (i EventTargetRunCommandTargetStateArgs) ToEventTargetRunCommandTargetStateOutput() EventTargetRunCommandTargetStateOutput {
	return i.ToEventTargetRunCommandTargetStateOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetStateArgs) ToEventTargetRunCommandTargetStateOutputWithContext(ctx context.Context) EventTargetRunCommandTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetStateOutput)
}

type EventTargetRunCommandTargetStateArrayInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetStateArrayOutput() EventTargetRunCommandTargetStateArrayOutput
	ToEventTargetRunCommandTargetStateArrayOutputWithContext(context.Context) EventTargetRunCommandTargetStateArrayOutput
}

type EventTargetRunCommandTargetStateArray []EventTargetRunCommandTargetStateInput

func (EventTargetRunCommandTargetStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTargetState)(nil)).Elem()
}

func (i EventTargetRunCommandTargetStateArray) ToEventTargetRunCommandTargetStateArrayOutput() EventTargetRunCommandTargetStateArrayOutput {
	return i.ToEventTargetRunCommandTargetStateArrayOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetStateArray) ToEventTargetRunCommandTargetStateArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetStateArrayOutput)
}

type EventTargetRunCommandTargetStateOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTargetState)(nil)).Elem()
}

func (o EventTargetRunCommandTargetStateOutput) ToEventTargetRunCommandTargetStateOutput() EventTargetRunCommandTargetStateOutput {
	return o
}

func (o EventTargetRunCommandTargetStateOutput) ToEventTargetRunCommandTargetStateOutputWithContext(ctx context.Context) EventTargetRunCommandTargetStateOutput {
	return o
}

// Can be either `tag:tag-key` or `InstanceIds`.
func (o EventTargetRunCommandTargetStateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetRunCommandTargetState) string { return v.Key }).(pulumi.StringOutput)
}

// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
func (o EventTargetRunCommandTargetStateOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetRunCommandTargetState) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventTargetRunCommandTargetStateArrayOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTargetState)(nil)).Elem()
}

func (o EventTargetRunCommandTargetStateArrayOutput) ToEventTargetRunCommandTargetStateArrayOutput() EventTargetRunCommandTargetStateArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetStateArrayOutput) ToEventTargetRunCommandTargetStateArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetStateArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetStateArrayOutput) Index(i pulumi.IntInput) EventTargetRunCommandTargetStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTargetRunCommandTargetState {
		return vs[0].([]EventTargetRunCommandTargetState)[vs[1].(int)]
	}).(EventTargetRunCommandTargetStateOutput)
}

type EventTargetSqsTarget struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type EventTargetSqsTargetInput interface {
	pulumi.Input

	ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput
	ToEventTargetSqsTargetOutputWithContext(context.Context) EventTargetSqsTargetOutput
}

type EventTargetSqsTargetArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (EventTargetSqsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return i.ToEventTargetSqsTargetOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetOutput)
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return i.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetOutput).ToEventTargetSqsTargetPtrOutputWithContext(ctx)
}

type EventTargetSqsTargetPtrInput interface {
	pulumi.Input

	ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput
	ToEventTargetSqsTargetPtrOutputWithContext(context.Context) EventTargetSqsTargetPtrOutput
}

type eventTargetSqsTargetPtrType EventTargetSqsTargetArgs

func EventTargetSqsTargetPtr(v *EventTargetSqsTargetArgs) EventTargetSqsTargetPtrInput {
	return (*eventTargetSqsTargetPtrType)(v)
}

func (*eventTargetSqsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTarget)(nil)).Elem()
}

func (i *eventTargetSqsTargetPtrType) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return i.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetSqsTargetPtrType) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetPtrOutput)
}

type EventTargetSqsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return o.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTarget) *EventTargetSqsTarget {
		return &v
	}).(EventTargetSqsTargetPtrOutput)
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTarget) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type EventTargetSqsTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTarget)(nil)).Elem()
}

func (o EventTargetSqsTargetPtrOutput) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return o
}

func (o EventTargetSqsTargetPtrOutput) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return o
}

func (o EventTargetSqsTargetPtrOutput) Elem() EventTargetSqsTargetOutput {
	return o.ApplyT(func(v *EventTargetSqsTarget) EventTargetSqsTarget { return *v }).(EventTargetSqsTargetOutput)
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTarget) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type EventTargetSqsTargetArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type EventTargetSqsTargetArgsInput interface {
	pulumi.Input

	ToEventTargetSqsTargetArgsOutput() EventTargetSqsTargetArgsOutput
	ToEventTargetSqsTargetArgsOutputWithContext(context.Context) EventTargetSqsTargetArgsOutput
}

type EventTargetSqsTargetArgsArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (EventTargetSqsTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTargetArgs)(nil)).Elem()
}

func (i EventTargetSqsTargetArgsArgs) ToEventTargetSqsTargetArgsOutput() EventTargetSqsTargetArgsOutput {
	return i.ToEventTargetSqsTargetArgsOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgsArgs) ToEventTargetSqsTargetArgsOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetArgsOutput)
}

func (i EventTargetSqsTargetArgsArgs) ToEventTargetSqsTargetArgsPtrOutput() EventTargetSqsTargetArgsPtrOutput {
	return i.ToEventTargetSqsTargetArgsPtrOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgsArgs) ToEventTargetSqsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetArgsOutput).ToEventTargetSqsTargetArgsPtrOutputWithContext(ctx)
}

type EventTargetSqsTargetArgsPtrInput interface {
	pulumi.Input

	ToEventTargetSqsTargetArgsPtrOutput() EventTargetSqsTargetArgsPtrOutput
	ToEventTargetSqsTargetArgsPtrOutputWithContext(context.Context) EventTargetSqsTargetArgsPtrOutput
}

type eventTargetSqsTargetArgsPtrType EventTargetSqsTargetArgsArgs

func EventTargetSqsTargetArgsPtr(v *EventTargetSqsTargetArgsArgs) EventTargetSqsTargetArgsPtrInput {
	return (*eventTargetSqsTargetArgsPtrType)(v)
}

func (*eventTargetSqsTargetArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTargetArgs)(nil)).Elem()
}

func (i *eventTargetSqsTargetArgsPtrType) ToEventTargetSqsTargetArgsPtrOutput() EventTargetSqsTargetArgsPtrOutput {
	return i.ToEventTargetSqsTargetArgsPtrOutputWithContext(context.Background())
}

func (i *eventTargetSqsTargetArgsPtrType) ToEventTargetSqsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetArgsPtrOutput)
}

type EventTargetSqsTargetArgsOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTargetArgs)(nil)).Elem()
}

func (o EventTargetSqsTargetArgsOutput) ToEventTargetSqsTargetArgsOutput() EventTargetSqsTargetArgsOutput {
	return o
}

func (o EventTargetSqsTargetArgsOutput) ToEventTargetSqsTargetArgsOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsOutput {
	return o
}

func (o EventTargetSqsTargetArgsOutput) ToEventTargetSqsTargetArgsPtrOutput() EventTargetSqsTargetArgsPtrOutput {
	return o.ToEventTargetSqsTargetArgsPtrOutputWithContext(context.Background())
}

func (o EventTargetSqsTargetArgsOutput) ToEventTargetSqsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTargetArgs) *EventTargetSqsTargetArgs {
		return &v
	}).(EventTargetSqsTargetArgsPtrOutput)
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetArgsOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTargetArgs) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type EventTargetSqsTargetArgsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTargetArgs)(nil)).Elem()
}

func (o EventTargetSqsTargetArgsPtrOutput) ToEventTargetSqsTargetArgsPtrOutput() EventTargetSqsTargetArgsPtrOutput {
	return o
}

func (o EventTargetSqsTargetArgsPtrOutput) ToEventTargetSqsTargetArgsPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetArgsPtrOutput {
	return o
}

func (o EventTargetSqsTargetArgsPtrOutput) Elem() EventTargetSqsTargetArgsOutput {
	return o.ApplyT(func(v *EventTargetSqsTargetArgs) EventTargetSqsTargetArgs { return *v }).(EventTargetSqsTargetArgsOutput)
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetArgsPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTargetArgs) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type EventTargetSqsTargetState struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type EventTargetSqsTargetStateInput interface {
	pulumi.Input

	ToEventTargetSqsTargetStateOutput() EventTargetSqsTargetStateOutput
	ToEventTargetSqsTargetStateOutputWithContext(context.Context) EventTargetSqsTargetStateOutput
}

type EventTargetSqsTargetStateArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (EventTargetSqsTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTargetState)(nil)).Elem()
}

func (i EventTargetSqsTargetStateArgs) ToEventTargetSqsTargetStateOutput() EventTargetSqsTargetStateOutput {
	return i.ToEventTargetSqsTargetStateOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetStateArgs) ToEventTargetSqsTargetStateOutputWithContext(ctx context.Context) EventTargetSqsTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetStateOutput)
}

type EventTargetSqsTargetStateOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTargetState)(nil)).Elem()
}

func (o EventTargetSqsTargetStateOutput) ToEventTargetSqsTargetStateOutput() EventTargetSqsTargetStateOutput {
	return o
}

func (o EventTargetSqsTargetStateOutput) ToEventTargetSqsTargetStateOutputWithContext(ctx context.Context) EventTargetSqsTargetStateOutput {
	return o
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetStateOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTargetState) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type LogMetricFilterMetricTransformation struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue *string `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name string `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace string `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value string `pulumi:"value"`
}

type LogMetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput
	ToLogMetricFilterMetricTransformationOutputWithContext(context.Context) LogMetricFilterMetricTransformationOutput
}

type LogMetricFilterMetricTransformationArgs struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name pulumi.StringInput `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return i.ToLogMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationOutput)
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return i.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationOutput).ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx)
}

type LogMetricFilterMetricTransformationPtrInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput
	ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Context) LogMetricFilterMetricTransformationPtrOutput
}

type logMetricFilterMetricTransformationPtrType LogMetricFilterMetricTransformationArgs

func LogMetricFilterMetricTransformationPtr(v *LogMetricFilterMetricTransformationArgs) LogMetricFilterMetricTransformationPtrInput {
	return (*logMetricFilterMetricTransformationPtrType)(v)
}

func (*logMetricFilterMetricTransformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (i *logMetricFilterMetricTransformationPtrType) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return i.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (i *logMetricFilterMetricTransformationPtrType) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationPtrOutput)
}

type LogMetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return o.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) *LogMetricFilterMetricTransformation {
		return &v
	}).(LogMetricFilterMetricTransformationPtrOutput)
}

// The value to emit when a filter pattern does not match a log event.
func (o LogMetricFilterMetricTransformationOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
func (o LogMetricFilterMetricTransformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Name }).(pulumi.StringOutput)
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Namespace }).(pulumi.StringOutput)
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Value }).(pulumi.StringOutput)
}

type LogMetricFilterMetricTransformationPtrOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationPtrOutput) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationPtrOutput) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationPtrOutput) Elem() LogMetricFilterMetricTransformationOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) LogMetricFilterMetricTransformation { return *v }).(LogMetricFilterMetricTransformationOutput)
}

// The value to emit when a filter pattern does not match a log event.
func (o LogMetricFilterMetricTransformationPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
func (o LogMetricFilterMetricTransformationPtrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Name }).(pulumi.StringOutput)
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationPtrOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Namespace }).(pulumi.StringOutput)
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationPtrOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Value }).(pulumi.StringOutput)
}

type LogMetricFilterMetricTransformationArgs struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue *string `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name string `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace string `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value string `pulumi:"value"`
}

type LogMetricFilterMetricTransformationArgsInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationArgsOutput() LogMetricFilterMetricTransformationArgsOutput
	ToLogMetricFilterMetricTransformationArgsOutputWithContext(context.Context) LogMetricFilterMetricTransformationArgsOutput
}

type LogMetricFilterMetricTransformationArgsArgs struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name pulumi.StringInput `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformationArgs)(nil)).Elem()
}

func (i LogMetricFilterMetricTransformationArgsArgs) ToLogMetricFilterMetricTransformationArgsOutput() LogMetricFilterMetricTransformationArgsOutput {
	return i.ToLogMetricFilterMetricTransformationArgsOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgsArgs) ToLogMetricFilterMetricTransformationArgsOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationArgsOutput)
}

func (i LogMetricFilterMetricTransformationArgsArgs) ToLogMetricFilterMetricTransformationArgsPtrOutput() LogMetricFilterMetricTransformationArgsPtrOutput {
	return i.ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgsArgs) ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationArgsOutput).ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(ctx)
}

type LogMetricFilterMetricTransformationArgsPtrInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationArgsPtrOutput() LogMetricFilterMetricTransformationArgsPtrOutput
	ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(context.Context) LogMetricFilterMetricTransformationArgsPtrOutput
}

type logMetricFilterMetricTransformationArgsPtrType LogMetricFilterMetricTransformationArgsArgs

func LogMetricFilterMetricTransformationArgsPtr(v *LogMetricFilterMetricTransformationArgsArgs) LogMetricFilterMetricTransformationArgsPtrInput {
	return (*logMetricFilterMetricTransformationArgsPtrType)(v)
}

func (*logMetricFilterMetricTransformationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformationArgs)(nil)).Elem()
}

func (i *logMetricFilterMetricTransformationArgsPtrType) ToLogMetricFilterMetricTransformationArgsPtrOutput() LogMetricFilterMetricTransformationArgsPtrOutput {
	return i.ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(context.Background())
}

func (i *logMetricFilterMetricTransformationArgsPtrType) ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationArgsPtrOutput)
}

type LogMetricFilterMetricTransformationArgsOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformationArgs)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationArgsOutput) ToLogMetricFilterMetricTransformationArgsOutput() LogMetricFilterMetricTransformationArgsOutput {
	return o
}

func (o LogMetricFilterMetricTransformationArgsOutput) ToLogMetricFilterMetricTransformationArgsOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsOutput {
	return o
}

func (o LogMetricFilterMetricTransformationArgsOutput) ToLogMetricFilterMetricTransformationArgsPtrOutput() LogMetricFilterMetricTransformationArgsPtrOutput {
	return o.ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(context.Background())
}

func (o LogMetricFilterMetricTransformationArgsOutput) ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) *LogMetricFilterMetricTransformationArgs {
		return &v
	}).(LogMetricFilterMetricTransformationArgsPtrOutput)
}

// The value to emit when a filter pattern does not match a log event.
func (o LogMetricFilterMetricTransformationArgsOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
func (o LogMetricFilterMetricTransformationArgsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationArgsOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Namespace }).(pulumi.StringOutput)
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationArgsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Value }).(pulumi.StringOutput)
}

type LogMetricFilterMetricTransformationArgsPtrOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformationArgs)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationArgsPtrOutput) ToLogMetricFilterMetricTransformationArgsPtrOutput() LogMetricFilterMetricTransformationArgsPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationArgsPtrOutput) ToLogMetricFilterMetricTransformationArgsPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationArgsPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationArgsPtrOutput) Elem() LogMetricFilterMetricTransformationArgsOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformationArgs) LogMetricFilterMetricTransformationArgs { return *v }).(LogMetricFilterMetricTransformationArgsOutput)
}

// The value to emit when a filter pattern does not match a log event.
func (o LogMetricFilterMetricTransformationArgsPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
func (o LogMetricFilterMetricTransformationArgsPtrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationArgsPtrOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Namespace }).(pulumi.StringOutput)
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationArgsPtrOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationArgs) string { return v.Value }).(pulumi.StringOutput)
}

type LogMetricFilterMetricTransformationState struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue *string `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name string `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace string `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value string `pulumi:"value"`
}

type LogMetricFilterMetricTransformationStateInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationStateOutput() LogMetricFilterMetricTransformationStateOutput
	ToLogMetricFilterMetricTransformationStateOutputWithContext(context.Context) LogMetricFilterMetricTransformationStateOutput
}

type LogMetricFilterMetricTransformationStateArgs struct {
	// The value to emit when a filter pattern does not match a log event.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
	Name pulumi.StringInput `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformationState)(nil)).Elem()
}

func (i LogMetricFilterMetricTransformationStateArgs) ToLogMetricFilterMetricTransformationStateOutput() LogMetricFilterMetricTransformationStateOutput {
	return i.ToLogMetricFilterMetricTransformationStateOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationStateArgs) ToLogMetricFilterMetricTransformationStateOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationStateOutput)
}

type LogMetricFilterMetricTransformationStateOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformationState)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationStateOutput) ToLogMetricFilterMetricTransformationStateOutput() LogMetricFilterMetricTransformationStateOutput {
	return o
}

func (o LogMetricFilterMetricTransformationStateOutput) ToLogMetricFilterMetricTransformationStateOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationStateOutput {
	return o
}

// The value to emit when a filter pattern does not match a log event.
func (o LogMetricFilterMetricTransformationStateOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationState) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
func (o LogMetricFilterMetricTransformationStateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationState) string { return v.Name }).(pulumi.StringOutput)
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationStateOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationState) string { return v.Namespace }).(pulumi.StringOutput)
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationStateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformationState) string { return v.Value }).(pulumi.StringOutput)
}

type MetricAlarmMetricQuery struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric *MetricAlarmMetricQueryMetric `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData *bool `pulumi:"returnData"`
}

type MetricAlarmMetricQueryInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput
	ToMetricAlarmMetricQueryOutputWithContext(context.Context) MetricAlarmMetricQueryOutput
}

type MetricAlarmMetricQueryArgs struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumi.StringInput `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric MetricAlarmMetricQueryMetricPtrInput `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return i.ToMetricAlarmMetricQueryOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryOutput)
}

type MetricAlarmMetricQueryArrayInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput
	ToMetricAlarmMetricQueryArrayOutputWithContext(context.Context) MetricAlarmMetricQueryArrayOutput
}

type MetricAlarmMetricQueryArray []MetricAlarmMetricQueryInput

func (MetricAlarmMetricQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return i.ToMetricAlarmMetricQueryArrayOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryArrayOutput)
}

type MetricAlarmMetricQueryOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return o
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
func (o MetricAlarmMetricQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o MetricAlarmMetricQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) string { return v.Id }).(pulumi.StringOutput)
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
func (o MetricAlarmMetricQueryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
func (o MetricAlarmMetricQueryOutput) Metric() MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *MetricAlarmMetricQueryMetric { return v.Metric }).(MetricAlarmMetricQueryMetricPtrOutput)
}

// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
func (o MetricAlarmMetricQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type MetricAlarmMetricQueryArrayOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) Index(i pulumi.IntInput) MetricAlarmMetricQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlarmMetricQuery {
		return vs[0].([]MetricAlarmMetricQuery)[vs[1].(int)]
	}).(MetricAlarmMetricQueryOutput)
}

type MetricAlarmMetricQueryArgs struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric *MetricAlarmMetricQueryMetricArgs `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData *bool `pulumi:"returnData"`
}

type MetricAlarmMetricQueryArgsInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryArgsOutput() MetricAlarmMetricQueryArgsOutput
	ToMetricAlarmMetricQueryArgsOutputWithContext(context.Context) MetricAlarmMetricQueryArgsOutput
}

type MetricAlarmMetricQueryArgsArgs struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumi.StringInput `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric MetricAlarmMetricQueryMetricArgsPtrInput `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryArgs)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgsArgs) ToMetricAlarmMetricQueryArgsOutput() MetricAlarmMetricQueryArgsOutput {
	return i.ToMetricAlarmMetricQueryArgsOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgsArgs) ToMetricAlarmMetricQueryArgsOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryArgsOutput)
}

type MetricAlarmMetricQueryArgsArrayInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryArgsArrayOutput() MetricAlarmMetricQueryArgsArrayOutput
	ToMetricAlarmMetricQueryArgsArrayOutputWithContext(context.Context) MetricAlarmMetricQueryArgsArrayOutput
}

type MetricAlarmMetricQueryArgsArray []MetricAlarmMetricQueryArgsInput

func (MetricAlarmMetricQueryArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQueryArgs)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgsArray) ToMetricAlarmMetricQueryArgsArrayOutput() MetricAlarmMetricQueryArgsArrayOutput {
	return i.ToMetricAlarmMetricQueryArgsArrayOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgsArray) ToMetricAlarmMetricQueryArgsArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryArgsArrayOutput)
}

type MetricAlarmMetricQueryArgsOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryArgs)(nil)).Elem()
}

func (o MetricAlarmMetricQueryArgsOutput) ToMetricAlarmMetricQueryArgsOutput() MetricAlarmMetricQueryArgsOutput {
	return o
}

func (o MetricAlarmMetricQueryArgsOutput) ToMetricAlarmMetricQueryArgsOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArgsOutput {
	return o
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
func (o MetricAlarmMetricQueryArgsOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryArgs) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o MetricAlarmMetricQueryArgsOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryArgs) string { return v.Id }).(pulumi.StringOutput)
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
func (o MetricAlarmMetricQueryArgsOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryArgs) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
func (o MetricAlarmMetricQueryArgsOutput) Metric() MetricAlarmMetricQueryMetricArgsPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryArgs) *MetricAlarmMetricQueryMetricArgs { return v.Metric }).(MetricAlarmMetricQueryMetricArgsPtrOutput)
}

// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
func (o MetricAlarmMetricQueryArgsOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryArgs) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type MetricAlarmMetricQueryArgsArrayOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQueryArgs)(nil)).Elem()
}

func (o MetricAlarmMetricQueryArgsArrayOutput) ToMetricAlarmMetricQueryArgsArrayOutput() MetricAlarmMetricQueryArgsArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArgsArrayOutput) ToMetricAlarmMetricQueryArgsArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArgsArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArgsArrayOutput) Index(i pulumi.IntInput) MetricAlarmMetricQueryArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlarmMetricQueryArgs {
		return vs[0].([]MetricAlarmMetricQueryArgs)[vs[1].(int)]
	}).(MetricAlarmMetricQueryArgsOutput)
}

type MetricAlarmMetricQueryMetric struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]interface{} `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName string `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period int `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat string `pulumi:"stat"`
	// The unit for this metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmMetricQueryMetricInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput
	ToMetricAlarmMetricQueryMetricOutputWithContext(context.Context) MetricAlarmMetricQueryMetricOutput
}

type MetricAlarmMetricQueryMetricArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumi.MapInput `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat pulumi.StringInput `pulumi:"stat"`
	// The unit for this metric.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (MetricAlarmMetricQueryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return i.ToMetricAlarmMetricQueryMetricOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput)
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput).ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx)
}

type MetricAlarmMetricQueryMetricPtrInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput
	ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Context) MetricAlarmMetricQueryMetricPtrOutput
}

type metricAlarmMetricQueryMetricPtrType MetricAlarmMetricQueryMetricArgs

func MetricAlarmMetricQueryMetricPtr(v *MetricAlarmMetricQueryMetricArgs) MetricAlarmMetricQueryMetricPtrInput {
	return (*metricAlarmMetricQueryMetricPtrType)(v)
}

func (*metricAlarmMetricQueryMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricPtrOutput)
}

type MetricAlarmMetricQueryMetricOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *MetricAlarmMetricQueryMetric {
		return &v
	}).(MetricAlarmMetricQueryMetricPtrOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryMetricPtrOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Elem() MetricAlarmMetricQueryMetricOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) MetricAlarmMetricQueryMetric { return *v }).(MetricAlarmMetricQueryMetricOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricPtrOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricPtrOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryMetricArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]interface{} `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName string `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period int `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat string `pulumi:"stat"`
	// The unit for this metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmMetricQueryMetricArgsInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricArgsOutput() MetricAlarmMetricQueryMetricArgsOutput
	ToMetricAlarmMetricQueryMetricArgsOutputWithContext(context.Context) MetricAlarmMetricQueryMetricArgsOutput
}

type MetricAlarmMetricQueryMetricArgsArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumi.MapInput `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat pulumi.StringInput `pulumi:"stat"`
	// The unit for this metric.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (MetricAlarmMetricQueryMetricArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetricArgs)(nil)).Elem()
}

func (i MetricAlarmMetricQueryMetricArgsArgs) ToMetricAlarmMetricQueryMetricArgsOutput() MetricAlarmMetricQueryMetricArgsOutput {
	return i.ToMetricAlarmMetricQueryMetricArgsOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgsArgs) ToMetricAlarmMetricQueryMetricArgsOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricArgsOutput)
}

func (i MetricAlarmMetricQueryMetricArgsArgs) ToMetricAlarmMetricQueryMetricArgsPtrOutput() MetricAlarmMetricQueryMetricArgsPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgsArgs) ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricArgsOutput).ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(ctx)
}

type MetricAlarmMetricQueryMetricArgsPtrInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricArgsPtrOutput() MetricAlarmMetricQueryMetricArgsPtrOutput
	ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(context.Context) MetricAlarmMetricQueryMetricArgsPtrOutput
}

type metricAlarmMetricQueryMetricArgsPtrType MetricAlarmMetricQueryMetricArgsArgs

func MetricAlarmMetricQueryMetricArgsPtr(v *MetricAlarmMetricQueryMetricArgsArgs) MetricAlarmMetricQueryMetricArgsPtrInput {
	return (*metricAlarmMetricQueryMetricArgsPtrType)(v)
}

func (*metricAlarmMetricQueryMetricArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetricArgs)(nil)).Elem()
}

func (i *metricAlarmMetricQueryMetricArgsPtrType) ToMetricAlarmMetricQueryMetricArgsPtrOutput() MetricAlarmMetricQueryMetricArgsPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(context.Background())
}

func (i *metricAlarmMetricQueryMetricArgsPtrType) ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricArgsPtrOutput)
}

type MetricAlarmMetricQueryMetricArgsOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetricArgs)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricArgsOutput) ToMetricAlarmMetricQueryMetricArgsOutput() MetricAlarmMetricQueryMetricArgsOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricArgsOutput) ToMetricAlarmMetricQueryMetricArgsOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricArgsOutput) ToMetricAlarmMetricQueryMetricArgsPtrOutput() MetricAlarmMetricQueryMetricArgsPtrOutput {
	return o.ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(context.Background())
}

func (o MetricAlarmMetricQueryMetricArgsOutput) ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) *MetricAlarmMetricQueryMetricArgs {
		return &v
	}).(MetricAlarmMetricQueryMetricArgsPtrOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricArgsOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricArgsOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricArgsOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryMetricArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetricArgs)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricArgsPtrOutput) ToMetricAlarmMetricQueryMetricArgsPtrOutput() MetricAlarmMetricQueryMetricArgsPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricArgsPtrOutput) ToMetricAlarmMetricQueryMetricArgsPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricArgsPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Elem() MetricAlarmMetricQueryMetricArgsOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetricArgs) MetricAlarmMetricQueryMetricArgs { return *v }).(MetricAlarmMetricQueryMetricArgsOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricArgsPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetricArgs) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryState struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric *MetricAlarmMetricQueryStateMetric `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData *bool `pulumi:"returnData"`
}

type MetricAlarmMetricQueryStateInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryStateOutput() MetricAlarmMetricQueryStateOutput
	ToMetricAlarmMetricQueryStateOutputWithContext(context.Context) MetricAlarmMetricQueryStateOutput
}

type MetricAlarmMetricQueryStateArgs struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumi.StringInput `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric MetricAlarmMetricQueryStateMetricPtrInput `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryState)(nil)).Elem()
}

func (i MetricAlarmMetricQueryStateArgs) ToMetricAlarmMetricQueryStateOutput() MetricAlarmMetricQueryStateOutput {
	return i.ToMetricAlarmMetricQueryStateOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryStateArgs) ToMetricAlarmMetricQueryStateOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryStateOutput)
}

type MetricAlarmMetricQueryStateArrayInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryStateArrayOutput() MetricAlarmMetricQueryStateArrayOutput
	ToMetricAlarmMetricQueryStateArrayOutputWithContext(context.Context) MetricAlarmMetricQueryStateArrayOutput
}

type MetricAlarmMetricQueryStateArray []MetricAlarmMetricQueryStateInput

func (MetricAlarmMetricQueryStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQueryState)(nil)).Elem()
}

func (i MetricAlarmMetricQueryStateArray) ToMetricAlarmMetricQueryStateArrayOutput() MetricAlarmMetricQueryStateArrayOutput {
	return i.ToMetricAlarmMetricQueryStateArrayOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryStateArray) ToMetricAlarmMetricQueryStateArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryStateArrayOutput)
}

type MetricAlarmMetricQueryStateOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryState)(nil)).Elem()
}

func (o MetricAlarmMetricQueryStateOutput) ToMetricAlarmMetricQueryStateOutput() MetricAlarmMetricQueryStateOutput {
	return o
}

func (o MetricAlarmMetricQueryStateOutput) ToMetricAlarmMetricQueryStateOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateOutput {
	return o
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
func (o MetricAlarmMetricQueryStateOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryState) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o MetricAlarmMetricQueryStateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryState) string { return v.Id }).(pulumi.StringOutput)
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
func (o MetricAlarmMetricQueryStateOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryState) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
func (o MetricAlarmMetricQueryStateOutput) Metric() MetricAlarmMetricQueryStateMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryState) *MetricAlarmMetricQueryStateMetric { return v.Metric }).(MetricAlarmMetricQueryStateMetricPtrOutput)
}

// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
func (o MetricAlarmMetricQueryStateOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryState) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type MetricAlarmMetricQueryStateArrayOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQueryState)(nil)).Elem()
}

func (o MetricAlarmMetricQueryStateArrayOutput) ToMetricAlarmMetricQueryStateArrayOutput() MetricAlarmMetricQueryStateArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryStateArrayOutput) ToMetricAlarmMetricQueryStateArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryStateArrayOutput) Index(i pulumi.IntInput) MetricAlarmMetricQueryStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlarmMetricQueryState {
		return vs[0].([]MetricAlarmMetricQueryState)[vs[1].(int)]
	}).(MetricAlarmMetricQueryStateOutput)
}

type MetricAlarmMetricQueryStateMetric struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]interface{} `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName string `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period int `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat string `pulumi:"stat"`
	// The unit for this metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmMetricQueryStateMetricInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryStateMetricOutput() MetricAlarmMetricQueryStateMetricOutput
	ToMetricAlarmMetricQueryStateMetricOutputWithContext(context.Context) MetricAlarmMetricQueryStateMetricOutput
}

type MetricAlarmMetricQueryStateMetricArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumi.MapInput `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The period in seconds over which the specified `stat` is applied.
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to apply to this metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Stat pulumi.StringInput `pulumi:"stat"`
	// The unit for this metric.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (MetricAlarmMetricQueryStateMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryStateMetric)(nil)).Elem()
}

func (i MetricAlarmMetricQueryStateMetricArgs) ToMetricAlarmMetricQueryStateMetricOutput() MetricAlarmMetricQueryStateMetricOutput {
	return i.ToMetricAlarmMetricQueryStateMetricOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryStateMetricArgs) ToMetricAlarmMetricQueryStateMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryStateMetricOutput)
}

func (i MetricAlarmMetricQueryStateMetricArgs) ToMetricAlarmMetricQueryStateMetricPtrOutput() MetricAlarmMetricQueryStateMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryStateMetricArgs) ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryStateMetricOutput).ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(ctx)
}

type MetricAlarmMetricQueryStateMetricPtrInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryStateMetricPtrOutput() MetricAlarmMetricQueryStateMetricPtrOutput
	ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(context.Context) MetricAlarmMetricQueryStateMetricPtrOutput
}

type metricAlarmMetricQueryStateMetricPtrType MetricAlarmMetricQueryStateMetricArgs

func MetricAlarmMetricQueryStateMetricPtr(v *MetricAlarmMetricQueryStateMetricArgs) MetricAlarmMetricQueryStateMetricPtrInput {
	return (*metricAlarmMetricQueryStateMetricPtrType)(v)
}

func (*metricAlarmMetricQueryStateMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryStateMetric)(nil)).Elem()
}

func (i *metricAlarmMetricQueryStateMetricPtrType) ToMetricAlarmMetricQueryStateMetricPtrOutput() MetricAlarmMetricQueryStateMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(context.Background())
}

func (i *metricAlarmMetricQueryStateMetricPtrType) ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryStateMetricPtrOutput)
}

type MetricAlarmMetricQueryStateMetricOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryStateMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryStateMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryStateMetricOutput) ToMetricAlarmMetricQueryStateMetricOutput() MetricAlarmMetricQueryStateMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryStateMetricOutput) ToMetricAlarmMetricQueryStateMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryStateMetricOutput) ToMetricAlarmMetricQueryStateMetricPtrOutput() MetricAlarmMetricQueryStateMetricPtrOutput {
	return o.ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(context.Background())
}

func (o MetricAlarmMetricQueryStateMetricOutput) ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) *MetricAlarmMetricQueryStateMetric {
		return &v
	}).(MetricAlarmMetricQueryStateMetricPtrOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryStateMetricOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryStateMetricOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryStateMetricOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryStateMetricPtrOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryStateMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryStateMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryStateMetricPtrOutput) ToMetricAlarmMetricQueryStateMetricPtrOutput() MetricAlarmMetricQueryStateMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryStateMetricPtrOutput) ToMetricAlarmMetricQueryStateMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryStateMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryStateMetricPtrOutput) Elem() MetricAlarmMetricQueryStateMetricOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryStateMetric) MetricAlarmMetricQueryStateMetric { return *v }).(MetricAlarmMetricQueryStateMetricOutput)
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricPtrOutput) Dimensions() pulumi.MapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) map[string]interface{} { return v.Dimensions }).(pulumi.MapOutput)
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricPtrOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryStateMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `stat` is applied.
func (o MetricAlarmMetricQueryStateMetricPtrOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to apply to this metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmMetricQueryStateMetricPtrOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit for this metric.
func (o MetricAlarmMetricQueryStateMetricPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryStateMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventPermissionConditionOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionPtrOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionArgsOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionStateOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetArgsOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetStateOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetArgsOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationArgsOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetStateOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetStateNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetStateNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerPtrOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerArgsOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerStateOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetArgsOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetStateOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetArrayOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetArgsOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetArgsArrayOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetStateOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetStateArrayOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetArgsOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetArgsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetStateOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationPtrOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationArgsOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationArgsPtrOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationStateOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryArrayOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryArgsOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryArgsArrayOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricPtrOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricArgsOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryStateOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryStateArrayOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryStateMetricOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryStateMetricPtrOutput{})
}
