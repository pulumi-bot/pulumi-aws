// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventPermissionCondition struct {
	Key   string `pulumi:"key"`
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// EventPermissionConditionInput is an input type that accepts EventPermissionConditionArgs and EventPermissionConditionOutput values.
// You can construct a concrete instance of `EventPermissionConditionInput` via:
//
//          EventPermissionConditionArgs{...}
type EventPermissionConditionInput interface {
	pulumi.Input

	ToEventPermissionConditionOutput() EventPermissionConditionOutput
	ToEventPermissionConditionOutputWithContext(context.Context) EventPermissionConditionOutput
}

type EventPermissionConditionArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventPermissionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return i.ToEventPermissionConditionOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionOutput)
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return i.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionOutput).ToEventPermissionConditionPtrOutputWithContext(ctx)
}

// EventPermissionConditionPtrInput is an input type that accepts EventPermissionConditionArgs, EventPermissionConditionPtr and EventPermissionConditionPtrOutput values.
// You can construct a concrete instance of `EventPermissionConditionPtrInput` via:
//
//          EventPermissionConditionArgs{...}
//
//  or:
//
//          nil
type EventPermissionConditionPtrInput interface {
	pulumi.Input

	ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput
	ToEventPermissionConditionPtrOutputWithContext(context.Context) EventPermissionConditionPtrOutput
}

type eventPermissionConditionPtrType EventPermissionConditionArgs

func EventPermissionConditionPtr(v *EventPermissionConditionArgs) EventPermissionConditionPtrInput {
	return (*eventPermissionConditionPtrType)(v)
}

func (*eventPermissionConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionCondition)(nil)).Elem()
}

func (i *eventPermissionConditionPtrType) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return i.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (i *eventPermissionConditionPtrType) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionPtrOutput)
}

type EventPermissionConditionOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return o.ToEventPermissionConditionPtrOutputWithContext(context.Background())
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return o.ApplyT(func(v EventPermissionCondition) *EventPermissionCondition {
		return &v
	}).(EventPermissionConditionPtrOutput)
}
func (o EventPermissionConditionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Key }).(pulumi.StringOutput)
}

func (o EventPermissionConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Type }).(pulumi.StringOutput)
}

func (o EventPermissionConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventPermissionCondition) string { return v.Value }).(pulumi.StringOutput)
}

type EventPermissionConditionPtrOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventPermissionCondition)(nil)).Elem()
}

func (o EventPermissionConditionPtrOutput) ToEventPermissionConditionPtrOutput() EventPermissionConditionPtrOutput {
	return o
}

func (o EventPermissionConditionPtrOutput) ToEventPermissionConditionPtrOutputWithContext(ctx context.Context) EventPermissionConditionPtrOutput {
	return o
}

func (o EventPermissionConditionPtrOutput) Elem() EventPermissionConditionOutput {
	return o.ApplyT(func(v *EventPermissionCondition) EventPermissionCondition { return *v }).(EventPermissionConditionOutput)
}

func (o EventPermissionConditionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventPermissionCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o EventPermissionConditionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventPermissionCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o EventPermissionConditionPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventPermissionCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type EventTargetBatchTarget struct {
	ArraySize     *int   `pulumi:"arraySize"`
	JobAttempts   *int   `pulumi:"jobAttempts"`
	JobDefinition string `pulumi:"jobDefinition"`
	JobName       string `pulumi:"jobName"`
}

// EventTargetBatchTargetInput is an input type that accepts EventTargetBatchTargetArgs and EventTargetBatchTargetOutput values.
// You can construct a concrete instance of `EventTargetBatchTargetInput` via:
//
//          EventTargetBatchTargetArgs{...}
type EventTargetBatchTargetInput interface {
	pulumi.Input

	ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput
	ToEventTargetBatchTargetOutputWithContext(context.Context) EventTargetBatchTargetOutput
}

type EventTargetBatchTargetArgs struct {
	ArraySize     pulumi.IntPtrInput `pulumi:"arraySize"`
	JobAttempts   pulumi.IntPtrInput `pulumi:"jobAttempts"`
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	JobName       pulumi.StringInput `pulumi:"jobName"`
}

func (EventTargetBatchTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return i.ToEventTargetBatchTargetOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetOutput)
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return i.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetOutput).ToEventTargetBatchTargetPtrOutputWithContext(ctx)
}

// EventTargetBatchTargetPtrInput is an input type that accepts EventTargetBatchTargetArgs, EventTargetBatchTargetPtr and EventTargetBatchTargetPtrOutput values.
// You can construct a concrete instance of `EventTargetBatchTargetPtrInput` via:
//
//          EventTargetBatchTargetArgs{...}
//
//  or:
//
//          nil
type EventTargetBatchTargetPtrInput interface {
	pulumi.Input

	ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput
	ToEventTargetBatchTargetPtrOutputWithContext(context.Context) EventTargetBatchTargetPtrOutput
}

type eventTargetBatchTargetPtrType EventTargetBatchTargetArgs

func EventTargetBatchTargetPtr(v *EventTargetBatchTargetArgs) EventTargetBatchTargetPtrInput {
	return (*eventTargetBatchTargetPtrType)(v)
}

func (*eventTargetBatchTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTarget)(nil)).Elem()
}

func (i *eventTargetBatchTargetPtrType) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return i.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetBatchTargetPtrType) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetPtrOutput)
}

type EventTargetBatchTargetOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return o.ToEventTargetBatchTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *EventTargetBatchTarget {
		return &v
	}).(EventTargetBatchTargetPtrOutput)
}
func (o EventTargetBatchTargetOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.ArraySize }).(pulumi.IntPtrOutput)
}

func (o EventTargetBatchTargetOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) *int { return v.JobAttempts }).(pulumi.IntPtrOutput)
}

func (o EventTargetBatchTargetOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobDefinition }).(pulumi.StringOutput)
}

func (o EventTargetBatchTargetOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetBatchTarget) string { return v.JobName }).(pulumi.StringOutput)
}

type EventTargetBatchTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetBatchTarget)(nil)).Elem()
}

func (o EventTargetBatchTargetPtrOutput) ToEventTargetBatchTargetPtrOutput() EventTargetBatchTargetPtrOutput {
	return o
}

func (o EventTargetBatchTargetPtrOutput) ToEventTargetBatchTargetPtrOutputWithContext(ctx context.Context) EventTargetBatchTargetPtrOutput {
	return o
}

func (o EventTargetBatchTargetPtrOutput) Elem() EventTargetBatchTargetOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) EventTargetBatchTarget { return *v }).(EventTargetBatchTargetOutput)
}

func (o EventTargetBatchTargetPtrOutput) ArraySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) *int {
		if v == nil {
			return nil
		}
		return v.ArraySize
	}).(pulumi.IntPtrOutput)
}

func (o EventTargetBatchTargetPtrOutput) JobAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) *int {
		if v == nil {
			return nil
		}
		return v.JobAttempts
	}).(pulumi.IntPtrOutput)
}

func (o EventTargetBatchTargetPtrOutput) JobDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) *string {
		if v == nil {
			return nil
		}
		return &v.JobDefinition
	}).(pulumi.StringPtrOutput)
}

func (o EventTargetBatchTargetPtrOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetBatchTarget) *string {
		if v == nil {
			return nil
		}
		return &v.JobName
	}).(pulumi.StringPtrOutput)
}

type EventTargetEcsTarget struct {
	Group                *string                                   `pulumi:"group"`
	LaunchType           *string                                   `pulumi:"launchType"`
	NetworkConfiguration *EventTargetEcsTargetNetworkConfiguration `pulumi:"networkConfiguration"`
	PlatformVersion      *string                                   `pulumi:"platformVersion"`
	TaskCount            *int                                      `pulumi:"taskCount"`
	TaskDefinitionArn    string                                    `pulumi:"taskDefinitionArn"`
}

// EventTargetEcsTargetInput is an input type that accepts EventTargetEcsTargetArgs and EventTargetEcsTargetOutput values.
// You can construct a concrete instance of `EventTargetEcsTargetInput` via:
//
//          EventTargetEcsTargetArgs{...}
type EventTargetEcsTargetInput interface {
	pulumi.Input

	ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput
	ToEventTargetEcsTargetOutputWithContext(context.Context) EventTargetEcsTargetOutput
}

type EventTargetEcsTargetArgs struct {
	Group                pulumi.StringPtrInput                            `pulumi:"group"`
	LaunchType           pulumi.StringPtrInput                            `pulumi:"launchType"`
	NetworkConfiguration EventTargetEcsTargetNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	PlatformVersion      pulumi.StringPtrInput                            `pulumi:"platformVersion"`
	TaskCount            pulumi.IntPtrInput                               `pulumi:"taskCount"`
	TaskDefinitionArn    pulumi.StringInput                               `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return i.ToEventTargetEcsTargetOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput)
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput).ToEventTargetEcsTargetPtrOutputWithContext(ctx)
}

// EventTargetEcsTargetPtrInput is an input type that accepts EventTargetEcsTargetArgs, EventTargetEcsTargetPtr and EventTargetEcsTargetPtrOutput values.
// You can construct a concrete instance of `EventTargetEcsTargetPtrInput` via:
//
//          EventTargetEcsTargetArgs{...}
//
//  or:
//
//          nil
type EventTargetEcsTargetPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput
	ToEventTargetEcsTargetPtrOutputWithContext(context.Context) EventTargetEcsTargetPtrOutput
}

type eventTargetEcsTargetPtrType EventTargetEcsTargetArgs

func EventTargetEcsTargetPtr(v *EventTargetEcsTargetArgs) EventTargetEcsTargetPtrInput {
	return (*eventTargetEcsTargetPtrType)(v)
}

func (*eventTargetEcsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return i.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetPtrType) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetPtrOutput)
}

type EventTargetEcsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o.ToEventTargetEcsTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTarget {
		return &v
	}).(EventTargetEcsTargetPtrOutput)
}
func (o EventTargetEcsTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration }).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

func (o EventTargetEcsTargetOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

func (o EventTargetEcsTargetOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetEcsTarget) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type EventTargetEcsTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutput() EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) ToEventTargetEcsTargetPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetPtrOutput {
	return o
}

func (o EventTargetEcsTargetPtrOutput) Elem() EventTargetEcsTargetOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) EventTargetEcsTarget { return *v }).(EventTargetEcsTargetOutput)
}

func (o EventTargetEcsTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *string {
		if v == nil {
			return nil
		}
		return v.LaunchType
	}).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetPtrOutput) NetworkConfiguration() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *EventTargetEcsTargetNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

func (o EventTargetEcsTargetPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

func (o EventTargetEcsTargetPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

func (o EventTargetEcsTargetPtrOutput) TaskDefinitionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTarget) *string {
		if v == nil {
			return nil
		}
		return &v.TaskDefinitionArn
	}).(pulumi.StringPtrOutput)
}

type EventTargetEcsTargetNetworkConfiguration struct {
	AssignPublicIp *bool    `pulumi:"assignPublicIp"`
	SecurityGroups []string `pulumi:"securityGroups"`
	Subnets        []string `pulumi:"subnets"`
}

// EventTargetEcsTargetNetworkConfigurationInput is an input type that accepts EventTargetEcsTargetNetworkConfigurationArgs and EventTargetEcsTargetNetworkConfigurationOutput values.
// You can construct a concrete instance of `EventTargetEcsTargetNetworkConfigurationInput` via:
//
//          EventTargetEcsTargetNetworkConfigurationArgs{...}
type EventTargetEcsTargetNetworkConfigurationInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput
	ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationOutput
}

type EventTargetEcsTargetNetworkConfigurationArgs struct {
	AssignPublicIp pulumi.BoolPtrInput     `pulumi:"assignPublicIp"`
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	Subnets        pulumi.StringArrayInput `pulumi:"subnets"`
}

func (EventTargetEcsTargetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationOutput)
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationOutput).ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx)
}

// EventTargetEcsTargetNetworkConfigurationPtrInput is an input type that accepts EventTargetEcsTargetNetworkConfigurationArgs, EventTargetEcsTargetNetworkConfigurationPtr and EventTargetEcsTargetNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `EventTargetEcsTargetNetworkConfigurationPtrInput` via:
//
//          EventTargetEcsTargetNetworkConfigurationArgs{...}
//
//  or:
//
//          nil
type EventTargetEcsTargetNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput
	ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput
}

type eventTargetEcsTargetNetworkConfigurationPtrType EventTargetEcsTargetNetworkConfigurationArgs

func EventTargetEcsTargetNetworkConfigurationPtr(v *EventTargetEcsTargetNetworkConfigurationArgs) EventTargetEcsTargetNetworkConfigurationPtrInput {
	return (*eventTargetEcsTargetNetworkConfigurationPtrType)(v)
}

func (*eventTargetEcsTargetNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (i *eventTargetEcsTargetNetworkConfigurationPtrType) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *eventTargetEcsTargetNetworkConfigurationPtrType) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}

type EventTargetEcsTargetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) *EventTargetEcsTargetNetworkConfiguration {
		return &v
	}).(EventTargetEcsTargetNetworkConfigurationPtrOutput)
}
func (o EventTargetEcsTargetNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type EventTargetEcsTargetNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutput() EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) ToEventTargetEcsTargetNetworkConfigurationPtrOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationPtrOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) Elem() EventTargetEcsTargetNetworkConfigurationOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfiguration) EventTargetEcsTargetNetworkConfiguration { return *v }).(EventTargetEcsTargetNetworkConfigurationOutput)
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.BoolPtrOutput)
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

func (o EventTargetEcsTargetNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventTargetEcsTargetNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type EventTargetInputTransformer struct {
	InputPaths    map[string]string `pulumi:"inputPaths"`
	InputTemplate string            `pulumi:"inputTemplate"`
}

// EventTargetInputTransformerInput is an input type that accepts EventTargetInputTransformerArgs and EventTargetInputTransformerOutput values.
// You can construct a concrete instance of `EventTargetInputTransformerInput` via:
//
//          EventTargetInputTransformerArgs{...}
type EventTargetInputTransformerInput interface {
	pulumi.Input

	ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput
	ToEventTargetInputTransformerOutputWithContext(context.Context) EventTargetInputTransformerOutput
}

type EventTargetInputTransformerArgs struct {
	InputPaths    pulumi.StringMapInput `pulumi:"inputPaths"`
	InputTemplate pulumi.StringInput    `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return i.ToEventTargetInputTransformerOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput)
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput).ToEventTargetInputTransformerPtrOutputWithContext(ctx)
}

// EventTargetInputTransformerPtrInput is an input type that accepts EventTargetInputTransformerArgs, EventTargetInputTransformerPtr and EventTargetInputTransformerPtrOutput values.
// You can construct a concrete instance of `EventTargetInputTransformerPtrInput` via:
//
//          EventTargetInputTransformerArgs{...}
//
//  or:
//
//          nil
type EventTargetInputTransformerPtrInput interface {
	pulumi.Input

	ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput
	ToEventTargetInputTransformerPtrOutputWithContext(context.Context) EventTargetInputTransformerPtrOutput
}

type eventTargetInputTransformerPtrType EventTargetInputTransformerArgs

func EventTargetInputTransformerPtr(v *EventTargetInputTransformerArgs) EventTargetInputTransformerPtrInput {
	return (*eventTargetInputTransformerPtrType)(v)
}

func (*eventTargetInputTransformerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerPtrOutput)
}

type EventTargetInputTransformerOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) *EventTargetInputTransformer {
		return &v
	}).(EventTargetInputTransformerPtrOutput)
}
func (o EventTargetInputTransformerOutput) InputPaths() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) map[string]string { return v.InputPaths }).(pulumi.StringMapOutput)
}

func (o EventTargetInputTransformerOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerPtrOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) Elem() EventTargetInputTransformerOutput {
	return o.ApplyT(func(v *EventTargetInputTransformer) EventTargetInputTransformer { return *v }).(EventTargetInputTransformerOutput)
}

func (o EventTargetInputTransformerPtrOutput) InputPaths() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventTargetInputTransformer) map[string]string {
		if v == nil {
			return nil
		}
		return v.InputPaths
	}).(pulumi.StringMapOutput)
}

func (o EventTargetInputTransformerPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetInputTransformer) *string {
		if v == nil {
			return nil
		}
		return &v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTarget struct {
	PartitionKeyPath *string `pulumi:"partitionKeyPath"`
}

// EventTargetKinesisTargetInput is an input type that accepts EventTargetKinesisTargetArgs and EventTargetKinesisTargetOutput values.
// You can construct a concrete instance of `EventTargetKinesisTargetInput` via:
//
//          EventTargetKinesisTargetArgs{...}
type EventTargetKinesisTargetInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput
	ToEventTargetKinesisTargetOutputWithContext(context.Context) EventTargetKinesisTargetOutput
}

type EventTargetKinesisTargetArgs struct {
	PartitionKeyPath pulumi.StringPtrInput `pulumi:"partitionKeyPath"`
}

func (EventTargetKinesisTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return i.ToEventTargetKinesisTargetOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetOutput)
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return i.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetOutput).ToEventTargetKinesisTargetPtrOutputWithContext(ctx)
}

// EventTargetKinesisTargetPtrInput is an input type that accepts EventTargetKinesisTargetArgs, EventTargetKinesisTargetPtr and EventTargetKinesisTargetPtrOutput values.
// You can construct a concrete instance of `EventTargetKinesisTargetPtrInput` via:
//
//          EventTargetKinesisTargetArgs{...}
//
//  or:
//
//          nil
type EventTargetKinesisTargetPtrInput interface {
	pulumi.Input

	ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput
	ToEventTargetKinesisTargetPtrOutputWithContext(context.Context) EventTargetKinesisTargetPtrOutput
}

type eventTargetKinesisTargetPtrType EventTargetKinesisTargetArgs

func EventTargetKinesisTargetPtr(v *EventTargetKinesisTargetArgs) EventTargetKinesisTargetPtrInput {
	return (*eventTargetKinesisTargetPtrType)(v)
}

func (*eventTargetKinesisTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTarget)(nil)).Elem()
}

func (i *eventTargetKinesisTargetPtrType) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return i.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetKinesisTargetPtrType) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetPtrOutput)
}

type EventTargetKinesisTargetOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return o.ToEventTargetKinesisTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTarget) *EventTargetKinesisTarget {
		return &v
	}).(EventTargetKinesisTargetPtrOutput)
}
func (o EventTargetKinesisTargetOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetKinesisTarget) *string { return v.PartitionKeyPath }).(pulumi.StringPtrOutput)
}

type EventTargetKinesisTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetKinesisTarget)(nil)).Elem()
}

func (o EventTargetKinesisTargetPtrOutput) ToEventTargetKinesisTargetPtrOutput() EventTargetKinesisTargetPtrOutput {
	return o
}

func (o EventTargetKinesisTargetPtrOutput) ToEventTargetKinesisTargetPtrOutputWithContext(ctx context.Context) EventTargetKinesisTargetPtrOutput {
	return o
}

func (o EventTargetKinesisTargetPtrOutput) Elem() EventTargetKinesisTargetOutput {
	return o.ApplyT(func(v *EventTargetKinesisTarget) EventTargetKinesisTarget { return *v }).(EventTargetKinesisTargetOutput)
}

func (o EventTargetKinesisTargetPtrOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetKinesisTarget) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKeyPath
	}).(pulumi.StringPtrOutput)
}

type EventTargetRunCommandTarget struct {
	Key    string   `pulumi:"key"`
	Values []string `pulumi:"values"`
}

// EventTargetRunCommandTargetInput is an input type that accepts EventTargetRunCommandTargetArgs and EventTargetRunCommandTargetOutput values.
// You can construct a concrete instance of `EventTargetRunCommandTargetInput` via:
//
//          EventTargetRunCommandTargetArgs{...}
type EventTargetRunCommandTargetInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput
	ToEventTargetRunCommandTargetOutputWithContext(context.Context) EventTargetRunCommandTargetOutput
}

type EventTargetRunCommandTargetArgs struct {
	Key    pulumi.StringInput      `pulumi:"key"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventTargetRunCommandTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return i.ToEventTargetRunCommandTargetOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetOutput)
}

// EventTargetRunCommandTargetArrayInput is an input type that accepts EventTargetRunCommandTargetArray and EventTargetRunCommandTargetArrayOutput values.
// You can construct a concrete instance of `EventTargetRunCommandTargetArrayInput` via:
//
//          EventTargetRunCommandTargetArray{ EventTargetRunCommandTargetArgs{...} }
type EventTargetRunCommandTargetArrayInput interface {
	pulumi.Input

	ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput
	ToEventTargetRunCommandTargetArrayOutputWithContext(context.Context) EventTargetRunCommandTargetArrayOutput
}

type EventTargetRunCommandTargetArray []EventTargetRunCommandTargetInput

func (EventTargetRunCommandTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return i.ToEventTargetRunCommandTargetArrayOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArray) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetArrayOutput)
}

type EventTargetRunCommandTargetOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetRunCommandTarget) string { return v.Key }).(pulumi.StringOutput)
}

func (o EventTargetRunCommandTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventTargetRunCommandTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventTargetRunCommandTargetArrayOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutput() EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) ToEventTargetRunCommandTargetArrayOutputWithContext(ctx context.Context) EventTargetRunCommandTargetArrayOutput {
	return o
}

func (o EventTargetRunCommandTargetArrayOutput) Index(i pulumi.IntInput) EventTargetRunCommandTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTargetRunCommandTarget {
		return vs[0].([]EventTargetRunCommandTarget)[vs[1].(int)]
	}).(EventTargetRunCommandTargetOutput)
}

type EventTargetSqsTarget struct {
	MessageGroupId *string `pulumi:"messageGroupId"`
}

// EventTargetSqsTargetInput is an input type that accepts EventTargetSqsTargetArgs and EventTargetSqsTargetOutput values.
// You can construct a concrete instance of `EventTargetSqsTargetInput` via:
//
//          EventTargetSqsTargetArgs{...}
type EventTargetSqsTargetInput interface {
	pulumi.Input

	ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput
	ToEventTargetSqsTargetOutputWithContext(context.Context) EventTargetSqsTargetOutput
}

type EventTargetSqsTargetArgs struct {
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (EventTargetSqsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return i.ToEventTargetSqsTargetOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetOutput)
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return i.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetOutput).ToEventTargetSqsTargetPtrOutputWithContext(ctx)
}

// EventTargetSqsTargetPtrInput is an input type that accepts EventTargetSqsTargetArgs, EventTargetSqsTargetPtr and EventTargetSqsTargetPtrOutput values.
// You can construct a concrete instance of `EventTargetSqsTargetPtrInput` via:
//
//          EventTargetSqsTargetArgs{...}
//
//  or:
//
//          nil
type EventTargetSqsTargetPtrInput interface {
	pulumi.Input

	ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput
	ToEventTargetSqsTargetPtrOutputWithContext(context.Context) EventTargetSqsTargetPtrOutput
}

type eventTargetSqsTargetPtrType EventTargetSqsTargetArgs

func EventTargetSqsTargetPtr(v *EventTargetSqsTargetArgs) EventTargetSqsTargetPtrInput {
	return (*eventTargetSqsTargetPtrType)(v)
}

func (*eventTargetSqsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTarget)(nil)).Elem()
}

func (i *eventTargetSqsTargetPtrType) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return i.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (i *eventTargetSqsTargetPtrType) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetPtrOutput)
}

type EventTargetSqsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return o.ToEventTargetSqsTargetPtrOutputWithContext(context.Background())
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTarget) *EventTargetSqsTarget {
		return &v
	}).(EventTargetSqsTargetPtrOutput)
}
func (o EventTargetSqsTargetOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetSqsTarget) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type EventTargetSqsTargetPtrOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetSqsTarget)(nil)).Elem()
}

func (o EventTargetSqsTargetPtrOutput) ToEventTargetSqsTargetPtrOutput() EventTargetSqsTargetPtrOutput {
	return o
}

func (o EventTargetSqsTargetPtrOutput) ToEventTargetSqsTargetPtrOutputWithContext(ctx context.Context) EventTargetSqsTargetPtrOutput {
	return o
}

func (o EventTargetSqsTargetPtrOutput) Elem() EventTargetSqsTargetOutput {
	return o.ApplyT(func(v *EventTargetSqsTarget) EventTargetSqsTarget { return *v }).(EventTargetSqsTargetOutput)
}

func (o EventTargetSqsTargetPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetSqsTarget) *string {
		if v == nil {
			return nil
		}
		return v.MessageGroupId
	}).(pulumi.StringPtrOutput)
}

type LogMetricFilterMetricTransformation struct {
	DefaultValue *string `pulumi:"defaultValue"`
	Name         string  `pulumi:"name"`
	Namespace    string  `pulumi:"namespace"`
	Value        string  `pulumi:"value"`
}

// LogMetricFilterMetricTransformationInput is an input type that accepts LogMetricFilterMetricTransformationArgs and LogMetricFilterMetricTransformationOutput values.
// You can construct a concrete instance of `LogMetricFilterMetricTransformationInput` via:
//
//          LogMetricFilterMetricTransformationArgs{...}
type LogMetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput
	ToLogMetricFilterMetricTransformationOutputWithContext(context.Context) LogMetricFilterMetricTransformationOutput
}

type LogMetricFilterMetricTransformationArgs struct {
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	Name         pulumi.StringInput    `pulumi:"name"`
	Namespace    pulumi.StringInput    `pulumi:"namespace"`
	Value        pulumi.StringInput    `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return i.ToLogMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationOutput)
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return i.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationOutput).ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx)
}

// LogMetricFilterMetricTransformationPtrInput is an input type that accepts LogMetricFilterMetricTransformationArgs, LogMetricFilterMetricTransformationPtr and LogMetricFilterMetricTransformationPtrOutput values.
// You can construct a concrete instance of `LogMetricFilterMetricTransformationPtrInput` via:
//
//          LogMetricFilterMetricTransformationArgs{...}
//
//  or:
//
//          nil
type LogMetricFilterMetricTransformationPtrInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput
	ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Context) LogMetricFilterMetricTransformationPtrOutput
}

type logMetricFilterMetricTransformationPtrType LogMetricFilterMetricTransformationArgs

func LogMetricFilterMetricTransformationPtr(v *LogMetricFilterMetricTransformationArgs) LogMetricFilterMetricTransformationPtrInput {
	return (*logMetricFilterMetricTransformationPtrType)(v)
}

func (*logMetricFilterMetricTransformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (i *logMetricFilterMetricTransformationPtrType) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return i.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (i *logMetricFilterMetricTransformationPtrType) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationPtrOutput)
}

type LogMetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return o.ToLogMetricFilterMetricTransformationPtrOutputWithContext(context.Background())
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) *LogMetricFilterMetricTransformation {
		return &v
	}).(LogMetricFilterMetricTransformationPtrOutput)
}
func (o LogMetricFilterMetricTransformationOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

func (o LogMetricFilterMetricTransformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Name }).(pulumi.StringOutput)
}

func (o LogMetricFilterMetricTransformationOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o LogMetricFilterMetricTransformationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogMetricFilterMetricTransformation) string { return v.Value }).(pulumi.StringOutput)
}

type LogMetricFilterMetricTransformationPtrOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationPtrOutput) ToLogMetricFilterMetricTransformationPtrOutput() LogMetricFilterMetricTransformationPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationPtrOutput) ToLogMetricFilterMetricTransformationPtrOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationPtrOutput {
	return o
}

func (o LogMetricFilterMetricTransformationPtrOutput) Elem() LogMetricFilterMetricTransformationOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) LogMetricFilterMetricTransformation { return *v }).(LogMetricFilterMetricTransformationOutput)
}

func (o LogMetricFilterMetricTransformationPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

func (o LogMetricFilterMetricTransformationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o LogMetricFilterMetricTransformationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o LogMetricFilterMetricTransformationPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricFilterMetricTransformation) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQuery struct {
	Expression *string                       `pulumi:"expression"`
	Id         string                        `pulumi:"id"`
	Label      *string                       `pulumi:"label"`
	Metric     *MetricAlarmMetricQueryMetric `pulumi:"metric"`
	ReturnData *bool                         `pulumi:"returnData"`
}

// MetricAlarmMetricQueryInput is an input type that accepts MetricAlarmMetricQueryArgs and MetricAlarmMetricQueryOutput values.
// You can construct a concrete instance of `MetricAlarmMetricQueryInput` via:
//
//          MetricAlarmMetricQueryArgs{...}
type MetricAlarmMetricQueryInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput
	ToMetricAlarmMetricQueryOutputWithContext(context.Context) MetricAlarmMetricQueryOutput
}

type MetricAlarmMetricQueryArgs struct {
	Expression pulumi.StringPtrInput                `pulumi:"expression"`
	Id         pulumi.StringInput                   `pulumi:"id"`
	Label      pulumi.StringPtrInput                `pulumi:"label"`
	Metric     MetricAlarmMetricQueryMetricPtrInput `pulumi:"metric"`
	ReturnData pulumi.BoolPtrInput                  `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return i.ToMetricAlarmMetricQueryOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryOutput)
}

// MetricAlarmMetricQueryArrayInput is an input type that accepts MetricAlarmMetricQueryArray and MetricAlarmMetricQueryArrayOutput values.
// You can construct a concrete instance of `MetricAlarmMetricQueryArrayInput` via:
//
//          MetricAlarmMetricQueryArray{ MetricAlarmMetricQueryArgs{...} }
type MetricAlarmMetricQueryArrayInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput
	ToMetricAlarmMetricQueryArrayOutputWithContext(context.Context) MetricAlarmMetricQueryArrayOutput
}

type MetricAlarmMetricQueryArray []MetricAlarmMetricQueryInput

func (MetricAlarmMetricQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return i.ToMetricAlarmMetricQueryArrayOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryArrayOutput)
}

type MetricAlarmMetricQueryOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) string { return v.Id }).(pulumi.StringOutput)
}

func (o MetricAlarmMetricQueryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryOutput) Metric() MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *MetricAlarmMetricQueryMetric { return v.Metric }).(MetricAlarmMetricQueryMetricPtrOutput)
}

func (o MetricAlarmMetricQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type MetricAlarmMetricQueryArrayOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) Index(i pulumi.IntInput) MetricAlarmMetricQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlarmMetricQuery {
		return vs[0].([]MetricAlarmMetricQuery)[vs[1].(int)]
	}).(MetricAlarmMetricQueryOutput)
}

type MetricAlarmMetricQueryMetric struct {
	Dimensions map[string]string `pulumi:"dimensions"`
	MetricName string            `pulumi:"metricName"`
	Namespace  *string           `pulumi:"namespace"`
	Period     int               `pulumi:"period"`
	Stat       string            `pulumi:"stat"`
	Unit       *string           `pulumi:"unit"`
}

// MetricAlarmMetricQueryMetricInput is an input type that accepts MetricAlarmMetricQueryMetricArgs and MetricAlarmMetricQueryMetricOutput values.
// You can construct a concrete instance of `MetricAlarmMetricQueryMetricInput` via:
//
//          MetricAlarmMetricQueryMetricArgs{...}
type MetricAlarmMetricQueryMetricInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput
	ToMetricAlarmMetricQueryMetricOutputWithContext(context.Context) MetricAlarmMetricQueryMetricOutput
}

type MetricAlarmMetricQueryMetricArgs struct {
	Dimensions pulumi.StringMapInput `pulumi:"dimensions"`
	MetricName pulumi.StringInput    `pulumi:"metricName"`
	Namespace  pulumi.StringPtrInput `pulumi:"namespace"`
	Period     pulumi.IntInput       `pulumi:"period"`
	Stat       pulumi.StringInput    `pulumi:"stat"`
	Unit       pulumi.StringPtrInput `pulumi:"unit"`
}

func (MetricAlarmMetricQueryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return i.ToMetricAlarmMetricQueryMetricOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput)
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput).ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx)
}

// MetricAlarmMetricQueryMetricPtrInput is an input type that accepts MetricAlarmMetricQueryMetricArgs, MetricAlarmMetricQueryMetricPtr and MetricAlarmMetricQueryMetricPtrOutput values.
// You can construct a concrete instance of `MetricAlarmMetricQueryMetricPtrInput` via:
//
//          MetricAlarmMetricQueryMetricArgs{...}
//
//  or:
//
//          nil
type MetricAlarmMetricQueryMetricPtrInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput
	ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Context) MetricAlarmMetricQueryMetricPtrOutput
}

type metricAlarmMetricQueryMetricPtrType MetricAlarmMetricQueryMetricArgs

func MetricAlarmMetricQueryMetricPtr(v *MetricAlarmMetricQueryMetricArgs) MetricAlarmMetricQueryMetricPtrInput {
	return (*metricAlarmMetricQueryMetricPtrType)(v)
}

func (*metricAlarmMetricQueryMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return i.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (i *metricAlarmMetricQueryMetricPtrType) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricPtrOutput)
}

type MetricAlarmMetricQueryMetricOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o.ToMetricAlarmMetricQueryMetricPtrOutputWithContext(context.Background())
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *MetricAlarmMetricQueryMetric {
		return &v
	}).(MetricAlarmMetricQueryMetricPtrOutput)
}
func (o MetricAlarmMetricQueryMetricOutput) Dimensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) map[string]string { return v.Dimensions }).(pulumi.StringMapOutput)
}

func (o MetricAlarmMetricQueryMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o MetricAlarmMetricQueryMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryMetricOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) int { return v.Period }).(pulumi.IntOutput)
}

func (o MetricAlarmMetricQueryMetricOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) string { return v.Stat }).(pulumi.StringOutput)
}

func (o MetricAlarmMetricQueryMetricOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlarmMetricQueryMetric) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmMetricQueryMetricPtrOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutput() MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) ToMetricAlarmMetricQueryMetricPtrOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricPtrOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Elem() MetricAlarmMetricQueryMetricOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) MetricAlarmMetricQueryMetric { return *v }).(MetricAlarmMetricQueryMetricOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Dimensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) map[string]string {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(pulumi.StringMapOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Stat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) *string {
		if v == nil {
			return nil
		}
		return &v.Stat
	}).(pulumi.StringPtrOutput)
}

func (o MetricAlarmMetricQueryMetricPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarmMetricQueryMetric) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventPermissionConditionOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionPtrOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerPtrOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetPtrOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetArrayOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetPtrOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationPtrOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryArrayOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricPtrOutput{})
}
