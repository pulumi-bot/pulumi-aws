// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventTarget struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                    `pulumi:"arn"`
	BatchTarget       EventTargetBatchTargetPtrOutput        `pulumi:"batchTarget"`
	EcsTarget         EventTargetEcsTargetPtrOutput          `pulumi:"ecsTarget"`
	Input             pulumi.StringPtrOutput                 `pulumi:"input"`
	InputPath         pulumi.StringPtrOutput                 `pulumi:"inputPath"`
	InputTransformer  EventTargetInputTransformerPtrOutput   `pulumi:"inputTransformer"`
	KinesisTarget     EventTargetKinesisTargetPtrOutput      `pulumi:"kinesisTarget"`
	RoleArn           pulumi.StringPtrOutput                 `pulumi:"roleArn"`
	Rule              pulumi.StringOutput                    `pulumi:"rule"`
	RunCommandTargets EventTargetRunCommandTargetArrayOutput `pulumi:"runCommandTargets"`
	SqsTarget         EventTargetSqsTargetPtrOutput          `pulumi:"sqsTarget"`
	TargetId          pulumi.StringOutput                    `pulumi:"targetId"`
}

// NewEventTarget registers a new resource with the given unique name, arguments, and options.
func NewEventTarget(ctx *pulumi.Context,
	name string, args *EventTargetArgs, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	if args == nil || args.Arn == nil {
		return nil, errors.New("missing required argument 'Arn'")
	}
	if args == nil || args.Rule == nil {
		return nil, errors.New("missing required argument 'Rule'")
	}
	if args == nil {
		args = &EventTargetArgs{}
	}
	var resource EventTarget
	err := ctx.RegisterResource("aws:cloudwatch/eventTarget:EventTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventTarget gets an existing EventTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTargetState, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	var resource EventTarget
	err := ctx.ReadResource("aws:cloudwatch/eventTarget:EventTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventTarget resources.
type eventTargetState struct {
	Arn               *string                       `pulumi:"arn"`
	BatchTarget       *EventTargetBatchTarget       `pulumi:"batchTarget"`
	EcsTarget         *EventTargetEcsTarget         `pulumi:"ecsTarget"`
	Input             *string                       `pulumi:"input"`
	InputPath         *string                       `pulumi:"inputPath"`
	InputTransformer  *EventTargetInputTransformer  `pulumi:"inputTransformer"`
	KinesisTarget     *EventTargetKinesisTarget     `pulumi:"kinesisTarget"`
	RoleArn           *string                       `pulumi:"roleArn"`
	Rule              *string                       `pulumi:"rule"`
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	SqsTarget         *EventTargetSqsTarget         `pulumi:"sqsTarget"`
	TargetId          *string                       `pulumi:"targetId"`
}

type EventTargetState struct {
	Arn               pulumi.StringPtrInput
	BatchTarget       EventTargetBatchTargetPtrInput
	EcsTarget         EventTargetEcsTargetPtrInput
	Input             pulumi.StringPtrInput
	InputPath         pulumi.StringPtrInput
	InputTransformer  EventTargetInputTransformerPtrInput
	KinesisTarget     EventTargetKinesisTargetPtrInput
	RoleArn           pulumi.StringPtrInput
	Rule              pulumi.StringPtrInput
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	SqsTarget         EventTargetSqsTargetPtrInput
	TargetId          pulumi.StringPtrInput
}

func (EventTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetState)(nil)).Elem()
}

type eventTargetArgs struct {
	Arn               string                        `pulumi:"arn"`
	BatchTarget       *EventTargetBatchTarget       `pulumi:"batchTarget"`
	EcsTarget         *EventTargetEcsTarget         `pulumi:"ecsTarget"`
	Input             *string                       `pulumi:"input"`
	InputPath         *string                       `pulumi:"inputPath"`
	InputTransformer  *EventTargetInputTransformer  `pulumi:"inputTransformer"`
	KinesisTarget     *EventTargetKinesisTarget     `pulumi:"kinesisTarget"`
	RoleArn           *string                       `pulumi:"roleArn"`
	Rule              string                        `pulumi:"rule"`
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	SqsTarget         *EventTargetSqsTarget         `pulumi:"sqsTarget"`
	TargetId          *string                       `pulumi:"targetId"`
}

// The set of arguments for constructing a EventTarget resource.
type EventTargetArgs struct {
	Arn               pulumi.StringInput
	BatchTarget       EventTargetBatchTargetPtrInput
	EcsTarget         EventTargetEcsTargetPtrInput
	Input             pulumi.StringPtrInput
	InputPath         pulumi.StringPtrInput
	InputTransformer  EventTargetInputTransformerPtrInput
	KinesisTarget     EventTargetKinesisTargetPtrInput
	RoleArn           pulumi.StringPtrInput
	Rule              pulumi.StringInput
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	SqsTarget         EventTargetSqsTargetPtrInput
	TargetId          pulumi.StringPtrInput
}

func (EventTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetArgs)(nil)).Elem()
}
