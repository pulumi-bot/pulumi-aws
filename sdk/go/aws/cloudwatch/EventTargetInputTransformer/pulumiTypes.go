// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package EventTargetInputTransformer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EventTargetInputTransformer struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths map[string]interface{} `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate string `pulumi:"inputTemplate"`
}

type EventTargetInputTransformerInput interface {
	pulumi.Input

	ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput
	ToEventTargetInputTransformerOutputWithContext(context.Context) EventTargetInputTransformerOutput
}

type EventTargetInputTransformerArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	InputPaths pulumi.MapInput `pulumi:"inputPaths"`
	// Structure containing the template body.
	InputTemplate pulumi.StringInput `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return i.ToEventTargetInputTransformerOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput)
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput).ToEventTargetInputTransformerPtrOutputWithContext(ctx)
}

type EventTargetInputTransformerPtrInput interface {
	pulumi.Input

	ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput
	ToEventTargetInputTransformerPtrOutputWithContext(context.Context) EventTargetInputTransformerPtrOutput
}

type eventTargetInputTransformerPtrType EventTargetInputTransformerArgs

func EventTargetInputTransformerPtr(v *EventTargetInputTransformerArgs) EventTargetInputTransformerPtrInput {	return (*eventTargetInputTransformerPtrType)(v)
}

func (*eventTargetInputTransformerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return i.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (i *eventTargetInputTransformerPtrType) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerPtrOutput)
}

type EventTargetInputTransformerOutput struct { *pulumi.OutputState }

func (EventTargetInputTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o.ToEventTargetInputTransformerPtrOutputWithContext(context.Background())
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o.ApplyT(func(v EventTargetInputTransformer) *EventTargetInputTransformer {
		return &v
	}).(EventTargetInputTransformerPtrOutput)
}
// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func (v EventTargetInputTransformer) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func (v EventTargetInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type EventTargetInputTransformerPtrOutput struct { *pulumi.OutputState}

func (EventTargetInputTransformerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutput() EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) ToEventTargetInputTransformerPtrOutputWithContext(ctx context.Context) EventTargetInputTransformerPtrOutput {
	return o
}

func (o EventTargetInputTransformerPtrOutput) Elem() EventTargetInputTransformerOutput {
	return o.ApplyT(func (v *EventTargetInputTransformer) EventTargetInputTransformer { return *v }).(EventTargetInputTransformerOutput)
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
func (o EventTargetInputTransformerPtrOutput) InputPaths() pulumi.MapOutput {
	return o.ApplyT(func (v EventTargetInputTransformer) map[string]interface{} { return v.InputPaths }).(pulumi.MapOutput)
}

// Structure containing the template body.
func (o EventTargetInputTransformerPtrOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func (v EventTargetInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EventTargetInputTransformerOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerPtrOutput{})
}
