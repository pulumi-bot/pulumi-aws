// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package MetricAlarmMetricQuery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/cloudwatch/MetricAlarmMetricQueryMetric"
)

type MetricAlarmMetricQuery struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric *cloudwatchMetricAlarmMetricQueryMetric.MetricAlarmMetricQueryMetric `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData *bool `pulumi:"returnData"`
}

type MetricAlarmMetricQueryInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput
	ToMetricAlarmMetricQueryOutputWithContext(context.Context) MetricAlarmMetricQueryOutput
}

type MetricAlarmMetricQueryArgs struct {
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumi.StringInput `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric cloudwatchMetricAlarmMetricQueryMetric.MetricAlarmMetricQueryMetricPtrInput `pulumi:"metric"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return i.ToMetricAlarmMetricQueryOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryOutput)
}

type MetricAlarmMetricQueryArrayInput interface {
	pulumi.Input

	ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput
	ToMetricAlarmMetricQueryArrayOutputWithContext(context.Context) MetricAlarmMetricQueryArrayOutput
}

type MetricAlarmMetricQueryArray []MetricAlarmMetricQueryInput

func (MetricAlarmMetricQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return i.ToMetricAlarmMetricQueryArrayOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArray) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryArrayOutput)
}

type MetricAlarmMetricQueryOutput struct { *pulumi.OutputState }

func (MetricAlarmMetricQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return o
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
func (o MetricAlarmMetricQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o MetricAlarmMetricQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func (v MetricAlarmMetricQuery) string { return v.Id }).(pulumi.StringOutput)
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
func (o MetricAlarmMetricQueryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQuery) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
func (o MetricAlarmMetricQueryOutput) Metric() cloudwatchMetricAlarmMetricQueryMetric.MetricAlarmMetricQueryMetricPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQuery) *cloudwatchMetricAlarmMetricQueryMetric.MetricAlarmMetricQueryMetric { return v.Metric }).(cloudwatchMetricAlarmMetricQueryMetric.MetricAlarmMetricQueryMetricPtrOutput)
}

// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
func (o MetricAlarmMetricQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MetricAlarmMetricQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type MetricAlarmMetricQueryArrayOutput struct { *pulumi.OutputState}

func (MetricAlarmMetricQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutput() MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) ToMetricAlarmMetricQueryArrayOutputWithContext(ctx context.Context) MetricAlarmMetricQueryArrayOutput {
	return o
}

func (o MetricAlarmMetricQueryArrayOutput) Index(i pulumi.IntInput) MetricAlarmMetricQueryOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) MetricAlarmMetricQuery {
		return vs[0].([]MetricAlarmMetricQuery)[vs[1].(int)]
	}).(MetricAlarmMetricQueryOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricAlarmMetricQueryOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryArrayOutput{})
}
