// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IPSet struct {
	pulumi.CustomResourceState

	Activate   pulumi.BoolOutput      `pulumi:"activate"`
	Arn        pulumi.StringOutput    `pulumi:"arn"`
	DetectorId pulumi.StringOutput    `pulumi:"detectorId"`
	Format     pulumi.StringOutput    `pulumi:"format"`
	Location   pulumi.StringOutput    `pulumi:"location"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
}

// NewIPSet registers a new resource with the given unique name, arguments, and options.
func NewIPSet(ctx *pulumi.Context,
	name string, args *IPSetArgs, opts ...pulumi.ResourceOption) (*IPSet, error) {
	if args == nil || args.Activate == nil {
		return nil, errors.New("missing required argument 'Activate'")
	}
	if args == nil || args.DetectorId == nil {
		return nil, errors.New("missing required argument 'DetectorId'")
	}
	if args == nil || args.Format == nil {
		return nil, errors.New("missing required argument 'Format'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil {
		args = &IPSetArgs{}
	}
	var resource IPSet
	err := ctx.RegisterResource("aws:guardduty/iPSet:IPSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPSet gets an existing IPSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPSetState, opts ...pulumi.ResourceOption) (*IPSet, error) {
	var resource IPSet
	err := ctx.ReadResource("aws:guardduty/iPSet:IPSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPSet resources.
type ipsetState struct {
	Activate   *bool             `pulumi:"activate"`
	Arn        *string           `pulumi:"arn"`
	DetectorId *string           `pulumi:"detectorId"`
	Format     *string           `pulumi:"format"`
	Location   *string           `pulumi:"location"`
	Name       *string           `pulumi:"name"`
	Tags       map[string]string `pulumi:"tags"`
}

type IPSetState struct {
	Activate   pulumi.BoolPtrInput
	Arn        pulumi.StringPtrInput
	DetectorId pulumi.StringPtrInput
	Format     pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
}

func (IPSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsetState)(nil)).Elem()
}

type ipsetArgs struct {
	Activate   bool              `pulumi:"activate"`
	DetectorId string            `pulumi:"detectorId"`
	Format     string            `pulumi:"format"`
	Location   string            `pulumi:"location"`
	Name       *string           `pulumi:"name"`
	Tags       map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IPSet resource.
type IPSetArgs struct {
	Activate   pulumi.BoolInput
	DetectorId pulumi.StringInput
	Format     pulumi.StringInput
	Location   pulumi.StringInput
	Name       pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
}

func (IPSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsetArgs)(nil)).Elem()
}
