// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package UsagePlanThrottleSettings

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type UsagePlanThrottleSettings struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit *int `pulumi:"burstLimit"`
	// The API request steady-state rate limit.
	RateLimit *float64 `pulumi:"rateLimit"`
}

type UsagePlanThrottleSettingsInput interface {
	pulumi.Input

	ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput
	ToUsagePlanThrottleSettingsOutputWithContext(context.Context) UsagePlanThrottleSettingsOutput
}

type UsagePlanThrottleSettingsArgs struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit pulumi.IntPtrInput `pulumi:"burstLimit"`
	// The API request steady-state rate limit.
	RateLimit pulumi.Float64PtrInput `pulumi:"rateLimit"`
}

func (UsagePlanThrottleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return i.ToUsagePlanThrottleSettingsOutputWithContext(context.Background())
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsOutput)
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return i.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsOutput).ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx)
}

type UsagePlanThrottleSettingsPtrInput interface {
	pulumi.Input

	ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput
	ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Context) UsagePlanThrottleSettingsPtrOutput
}

type usagePlanThrottleSettingsPtrType UsagePlanThrottleSettingsArgs

func UsagePlanThrottleSettingsPtr(v *UsagePlanThrottleSettingsArgs) UsagePlanThrottleSettingsPtrInput {	return (*usagePlanThrottleSettingsPtrType)(v)
}

func (*usagePlanThrottleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanThrottleSettings)(nil)).Elem()
}

func (i *usagePlanThrottleSettingsPtrType) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return i.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (i *usagePlanThrottleSettingsPtrType) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsPtrOutput)
}

type UsagePlanThrottleSettingsOutput struct { *pulumi.OutputState }

func (UsagePlanThrottleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return o.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return o.ApplyT(func(v UsagePlanThrottleSettings) *UsagePlanThrottleSettings {
		return &v
	}).(UsagePlanThrottleSettingsPtrOutput)
}
// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
func (o UsagePlanThrottleSettingsOutput) BurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func (v UsagePlanThrottleSettings) *int { return v.BurstLimit }).(pulumi.IntPtrOutput)
}

// The API request steady-state rate limit.
func (o UsagePlanThrottleSettingsOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func (v UsagePlanThrottleSettings) *float64 { return v.RateLimit }).(pulumi.Float64PtrOutput)
}

type UsagePlanThrottleSettingsPtrOutput struct { *pulumi.OutputState}

func (UsagePlanThrottleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanThrottleSettings)(nil)).Elem()
}

func (o UsagePlanThrottleSettingsPtrOutput) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return o
}

func (o UsagePlanThrottleSettingsPtrOutput) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return o
}

func (o UsagePlanThrottleSettingsPtrOutput) Elem() UsagePlanThrottleSettingsOutput {
	return o.ApplyT(func (v *UsagePlanThrottleSettings) UsagePlanThrottleSettings { return *v }).(UsagePlanThrottleSettingsOutput)
}

// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
func (o UsagePlanThrottleSettingsPtrOutput) BurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func (v UsagePlanThrottleSettings) *int { return v.BurstLimit }).(pulumi.IntPtrOutput)
}

// The API request steady-state rate limit.
func (o UsagePlanThrottleSettingsPtrOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func (v UsagePlanThrottleSettings) *float64 { return v.RateLimit }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(UsagePlanThrottleSettingsOutput{})
	pulumi.RegisterOutputType(UsagePlanThrottleSettingsPtrOutput{})
}
