// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RestApi struct {
	pulumi.CustomResourceState

	ApiKeySource           pulumi.StringPtrOutput             `pulumi:"apiKeySource"`
	Arn                    pulumi.StringOutput                `pulumi:"arn"`
	BinaryMediaTypes       pulumi.StringArrayOutput           `pulumi:"binaryMediaTypes"`
	Body                   pulumi.StringPtrOutput             `pulumi:"body"`
	CreatedDate            pulumi.StringOutput                `pulumi:"createdDate"`
	Description            pulumi.StringPtrOutput             `pulumi:"description"`
	EndpointConfiguration  RestApiEndpointConfigurationOutput `pulumi:"endpointConfiguration"`
	ExecutionArn           pulumi.StringOutput                `pulumi:"executionArn"`
	MinimumCompressionSize pulumi.IntPtrOutput                `pulumi:"minimumCompressionSize"`
	Name                   pulumi.StringOutput                `pulumi:"name"`
	Policy                 pulumi.StringPtrOutput             `pulumi:"policy"`
	RootResourceId         pulumi.StringOutput                `pulumi:"rootResourceId"`
	Tags                   pulumi.StringMapOutput             `pulumi:"tags"`
}

// NewRestApi registers a new resource with the given unique name, arguments, and options.
func NewRestApi(ctx *pulumi.Context,
	name string, args *RestApiArgs, opts ...pulumi.ResourceOption) (*RestApi, error) {
	if args == nil {
		args = &RestApiArgs{}
	}
	var resource RestApi
	err := ctx.RegisterResource("aws:apigateway/restApi:RestApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestApi gets an existing RestApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestApiState, opts ...pulumi.ResourceOption) (*RestApi, error) {
	var resource RestApi
	err := ctx.ReadResource("aws:apigateway/restApi:RestApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestApi resources.
type restApiState struct {
	ApiKeySource           *string                       `pulumi:"apiKeySource"`
	Arn                    *string                       `pulumi:"arn"`
	BinaryMediaTypes       []string                      `pulumi:"binaryMediaTypes"`
	Body                   *string                       `pulumi:"body"`
	CreatedDate            *string                       `pulumi:"createdDate"`
	Description            *string                       `pulumi:"description"`
	EndpointConfiguration  *RestApiEndpointConfiguration `pulumi:"endpointConfiguration"`
	ExecutionArn           *string                       `pulumi:"executionArn"`
	MinimumCompressionSize *int                          `pulumi:"minimumCompressionSize"`
	Name                   *string                       `pulumi:"name"`
	Policy                 *string                       `pulumi:"policy"`
	RootResourceId         *string                       `pulumi:"rootResourceId"`
	Tags                   map[string]string             `pulumi:"tags"`
}

type RestApiState struct {
	ApiKeySource           pulumi.StringPtrInput
	Arn                    pulumi.StringPtrInput
	BinaryMediaTypes       pulumi.StringArrayInput
	Body                   pulumi.StringPtrInput
	CreatedDate            pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	EndpointConfiguration  RestApiEndpointConfigurationPtrInput
	ExecutionArn           pulumi.StringPtrInput
	MinimumCompressionSize pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	Policy                 pulumi.StringPtrInput
	RootResourceId         pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
}

func (RestApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*restApiState)(nil)).Elem()
}

type restApiArgs struct {
	ApiKeySource           *string                       `pulumi:"apiKeySource"`
	BinaryMediaTypes       []string                      `pulumi:"binaryMediaTypes"`
	Body                   *string                       `pulumi:"body"`
	Description            *string                       `pulumi:"description"`
	EndpointConfiguration  *RestApiEndpointConfiguration `pulumi:"endpointConfiguration"`
	MinimumCompressionSize *int                          `pulumi:"minimumCompressionSize"`
	Name                   *string                       `pulumi:"name"`
	Policy                 *string                       `pulumi:"policy"`
	Tags                   map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a RestApi resource.
type RestApiArgs struct {
	ApiKeySource           pulumi.StringPtrInput
	BinaryMediaTypes       pulumi.StringArrayInput
	Body                   pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	EndpointConfiguration  RestApiEndpointConfigurationPtrInput
	MinimumCompressionSize pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	Policy                 pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
}

func (RestApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restApiArgs)(nil)).Elem()
}
