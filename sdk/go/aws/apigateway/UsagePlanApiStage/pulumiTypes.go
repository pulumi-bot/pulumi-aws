// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package UsagePlanApiStage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type UsagePlanApiStage struct {
	// API Id of the associated API stage in a usage plan.
	ApiId string `pulumi:"apiId"`
	// API stage name of the associated API stage in a usage plan.
	Stage string `pulumi:"stage"`
}

type UsagePlanApiStageInput interface {
	pulumi.Input

	ToUsagePlanApiStageOutput() UsagePlanApiStageOutput
	ToUsagePlanApiStageOutputWithContext(context.Context) UsagePlanApiStageOutput
}

type UsagePlanApiStageArgs struct {
	// API Id of the associated API stage in a usage plan.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// API stage name of the associated API stage in a usage plan.
	Stage pulumi.StringInput `pulumi:"stage"`
}

func (UsagePlanApiStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return i.ToUsagePlanApiStageOutputWithContext(context.Background())
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageOutput)
}

type UsagePlanApiStageArrayInput interface {
	pulumi.Input

	ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput
	ToUsagePlanApiStageArrayOutputWithContext(context.Context) UsagePlanApiStageArrayOutput
}

type UsagePlanApiStageArray []UsagePlanApiStageInput

func (UsagePlanApiStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanApiStage)(nil)).Elem()
}

func (i UsagePlanApiStageArray) ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput {
	return i.ToUsagePlanApiStageArrayOutputWithContext(context.Background())
}

func (i UsagePlanApiStageArray) ToUsagePlanApiStageArrayOutputWithContext(ctx context.Context) UsagePlanApiStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageArrayOutput)
}

type UsagePlanApiStageOutput struct { *pulumi.OutputState }

func (UsagePlanApiStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return o
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return o
}

// API Id of the associated API stage in a usage plan.
func (o UsagePlanApiStageOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func (v UsagePlanApiStage) string { return v.ApiId }).(pulumi.StringOutput)
}

// API stage name of the associated API stage in a usage plan.
func (o UsagePlanApiStageOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func (v UsagePlanApiStage) string { return v.Stage }).(pulumi.StringOutput)
}

type UsagePlanApiStageArrayOutput struct { *pulumi.OutputState}

func (UsagePlanApiStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanApiStage)(nil)).Elem()
}

func (o UsagePlanApiStageArrayOutput) ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput {
	return o
}

func (o UsagePlanApiStageArrayOutput) ToUsagePlanApiStageArrayOutputWithContext(ctx context.Context) UsagePlanApiStageArrayOutput {
	return o
}

func (o UsagePlanApiStageArrayOutput) Index(i pulumi.IntInput) UsagePlanApiStageOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) UsagePlanApiStage {
		return vs[0].([]UsagePlanApiStage)[vs[1].(int)]
	}).(UsagePlanApiStageOutput)
}

func init() {
	pulumi.RegisterOutputType(UsagePlanApiStageOutput{})
	pulumi.RegisterOutputType(UsagePlanApiStageArrayOutput{})
}
