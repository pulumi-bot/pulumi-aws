// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package MethodSettingsSettings

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MethodSettingsSettings struct {
	// Specifies whether the cached responses are encrypted.
	CacheDataEncrypted *bool `pulumi:"cacheDataEncrypted"`
	// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	CacheTtlInSeconds *int `pulumi:"cacheTtlInSeconds"`
	// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
	CachingEnabled *bool `pulumi:"cachingEnabled"`
	// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	DataTraceEnabled *bool `pulumi:"dataTraceEnabled"`
	// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Specifies whether Amazon CloudWatch metrics are enabled for this method.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
	// Specifies whether authorization is required for a cache invalidation request.
	RequireAuthorizationForCacheControl *bool `pulumi:"requireAuthorizationForCacheControl"`
	// Specifies the throttling burst limit.
	ThrottlingBurstLimit *int `pulumi:"throttlingBurstLimit"`
	// Specifies the throttling rate limit.
	ThrottlingRateLimit *float64 `pulumi:"throttlingRateLimit"`
	// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
	UnauthorizedCacheControlHeaderStrategy *string `pulumi:"unauthorizedCacheControlHeaderStrategy"`
}

type MethodSettingsSettingsInput interface {
	pulumi.Input

	ToMethodSettingsSettingsOutput() MethodSettingsSettingsOutput
	ToMethodSettingsSettingsOutputWithContext(context.Context) MethodSettingsSettingsOutput
}

type MethodSettingsSettingsArgs struct {
	// Specifies whether the cached responses are encrypted.
	CacheDataEncrypted pulumi.BoolPtrInput `pulumi:"cacheDataEncrypted"`
	// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	CacheTtlInSeconds pulumi.IntPtrInput `pulumi:"cacheTtlInSeconds"`
	// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
	CachingEnabled pulumi.BoolPtrInput `pulumi:"cachingEnabled"`
	// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	DataTraceEnabled pulumi.BoolPtrInput `pulumi:"dataTraceEnabled"`
	// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
	LoggingLevel pulumi.StringPtrInput `pulumi:"loggingLevel"`
	// Specifies whether Amazon CloudWatch metrics are enabled for this method.
	MetricsEnabled pulumi.BoolPtrInput `pulumi:"metricsEnabled"`
	// Specifies whether authorization is required for a cache invalidation request.
	RequireAuthorizationForCacheControl pulumi.BoolPtrInput `pulumi:"requireAuthorizationForCacheControl"`
	// Specifies the throttling burst limit.
	ThrottlingBurstLimit pulumi.IntPtrInput `pulumi:"throttlingBurstLimit"`
	// Specifies the throttling rate limit.
	ThrottlingRateLimit pulumi.Float64PtrInput `pulumi:"throttlingRateLimit"`
	// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
	UnauthorizedCacheControlHeaderStrategy pulumi.StringPtrInput `pulumi:"unauthorizedCacheControlHeaderStrategy"`
}

func (MethodSettingsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MethodSettingsSettings)(nil)).Elem()
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsOutput() MethodSettingsSettingsOutput {
	return i.ToMethodSettingsSettingsOutputWithContext(context.Background())
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsOutputWithContext(ctx context.Context) MethodSettingsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodSettingsSettingsOutput)
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsPtrOutput() MethodSettingsSettingsPtrOutput {
	return i.ToMethodSettingsSettingsPtrOutputWithContext(context.Background())
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsPtrOutputWithContext(ctx context.Context) MethodSettingsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodSettingsSettingsOutput).ToMethodSettingsSettingsPtrOutputWithContext(ctx)
}

type MethodSettingsSettingsPtrInput interface {
	pulumi.Input

	ToMethodSettingsSettingsPtrOutput() MethodSettingsSettingsPtrOutput
	ToMethodSettingsSettingsPtrOutputWithContext(context.Context) MethodSettingsSettingsPtrOutput
}

type methodSettingsSettingsPtrType MethodSettingsSettingsArgs

func MethodSettingsSettingsPtr(v *MethodSettingsSettingsArgs) MethodSettingsSettingsPtrInput {	return (*methodSettingsSettingsPtrType)(v)
}

func (*methodSettingsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MethodSettingsSettings)(nil)).Elem()
}

func (i *methodSettingsSettingsPtrType) ToMethodSettingsSettingsPtrOutput() MethodSettingsSettingsPtrOutput {
	return i.ToMethodSettingsSettingsPtrOutputWithContext(context.Background())
}

func (i *methodSettingsSettingsPtrType) ToMethodSettingsSettingsPtrOutputWithContext(ctx context.Context) MethodSettingsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodSettingsSettingsPtrOutput)
}

type MethodSettingsSettingsOutput struct { *pulumi.OutputState }

func (MethodSettingsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MethodSettingsSettings)(nil)).Elem()
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsOutput() MethodSettingsSettingsOutput {
	return o
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsOutputWithContext(ctx context.Context) MethodSettingsSettingsOutput {
	return o
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsPtrOutput() MethodSettingsSettingsPtrOutput {
	return o.ToMethodSettingsSettingsPtrOutputWithContext(context.Background())
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsPtrOutputWithContext(ctx context.Context) MethodSettingsSettingsPtrOutput {
	return o.ApplyT(func(v MethodSettingsSettings) *MethodSettingsSettings {
		return &v
	}).(MethodSettingsSettingsPtrOutput)
}
// Specifies whether the cached responses are encrypted.
func (o MethodSettingsSettingsOutput) CacheDataEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.CacheDataEncrypted }).(pulumi.BoolPtrOutput)
}

// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
func (o MethodSettingsSettingsOutput) CacheTtlInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *int { return v.CacheTtlInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
func (o MethodSettingsSettingsOutput) CachingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.CachingEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
func (o MethodSettingsSettingsOutput) DataTraceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.DataTraceEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
func (o MethodSettingsSettingsOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Specifies whether Amazon CloudWatch metrics are enabled for this method.
func (o MethodSettingsSettingsOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether authorization is required for a cache invalidation request.
func (o MethodSettingsSettingsOutput) RequireAuthorizationForCacheControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.RequireAuthorizationForCacheControl }).(pulumi.BoolPtrOutput)
}

// Specifies the throttling burst limit.
func (o MethodSettingsSettingsOutput) ThrottlingBurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *int { return v.ThrottlingBurstLimit }).(pulumi.IntPtrOutput)
}

// Specifies the throttling rate limit.
func (o MethodSettingsSettingsOutput) ThrottlingRateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *float64 { return v.ThrottlingRateLimit }).(pulumi.Float64PtrOutput)
}

// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
func (o MethodSettingsSettingsOutput) UnauthorizedCacheControlHeaderStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *string { return v.UnauthorizedCacheControlHeaderStrategy }).(pulumi.StringPtrOutput)
}

type MethodSettingsSettingsPtrOutput struct { *pulumi.OutputState}

func (MethodSettingsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MethodSettingsSettings)(nil)).Elem()
}

func (o MethodSettingsSettingsPtrOutput) ToMethodSettingsSettingsPtrOutput() MethodSettingsSettingsPtrOutput {
	return o
}

func (o MethodSettingsSettingsPtrOutput) ToMethodSettingsSettingsPtrOutputWithContext(ctx context.Context) MethodSettingsSettingsPtrOutput {
	return o
}

func (o MethodSettingsSettingsPtrOutput) Elem() MethodSettingsSettingsOutput {
	return o.ApplyT(func (v *MethodSettingsSettings) MethodSettingsSettings { return *v }).(MethodSettingsSettingsOutput)
}

// Specifies whether the cached responses are encrypted.
func (o MethodSettingsSettingsPtrOutput) CacheDataEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.CacheDataEncrypted }).(pulumi.BoolPtrOutput)
}

// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
func (o MethodSettingsSettingsPtrOutput) CacheTtlInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *int { return v.CacheTtlInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
func (o MethodSettingsSettingsPtrOutput) CachingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.CachingEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
func (o MethodSettingsSettingsPtrOutput) DataTraceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.DataTraceEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
func (o MethodSettingsSettingsPtrOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Specifies whether Amazon CloudWatch metrics are enabled for this method.
func (o MethodSettingsSettingsPtrOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether authorization is required for a cache invalidation request.
func (o MethodSettingsSettingsPtrOutput) RequireAuthorizationForCacheControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *bool { return v.RequireAuthorizationForCacheControl }).(pulumi.BoolPtrOutput)
}

// Specifies the throttling burst limit.
func (o MethodSettingsSettingsPtrOutput) ThrottlingBurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *int { return v.ThrottlingBurstLimit }).(pulumi.IntPtrOutput)
}

// Specifies the throttling rate limit.
func (o MethodSettingsSettingsPtrOutput) ThrottlingRateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *float64 { return v.ThrottlingRateLimit }).(pulumi.Float64PtrOutput)
}

// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
func (o MethodSettingsSettingsPtrOutput) UnauthorizedCacheControlHeaderStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MethodSettingsSettings) *string { return v.UnauthorizedCacheControlHeaderStrategy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MethodSettingsSettingsOutput{})
	pulumi.RegisterOutputType(MethodSettingsSettingsPtrOutput{})
}
