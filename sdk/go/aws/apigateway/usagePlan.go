// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type UsagePlan struct {
	pulumi.CustomResourceState

	ApiStages        UsagePlanApiStageArrayOutput       `pulumi:"apiStages"`
	Arn              pulumi.StringOutput                `pulumi:"arn"`
	Description      pulumi.StringPtrOutput             `pulumi:"description"`
	Name             pulumi.StringOutput                `pulumi:"name"`
	ProductCode      pulumi.StringPtrOutput             `pulumi:"productCode"`
	QuotaSettings    UsagePlanQuotaSettingsPtrOutput    `pulumi:"quotaSettings"`
	Tags             pulumi.StringMapOutput             `pulumi:"tags"`
	ThrottleSettings UsagePlanThrottleSettingsPtrOutput `pulumi:"throttleSettings"`
}

// NewUsagePlan registers a new resource with the given unique name, arguments, and options.
func NewUsagePlan(ctx *pulumi.Context,
	name string, args *UsagePlanArgs, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	if args == nil {
		args = &UsagePlanArgs{}
	}
	var resource UsagePlan
	err := ctx.RegisterResource("aws:apigateway/usagePlan:UsagePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlan gets an existing UsagePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanState, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	var resource UsagePlan
	err := ctx.ReadResource("aws:apigateway/usagePlan:UsagePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlan resources.
type usagePlanState struct {
	ApiStages        []UsagePlanApiStage        `pulumi:"apiStages"`
	Arn              *string                    `pulumi:"arn"`
	Description      *string                    `pulumi:"description"`
	Name             *string                    `pulumi:"name"`
	ProductCode      *string                    `pulumi:"productCode"`
	QuotaSettings    *UsagePlanQuotaSettings    `pulumi:"quotaSettings"`
	Tags             map[string]string          `pulumi:"tags"`
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

type UsagePlanState struct {
	ApiStages        UsagePlanApiStageArrayInput
	Arn              pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	ProductCode      pulumi.StringPtrInput
	QuotaSettings    UsagePlanQuotaSettingsPtrInput
	Tags             pulumi.StringMapInput
	ThrottleSettings UsagePlanThrottleSettingsPtrInput
}

func (UsagePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanState)(nil)).Elem()
}

type usagePlanArgs struct {
	ApiStages        []UsagePlanApiStage        `pulumi:"apiStages"`
	Description      *string                    `pulumi:"description"`
	Name             *string                    `pulumi:"name"`
	ProductCode      *string                    `pulumi:"productCode"`
	QuotaSettings    *UsagePlanQuotaSettings    `pulumi:"quotaSettings"`
	Tags             map[string]string          `pulumi:"tags"`
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

// The set of arguments for constructing a UsagePlan resource.
type UsagePlanArgs struct {
	ApiStages        UsagePlanApiStageArrayInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	ProductCode      pulumi.StringPtrInput
	QuotaSettings    UsagePlanQuotaSettingsPtrInput
	Tags             pulumi.StringMapInput
	ThrottleSettings UsagePlanThrottleSettingsPtrInput
}

func (UsagePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanArgs)(nil)).Elem()
}
