// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ReplicationSubnetGroup struct {
	pulumi.CustomResourceState

	ReplicationSubnetGroupArn         pulumi.StringOutput      `pulumi:"replicationSubnetGroupArn"`
	ReplicationSubnetGroupDescription pulumi.StringOutput      `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          pulumi.StringOutput      `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         pulumi.StringArrayOutput `pulumi:"subnetIds"`
	Tags                              pulumi.StringMapOutput   `pulumi:"tags"`
	VpcId                             pulumi.StringOutput      `pulumi:"vpcId"`
}

// NewReplicationSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewReplicationSubnetGroup(ctx *pulumi.Context,
	name string, args *ReplicationSubnetGroupArgs, opts ...pulumi.ResourceOption) (*ReplicationSubnetGroup, error) {
	if args == nil || args.ReplicationSubnetGroupDescription == nil {
		return nil, errors.New("missing required argument 'ReplicationSubnetGroupDescription'")
	}
	if args == nil || args.ReplicationSubnetGroupId == nil {
		return nil, errors.New("missing required argument 'ReplicationSubnetGroupId'")
	}
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	if args == nil {
		args = &ReplicationSubnetGroupArgs{}
	}
	var resource ReplicationSubnetGroup
	err := ctx.RegisterResource("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationSubnetGroup gets an existing ReplicationSubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationSubnetGroupState, opts ...pulumi.ResourceOption) (*ReplicationSubnetGroup, error) {
	var resource ReplicationSubnetGroup
	err := ctx.ReadResource("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationSubnetGroup resources.
type replicationSubnetGroupState struct {
	ReplicationSubnetGroupArn         *string           `pulumi:"replicationSubnetGroupArn"`
	ReplicationSubnetGroupDescription *string           `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          *string           `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         []string          `pulumi:"subnetIds"`
	Tags                              map[string]string `pulumi:"tags"`
	VpcId                             *string           `pulumi:"vpcId"`
}

type ReplicationSubnetGroupState struct {
	ReplicationSubnetGroupArn         pulumi.StringPtrInput
	ReplicationSubnetGroupDescription pulumi.StringPtrInput
	ReplicationSubnetGroupId          pulumi.StringPtrInput
	SubnetIds                         pulumi.StringArrayInput
	Tags                              pulumi.StringMapInput
	VpcId                             pulumi.StringPtrInput
}

func (ReplicationSubnetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationSubnetGroupState)(nil)).Elem()
}

type replicationSubnetGroupArgs struct {
	ReplicationSubnetGroupDescription string            `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          string            `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         []string          `pulumi:"subnetIds"`
	Tags                              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReplicationSubnetGroup resource.
type ReplicationSubnetGroupArgs struct {
	ReplicationSubnetGroupDescription pulumi.StringInput
	ReplicationSubnetGroupId          pulumi.StringInput
	SubnetIds                         pulumi.StringArrayInput
	Tags                              pulumi.StringMapInput
}

func (ReplicationSubnetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationSubnetGroupArgs)(nil)).Elem()
}
