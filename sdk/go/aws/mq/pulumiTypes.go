// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BrokerConfiguration struct {
	// The Configuration ID.
	Id *string `pulumi:"id"`
	// Revision of the Configuration.
	Revision *int `pulumi:"revision"`
}

// BrokerConfigurationInput is an input type that accepts BrokerConfigurationArgs and BrokerConfigurationOutput values.
// You can construct a concrete instance of `BrokerConfigurationInput` via:
//
//          BrokerConfigurationArgs{...}
type BrokerConfigurationInput interface {
	pulumi.Input

	ToBrokerConfigurationOutput() BrokerConfigurationOutput
	ToBrokerConfigurationOutputWithContext(context.Context) BrokerConfigurationOutput
}

type BrokerConfigurationArgs struct {
	// The Configuration ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (BrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return i.ToBrokerConfigurationOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput)
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput).ToBrokerConfigurationPtrOutputWithContext(ctx)
}

// BrokerConfigurationPtrInput is an input type that accepts BrokerConfigurationArgs, BrokerConfigurationPtr and BrokerConfigurationPtrOutput values.
// You can construct a concrete instance of `BrokerConfigurationPtrInput` via:
//
//          BrokerConfigurationArgs{...}
//
//  or:
//
//          nil
type BrokerConfigurationPtrInput interface {
	pulumi.Input

	ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput
	ToBrokerConfigurationPtrOutputWithContext(context.Context) BrokerConfigurationPtrOutput
}

type brokerConfigurationPtrType BrokerConfigurationArgs

func BrokerConfigurationPtr(v *BrokerConfigurationArgs) BrokerConfigurationPtrInput {
	return (*brokerConfigurationPtrType)(v)
}

func (*brokerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationPtrOutput)
}

type BrokerConfigurationOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *BrokerConfiguration {
		return &v
	}).(BrokerConfigurationPtrOutput)
}

// The Configuration ID.
func (o BrokerConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type BrokerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) Elem() BrokerConfigurationOutput {
	return o.ApplyT(func(v *BrokerConfiguration) BrokerConfiguration { return *v }).(BrokerConfigurationOutput)
}

// The Configuration ID.
func (o BrokerConfigurationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrokerConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

type BrokerEncryptionOptions struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

// BrokerEncryptionOptionsInput is an input type that accepts BrokerEncryptionOptionsArgs and BrokerEncryptionOptionsOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsInput` via:
//
//          BrokerEncryptionOptionsArgs{...}
type BrokerEncryptionOptionsInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput
	ToBrokerEncryptionOptionsOutputWithContext(context.Context) BrokerEncryptionOptionsOutput
}

type BrokerEncryptionOptionsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumi.BoolPtrInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return i.ToBrokerEncryptionOptionsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput)
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput).ToBrokerEncryptionOptionsPtrOutputWithContext(ctx)
}

// BrokerEncryptionOptionsPtrInput is an input type that accepts BrokerEncryptionOptionsArgs, BrokerEncryptionOptionsPtr and BrokerEncryptionOptionsPtrOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsPtrInput` via:
//
//          BrokerEncryptionOptionsArgs{...}
//
//  or:
//
//          nil
type BrokerEncryptionOptionsPtrInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput
	ToBrokerEncryptionOptionsPtrOutputWithContext(context.Context) BrokerEncryptionOptionsPtrOutput
}

type brokerEncryptionOptionsPtrType BrokerEncryptionOptionsArgs

func BrokerEncryptionOptionsPtr(v *BrokerEncryptionOptionsArgs) BrokerEncryptionOptionsPtrInput {
	return (*brokerEncryptionOptionsPtrType)(v)
}

func (*brokerEncryptionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsPtrOutput)
}

type BrokerEncryptionOptionsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *BrokerEncryptionOptions {
		return &v
	}).(BrokerEncryptionOptionsPtrOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsPtrOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) Elem() BrokerEncryptionOptionsOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) BrokerEncryptionOptions { return *v }).(BrokerEncryptionOptionsOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsPtrOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseAwsOwnedKey
	}).(pulumi.BoolPtrOutput)
}

type BrokerInstance struct {
	ConsoleUrl *string  `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  *string  `pulumi:"ipAddress"`
}

// BrokerInstanceInput is an input type that accepts BrokerInstanceArgs and BrokerInstanceOutput values.
// You can construct a concrete instance of `BrokerInstanceInput` via:
//
//          BrokerInstanceArgs{...}
type BrokerInstanceInput interface {
	pulumi.Input

	ToBrokerInstanceOutput() BrokerInstanceOutput
	ToBrokerInstanceOutputWithContext(context.Context) BrokerInstanceOutput
}

type BrokerInstanceArgs struct {
	ConsoleUrl pulumi.StringPtrInput   `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringPtrInput   `pulumi:"ipAddress"`
}

func (BrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return i.ToBrokerInstanceOutputWithContext(context.Background())
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceOutput)
}

// BrokerInstanceArrayInput is an input type that accepts BrokerInstanceArray and BrokerInstanceArrayOutput values.
// You can construct a concrete instance of `BrokerInstanceArrayInput` via:
//
//          BrokerInstanceArray{ BrokerInstanceArgs{...} }
type BrokerInstanceArrayInput interface {
	pulumi.Input

	ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput
	ToBrokerInstanceArrayOutputWithContext(context.Context) BrokerInstanceArrayOutput
}

type BrokerInstanceArray []BrokerInstanceInput

func (BrokerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return i.ToBrokerInstanceArrayOutputWithContext(context.Background())
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceArrayOutput)
}

type BrokerInstanceOutput struct{ *pulumi.OutputState }

func (BrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstance) *string { return v.ConsoleUrl }).(pulumi.StringPtrOutput)
}

func (o BrokerInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerInstance) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o BrokerInstanceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstance) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type BrokerInstanceArrayOutput struct{ *pulumi.OutputState }

func (BrokerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) Index(i pulumi.IntInput) BrokerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerInstance {
		return vs[0].([]BrokerInstance)[vs[1].(int)]
	}).(BrokerInstanceOutput)
}

type BrokerLogs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

// BrokerLogsInput is an input type that accepts BrokerLogsArgs and BrokerLogsOutput values.
// You can construct a concrete instance of `BrokerLogsInput` via:
//
//          BrokerLogsArgs{...}
type BrokerLogsInput interface {
	pulumi.Input

	ToBrokerLogsOutput() BrokerLogsOutput
	ToBrokerLogsOutputWithContext(context.Context) BrokerLogsOutput
}

type BrokerLogsArgs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (i BrokerLogsArgs) ToBrokerLogsOutput() BrokerLogsOutput {
	return i.ToBrokerLogsOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput)
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput).ToBrokerLogsPtrOutputWithContext(ctx)
}

// BrokerLogsPtrInput is an input type that accepts BrokerLogsArgs, BrokerLogsPtr and BrokerLogsPtrOutput values.
// You can construct a concrete instance of `BrokerLogsPtrInput` via:
//
//          BrokerLogsArgs{...}
//
//  or:
//
//          nil
type BrokerLogsPtrInput interface {
	pulumi.Input

	ToBrokerLogsPtrOutput() BrokerLogsPtrOutput
	ToBrokerLogsPtrOutputWithContext(context.Context) BrokerLogsPtrOutput
}

type brokerLogsPtrType BrokerLogsArgs

func BrokerLogsPtr(v *BrokerLogsArgs) BrokerLogsPtrInput {
	return (*brokerLogsPtrType)(v)
}

func (*brokerLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsPtrOutput)
}

type BrokerLogsOutput struct{ *pulumi.OutputState }

func (BrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsOutput) ToBrokerLogsOutput() BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *BrokerLogs {
		return &v
	}).(BrokerLogsPtrOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsPtrOutput struct{ *pulumi.OutputState }

func (BrokerLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) Elem() BrokerLogsOutput {
	return o.ApplyT(func(v *BrokerLogs) BrokerLogs { return *v }).(BrokerLogsOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogs) *bool {
		if v == nil {
			return nil
		}
		return v.Audit
	}).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogs) *bool {
		if v == nil {
			return nil
		}
		return v.General
	}).(pulumi.BoolPtrOutput)
}

type BrokerMaintenanceWindowStartTime struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay string `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone string `pulumi:"timeZone"`
}

// BrokerMaintenanceWindowStartTimeInput is an input type that accepts BrokerMaintenanceWindowStartTimeArgs and BrokerMaintenanceWindowStartTimeOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowStartTimeInput` via:
//
//          BrokerMaintenanceWindowStartTimeArgs{...}
type BrokerMaintenanceWindowStartTimeInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput
	ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeOutput
}

type BrokerMaintenanceWindowStartTimeArgs struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return i.ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput)
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput).ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx)
}

// BrokerMaintenanceWindowStartTimePtrInput is an input type that accepts BrokerMaintenanceWindowStartTimeArgs, BrokerMaintenanceWindowStartTimePtr and BrokerMaintenanceWindowStartTimePtrOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowStartTimePtrInput` via:
//
//          BrokerMaintenanceWindowStartTimeArgs{...}
//
//  or:
//
//          nil
type BrokerMaintenanceWindowStartTimePtrInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput
	ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimePtrOutput
}

type brokerMaintenanceWindowStartTimePtrType BrokerMaintenanceWindowStartTimeArgs

func BrokerMaintenanceWindowStartTimePtr(v *BrokerMaintenanceWindowStartTimeArgs) BrokerMaintenanceWindowStartTimePtrInput {
	return (*brokerMaintenanceWindowStartTimePtrType)(v)
}

func (*brokerMaintenanceWindowStartTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimePtrOutput)
}

type BrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) *BrokerMaintenanceWindowStartTime {
		return &v
	}).(BrokerMaintenanceWindowStartTimePtrOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimePtrOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) Elem() BrokerMaintenanceWindowStartTimeOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) BrokerMaintenanceWindowStartTime { return *v }).(BrokerMaintenanceWindowStartTimeOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type BrokerUser struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups []string `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// The username of the user.
	Username string `pulumi:"username"`
}

// BrokerUserInput is an input type that accepts BrokerUserArgs and BrokerUserOutput values.
// You can construct a concrete instance of `BrokerUserInput` via:
//
//          BrokerUserArgs{...}
type BrokerUserInput interface {
	pulumi.Input

	ToBrokerUserOutput() BrokerUserOutput
	ToBrokerUserOutputWithContext(context.Context) BrokerUserOutput
}

type BrokerUserArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (i BrokerUserArgs) ToBrokerUserOutput() BrokerUserOutput {
	return i.ToBrokerUserOutputWithContext(context.Background())
}

func (i BrokerUserArgs) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserOutput)
}

// BrokerUserArrayInput is an input type that accepts BrokerUserArray and BrokerUserArrayOutput values.
// You can construct a concrete instance of `BrokerUserArrayInput` via:
//
//          BrokerUserArray{ BrokerUserArgs{...} }
type BrokerUserArrayInput interface {
	pulumi.Input

	ToBrokerUserArrayOutput() BrokerUserArrayOutput
	ToBrokerUserArrayOutputWithContext(context.Context) BrokerUserArrayOutput
}

type BrokerUserArray []BrokerUserInput

func (BrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (i BrokerUserArray) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return i.ToBrokerUserArrayOutputWithContext(context.Background())
}

func (i BrokerUserArray) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArrayOutput)
}

type BrokerUserOutput struct{ *pulumi.OutputState }

func (BrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (o BrokerUserOutput) ToBrokerUserOutput() BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return o
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
func (o BrokerUserOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUser) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// The list of groups (20 maximum) to which the ActiveMQ user belongs.
func (o BrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the user.
func (o BrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) Index(i pulumi.IntInput) BrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUser {
		return vs[0].([]BrokerUser)[vs[1].(int)]
	}).(BrokerUserOutput)
}

type GetBrokerConfiguration struct {
	Id       string `pulumi:"id"`
	Revision int    `pulumi:"revision"`
}

type GetBrokerEncryptionOption struct {
	KmsKeyId       string `pulumi:"kmsKeyId"`
	UseAwsOwnedKey bool   `pulumi:"useAwsOwnedKey"`
}

type GetBrokerInstance struct {
	ConsoleUrl string   `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  string   `pulumi:"ipAddress"`
}

type GetBrokerLogs struct {
	Audit   bool `pulumi:"audit"`
	General bool `pulumi:"general"`
}

type GetBrokerMaintenanceWindowStartTime struct {
	DayOfWeek string `pulumi:"dayOfWeek"`
	TimeOfDay string `pulumi:"timeOfDay"`
	TimeZone  string `pulumi:"timeZone"`
}

type GetBrokerUser struct {
	ConsoleAccess bool     `pulumi:"consoleAccess"`
	Groups        []string `pulumi:"groups"`
	Username      string   `pulumi:"username"`
}

func init() {
	pulumi.RegisterOutputType(BrokerConfigurationOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsPtrOutput{})
	pulumi.RegisterOutputType(BrokerInstanceOutput{})
	pulumi.RegisterOutputType(BrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(BrokerLogsOutput{})
	pulumi.RegisterOutputType(BrokerLogsPtrOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimePtrOutput{})
	pulumi.RegisterOutputType(BrokerUserOutput{})
	pulumi.RegisterOutputType(BrokerUserArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerConfigurationOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerLogsOutput{})
	pulumi.RegisterOutputType(GetBrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(GetBrokerUserOutput{})
	pulumi.RegisterOutputType(GetBrokerUserArrayOutput{})
}
