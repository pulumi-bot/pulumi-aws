// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BrokerConfiguration struct {
	// The Configuration ID.
	Id string `pulumi:"id"`
	// Revision of the Configuration.
	Revision int `pulumi:"revision"`
}

type BrokerConfigurationInput interface {
	pulumi.Input

	ToBrokerConfigurationOutput() BrokerConfigurationOutput
	ToBrokerConfigurationOutputWithContext(context.Context) BrokerConfigurationOutput
}

type BrokerConfigurationArgs struct {
	// The Configuration ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumi.IntInput `pulumi:"revision"`
}

func (BrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return i.ToBrokerConfigurationOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput)
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput).ToBrokerConfigurationPtrOutputWithContext(ctx)
}

type BrokerConfigurationPtrInput interface {
	pulumi.Input

	ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput
	ToBrokerConfigurationPtrOutputWithContext(context.Context) BrokerConfigurationPtrOutput
}

type brokerConfigurationPtrType BrokerConfigurationArgs

func BrokerConfigurationPtr(v *BrokerConfigurationArgs) BrokerConfigurationPtrInput {
	return (*brokerConfigurationPtrType)(v)
}

func (*brokerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationPtrOutput)
}

type BrokerConfigurationOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *BrokerConfiguration {
		return &v
	}).(BrokerConfigurationPtrOutput)
}

// The Configuration ID.
func (o BrokerConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v BrokerConfiguration) int { return v.Revision }).(pulumi.IntOutput)
}

type BrokerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) Elem() BrokerConfigurationOutput {
	return o.ApplyT(func(v *BrokerConfiguration) BrokerConfiguration { return *v }).(BrokerConfigurationOutput)
}

// The Configuration ID.
func (o BrokerConfigurationPtrOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationPtrOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v BrokerConfiguration) int { return v.Revision }).(pulumi.IntOutput)
}

type BrokerConfigurationArgs struct {
	// The Configuration ID.
	Id *string `pulumi:"id"`
	// Revision of the Configuration.
	Revision *int `pulumi:"revision"`
}

type BrokerConfigurationArgsInput interface {
	pulumi.Input

	ToBrokerConfigurationArgsOutput() BrokerConfigurationArgsOutput
	ToBrokerConfigurationArgsOutputWithContext(context.Context) BrokerConfigurationArgsOutput
}

type BrokerConfigurationArgsArgs struct {
	// The Configuration ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (BrokerConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationArgs)(nil)).Elem()
}

func (i BrokerConfigurationArgsArgs) ToBrokerConfigurationArgsOutput() BrokerConfigurationArgsOutput {
	return i.ToBrokerConfigurationArgsOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgsArgs) ToBrokerConfigurationArgsOutputWithContext(ctx context.Context) BrokerConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationArgsOutput)
}

func (i BrokerConfigurationArgsArgs) ToBrokerConfigurationArgsPtrOutput() BrokerConfigurationArgsPtrOutput {
	return i.ToBrokerConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgsArgs) ToBrokerConfigurationArgsPtrOutputWithContext(ctx context.Context) BrokerConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationArgsOutput).ToBrokerConfigurationArgsPtrOutputWithContext(ctx)
}

type BrokerConfigurationArgsPtrInput interface {
	pulumi.Input

	ToBrokerConfigurationArgsPtrOutput() BrokerConfigurationArgsPtrOutput
	ToBrokerConfigurationArgsPtrOutputWithContext(context.Context) BrokerConfigurationArgsPtrOutput
}

type brokerConfigurationArgsPtrType BrokerConfigurationArgsArgs

func BrokerConfigurationArgsPtr(v *BrokerConfigurationArgsArgs) BrokerConfigurationArgsPtrInput {
	return (*brokerConfigurationArgsPtrType)(v)
}

func (*brokerConfigurationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfigurationArgs)(nil)).Elem()
}

func (i *brokerConfigurationArgsPtrType) ToBrokerConfigurationArgsPtrOutput() BrokerConfigurationArgsPtrOutput {
	return i.ToBrokerConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i *brokerConfigurationArgsPtrType) ToBrokerConfigurationArgsPtrOutputWithContext(ctx context.Context) BrokerConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationArgsPtrOutput)
}

type BrokerConfigurationArgsOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationArgs)(nil)).Elem()
}

func (o BrokerConfigurationArgsOutput) ToBrokerConfigurationArgsOutput() BrokerConfigurationArgsOutput {
	return o
}

func (o BrokerConfigurationArgsOutput) ToBrokerConfigurationArgsOutputWithContext(ctx context.Context) BrokerConfigurationArgsOutput {
	return o
}

func (o BrokerConfigurationArgsOutput) ToBrokerConfigurationArgsPtrOutput() BrokerConfigurationArgsPtrOutput {
	return o.ToBrokerConfigurationArgsPtrOutputWithContext(context.Background())
}

func (o BrokerConfigurationArgsOutput) ToBrokerConfigurationArgsPtrOutputWithContext(ctx context.Context) BrokerConfigurationArgsPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationArgs) *BrokerConfigurationArgs {
		return &v
	}).(BrokerConfigurationArgsPtrOutput)
}

// The Configuration ID.
func (o BrokerConfigurationArgsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationArgs) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationArgsOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationArgs) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type BrokerConfigurationArgsPtrOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfigurationArgs)(nil)).Elem()
}

func (o BrokerConfigurationArgsPtrOutput) ToBrokerConfigurationArgsPtrOutput() BrokerConfigurationArgsPtrOutput {
	return o
}

func (o BrokerConfigurationArgsPtrOutput) ToBrokerConfigurationArgsPtrOutputWithContext(ctx context.Context) BrokerConfigurationArgsPtrOutput {
	return o
}

func (o BrokerConfigurationArgsPtrOutput) Elem() BrokerConfigurationArgsOutput {
	return o.ApplyT(func(v *BrokerConfigurationArgs) BrokerConfigurationArgs { return *v }).(BrokerConfigurationArgsOutput)
}

// The Configuration ID.
func (o BrokerConfigurationArgsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationArgs) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationArgsPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationArgs) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type BrokerConfigurationState struct {
	// The Configuration ID.
	Id *string `pulumi:"id"`
	// Revision of the Configuration.
	Revision *int `pulumi:"revision"`
}

type BrokerConfigurationStateInput interface {
	pulumi.Input

	ToBrokerConfigurationStateOutput() BrokerConfigurationStateOutput
	ToBrokerConfigurationStateOutputWithContext(context.Context) BrokerConfigurationStateOutput
}

type BrokerConfigurationStateArgs struct {
	// The Configuration ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (BrokerConfigurationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationState)(nil)).Elem()
}

func (i BrokerConfigurationStateArgs) ToBrokerConfigurationStateOutput() BrokerConfigurationStateOutput {
	return i.ToBrokerConfigurationStateOutputWithContext(context.Background())
}

func (i BrokerConfigurationStateArgs) ToBrokerConfigurationStateOutputWithContext(ctx context.Context) BrokerConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationStateOutput)
}

type BrokerConfigurationStateOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationState)(nil)).Elem()
}

func (o BrokerConfigurationStateOutput) ToBrokerConfigurationStateOutput() BrokerConfigurationStateOutput {
	return o
}

func (o BrokerConfigurationStateOutput) ToBrokerConfigurationStateOutputWithContext(ctx context.Context) BrokerConfigurationStateOutput {
	return o
}

// The Configuration ID.
func (o BrokerConfigurationStateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationState) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationStateOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BrokerConfigurationState) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type BrokerEncryptionOptions struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

type BrokerEncryptionOptionsInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput
	ToBrokerEncryptionOptionsOutputWithContext(context.Context) BrokerEncryptionOptionsOutput
}

type BrokerEncryptionOptionsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumi.BoolPtrInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return i.ToBrokerEncryptionOptionsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput)
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput).ToBrokerEncryptionOptionsPtrOutputWithContext(ctx)
}

type BrokerEncryptionOptionsPtrInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput
	ToBrokerEncryptionOptionsPtrOutputWithContext(context.Context) BrokerEncryptionOptionsPtrOutput
}

type brokerEncryptionOptionsPtrType BrokerEncryptionOptionsArgs

func BrokerEncryptionOptionsPtr(v *BrokerEncryptionOptionsArgs) BrokerEncryptionOptionsPtrInput {
	return (*brokerEncryptionOptionsPtrType)(v)
}

func (*brokerEncryptionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsPtrOutput)
}

type BrokerEncryptionOptionsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *BrokerEncryptionOptions {
		return &v
	}).(BrokerEncryptionOptionsPtrOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsPtrOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) Elem() BrokerEncryptionOptionsOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) BrokerEncryptionOptions { return *v }).(BrokerEncryptionOptionsOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsPtrOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsPtrOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

type BrokerEncryptionOptionsArgsInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsArgsOutput() BrokerEncryptionOptionsArgsOutput
	ToBrokerEncryptionOptionsArgsOutputWithContext(context.Context) BrokerEncryptionOptionsArgsOutput
}

type BrokerEncryptionOptionsArgsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumi.BoolPtrInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptionsArgs)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgsArgs) ToBrokerEncryptionOptionsArgsOutput() BrokerEncryptionOptionsArgsOutput {
	return i.ToBrokerEncryptionOptionsArgsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgsArgs) ToBrokerEncryptionOptionsArgsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsArgsOutput)
}

func (i BrokerEncryptionOptionsArgsArgs) ToBrokerEncryptionOptionsArgsPtrOutput() BrokerEncryptionOptionsArgsPtrOutput {
	return i.ToBrokerEncryptionOptionsArgsPtrOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgsArgs) ToBrokerEncryptionOptionsArgsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsArgsOutput).ToBrokerEncryptionOptionsArgsPtrOutputWithContext(ctx)
}

type BrokerEncryptionOptionsArgsPtrInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsArgsPtrOutput() BrokerEncryptionOptionsArgsPtrOutput
	ToBrokerEncryptionOptionsArgsPtrOutputWithContext(context.Context) BrokerEncryptionOptionsArgsPtrOutput
}

type brokerEncryptionOptionsArgsPtrType BrokerEncryptionOptionsArgsArgs

func BrokerEncryptionOptionsArgsPtr(v *BrokerEncryptionOptionsArgsArgs) BrokerEncryptionOptionsArgsPtrInput {
	return (*brokerEncryptionOptionsArgsPtrType)(v)
}

func (*brokerEncryptionOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptionsArgs)(nil)).Elem()
}

func (i *brokerEncryptionOptionsArgsPtrType) ToBrokerEncryptionOptionsArgsPtrOutput() BrokerEncryptionOptionsArgsPtrOutput {
	return i.ToBrokerEncryptionOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *brokerEncryptionOptionsArgsPtrType) ToBrokerEncryptionOptionsArgsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsArgsPtrOutput)
}

type BrokerEncryptionOptionsArgsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptionsArgs)(nil)).Elem()
}

func (o BrokerEncryptionOptionsArgsOutput) ToBrokerEncryptionOptionsArgsOutput() BrokerEncryptionOptionsArgsOutput {
	return o
}

func (o BrokerEncryptionOptionsArgsOutput) ToBrokerEncryptionOptionsArgsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsOutput {
	return o
}

func (o BrokerEncryptionOptionsArgsOutput) ToBrokerEncryptionOptionsArgsPtrOutput() BrokerEncryptionOptionsArgsPtrOutput {
	return o.ToBrokerEncryptionOptionsArgsPtrOutputWithContext(context.Background())
}

func (o BrokerEncryptionOptionsArgsOutput) ToBrokerEncryptionOptionsArgsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsArgs) *BrokerEncryptionOptionsArgs {
		return &v
	}).(BrokerEncryptionOptionsArgsPtrOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsArgsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsArgs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsArgsOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsArgs) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptionsArgs)(nil)).Elem()
}

func (o BrokerEncryptionOptionsArgsPtrOutput) ToBrokerEncryptionOptionsArgsPtrOutput() BrokerEncryptionOptionsArgsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsArgsPtrOutput) ToBrokerEncryptionOptionsArgsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsArgsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsArgsPtrOutput) Elem() BrokerEncryptionOptionsArgsOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptionsArgs) BrokerEncryptionOptionsArgs { return *v }).(BrokerEncryptionOptionsArgsOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsArgsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsArgs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsArgsPtrOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsArgs) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsState struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

type BrokerEncryptionOptionsStateInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsStateOutput() BrokerEncryptionOptionsStateOutput
	ToBrokerEncryptionOptionsStateOutputWithContext(context.Context) BrokerEncryptionOptionsStateOutput
}

type BrokerEncryptionOptionsStateArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumi.BoolPtrInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptionsState)(nil)).Elem()
}

func (i BrokerEncryptionOptionsStateArgs) ToBrokerEncryptionOptionsStateOutput() BrokerEncryptionOptionsStateOutput {
	return i.ToBrokerEncryptionOptionsStateOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsStateArgs) ToBrokerEncryptionOptionsStateOutputWithContext(ctx context.Context) BrokerEncryptionOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsStateOutput)
}

type BrokerEncryptionOptionsStateOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptionsState)(nil)).Elem()
}

func (o BrokerEncryptionOptionsStateOutput) ToBrokerEncryptionOptionsStateOutput() BrokerEncryptionOptionsStateOutput {
	return o
}

func (o BrokerEncryptionOptionsStateOutput) ToBrokerEncryptionOptionsStateOutputWithContext(ctx context.Context) BrokerEncryptionOptionsStateOutput {
	return o
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsStateOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsState) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsStateOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptionsState) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerInstance struct {
	ConsoleUrl string   `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  string   `pulumi:"ipAddress"`
}

type BrokerInstanceInput interface {
	pulumi.Input

	ToBrokerInstanceOutput() BrokerInstanceOutput
	ToBrokerInstanceOutputWithContext(context.Context) BrokerInstanceOutput
}

type BrokerInstanceArgs struct {
	ConsoleUrl pulumi.StringInput      `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringInput      `pulumi:"ipAddress"`
}

func (BrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return i.ToBrokerInstanceOutputWithContext(context.Background())
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceOutput)
}

type BrokerInstanceArrayInput interface {
	pulumi.Input

	ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput
	ToBrokerInstanceArrayOutputWithContext(context.Context) BrokerInstanceArrayOutput
}

type BrokerInstanceArray []BrokerInstanceInput

func (BrokerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return i.ToBrokerInstanceArrayOutputWithContext(context.Background())
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceArrayOutput)
}

type BrokerInstanceOutput struct{ *pulumi.OutputState }

func (BrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerInstance) string { return v.ConsoleUrl }).(pulumi.StringOutput)
}

func (o BrokerInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerInstance) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o BrokerInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

type BrokerInstanceArrayOutput struct{ *pulumi.OutputState }

func (BrokerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) Index(i pulumi.IntInput) BrokerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerInstance {
		return vs[0].([]BrokerInstance)[vs[1].(int)]
	}).(BrokerInstanceOutput)
}

type BrokerInstanceState struct {
	ConsoleUrl *string  `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  *string  `pulumi:"ipAddress"`
}

type BrokerInstanceStateInput interface {
	pulumi.Input

	ToBrokerInstanceStateOutput() BrokerInstanceStateOutput
	ToBrokerInstanceStateOutputWithContext(context.Context) BrokerInstanceStateOutput
}

type BrokerInstanceStateArgs struct {
	ConsoleUrl pulumi.StringPtrInput   `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringPtrInput   `pulumi:"ipAddress"`
}

func (BrokerInstanceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstanceState)(nil)).Elem()
}

func (i BrokerInstanceStateArgs) ToBrokerInstanceStateOutput() BrokerInstanceStateOutput {
	return i.ToBrokerInstanceStateOutputWithContext(context.Background())
}

func (i BrokerInstanceStateArgs) ToBrokerInstanceStateOutputWithContext(ctx context.Context) BrokerInstanceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceStateOutput)
}

type BrokerInstanceStateArrayInput interface {
	pulumi.Input

	ToBrokerInstanceStateArrayOutput() BrokerInstanceStateArrayOutput
	ToBrokerInstanceStateArrayOutputWithContext(context.Context) BrokerInstanceStateArrayOutput
}

type BrokerInstanceStateArray []BrokerInstanceStateInput

func (BrokerInstanceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstanceState)(nil)).Elem()
}

func (i BrokerInstanceStateArray) ToBrokerInstanceStateArrayOutput() BrokerInstanceStateArrayOutput {
	return i.ToBrokerInstanceStateArrayOutputWithContext(context.Background())
}

func (i BrokerInstanceStateArray) ToBrokerInstanceStateArrayOutputWithContext(ctx context.Context) BrokerInstanceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceStateArrayOutput)
}

type BrokerInstanceStateOutput struct{ *pulumi.OutputState }

func (BrokerInstanceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstanceState)(nil)).Elem()
}

func (o BrokerInstanceStateOutput) ToBrokerInstanceStateOutput() BrokerInstanceStateOutput {
	return o
}

func (o BrokerInstanceStateOutput) ToBrokerInstanceStateOutputWithContext(ctx context.Context) BrokerInstanceStateOutput {
	return o
}

func (o BrokerInstanceStateOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstanceState) *string { return v.ConsoleUrl }).(pulumi.StringPtrOutput)
}

func (o BrokerInstanceStateOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerInstanceState) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o BrokerInstanceStateOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstanceState) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type BrokerInstanceStateArrayOutput struct{ *pulumi.OutputState }

func (BrokerInstanceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstanceState)(nil)).Elem()
}

func (o BrokerInstanceStateArrayOutput) ToBrokerInstanceStateArrayOutput() BrokerInstanceStateArrayOutput {
	return o
}

func (o BrokerInstanceStateArrayOutput) ToBrokerInstanceStateArrayOutputWithContext(ctx context.Context) BrokerInstanceStateArrayOutput {
	return o
}

func (o BrokerInstanceStateArrayOutput) Index(i pulumi.IntInput) BrokerInstanceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerInstanceState {
		return vs[0].([]BrokerInstanceState)[vs[1].(int)]
	}).(BrokerInstanceStateOutput)
}

type BrokerLogs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

type BrokerLogsInput interface {
	pulumi.Input

	ToBrokerLogsOutput() BrokerLogsOutput
	ToBrokerLogsOutputWithContext(context.Context) BrokerLogsOutput
}

type BrokerLogsArgs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (i BrokerLogsArgs) ToBrokerLogsOutput() BrokerLogsOutput {
	return i.ToBrokerLogsOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput)
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput).ToBrokerLogsPtrOutputWithContext(ctx)
}

type BrokerLogsPtrInput interface {
	pulumi.Input

	ToBrokerLogsPtrOutput() BrokerLogsPtrOutput
	ToBrokerLogsPtrOutputWithContext(context.Context) BrokerLogsPtrOutput
}

type brokerLogsPtrType BrokerLogsArgs

func BrokerLogsPtr(v *BrokerLogsArgs) BrokerLogsPtrInput {
	return (*brokerLogsPtrType)(v)
}

func (*brokerLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsPtrOutput)
}

type BrokerLogsOutput struct{ *pulumi.OutputState }

func (BrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsOutput) ToBrokerLogsOutput() BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *BrokerLogs {
		return &v
	}).(BrokerLogsPtrOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsPtrOutput struct{ *pulumi.OutputState }

func (BrokerLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) Elem() BrokerLogsOutput {
	return o.ApplyT(func(v *BrokerLogs) BrokerLogs { return *v }).(BrokerLogsOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsArgs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

type BrokerLogsArgsInput interface {
	pulumi.Input

	ToBrokerLogsArgsOutput() BrokerLogsArgsOutput
	ToBrokerLogsArgsOutputWithContext(context.Context) BrokerLogsArgsOutput
}

type BrokerLogsArgsArgs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogsArgs)(nil)).Elem()
}

func (i BrokerLogsArgsArgs) ToBrokerLogsArgsOutput() BrokerLogsArgsOutput {
	return i.ToBrokerLogsArgsOutputWithContext(context.Background())
}

func (i BrokerLogsArgsArgs) ToBrokerLogsArgsOutputWithContext(ctx context.Context) BrokerLogsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsArgsOutput)
}

func (i BrokerLogsArgsArgs) ToBrokerLogsArgsPtrOutput() BrokerLogsArgsPtrOutput {
	return i.ToBrokerLogsArgsPtrOutputWithContext(context.Background())
}

func (i BrokerLogsArgsArgs) ToBrokerLogsArgsPtrOutputWithContext(ctx context.Context) BrokerLogsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsArgsOutput).ToBrokerLogsArgsPtrOutputWithContext(ctx)
}

type BrokerLogsArgsPtrInput interface {
	pulumi.Input

	ToBrokerLogsArgsPtrOutput() BrokerLogsArgsPtrOutput
	ToBrokerLogsArgsPtrOutputWithContext(context.Context) BrokerLogsArgsPtrOutput
}

type brokerLogsArgsPtrType BrokerLogsArgsArgs

func BrokerLogsArgsPtr(v *BrokerLogsArgsArgs) BrokerLogsArgsPtrInput {
	return (*brokerLogsArgsPtrType)(v)
}

func (*brokerLogsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogsArgs)(nil)).Elem()
}

func (i *brokerLogsArgsPtrType) ToBrokerLogsArgsPtrOutput() BrokerLogsArgsPtrOutput {
	return i.ToBrokerLogsArgsPtrOutputWithContext(context.Background())
}

func (i *brokerLogsArgsPtrType) ToBrokerLogsArgsPtrOutputWithContext(ctx context.Context) BrokerLogsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsArgsPtrOutput)
}

type BrokerLogsArgsOutput struct{ *pulumi.OutputState }

func (BrokerLogsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogsArgs)(nil)).Elem()
}

func (o BrokerLogsArgsOutput) ToBrokerLogsArgsOutput() BrokerLogsArgsOutput {
	return o
}

func (o BrokerLogsArgsOutput) ToBrokerLogsArgsOutputWithContext(ctx context.Context) BrokerLogsArgsOutput {
	return o
}

func (o BrokerLogsArgsOutput) ToBrokerLogsArgsPtrOutput() BrokerLogsArgsPtrOutput {
	return o.ToBrokerLogsArgsPtrOutputWithContext(context.Background())
}

func (o BrokerLogsArgsOutput) ToBrokerLogsArgsPtrOutputWithContext(ctx context.Context) BrokerLogsArgsPtrOutput {
	return o.ApplyT(func(v BrokerLogsArgs) *BrokerLogsArgs {
		return &v
	}).(BrokerLogsArgsPtrOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsArgsOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsArgs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsArgsOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsArgs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsArgsPtrOutput struct{ *pulumi.OutputState }

func (BrokerLogsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogsArgs)(nil)).Elem()
}

func (o BrokerLogsArgsPtrOutput) ToBrokerLogsArgsPtrOutput() BrokerLogsArgsPtrOutput {
	return o
}

func (o BrokerLogsArgsPtrOutput) ToBrokerLogsArgsPtrOutputWithContext(ctx context.Context) BrokerLogsArgsPtrOutput {
	return o
}

func (o BrokerLogsArgsPtrOutput) Elem() BrokerLogsArgsOutput {
	return o.ApplyT(func(v *BrokerLogsArgs) BrokerLogsArgs { return *v }).(BrokerLogsArgsOutput)
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsArgsPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsArgs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsArgsPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsArgs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsState struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

type BrokerLogsStateInput interface {
	pulumi.Input

	ToBrokerLogsStateOutput() BrokerLogsStateOutput
	ToBrokerLogsStateOutputWithContext(context.Context) BrokerLogsStateOutput
}

type BrokerLogsStateArgs struct {
	// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogsState)(nil)).Elem()
}

func (i BrokerLogsStateArgs) ToBrokerLogsStateOutput() BrokerLogsStateOutput {
	return i.ToBrokerLogsStateOutputWithContext(context.Background())
}

func (i BrokerLogsStateArgs) ToBrokerLogsStateOutputWithContext(ctx context.Context) BrokerLogsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsStateOutput)
}

type BrokerLogsStateOutput struct{ *pulumi.OutputState }

func (BrokerLogsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogsState)(nil)).Elem()
}

func (o BrokerLogsStateOutput) ToBrokerLogsStateOutput() BrokerLogsStateOutput {
	return o
}

func (o BrokerLogsStateOutput) ToBrokerLogsStateOutputWithContext(ctx context.Context) BrokerLogsStateOutput {
	return o
}

// Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsStateOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsState) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsStateOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogsState) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerMaintenanceWindowStartTime struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay string `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone string `pulumi:"timeZone"`
}

type BrokerMaintenanceWindowStartTimeInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput
	ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeOutput
}

type BrokerMaintenanceWindowStartTimeArgs struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return i.ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput)
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput).ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx)
}

type BrokerMaintenanceWindowStartTimePtrInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput
	ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimePtrOutput
}

type brokerMaintenanceWindowStartTimePtrType BrokerMaintenanceWindowStartTimeArgs

func BrokerMaintenanceWindowStartTimePtr(v *BrokerMaintenanceWindowStartTimeArgs) BrokerMaintenanceWindowStartTimePtrInput {
	return (*brokerMaintenanceWindowStartTimePtrType)(v)
}

func (*brokerMaintenanceWindowStartTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimePtrOutput)
}

type BrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) *BrokerMaintenanceWindowStartTime {
		return &v
	}).(BrokerMaintenanceWindowStartTimePtrOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimePtrOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) Elem() BrokerMaintenanceWindowStartTimeOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) BrokerMaintenanceWindowStartTime { return *v }).(BrokerMaintenanceWindowStartTimeOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimePtrOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimeArgs struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay string `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone string `pulumi:"timeZone"`
}

type BrokerMaintenanceWindowStartTimeArgsInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeArgsOutput() BrokerMaintenanceWindowStartTimeArgsOutput
	ToBrokerMaintenanceWindowStartTimeArgsOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeArgsOutput
}

type BrokerMaintenanceWindowStartTimeArgsArgs struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTimeArgs)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeArgsArgs) ToBrokerMaintenanceWindowStartTimeArgsOutput() BrokerMaintenanceWindowStartTimeArgsOutput {
	return i.ToBrokerMaintenanceWindowStartTimeArgsOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgsArgs) ToBrokerMaintenanceWindowStartTimeArgsOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeArgsOutput)
}

func (i BrokerMaintenanceWindowStartTimeArgsArgs) ToBrokerMaintenanceWindowStartTimeArgsPtrOutput() BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgsArgs) ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeArgsOutput).ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(ctx)
}

type BrokerMaintenanceWindowStartTimeArgsPtrInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeArgsPtrOutput() BrokerMaintenanceWindowStartTimeArgsPtrOutput
	ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeArgsPtrOutput
}

type brokerMaintenanceWindowStartTimeArgsPtrType BrokerMaintenanceWindowStartTimeArgsArgs

func BrokerMaintenanceWindowStartTimeArgsPtr(v *BrokerMaintenanceWindowStartTimeArgsArgs) BrokerMaintenanceWindowStartTimeArgsPtrInput {
	return (*brokerMaintenanceWindowStartTimeArgsPtrType)(v)
}

func (*brokerMaintenanceWindowStartTimeArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTimeArgs)(nil)).Elem()
}

func (i *brokerMaintenanceWindowStartTimeArgsPtrType) ToBrokerMaintenanceWindowStartTimeArgsPtrOutput() BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(context.Background())
}

func (i *brokerMaintenanceWindowStartTimeArgsPtrType) ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeArgsPtrOutput)
}

type BrokerMaintenanceWindowStartTimeArgsOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTimeArgs)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeArgsOutput) ToBrokerMaintenanceWindowStartTimeArgsOutput() BrokerMaintenanceWindowStartTimeArgsOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeArgsOutput) ToBrokerMaintenanceWindowStartTimeArgsOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeArgsOutput) ToBrokerMaintenanceWindowStartTimeArgsPtrOutput() BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return o.ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(context.Background())
}

func (o BrokerMaintenanceWindowStartTimeArgsOutput) ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) *BrokerMaintenanceWindowStartTimeArgs {
		return &v
	}).(BrokerMaintenanceWindowStartTimeArgsPtrOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimeArgsOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimeArgsOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimeArgsOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimeArgsPtrOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTimeArgs)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) ToBrokerMaintenanceWindowStartTimeArgsPtrOutput() BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) ToBrokerMaintenanceWindowStartTimeArgsPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeArgsPtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) Elem() BrokerMaintenanceWindowStartTimeArgsOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTimeArgs) BrokerMaintenanceWindowStartTimeArgs { return *v }).(BrokerMaintenanceWindowStartTimeArgsOutput)
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimeArgsPtrOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeArgs) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimeState struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay string `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone string `pulumi:"timeZone"`
}

type BrokerMaintenanceWindowStartTimeStateInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeStateOutput() BrokerMaintenanceWindowStartTimeStateOutput
	ToBrokerMaintenanceWindowStartTimeStateOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeStateOutput
}

type BrokerMaintenanceWindowStartTimeStateArgs struct {
	// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time, in 24-hour format. e.g. `02:00`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTimeState)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeStateArgs) ToBrokerMaintenanceWindowStartTimeStateOutput() BrokerMaintenanceWindowStartTimeStateOutput {
	return i.ToBrokerMaintenanceWindowStartTimeStateOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeStateArgs) ToBrokerMaintenanceWindowStartTimeStateOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeStateOutput)
}

type BrokerMaintenanceWindowStartTimeStateOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTimeState)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeStateOutput) ToBrokerMaintenanceWindowStartTimeStateOutput() BrokerMaintenanceWindowStartTimeStateOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeStateOutput) ToBrokerMaintenanceWindowStartTimeStateOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeStateOutput {
	return o
}

// The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
func (o BrokerMaintenanceWindowStartTimeStateOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeState) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format. e.g. `02:00`
func (o BrokerMaintenanceWindowStartTimeStateOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeState) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
func (o BrokerMaintenanceWindowStartTimeStateOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTimeState) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerUser struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups []string `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// The username of the user.
	Username string `pulumi:"username"`
}

type BrokerUserInput interface {
	pulumi.Input

	ToBrokerUserOutput() BrokerUserOutput
	ToBrokerUserOutputWithContext(context.Context) BrokerUserOutput
}

type BrokerUserArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (i BrokerUserArgs) ToBrokerUserOutput() BrokerUserOutput {
	return i.ToBrokerUserOutputWithContext(context.Background())
}

func (i BrokerUserArgs) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserOutput)
}

type BrokerUserArrayInput interface {
	pulumi.Input

	ToBrokerUserArrayOutput() BrokerUserArrayOutput
	ToBrokerUserArrayOutputWithContext(context.Context) BrokerUserArrayOutput
}

type BrokerUserArray []BrokerUserInput

func (BrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (i BrokerUserArray) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return i.ToBrokerUserArrayOutputWithContext(context.Background())
}

func (i BrokerUserArray) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArrayOutput)
}

type BrokerUserOutput struct{ *pulumi.OutputState }

func (BrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (o BrokerUserOutput) ToBrokerUserOutput() BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return o
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
func (o BrokerUserOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUser) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// The list of groups (20 maximum) to which the ActiveMQ user belongs.
func (o BrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the user.
func (o BrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) Index(i pulumi.IntInput) BrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUser {
		return vs[0].([]BrokerUser)[vs[1].(int)]
	}).(BrokerUserOutput)
}

type BrokerUserArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups []string `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// The username of the user.
	Username string `pulumi:"username"`
}

type BrokerUserArgsInput interface {
	pulumi.Input

	ToBrokerUserArgsOutput() BrokerUserArgsOutput
	ToBrokerUserArgsOutputWithContext(context.Context) BrokerUserArgsOutput
}

type BrokerUserArgsArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUserArgs)(nil)).Elem()
}

func (i BrokerUserArgsArgs) ToBrokerUserArgsOutput() BrokerUserArgsOutput {
	return i.ToBrokerUserArgsOutputWithContext(context.Background())
}

func (i BrokerUserArgsArgs) ToBrokerUserArgsOutputWithContext(ctx context.Context) BrokerUserArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArgsOutput)
}

type BrokerUserArgsArrayInput interface {
	pulumi.Input

	ToBrokerUserArgsArrayOutput() BrokerUserArgsArrayOutput
	ToBrokerUserArgsArrayOutputWithContext(context.Context) BrokerUserArgsArrayOutput
}

type BrokerUserArgsArray []BrokerUserArgsInput

func (BrokerUserArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUserArgs)(nil)).Elem()
}

func (i BrokerUserArgsArray) ToBrokerUserArgsArrayOutput() BrokerUserArgsArrayOutput {
	return i.ToBrokerUserArgsArrayOutputWithContext(context.Background())
}

func (i BrokerUserArgsArray) ToBrokerUserArgsArrayOutputWithContext(ctx context.Context) BrokerUserArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArgsArrayOutput)
}

type BrokerUserArgsOutput struct{ *pulumi.OutputState }

func (BrokerUserArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUserArgs)(nil)).Elem()
}

func (o BrokerUserArgsOutput) ToBrokerUserArgsOutput() BrokerUserArgsOutput {
	return o
}

func (o BrokerUserArgsOutput) ToBrokerUserArgsOutputWithContext(ctx context.Context) BrokerUserArgsOutput {
	return o
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
func (o BrokerUserArgsOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUserArgs) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// The list of groups (20 maximum) to which the ActiveMQ user belongs.
func (o BrokerUserArgsOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUserArgs) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserArgsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUserArgs) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the user.
func (o BrokerUserArgsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUserArgs) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserArgsArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUserArgs)(nil)).Elem()
}

func (o BrokerUserArgsArrayOutput) ToBrokerUserArgsArrayOutput() BrokerUserArgsArrayOutput {
	return o
}

func (o BrokerUserArgsArrayOutput) ToBrokerUserArgsArrayOutputWithContext(ctx context.Context) BrokerUserArgsArrayOutput {
	return o
}

func (o BrokerUserArgsArrayOutput) Index(i pulumi.IntInput) BrokerUserArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUserArgs {
		return vs[0].([]BrokerUserArgs)[vs[1].(int)]
	}).(BrokerUserArgsOutput)
}

type BrokerUserState struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups []string `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// The username of the user.
	Username string `pulumi:"username"`
}

type BrokerUserStateInput interface {
	pulumi.Input

	ToBrokerUserStateOutput() BrokerUserStateOutput
	ToBrokerUserStateOutputWithContext(context.Context) BrokerUserStateOutput
}

type BrokerUserStateArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUserState)(nil)).Elem()
}

func (i BrokerUserStateArgs) ToBrokerUserStateOutput() BrokerUserStateOutput {
	return i.ToBrokerUserStateOutputWithContext(context.Background())
}

func (i BrokerUserStateArgs) ToBrokerUserStateOutputWithContext(ctx context.Context) BrokerUserStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserStateOutput)
}

type BrokerUserStateArrayInput interface {
	pulumi.Input

	ToBrokerUserStateArrayOutput() BrokerUserStateArrayOutput
	ToBrokerUserStateArrayOutputWithContext(context.Context) BrokerUserStateArrayOutput
}

type BrokerUserStateArray []BrokerUserStateInput

func (BrokerUserStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUserState)(nil)).Elem()
}

func (i BrokerUserStateArray) ToBrokerUserStateArrayOutput() BrokerUserStateArrayOutput {
	return i.ToBrokerUserStateArrayOutputWithContext(context.Background())
}

func (i BrokerUserStateArray) ToBrokerUserStateArrayOutputWithContext(ctx context.Context) BrokerUserStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserStateArrayOutput)
}

type BrokerUserStateOutput struct{ *pulumi.OutputState }

func (BrokerUserStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUserState)(nil)).Elem()
}

func (o BrokerUserStateOutput) ToBrokerUserStateOutput() BrokerUserStateOutput {
	return o
}

func (o BrokerUserStateOutput) ToBrokerUserStateOutputWithContext(ctx context.Context) BrokerUserStateOutput {
	return o
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
func (o BrokerUserStateOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUserState) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// The list of groups (20 maximum) to which the ActiveMQ user belongs.
func (o BrokerUserStateOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUserState) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserStateOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUserState) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the user.
func (o BrokerUserStateOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUserState) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserStateArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUserState)(nil)).Elem()
}

func (o BrokerUserStateArrayOutput) ToBrokerUserStateArrayOutput() BrokerUserStateArrayOutput {
	return o
}

func (o BrokerUserStateArrayOutput) ToBrokerUserStateArrayOutputWithContext(ctx context.Context) BrokerUserStateArrayOutput {
	return o
}

func (o BrokerUserStateArrayOutput) Index(i pulumi.IntInput) BrokerUserStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUserState {
		return vs[0].([]BrokerUserState)[vs[1].(int)]
	}).(BrokerUserStateOutput)
}

type GetBrokerConfiguration struct {
	Id       string `pulumi:"id"`
	Revision int    `pulumi:"revision"`
}

type GetBrokerConfigurationInput interface {
	pulumi.Input

	ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput
	ToGetBrokerConfigurationOutputWithContext(context.Context) GetBrokerConfigurationOutput
}

type GetBrokerConfigurationArgs struct {
	Id       pulumi.StringInput `pulumi:"id"`
	Revision pulumi.IntInput    `pulumi:"revision"`
}

func (GetBrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return i.ToGetBrokerConfigurationOutputWithContext(context.Background())
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerConfigurationOutput)
}

type GetBrokerConfigurationOutput struct{ *pulumi.OutputState }

func (GetBrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBrokerConfigurationOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v GetBrokerConfiguration) int { return v.Revision }).(pulumi.IntOutput)
}

type GetBrokerEncryptionOption struct {
	KmsKeyId       string `pulumi:"kmsKeyId"`
	UseAwsOwnedKey bool   `pulumi:"useAwsOwnedKey"`
}

type GetBrokerEncryptionOptionInput interface {
	pulumi.Input

	ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput
	ToGetBrokerEncryptionOptionOutputWithContext(context.Context) GetBrokerEncryptionOptionOutput
}

type GetBrokerEncryptionOptionArgs struct {
	KmsKeyId       pulumi.StringInput `pulumi:"kmsKeyId"`
	UseAwsOwnedKey pulumi.BoolInput   `pulumi:"useAwsOwnedKey"`
}

func (GetBrokerEncryptionOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return i.ToGetBrokerEncryptionOptionOutputWithContext(context.Background())
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerEncryptionOptionOutput)
}

type GetBrokerEncryptionOptionArrayInput interface {
	pulumi.Input

	ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput
	ToGetBrokerEncryptionOptionArrayOutputWithContext(context.Context) GetBrokerEncryptionOptionArrayOutput
}

type GetBrokerEncryptionOptionArray []GetBrokerEncryptionOptionInput

func (GetBrokerEncryptionOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerEncryptionOption)(nil)).Elem()
}

func (i GetBrokerEncryptionOptionArray) ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput {
	return i.ToGetBrokerEncryptionOptionArrayOutputWithContext(context.Background())
}

func (i GetBrokerEncryptionOptionArray) ToGetBrokerEncryptionOptionArrayOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerEncryptionOptionArrayOutput)
}

type GetBrokerEncryptionOptionOutput struct{ *pulumi.OutputState }

func (GetBrokerEncryptionOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerEncryptionOption) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o GetBrokerEncryptionOptionOutput) UseAwsOwnedKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerEncryptionOption) bool { return v.UseAwsOwnedKey }).(pulumi.BoolOutput)
}

type GetBrokerEncryptionOptionArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerEncryptionOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerEncryptionOption)(nil)).Elem()
}

func (o GetBrokerEncryptionOptionArrayOutput) ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput {
	return o
}

func (o GetBrokerEncryptionOptionArrayOutput) ToGetBrokerEncryptionOptionArrayOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionArrayOutput {
	return o
}

func (o GetBrokerEncryptionOptionArrayOutput) Index(i pulumi.IntInput) GetBrokerEncryptionOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerEncryptionOption {
		return vs[0].([]GetBrokerEncryptionOption)[vs[1].(int)]
	}).(GetBrokerEncryptionOptionOutput)
}

type GetBrokerInstance struct {
	ConsoleUrl string   `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  string   `pulumi:"ipAddress"`
}

type GetBrokerInstanceInput interface {
	pulumi.Input

	ToGetBrokerInstanceOutput() GetBrokerInstanceOutput
	ToGetBrokerInstanceOutputWithContext(context.Context) GetBrokerInstanceOutput
}

type GetBrokerInstanceArgs struct {
	ConsoleUrl pulumi.StringInput      `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringInput      `pulumi:"ipAddress"`
}

func (GetBrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return i.ToGetBrokerInstanceOutputWithContext(context.Background())
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerInstanceOutput)
}

type GetBrokerInstanceArrayInput interface {
	pulumi.Input

	ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput
	ToGetBrokerInstanceArrayOutputWithContext(context.Context) GetBrokerInstanceArrayOutput
}

type GetBrokerInstanceArray []GetBrokerInstanceInput

func (GetBrokerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerInstance)(nil)).Elem()
}

func (i GetBrokerInstanceArray) ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput {
	return i.ToGetBrokerInstanceArrayOutputWithContext(context.Background())
}

func (i GetBrokerInstanceArray) ToGetBrokerInstanceArrayOutputWithContext(ctx context.Context) GetBrokerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerInstanceArrayOutput)
}

type GetBrokerInstanceOutput struct{ *pulumi.OutputState }

func (GetBrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerInstance) string { return v.ConsoleUrl }).(pulumi.StringOutput)
}

func (o GetBrokerInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBrokerInstance) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o GetBrokerInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

type GetBrokerInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerInstance)(nil)).Elem()
}

func (o GetBrokerInstanceArrayOutput) ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput {
	return o
}

func (o GetBrokerInstanceArrayOutput) ToGetBrokerInstanceArrayOutputWithContext(ctx context.Context) GetBrokerInstanceArrayOutput {
	return o
}

func (o GetBrokerInstanceArrayOutput) Index(i pulumi.IntInput) GetBrokerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerInstance {
		return vs[0].([]GetBrokerInstance)[vs[1].(int)]
	}).(GetBrokerInstanceOutput)
}

type GetBrokerLogs struct {
	Audit   bool `pulumi:"audit"`
	General bool `pulumi:"general"`
}

type GetBrokerLogsInput interface {
	pulumi.Input

	ToGetBrokerLogsOutput() GetBrokerLogsOutput
	ToGetBrokerLogsOutputWithContext(context.Context) GetBrokerLogsOutput
}

type GetBrokerLogsArgs struct {
	Audit   pulumi.BoolInput `pulumi:"audit"`
	General pulumi.BoolInput `pulumi:"general"`
}

func (GetBrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return i.ToGetBrokerLogsOutputWithContext(context.Background())
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLogsOutput)
}

type GetBrokerLogsOutput struct{ *pulumi.OutputState }

func (GetBrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) Audit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLogs) bool { return v.Audit }).(pulumi.BoolOutput)
}

func (o GetBrokerLogsOutput) General() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLogs) bool { return v.General }).(pulumi.BoolOutput)
}

type GetBrokerLogsArgs struct {
	Audit   *bool `pulumi:"audit"`
	General *bool `pulumi:"general"`
}

type GetBrokerLogsArgsInput interface {
	pulumi.Input

	ToGetBrokerLogsArgsOutput() GetBrokerLogsArgsOutput
	ToGetBrokerLogsArgsOutputWithContext(context.Context) GetBrokerLogsArgsOutput
}

type GetBrokerLogsArgsArgs struct {
	Audit   pulumi.BoolPtrInput `pulumi:"audit"`
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (GetBrokerLogsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogsArgs)(nil)).Elem()
}

func (i GetBrokerLogsArgsArgs) ToGetBrokerLogsArgsOutput() GetBrokerLogsArgsOutput {
	return i.ToGetBrokerLogsArgsOutputWithContext(context.Background())
}

func (i GetBrokerLogsArgsArgs) ToGetBrokerLogsArgsOutputWithContext(ctx context.Context) GetBrokerLogsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLogsArgsOutput)
}

type GetBrokerLogsArgsOutput struct{ *pulumi.OutputState }

func (GetBrokerLogsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogsArgs)(nil)).Elem()
}

func (o GetBrokerLogsArgsOutput) ToGetBrokerLogsArgsOutput() GetBrokerLogsArgsOutput {
	return o
}

func (o GetBrokerLogsArgsOutput) ToGetBrokerLogsArgsOutputWithContext(ctx context.Context) GetBrokerLogsArgsOutput {
	return o
}

func (o GetBrokerLogsArgsOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetBrokerLogsArgs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

func (o GetBrokerLogsArgsOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetBrokerLogsArgs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type GetBrokerMaintenanceWindowStartTime struct {
	DayOfWeek string `pulumi:"dayOfWeek"`
	TimeOfDay string `pulumi:"timeOfDay"`
	TimeZone  string `pulumi:"timeZone"`
}

type GetBrokerMaintenanceWindowStartTimeInput interface {
	pulumi.Input

	ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput
	ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(context.Context) GetBrokerMaintenanceWindowStartTimeOutput
}

type GetBrokerMaintenanceWindowStartTimeArgs struct {
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	TimeZone  pulumi.StringInput `pulumi:"timeZone"`
}

func (GetBrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return i.ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerMaintenanceWindowStartTimeOutput)
}

type GetBrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (GetBrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type GetBrokerUser struct {
	ConsoleAccess bool     `pulumi:"consoleAccess"`
	Groups        []string `pulumi:"groups"`
	Username      string   `pulumi:"username"`
}

type GetBrokerUserInput interface {
	pulumi.Input

	ToGetBrokerUserOutput() GetBrokerUserOutput
	ToGetBrokerUserOutputWithContext(context.Context) GetBrokerUserOutput
}

type GetBrokerUserArgs struct {
	ConsoleAccess pulumi.BoolInput        `pulumi:"consoleAccess"`
	Groups        pulumi.StringArrayInput `pulumi:"groups"`
	Username      pulumi.StringInput      `pulumi:"username"`
}

func (GetBrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return i.ToGetBrokerUserOutputWithContext(context.Background())
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerUserOutput)
}

type GetBrokerUserArrayInput interface {
	pulumi.Input

	ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput
	ToGetBrokerUserArrayOutputWithContext(context.Context) GetBrokerUserArrayOutput
}

type GetBrokerUserArray []GetBrokerUserInput

func (GetBrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerUser)(nil)).Elem()
}

func (i GetBrokerUserArray) ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput {
	return i.ToGetBrokerUserArrayOutputWithContext(context.Background())
}

func (i GetBrokerUserArray) ToGetBrokerUserArrayOutputWithContext(ctx context.Context) GetBrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerUserArrayOutput)
}

type GetBrokerUserOutput struct{ *pulumi.OutputState }

func (GetBrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ConsoleAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerUser) bool { return v.ConsoleAccess }).(pulumi.BoolOutput)
}

func (o GetBrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

func (o GetBrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type GetBrokerUserArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerUser)(nil)).Elem()
}

func (o GetBrokerUserArrayOutput) ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput {
	return o
}

func (o GetBrokerUserArrayOutput) ToGetBrokerUserArrayOutputWithContext(ctx context.Context) GetBrokerUserArrayOutput {
	return o
}

func (o GetBrokerUserArrayOutput) Index(i pulumi.IntInput) GetBrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerUser {
		return vs[0].([]GetBrokerUser)[vs[1].(int)]
	}).(GetBrokerUserOutput)
}

func init() {
	pulumi.RegisterOutputType(BrokerConfigurationOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationArgsOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationArgsPtrOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationStateOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsPtrOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsArgsOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsStateOutput{})
	pulumi.RegisterOutputType(BrokerInstanceOutput{})
	pulumi.RegisterOutputType(BrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(BrokerInstanceStateOutput{})
	pulumi.RegisterOutputType(BrokerInstanceStateArrayOutput{})
	pulumi.RegisterOutputType(BrokerLogsOutput{})
	pulumi.RegisterOutputType(BrokerLogsPtrOutput{})
	pulumi.RegisterOutputType(BrokerLogsArgsOutput{})
	pulumi.RegisterOutputType(BrokerLogsArgsPtrOutput{})
	pulumi.RegisterOutputType(BrokerLogsStateOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimePtrOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeArgsOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeArgsPtrOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeStateOutput{})
	pulumi.RegisterOutputType(BrokerUserOutput{})
	pulumi.RegisterOutputType(BrokerUserArrayOutput{})
	pulumi.RegisterOutputType(BrokerUserArgsOutput{})
	pulumi.RegisterOutputType(BrokerUserArgsArrayOutput{})
	pulumi.RegisterOutputType(BrokerUserStateOutput{})
	pulumi.RegisterOutputType(BrokerUserStateArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerConfigurationOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerLogsOutput{})
	pulumi.RegisterOutputType(GetBrokerLogsArgsOutput{})
	pulumi.RegisterOutputType(GetBrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(GetBrokerUserOutput{})
	pulumi.RegisterOutputType(GetBrokerUserArrayOutput{})
}
