// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Ciphertext struct {
	pulumi.CustomResourceState

	CiphertextBlob pulumi.StringOutput    `pulumi:"ciphertextBlob"`
	Context        pulumi.StringMapOutput `pulumi:"context"`
	KeyId          pulumi.StringOutput    `pulumi:"keyId"`
	Plaintext      pulumi.StringOutput    `pulumi:"plaintext"`
}

// NewCiphertext registers a new resource with the given unique name, arguments, and options.
func NewCiphertext(ctx *pulumi.Context,
	name string, args *CiphertextArgs, opts ...pulumi.ResourceOption) (*Ciphertext, error) {
	if args == nil || args.KeyId == nil {
		return nil, errors.New("missing required argument 'KeyId'")
	}
	if args == nil || args.Plaintext == nil {
		return nil, errors.New("missing required argument 'Plaintext'")
	}
	if args == nil {
		args = &CiphertextArgs{}
	}
	var resource Ciphertext
	err := ctx.RegisterResource("aws:kms/ciphertext:Ciphertext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiphertext gets an existing Ciphertext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiphertext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiphertextState, opts ...pulumi.ResourceOption) (*Ciphertext, error) {
	var resource Ciphertext
	err := ctx.ReadResource("aws:kms/ciphertext:Ciphertext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ciphertext resources.
type ciphertextState struct {
	CiphertextBlob *string           `pulumi:"ciphertextBlob"`
	Context        map[string]string `pulumi:"context"`
	KeyId          *string           `pulumi:"keyId"`
	Plaintext      *string           `pulumi:"plaintext"`
}

type CiphertextState struct {
	CiphertextBlob pulumi.StringPtrInput
	Context        pulumi.StringMapInput
	KeyId          pulumi.StringPtrInput
	Plaintext      pulumi.StringPtrInput
}

func (CiphertextState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciphertextState)(nil)).Elem()
}

type ciphertextArgs struct {
	Context   map[string]string `pulumi:"context"`
	KeyId     string            `pulumi:"keyId"`
	Plaintext string            `pulumi:"plaintext"`
}

// The set of arguments for constructing a Ciphertext resource.
type CiphertextArgs struct {
	Context   pulumi.StringMapInput
	KeyId     pulumi.StringInput
	Plaintext pulumi.StringInput
}

func (CiphertextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciphertextArgs)(nil)).Elem()
}
