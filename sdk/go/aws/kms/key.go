// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Key struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput    `pulumi:"arn"`
	CustomerMasterKeySpec pulumi.StringPtrOutput `pulumi:"customerMasterKeySpec"`
	DeletionWindowInDays  pulumi.IntPtrOutput    `pulumi:"deletionWindowInDays"`
	Description           pulumi.StringOutput    `pulumi:"description"`
	EnableKeyRotation     pulumi.BoolPtrOutput   `pulumi:"enableKeyRotation"`
	IsEnabled             pulumi.BoolPtrOutput   `pulumi:"isEnabled"`
	KeyId                 pulumi.StringOutput    `pulumi:"keyId"`
	KeyUsage              pulumi.StringPtrOutput `pulumi:"keyUsage"`
	Policy                pulumi.StringOutput    `pulumi:"policy"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		args = &KeyArgs{}
	}
	var resource Key
	err := ctx.RegisterResource("aws:kms/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("aws:kms/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	Arn                   *string           `pulumi:"arn"`
	CustomerMasterKeySpec *string           `pulumi:"customerMasterKeySpec"`
	DeletionWindowInDays  *int              `pulumi:"deletionWindowInDays"`
	Description           *string           `pulumi:"description"`
	EnableKeyRotation     *bool             `pulumi:"enableKeyRotation"`
	IsEnabled             *bool             `pulumi:"isEnabled"`
	KeyId                 *string           `pulumi:"keyId"`
	KeyUsage              *string           `pulumi:"keyUsage"`
	Policy                *string           `pulumi:"policy"`
	Tags                  map[string]string `pulumi:"tags"`
}

type KeyState struct {
	Arn                   pulumi.StringPtrInput
	CustomerMasterKeySpec pulumi.StringPtrInput
	DeletionWindowInDays  pulumi.IntPtrInput
	Description           pulumi.StringPtrInput
	EnableKeyRotation     pulumi.BoolPtrInput
	IsEnabled             pulumi.BoolPtrInput
	KeyId                 pulumi.StringPtrInput
	KeyUsage              pulumi.StringPtrInput
	Policy                pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	CustomerMasterKeySpec *string           `pulumi:"customerMasterKeySpec"`
	DeletionWindowInDays  *int              `pulumi:"deletionWindowInDays"`
	Description           *string           `pulumi:"description"`
	EnableKeyRotation     *bool             `pulumi:"enableKeyRotation"`
	IsEnabled             *bool             `pulumi:"isEnabled"`
	KeyUsage              *string           `pulumi:"keyUsage"`
	Policy                *string           `pulumi:"policy"`
	Tags                  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	CustomerMasterKeySpec pulumi.StringPtrInput
	DeletionWindowInDays  pulumi.IntPtrInput
	Description           pulumi.StringPtrInput
	EnableKeyRotation     pulumi.BoolPtrInput
	IsEnabled             pulumi.BoolPtrInput
	KeyUsage              pulumi.StringPtrInput
	Policy                pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}
