// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GrantConstraint struct {
	// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
	EncryptionContextEquals map[string]string `pulumi:"encryptionContextEquals"`
	// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
	EncryptionContextSubset map[string]string `pulumi:"encryptionContextSubset"`
}

// GrantConstraintInput is an input type that accepts GrantConstraintArgs and GrantConstraintOutput values.
// You can construct a concrete instance of `GrantConstraintInput` via:
//
//          GrantConstraintArgs{...}
type GrantConstraintInput interface {
	pulumi.Input

	ToGrantConstraintOutput() GrantConstraintOutput
	ToGrantConstraintOutputWithContext(context.Context) GrantConstraintOutput
}

type GrantConstraintArgs struct {
	// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
	EncryptionContextEquals pulumi.StringMapInput `pulumi:"encryptionContextEquals"`
	// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
	EncryptionContextSubset pulumi.StringMapInput `pulumi:"encryptionContextSubset"`
}

func (GrantConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantConstraint)(nil)).Elem()
}

func (i GrantConstraintArgs) ToGrantConstraintOutput() GrantConstraintOutput {
	return i.ToGrantConstraintOutputWithContext(context.Background())
}

func (i GrantConstraintArgs) ToGrantConstraintOutputWithContext(ctx context.Context) GrantConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantConstraintOutput)
}

// GrantConstraintArrayInput is an input type that accepts GrantConstraintArray and GrantConstraintArrayOutput values.
// You can construct a concrete instance of `GrantConstraintArrayInput` via:
//
//          GrantConstraintArray{ GrantConstraintArgs{...} }
type GrantConstraintArrayInput interface {
	pulumi.Input

	ToGrantConstraintArrayOutput() GrantConstraintArrayOutput
	ToGrantConstraintArrayOutputWithContext(context.Context) GrantConstraintArrayOutput
}

type GrantConstraintArray []GrantConstraintInput

func (GrantConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrantConstraint)(nil)).Elem()
}

func (i GrantConstraintArray) ToGrantConstraintArrayOutput() GrantConstraintArrayOutput {
	return i.ToGrantConstraintArrayOutputWithContext(context.Background())
}

func (i GrantConstraintArray) ToGrantConstraintArrayOutputWithContext(ctx context.Context) GrantConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantConstraintArrayOutput)
}

type GrantConstraintOutput struct{ *pulumi.OutputState }

func (GrantConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantConstraint)(nil)).Elem()
}

func (o GrantConstraintOutput) ToGrantConstraintOutput() GrantConstraintOutput {
	return o
}

func (o GrantConstraintOutput) ToGrantConstraintOutputWithContext(ctx context.Context) GrantConstraintOutput {
	return o
}

// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
func (o GrantConstraintOutput) EncryptionContextEquals() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrantConstraint) map[string]string { return v.EncryptionContextEquals }).(pulumi.StringMapOutput)
}

// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
func (o GrantConstraintOutput) EncryptionContextSubset() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrantConstraint) map[string]string { return v.EncryptionContextSubset }).(pulumi.StringMapOutput)
}

type GrantConstraintArrayOutput struct{ *pulumi.OutputState }

func (GrantConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrantConstraint)(nil)).Elem()
}

func (o GrantConstraintArrayOutput) ToGrantConstraintArrayOutput() GrantConstraintArrayOutput {
	return o
}

func (o GrantConstraintArrayOutput) ToGrantConstraintArrayOutputWithContext(ctx context.Context) GrantConstraintArrayOutput {
	return o
}

func (o GrantConstraintArrayOutput) Index(i pulumi.IntInput) GrantConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrantConstraint {
		return vs[0].([]GrantConstraint)[vs[1].(int)]
	}).(GrantConstraintOutput)
}

type GetSecretSecret struct {
	Context     map[string]string `pulumi:"context"`
	GrantTokens []string          `pulumi:"grantTokens"`
	Name        string            `pulumi:"name"`
	Payload     string            `pulumi:"payload"`
}

type GetSecretsSecret struct {
	// An optional mapping that makes up the Encryption Context for the secret.
	Context map[string]string `pulumi:"context"`
	// An optional list of Grant Tokens for the secret.
	GrantTokens []string `pulumi:"grantTokens"`
	// The name to export this secret under in the attributes.
	Name string `pulumi:"name"`
	// Base64 encoded payload, as returned from a KMS encrypt operation.
	Payload string `pulumi:"payload"`
}

func init() {
	pulumi.RegisterOutputType(GrantConstraintOutput{})
	pulumi.RegisterOutputType(GrantConstraintArrayOutput{})
	pulumi.RegisterOutputType(GetSecretSecretOutput{})
	pulumi.RegisterOutputType(GetSecretSecretArrayOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretArrayOutput{})
}
