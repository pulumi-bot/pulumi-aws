// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SnapshotSchedule struct {
	s *pulumi.ResourceState
}

// NewSnapshotSchedule registers a new resource with the given unique name, arguments, and options.
func NewSnapshotSchedule(ctx *pulumi.Context,
	name string, args *SnapshotScheduleArgs, opts ...pulumi.ResourceOpt) (*SnapshotSchedule, error) {
	if args == nil || args.Definitions == nil {
		return nil, errors.New("missing required argument 'Definitions'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["definitions"] = nil
		inputs["description"] = nil
		inputs["forceDestroy"] = nil
		inputs["identifier"] = nil
		inputs["identifierPrefix"] = nil
		inputs["tags"] = nil
	} else {
		inputs["definitions"] = args.Definitions
		inputs["description"] = args.Description
		inputs["forceDestroy"] = args.ForceDestroy
		inputs["identifier"] = args.Identifier
		inputs["identifierPrefix"] = args.IdentifierPrefix
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnapshotSchedule{s: s}, nil
}

// GetSnapshotSchedule gets an existing SnapshotSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotSchedule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotScheduleState, opts ...pulumi.ResourceOpt) (*SnapshotSchedule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["definitions"] = state.Definitions
		inputs["description"] = state.Description
		inputs["forceDestroy"] = state.ForceDestroy
		inputs["identifier"] = state.Identifier
		inputs["identifierPrefix"] = state.IdentifierPrefix
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnapshotSchedule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SnapshotSchedule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SnapshotSchedule) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *SnapshotSchedule) Arn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arn"])
}

// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
func (r *SnapshotSchedule) Definitions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["definitions"])
}

// The description of the snapshot schedule.
func (r *SnapshotSchedule) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
func (r *SnapshotSchedule) ForceDestroy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["forceDestroy"])
}

func (r *SnapshotSchedule) Identifier() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["identifier"])
}

// Creates a unique
// identifier beginning with the specified prefix. Conflicts with `identifier`.
func (r *SnapshotSchedule) IdentifierPrefix() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["identifierPrefix"])
}

// A mapping of tags to assign to the resource.
func (r *SnapshotSchedule) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering SnapshotSchedule resources.
type SnapshotScheduleState struct {
	Arn interface{}
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions interface{}
	// The description of the snapshot schedule.
	Description interface{}
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy interface{}
	Identifier interface{}
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a SnapshotSchedule resource.
type SnapshotScheduleArgs struct {
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions interface{}
	// The description of the snapshot schedule.
	Description interface{}
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy interface{}
	Identifier interface{}
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
