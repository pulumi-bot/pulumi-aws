// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CachesIscsiVolume struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	ChapEnabled          pulumi.BoolOutput      `pulumi:"chapEnabled"`
	GatewayArn           pulumi.StringOutput    `pulumi:"gatewayArn"`
	LunNumber            pulumi.IntOutput       `pulumi:"lunNumber"`
	NetworkInterfaceId   pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	NetworkInterfacePort pulumi.IntOutput       `pulumi:"networkInterfacePort"`
	SnapshotId           pulumi.StringPtrOutput `pulumi:"snapshotId"`
	SourceVolumeArn      pulumi.StringPtrOutput `pulumi:"sourceVolumeArn"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TargetArn            pulumi.StringOutput    `pulumi:"targetArn"`
	TargetName           pulumi.StringOutput    `pulumi:"targetName"`
	VolumeArn            pulumi.StringOutput    `pulumi:"volumeArn"`
	VolumeId             pulumi.StringOutput    `pulumi:"volumeId"`
	VolumeSizeInBytes    pulumi.IntOutput       `pulumi:"volumeSizeInBytes"`
}

// NewCachesIscsiVolume registers a new resource with the given unique name, arguments, and options.
func NewCachesIscsiVolume(ctx *pulumi.Context,
	name string, args *CachesIscsiVolumeArgs, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	if args == nil || args.GatewayArn == nil {
		return nil, errors.New("missing required argument 'GatewayArn'")
	}
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	if args == nil || args.TargetName == nil {
		return nil, errors.New("missing required argument 'TargetName'")
	}
	if args == nil || args.VolumeSizeInBytes == nil {
		return nil, errors.New("missing required argument 'VolumeSizeInBytes'")
	}
	if args == nil {
		args = &CachesIscsiVolumeArgs{}
	}
	var resource CachesIscsiVolume
	err := ctx.RegisterResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachesIscsiVolume gets an existing CachesIscsiVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachesIscsiVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachesIscsiVolumeState, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	var resource CachesIscsiVolume
	err := ctx.ReadResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachesIscsiVolume resources.
type cachesIscsiVolumeState struct {
	Arn                  *string           `pulumi:"arn"`
	ChapEnabled          *bool             `pulumi:"chapEnabled"`
	GatewayArn           *string           `pulumi:"gatewayArn"`
	LunNumber            *int              `pulumi:"lunNumber"`
	NetworkInterfaceId   *string           `pulumi:"networkInterfaceId"`
	NetworkInterfacePort *int              `pulumi:"networkInterfacePort"`
	SnapshotId           *string           `pulumi:"snapshotId"`
	SourceVolumeArn      *string           `pulumi:"sourceVolumeArn"`
	Tags                 map[string]string `pulumi:"tags"`
	TargetArn            *string           `pulumi:"targetArn"`
	TargetName           *string           `pulumi:"targetName"`
	VolumeArn            *string           `pulumi:"volumeArn"`
	VolumeId             *string           `pulumi:"volumeId"`
	VolumeSizeInBytes    *int              `pulumi:"volumeSizeInBytes"`
}

type CachesIscsiVolumeState struct {
	Arn                  pulumi.StringPtrInput
	ChapEnabled          pulumi.BoolPtrInput
	GatewayArn           pulumi.StringPtrInput
	LunNumber            pulumi.IntPtrInput
	NetworkInterfaceId   pulumi.StringPtrInput
	NetworkInterfacePort pulumi.IntPtrInput
	SnapshotId           pulumi.StringPtrInput
	SourceVolumeArn      pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TargetArn            pulumi.StringPtrInput
	TargetName           pulumi.StringPtrInput
	VolumeArn            pulumi.StringPtrInput
	VolumeId             pulumi.StringPtrInput
	VolumeSizeInBytes    pulumi.IntPtrInput
}

func (CachesIscsiVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeState)(nil)).Elem()
}

type cachesIscsiVolumeArgs struct {
	GatewayArn         string            `pulumi:"gatewayArn"`
	NetworkInterfaceId string            `pulumi:"networkInterfaceId"`
	SnapshotId         *string           `pulumi:"snapshotId"`
	SourceVolumeArn    *string           `pulumi:"sourceVolumeArn"`
	Tags               map[string]string `pulumi:"tags"`
	TargetName         string            `pulumi:"targetName"`
	VolumeSizeInBytes  int               `pulumi:"volumeSizeInBytes"`
}

// The set of arguments for constructing a CachesIscsiVolume resource.
type CachesIscsiVolumeArgs struct {
	GatewayArn         pulumi.StringInput
	NetworkInterfaceId pulumi.StringInput
	SnapshotId         pulumi.StringPtrInput
	SourceVolumeArn    pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TargetName         pulumi.StringInput
	VolumeSizeInBytes  pulumi.IntInput
}

func (CachesIscsiVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeArgs)(nil)).Elem()
}
