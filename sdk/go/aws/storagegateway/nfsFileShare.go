// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NfsFileShare struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput                       `pulumi:"arn"`
	ClientLists          pulumi.StringArrayOutput                  `pulumi:"clientLists"`
	DefaultStorageClass  pulumi.StringPtrOutput                    `pulumi:"defaultStorageClass"`
	FileshareId          pulumi.StringOutput                       `pulumi:"fileshareId"`
	GatewayArn           pulumi.StringOutput                       `pulumi:"gatewayArn"`
	GuessMimeTypeEnabled pulumi.BoolPtrOutput                      `pulumi:"guessMimeTypeEnabled"`
	KmsEncrypted         pulumi.BoolPtrOutput                      `pulumi:"kmsEncrypted"`
	KmsKeyArn            pulumi.StringPtrOutput                    `pulumi:"kmsKeyArn"`
	LocationArn          pulumi.StringOutput                       `pulumi:"locationArn"`
	NfsFileShareDefaults NfsFileShareNfsFileShareDefaultsPtrOutput `pulumi:"nfsFileShareDefaults"`
	ObjectAcl            pulumi.StringPtrOutput                    `pulumi:"objectAcl"`
	Path                 pulumi.StringOutput                       `pulumi:"path"`
	ReadOnly             pulumi.BoolPtrOutput                      `pulumi:"readOnly"`
	RequesterPays        pulumi.BoolPtrOutput                      `pulumi:"requesterPays"`
	RoleArn              pulumi.StringOutput                       `pulumi:"roleArn"`
	Squash               pulumi.StringPtrOutput                    `pulumi:"squash"`
	Tags                 pulumi.StringMapOutput                    `pulumi:"tags"`
}

// NewNfsFileShare registers a new resource with the given unique name, arguments, and options.
func NewNfsFileShare(ctx *pulumi.Context,
	name string, args *NfsFileShareArgs, opts ...pulumi.ResourceOption) (*NfsFileShare, error) {
	if args == nil || args.ClientLists == nil {
		return nil, errors.New("missing required argument 'ClientLists'")
	}
	if args == nil || args.GatewayArn == nil {
		return nil, errors.New("missing required argument 'GatewayArn'")
	}
	if args == nil || args.LocationArn == nil {
		return nil, errors.New("missing required argument 'LocationArn'")
	}
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	if args == nil {
		args = &NfsFileShareArgs{}
	}
	var resource NfsFileShare
	err := ctx.RegisterResource("aws:storagegateway/nfsFileShare:NfsFileShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNfsFileShare gets an existing NfsFileShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsFileShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NfsFileShareState, opts ...pulumi.ResourceOption) (*NfsFileShare, error) {
	var resource NfsFileShare
	err := ctx.ReadResource("aws:storagegateway/nfsFileShare:NfsFileShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NfsFileShare resources.
type nfsFileShareState struct {
	Arn                  *string                           `pulumi:"arn"`
	ClientLists          []string                          `pulumi:"clientLists"`
	DefaultStorageClass  *string                           `pulumi:"defaultStorageClass"`
	FileshareId          *string                           `pulumi:"fileshareId"`
	GatewayArn           *string                           `pulumi:"gatewayArn"`
	GuessMimeTypeEnabled *bool                             `pulumi:"guessMimeTypeEnabled"`
	KmsEncrypted         *bool                             `pulumi:"kmsEncrypted"`
	KmsKeyArn            *string                           `pulumi:"kmsKeyArn"`
	LocationArn          *string                           `pulumi:"locationArn"`
	NfsFileShareDefaults *NfsFileShareNfsFileShareDefaults `pulumi:"nfsFileShareDefaults"`
	ObjectAcl            *string                           `pulumi:"objectAcl"`
	Path                 *string                           `pulumi:"path"`
	ReadOnly             *bool                             `pulumi:"readOnly"`
	RequesterPays        *bool                             `pulumi:"requesterPays"`
	RoleArn              *string                           `pulumi:"roleArn"`
	Squash               *string                           `pulumi:"squash"`
	Tags                 map[string]string                 `pulumi:"tags"`
}

type NfsFileShareState struct {
	Arn                  pulumi.StringPtrInput
	ClientLists          pulumi.StringArrayInput
	DefaultStorageClass  pulumi.StringPtrInput
	FileshareId          pulumi.StringPtrInput
	GatewayArn           pulumi.StringPtrInput
	GuessMimeTypeEnabled pulumi.BoolPtrInput
	KmsEncrypted         pulumi.BoolPtrInput
	KmsKeyArn            pulumi.StringPtrInput
	LocationArn          pulumi.StringPtrInput
	NfsFileShareDefaults NfsFileShareNfsFileShareDefaultsPtrInput
	ObjectAcl            pulumi.StringPtrInput
	Path                 pulumi.StringPtrInput
	ReadOnly             pulumi.BoolPtrInput
	RequesterPays        pulumi.BoolPtrInput
	RoleArn              pulumi.StringPtrInput
	Squash               pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (NfsFileShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsFileShareState)(nil)).Elem()
}

type nfsFileShareArgs struct {
	ClientLists          []string                          `pulumi:"clientLists"`
	DefaultStorageClass  *string                           `pulumi:"defaultStorageClass"`
	GatewayArn           string                            `pulumi:"gatewayArn"`
	GuessMimeTypeEnabled *bool                             `pulumi:"guessMimeTypeEnabled"`
	KmsEncrypted         *bool                             `pulumi:"kmsEncrypted"`
	KmsKeyArn            *string                           `pulumi:"kmsKeyArn"`
	LocationArn          string                            `pulumi:"locationArn"`
	NfsFileShareDefaults *NfsFileShareNfsFileShareDefaults `pulumi:"nfsFileShareDefaults"`
	ObjectAcl            *string                           `pulumi:"objectAcl"`
	ReadOnly             *bool                             `pulumi:"readOnly"`
	RequesterPays        *bool                             `pulumi:"requesterPays"`
	RoleArn              string                            `pulumi:"roleArn"`
	Squash               *string                           `pulumi:"squash"`
	Tags                 map[string]string                 `pulumi:"tags"`
}

// The set of arguments for constructing a NfsFileShare resource.
type NfsFileShareArgs struct {
	ClientLists          pulumi.StringArrayInput
	DefaultStorageClass  pulumi.StringPtrInput
	GatewayArn           pulumi.StringInput
	GuessMimeTypeEnabled pulumi.BoolPtrInput
	KmsEncrypted         pulumi.BoolPtrInput
	KmsKeyArn            pulumi.StringPtrInput
	LocationArn          pulumi.StringInput
	NfsFileShareDefaults NfsFileShareNfsFileShareDefaultsPtrInput
	ObjectAcl            pulumi.StringPtrInput
	ReadOnly             pulumi.BoolPtrInput
	RequesterPays        pulumi.BoolPtrInput
	RoleArn              pulumi.StringInput
	Squash               pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (NfsFileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsFileShareArgs)(nil)).Elem()
}
