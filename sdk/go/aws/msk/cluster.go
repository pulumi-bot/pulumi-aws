// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                  `pulumi:"arn"`
	BootstrapBrokers       pulumi.StringOutput                  `pulumi:"bootstrapBrokers"`
	BootstrapBrokersTls    pulumi.StringOutput                  `pulumi:"bootstrapBrokersTls"`
	BrokerNodeGroupInfo    ClusterBrokerNodeGroupInfoOutput     `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication   ClusterClientAuthenticationPtrOutput `pulumi:"clientAuthentication"`
	ClusterName            pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationInfo      ClusterConfigurationInfoPtrOutput    `pulumi:"configurationInfo"`
	CurrentVersion         pulumi.StringOutput                  `pulumi:"currentVersion"`
	EncryptionInfo         ClusterEncryptionInfoPtrOutput       `pulumi:"encryptionInfo"`
	EnhancedMonitoring     pulumi.StringPtrOutput               `pulumi:"enhancedMonitoring"`
	KafkaVersion           pulumi.StringOutput                  `pulumi:"kafkaVersion"`
	LoggingInfo            ClusterLoggingInfoPtrOutput          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes    pulumi.IntOutput                     `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring         ClusterOpenMonitoringPtrOutput       `pulumi:"openMonitoring"`
	Tags                   pulumi.StringMapOutput               `pulumi:"tags"`
	ZookeeperConnectString pulumi.StringOutput                  `pulumi:"zookeeperConnectString"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("missing required argument 'BrokerNodeGroupInfo'")
	}
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.KafkaVersion == nil {
		return nil, errors.New("missing required argument 'KafkaVersion'")
	}
	if args == nil || args.NumberOfBrokerNodes == nil {
		return nil, errors.New("missing required argument 'NumberOfBrokerNodes'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:msk/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:msk/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                    *string                      `pulumi:"arn"`
	BootstrapBrokers       *string                      `pulumi:"bootstrapBrokers"`
	BootstrapBrokersTls    *string                      `pulumi:"bootstrapBrokersTls"`
	BrokerNodeGroupInfo    *ClusterBrokerNodeGroupInfo  `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication   *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName            *string                      `pulumi:"clusterName"`
	ConfigurationInfo      *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	CurrentVersion         *string                      `pulumi:"currentVersion"`
	EncryptionInfo         *ClusterEncryptionInfo       `pulumi:"encryptionInfo"`
	EnhancedMonitoring     *string                      `pulumi:"enhancedMonitoring"`
	KafkaVersion           *string                      `pulumi:"kafkaVersion"`
	LoggingInfo            *ClusterLoggingInfo          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes    *int                         `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring         *ClusterOpenMonitoring       `pulumi:"openMonitoring"`
	Tags                   map[string]string            `pulumi:"tags"`
	ZookeeperConnectString *string                      `pulumi:"zookeeperConnectString"`
}

type ClusterState struct {
	Arn                    pulumi.StringPtrInput
	BootstrapBrokers       pulumi.StringPtrInput
	BootstrapBrokersTls    pulumi.StringPtrInput
	BrokerNodeGroupInfo    ClusterBrokerNodeGroupInfoPtrInput
	ClientAuthentication   ClusterClientAuthenticationPtrInput
	ClusterName            pulumi.StringPtrInput
	ConfigurationInfo      ClusterConfigurationInfoPtrInput
	CurrentVersion         pulumi.StringPtrInput
	EncryptionInfo         ClusterEncryptionInfoPtrInput
	EnhancedMonitoring     pulumi.StringPtrInput
	KafkaVersion           pulumi.StringPtrInput
	LoggingInfo            ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes    pulumi.IntPtrInput
	OpenMonitoring         ClusterOpenMonitoringPtrInput
	Tags                   pulumi.StringMapInput
	ZookeeperConnectString pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfo   `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName          string                       `pulumi:"clusterName"`
	ConfigurationInfo    *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	EncryptionInfo       *ClusterEncryptionInfo       `pulumi:"encryptionInfo"`
	EnhancedMonitoring   *string                      `pulumi:"enhancedMonitoring"`
	KafkaVersion         string                       `pulumi:"kafkaVersion"`
	LoggingInfo          *ClusterLoggingInfo          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes  int                          `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring       *ClusterOpenMonitoring       `pulumi:"openMonitoring"`
	Tags                 map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoInput
	ClientAuthentication ClusterClientAuthenticationPtrInput
	ClusterName          pulumi.StringInput
	ConfigurationInfo    ClusterConfigurationInfoPtrInput
	EncryptionInfo       ClusterEncryptionInfoPtrInput
	EnhancedMonitoring   pulumi.StringPtrInput
	KafkaVersion         pulumi.StringInput
	LoggingInfo          ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes  pulumi.IntInput
	OpenMonitoring       ClusterOpenMonitoringPtrInput
	Tags                 pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
