// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on an Amazon MSK Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/msk"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := msk.LookupCluster(ctx, &msk.LookupClusterArgs{
// 			ClusterName: "example",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("aws:msk/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// Map of key-value pairs assigned to the cluster.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	Arn string `pulumi:"arn"`
	// A comma separated list of one or more hostname:port pairs of Kafka brokers suitable to boostrap connectivity to the Kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `PLAINTEXT` or `TLS_PLAINTEXT`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
	BootstrapBrokers string `pulumi:"bootstrapBrokers"`
	// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity using SASL/SCRAM to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS` and `clientAuthentication` is set to `sasl`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
	BootstrapBrokersSaslScram string `pulumi:"bootstrapBrokersSaslScram"`
	// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
	BootstrapBrokersTls string `pulumi:"bootstrapBrokersTls"`
	ClusterName         string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Apache Kafka version.
	KafkaVersion string `pulumi:"kafkaVersion"`
	// Number of broker nodes in the cluster.
	NumberOfBrokerNodes int `pulumi:"numberOfBrokerNodes"`
	// Map of key-value pairs assigned to the cluster.
	Tags map[string]string `pulumi:"tags"`
	// A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
	ZookeeperConnectString string `pulumi:"zookeeperConnectString"`
}

func LookupClusterApply(ctx *pulumi.Context, args LookupClusterApplyInput, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return args.ToLookupClusterApplyOutput().ApplyT(func(v LookupClusterArgs) (LookupClusterResult, error) {
		r, err := LookupCluster(ctx, &v, opts...)
		return *r, err

	}).(LookupClusterResultOutput)
}

// LookupClusterApplyInput is an input type that accepts LookupClusterApplyArgs and LookupClusterApplyOutput values.
// You can construct a concrete instance of `LookupClusterApplyInput` via:
//
//          LookupClusterApplyArgs{...}
type LookupClusterApplyInput interface {
	pulumi.Input

	ToLookupClusterApplyOutput() LookupClusterApplyOutput
	ToLookupClusterApplyOutputWithContext(context.Context) LookupClusterApplyOutput
}

// A collection of arguments for invoking getCluster.
type LookupClusterApplyArgs struct {
	// Name of the cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Map of key-value pairs assigned to the cluster.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupClusterApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

func (i LookupClusterApplyArgs) ToLookupClusterApplyOutput() LookupClusterApplyOutput {
	return i.ToLookupClusterApplyOutputWithContext(context.Background())
}

func (i LookupClusterApplyArgs) ToLookupClusterApplyOutputWithContext(ctx context.Context) LookupClusterApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupClusterApplyOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterApplyOutput struct{ *pulumi.OutputState }

func (LookupClusterApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

func (o LookupClusterApplyOutput) ToLookupClusterApplyOutput() LookupClusterApplyOutput {
	return o
}

func (o LookupClusterApplyOutput) ToLookupClusterApplyOutputWithContext(ctx context.Context) LookupClusterApplyOutput {
	return o
}

// Name of the cluster.
func (o LookupClusterApplyOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterArgs) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Map of key-value pairs assigned to the cluster.
func (o LookupClusterApplyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// Amazon Resource Name (ARN) of the MSK cluster.
func (o LookupClusterResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Arn }).(pulumi.StringOutput)
}

// A comma separated list of one or more hostname:port pairs of Kafka brokers suitable to boostrap connectivity to the Kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `PLAINTEXT` or `TLS_PLAINTEXT`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
func (o LookupClusterResultOutput) BootstrapBrokers() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokers }).(pulumi.StringOutput)
}

// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity using SASL/SCRAM to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS` and `clientAuthentication` is set to `sasl`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
func (o LookupClusterResultOutput) BootstrapBrokersSaslScram() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersSaslScram }).(pulumi.StringOutput)
}

// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS`. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
func (o LookupClusterResultOutput) BootstrapBrokersTls() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersTls }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Apache Kafka version.
func (o LookupClusterResultOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.KafkaVersion }).(pulumi.StringOutput)
}

// Number of broker nodes in the cluster.
func (o LookupClusterResultOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

// Map of key-value pairs assigned to the cluster.
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
func (o LookupClusterResultOutput) ZookeeperConnectString() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ZookeeperConnectString }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterApplyOutput{})
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
