// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RateBasedRulePredicate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RateBasedRulePredicate struct {
	// A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
	DataId string `pulumi:"dataId"`
	// Set this to `false` if you want to allow, block, or count requests
	// based on the settings in the specified `ByteMatchSet`, `IPSet`, `SqlInjectionMatchSet`, `XssMatchSet`, or `SizeConstraintSet`.
	// For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
	// If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses _except_ `192.0.2.44`.
	Negated bool `pulumi:"negated"`
	// The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
	Type string `pulumi:"type"`
}

type RateBasedRulePredicateInput interface {
	pulumi.Input

	ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput
	ToRateBasedRulePredicateOutputWithContext(context.Context) RateBasedRulePredicateOutput
}

type RateBasedRulePredicateArgs struct {
	// A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
	DataId pulumi.StringInput `pulumi:"dataId"`
	// Set this to `false` if you want to allow, block, or count requests
	// based on the settings in the specified `ByteMatchSet`, `IPSet`, `SqlInjectionMatchSet`, `XssMatchSet`, or `SizeConstraintSet`.
	// For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
	// If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses _except_ `192.0.2.44`.
	Negated pulumi.BoolInput `pulumi:"negated"`
	// The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RateBasedRulePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateBasedRulePredicate)(nil)).Elem()
}

func (i RateBasedRulePredicateArgs) ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput {
	return i.ToRateBasedRulePredicateOutputWithContext(context.Background())
}

func (i RateBasedRulePredicateArgs) ToRateBasedRulePredicateOutputWithContext(ctx context.Context) RateBasedRulePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateBasedRulePredicateOutput)
}

type RateBasedRulePredicateArrayInput interface {
	pulumi.Input

	ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput
	ToRateBasedRulePredicateArrayOutputWithContext(context.Context) RateBasedRulePredicateArrayOutput
}

type RateBasedRulePredicateArray []RateBasedRulePredicateInput

func (RateBasedRulePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RateBasedRulePredicate)(nil)).Elem()
}

func (i RateBasedRulePredicateArray) ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput {
	return i.ToRateBasedRulePredicateArrayOutputWithContext(context.Background())
}

func (i RateBasedRulePredicateArray) ToRateBasedRulePredicateArrayOutputWithContext(ctx context.Context) RateBasedRulePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateBasedRulePredicateArrayOutput)
}

type RateBasedRulePredicateOutput struct { *pulumi.OutputState }

func (RateBasedRulePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateBasedRulePredicate)(nil)).Elem()
}

func (o RateBasedRulePredicateOutput) ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput {
	return o
}

func (o RateBasedRulePredicateOutput) ToRateBasedRulePredicateOutputWithContext(ctx context.Context) RateBasedRulePredicateOutput {
	return o
}

// A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
func (o RateBasedRulePredicateOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func (v RateBasedRulePredicate) string { return v.DataId }).(pulumi.StringOutput)
}

// Set this to `false` if you want to allow, block, or count requests
// based on the settings in the specified `ByteMatchSet`, `IPSet`, `SqlInjectionMatchSet`, `XssMatchSet`, or `SizeConstraintSet`.
// For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
// If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses _except_ `192.0.2.44`.
func (o RateBasedRulePredicateOutput) Negated() pulumi.BoolOutput {
	return o.ApplyT(func (v RateBasedRulePredicate) bool { return v.Negated }).(pulumi.BoolOutput)
}

// The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
func (o RateBasedRulePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v RateBasedRulePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type RateBasedRulePredicateArrayOutput struct { *pulumi.OutputState}

func (RateBasedRulePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RateBasedRulePredicate)(nil)).Elem()
}

func (o RateBasedRulePredicateArrayOutput) ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput {
	return o
}

func (o RateBasedRulePredicateArrayOutput) ToRateBasedRulePredicateArrayOutputWithContext(ctx context.Context) RateBasedRulePredicateArrayOutput {
	return o
}

func (o RateBasedRulePredicateArrayOutput) Index(i pulumi.IntInput) RateBasedRulePredicateOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RateBasedRulePredicate {
		return vs[0].([]RateBasedRulePredicate)[vs[1].(int)]
	}).(RateBasedRulePredicateOutput)
}

func init() {
	pulumi.RegisterOutputType(RateBasedRulePredicateOutput{})
	pulumi.RegisterOutputType(RateBasedRulePredicateArrayOutput{})
}
