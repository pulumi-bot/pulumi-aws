// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RuleGroup struct {
	pulumi.CustomResourceState

	ActivatedRules RuleGroupActivatedRuleArrayOutput `pulumi:"activatedRules"`
	Arn            pulumi.StringOutput               `pulumi:"arn"`
	MetricName     pulumi.StringOutput               `pulumi:"metricName"`
	Name           pulumi.StringOutput               `pulumi:"name"`
	Tags           pulumi.StringMapOutput            `pulumi:"tags"`
}

// NewRuleGroup registers a new resource with the given unique name, arguments, and options.
func NewRuleGroup(ctx *pulumi.Context,
	name string, args *RuleGroupArgs, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	if args == nil {
		args = &RuleGroupArgs{}
	}
	var resource RuleGroup
	err := ctx.RegisterResource("aws:waf/ruleGroup:RuleGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleGroup gets an existing RuleGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleGroupState, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	var resource RuleGroup
	err := ctx.ReadResource("aws:waf/ruleGroup:RuleGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleGroup resources.
type ruleGroupState struct {
	ActivatedRules []RuleGroupActivatedRule `pulumi:"activatedRules"`
	Arn            *string                  `pulumi:"arn"`
	MetricName     *string                  `pulumi:"metricName"`
	Name           *string                  `pulumi:"name"`
	Tags           map[string]string        `pulumi:"tags"`
}

type RuleGroupState struct {
	ActivatedRules RuleGroupActivatedRuleArrayInput
	Arn            pulumi.StringPtrInput
	MetricName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (RuleGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupState)(nil)).Elem()
}

type ruleGroupArgs struct {
	ActivatedRules []RuleGroupActivatedRule `pulumi:"activatedRules"`
	MetricName     string                   `pulumi:"metricName"`
	Name           *string                  `pulumi:"name"`
	Tags           map[string]string        `pulumi:"tags"`
}

// The set of arguments for constructing a RuleGroup resource.
type RuleGroupArgs struct {
	ActivatedRules RuleGroupActivatedRuleArrayInput
	MetricName     pulumi.StringInput
	Name           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (RuleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupArgs)(nil)).Elem()
}
