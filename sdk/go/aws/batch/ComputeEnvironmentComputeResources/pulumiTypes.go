// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ComputeEnvironmentComputeResources

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/batch/ComputeEnvironmentComputeResourcesLaunchTemplate"
)

type ComputeEnvironmentComputeResources struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
	BidPercentage *int `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment.
	DesiredVcpus *int `pulumi:"desiredVcpus"`
	// The EC2 key pair that is used for instances launched in the compute environment.
	Ec2KeyPair *string `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
	ImageId *string `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
	InstanceRole string `pulumi:"instanceRole"`
	// A list of instance types that may be launched.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below.
	LaunchTemplate *batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplate `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus int `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain.
	MinVcpus int `pulumi:"minVcpus"`
	// A list of EC2 security group that are associated with instances launched in the compute environment.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
	SpotIamFleetRole *string `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets []string `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment.
	Tags map[string]interface{} `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2` or `SPOT`.
	Type string `pulumi:"type"`
}

type ComputeEnvironmentComputeResourcesInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput
	ToComputeEnvironmentComputeResourcesOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesOutput
}

type ComputeEnvironmentComputeResourcesArgs struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
	AllocationStrategy pulumi.StringPtrInput `pulumi:"allocationStrategy"`
	// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
	BidPercentage pulumi.IntPtrInput `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment.
	DesiredVcpus pulumi.IntPtrInput `pulumi:"desiredVcpus"`
	// The EC2 key pair that is used for instances launched in the compute environment.
	Ec2KeyPair pulumi.StringPtrInput `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
	InstanceRole pulumi.StringInput `pulumi:"instanceRole"`
	// A list of instance types that may be launched.
	InstanceTypes pulumi.StringArrayInput `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below.
	LaunchTemplate batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus pulumi.IntInput `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain.
	MinVcpus pulumi.IntInput `pulumi:"minVcpus"`
	// A list of EC2 security group that are associated with instances launched in the compute environment.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
	SpotIamFleetRole pulumi.StringPtrInput `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2` or `SPOT`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComputeEnvironmentComputeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return i.ToComputeEnvironmentComputeResourcesOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput)
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput).ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx)
}

type ComputeEnvironmentComputeResourcesPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput
	ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesPtrOutput
}

type computeEnvironmentComputeResourcesPtrType ComputeEnvironmentComputeResourcesArgs

func ComputeEnvironmentComputeResourcesPtr(v *ComputeEnvironmentComputeResourcesArgs) ComputeEnvironmentComputeResourcesPtrInput {	return (*computeEnvironmentComputeResourcesPtrType)(v)
}

func (*computeEnvironmentComputeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesPtrOutput)
}

type ComputeEnvironmentComputeResourcesOutput struct { *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResources {
		return &v
	}).(ComputeEnvironmentComputeResourcesPtrOutput)
}
// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
func (o ComputeEnvironmentComputeResourcesOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
func (o ComputeEnvironmentComputeResourcesOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *int { return v.BidPercentage }).(pulumi.IntPtrOutput)
}

// The desired number of EC2 vCPUS in the compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) DesiredVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *int { return v.DesiredVcpus }).(pulumi.IntPtrOutput)
}

// The EC2 key pair that is used for instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.Ec2KeyPair }).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceRole() pulumi.StringOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) string { return v.InstanceRole }).(pulumi.StringOutput)
}

// A list of instance types that may be launched.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. See details below.
func (o ComputeEnvironmentComputeResourcesOutput) LaunchTemplate() batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplate { return v.LaunchTemplate }).(batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

// The maximum number of EC2 vCPUs that an environment can reach.
func (o ComputeEnvironmentComputeResourcesOutput) MaxVcpus() pulumi.IntOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) int { return v.MaxVcpus }).(pulumi.IntOutput)
}

// The minimum number of EC2 vCPUs that an environment should maintain.
func (o ComputeEnvironmentComputeResourcesOutput) MinVcpus() pulumi.IntOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) int { return v.MinVcpus }).(pulumi.IntOutput)
}

// A list of EC2 security group that are associated with instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
func (o ComputeEnvironmentComputeResourcesOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.SpotIamFleetRole }).(pulumi.StringPtrOutput)
}

// A list of VPC subnets into which the compute resources are launched.
func (o ComputeEnvironmentComputeResourcesOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// Key-value pair tags to be applied to resources that are launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The type of compute environment. Valid items are `EC2` or `SPOT`.
func (o ComputeEnvironmentComputeResourcesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) string { return v.Type }).(pulumi.StringOutput)
}

type ComputeEnvironmentComputeResourcesPtrOutput struct { *pulumi.OutputState}

func (ComputeEnvironmentComputeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) Elem() ComputeEnvironmentComputeResourcesOutput {
	return o.ApplyT(func (v *ComputeEnvironmentComputeResources) ComputeEnvironmentComputeResources { return *v }).(ComputeEnvironmentComputeResourcesOutput)
}

// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
func (o ComputeEnvironmentComputeResourcesPtrOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
func (o ComputeEnvironmentComputeResourcesPtrOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *int { return v.BidPercentage }).(pulumi.IntPtrOutput)
}

// The desired number of EC2 vCPUS in the compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) DesiredVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *int { return v.DesiredVcpus }).(pulumi.IntPtrOutput)
}

// The EC2 key pair that is used for instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.Ec2KeyPair }).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceRole() pulumi.StringOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) string { return v.InstanceRole }).(pulumi.StringOutput)
}

// A list of instance types that may be launched.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. See details below.
func (o ComputeEnvironmentComputeResourcesPtrOutput) LaunchTemplate() batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplate { return v.LaunchTemplate }).(batchComputeEnvironmentComputeResourcesLaunchTemplate.ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

// The maximum number of EC2 vCPUs that an environment can reach.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MaxVcpus() pulumi.IntOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) int { return v.MaxVcpus }).(pulumi.IntOutput)
}

// The minimum number of EC2 vCPUs that an environment should maintain.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MinVcpus() pulumi.IntOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) int { return v.MinVcpus }).(pulumi.IntOutput)
}

// A list of EC2 security group that are associated with instances launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
func (o ComputeEnvironmentComputeResourcesPtrOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) *string { return v.SpotIamFleetRole }).(pulumi.StringPtrOutput)
}

// A list of VPC subnets into which the compute resources are launched.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// Key-value pair tags to be applied to resources that are launched in the compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The type of compute environment. Valid items are `EC2` or `SPOT`.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ComputeEnvironmentComputeResources) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesPtrOutput{})
}
