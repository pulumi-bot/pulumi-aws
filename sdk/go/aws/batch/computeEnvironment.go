// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeEnvironment struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput                         `pulumi:"arn"`
	ComputeEnvironmentName       pulumi.StringOutput                         `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix pulumi.StringPtrOutput                      `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             ComputeEnvironmentComputeResourcesPtrOutput `pulumi:"computeResources"`
	EcsClusterArn                pulumi.StringOutput                         `pulumi:"ecsClusterArn"`
	ServiceRole                  pulumi.StringOutput                         `pulumi:"serviceRole"`
	State                        pulumi.StringPtrOutput                      `pulumi:"state"`
	Status                       pulumi.StringOutput                         `pulumi:"status"`
	StatusReason                 pulumi.StringOutput                         `pulumi:"statusReason"`
	Type                         pulumi.StringOutput                         `pulumi:"type"`
}

// NewComputeEnvironment registers a new resource with the given unique name, arguments, and options.
func NewComputeEnvironment(ctx *pulumi.Context,
	name string, args *ComputeEnvironmentArgs, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	if args == nil || args.ServiceRole == nil {
		return nil, errors.New("missing required argument 'ServiceRole'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ComputeEnvironmentArgs{}
	}
	var resource ComputeEnvironment
	err := ctx.RegisterResource("aws:batch/computeEnvironment:ComputeEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeEnvironment gets an existing ComputeEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeEnvironmentState, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	var resource ComputeEnvironment
	err := ctx.ReadResource("aws:batch/computeEnvironment:ComputeEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeEnvironment resources.
type computeEnvironmentState struct {
	Arn                          *string                             `pulumi:"arn"`
	ComputeEnvironmentName       *string                             `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix *string                             `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	EcsClusterArn                *string                             `pulumi:"ecsClusterArn"`
	ServiceRole                  *string                             `pulumi:"serviceRole"`
	State                        *string                             `pulumi:"state"`
	Status                       *string                             `pulumi:"status"`
	StatusReason                 *string                             `pulumi:"statusReason"`
	Type                         *string                             `pulumi:"type"`
}

type ComputeEnvironmentState struct {
	Arn                          pulumi.StringPtrInput
	ComputeEnvironmentName       pulumi.StringPtrInput
	ComputeEnvironmentNamePrefix pulumi.StringPtrInput
	ComputeResources             ComputeEnvironmentComputeResourcesPtrInput
	EcsClusterArn                pulumi.StringPtrInput
	ServiceRole                  pulumi.StringPtrInput
	State                        pulumi.StringPtrInput
	Status                       pulumi.StringPtrInput
	StatusReason                 pulumi.StringPtrInput
	Type                         pulumi.StringPtrInput
}

func (ComputeEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentState)(nil)).Elem()
}

type computeEnvironmentArgs struct {
	ComputeEnvironmentName       *string                             `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix *string                             `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	ServiceRole                  string                              `pulumi:"serviceRole"`
	State                        *string                             `pulumi:"state"`
	Type                         string                              `pulumi:"type"`
}

// The set of arguments for constructing a ComputeEnvironment resource.
type ComputeEnvironmentArgs struct {
	ComputeEnvironmentName       pulumi.StringPtrInput
	ComputeEnvironmentNamePrefix pulumi.StringPtrInput
	ComputeResources             ComputeEnvironmentComputeResourcesPtrInput
	ServiceRole                  pulumi.StringInput
	State                        pulumi.StringPtrInput
	Type                         pulumi.StringInput
}

func (ComputeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentArgs)(nil)).Elem()
}
