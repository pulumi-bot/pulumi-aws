// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput    `pulumi:"arn"`
	AwsAccountId pulumi.StringOutput    `pulumi:"awsAccountId"`
	Email        pulumi.StringOutput    `pulumi:"email"`
	IamArn       pulumi.StringPtrOutput `pulumi:"iamArn"`
	IdentityType pulumi.StringOutput    `pulumi:"identityType"`
	Namespace    pulumi.StringPtrOutput `pulumi:"namespace"`
	SessionName  pulumi.StringPtrOutput `pulumi:"sessionName"`
	UserName     pulumi.StringPtrOutput `pulumi:"userName"`
	UserRole     pulumi.StringOutput    `pulumi:"userRole"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.IdentityType == nil {
		return nil, errors.New("missing required argument 'IdentityType'")
	}
	if args == nil || args.UserRole == nil {
		return nil, errors.New("missing required argument 'UserRole'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("aws:quicksight/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:quicksight/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Arn          *string `pulumi:"arn"`
	AwsAccountId *string `pulumi:"awsAccountId"`
	Email        *string `pulumi:"email"`
	IamArn       *string `pulumi:"iamArn"`
	IdentityType *string `pulumi:"identityType"`
	Namespace    *string `pulumi:"namespace"`
	SessionName  *string `pulumi:"sessionName"`
	UserName     *string `pulumi:"userName"`
	UserRole     *string `pulumi:"userRole"`
}

type UserState struct {
	Arn          pulumi.StringPtrInput
	AwsAccountId pulumi.StringPtrInput
	Email        pulumi.StringPtrInput
	IamArn       pulumi.StringPtrInput
	IdentityType pulumi.StringPtrInput
	Namespace    pulumi.StringPtrInput
	SessionName  pulumi.StringPtrInput
	UserName     pulumi.StringPtrInput
	UserRole     pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	Email        string  `pulumi:"email"`
	IamArn       *string `pulumi:"iamArn"`
	IdentityType string  `pulumi:"identityType"`
	Namespace    *string `pulumi:"namespace"`
	SessionName  *string `pulumi:"sessionName"`
	UserName     *string `pulumi:"userName"`
	UserRole     string  `pulumi:"userRole"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	AwsAccountId pulumi.StringPtrInput
	Email        pulumi.StringInput
	IamArn       pulumi.StringPtrInput
	IdentityType pulumi.StringInput
	Namespace    pulumi.StringPtrInput
	SessionName  pulumi.StringPtrInput
	UserName     pulumi.StringPtrInput
	UserRole     pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}
