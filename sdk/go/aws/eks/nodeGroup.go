// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NodeGroup struct {
	pulumi.CustomResourceState

	AmiType            pulumi.StringOutput            `pulumi:"amiType"`
	Arn                pulumi.StringOutput            `pulumi:"arn"`
	ClusterName        pulumi.StringOutput            `pulumi:"clusterName"`
	DiskSize           pulumi.IntOutput               `pulumi:"diskSize"`
	ForceUpdateVersion pulumi.BoolPtrOutput           `pulumi:"forceUpdateVersion"`
	InstanceTypes      pulumi.StringOutput            `pulumi:"instanceTypes"`
	Labels             pulumi.StringMapOutput         `pulumi:"labels"`
	NodeGroupName      pulumi.StringOutput            `pulumi:"nodeGroupName"`
	NodeRoleArn        pulumi.StringOutput            `pulumi:"nodeRoleArn"`
	ReleaseVersion     pulumi.StringOutput            `pulumi:"releaseVersion"`
	RemoteAccess       NodeGroupRemoteAccessPtrOutput `pulumi:"remoteAccess"`
	Resources          NodeGroupResourceArrayOutput   `pulumi:"resources"`
	ScalingConfig      NodeGroupScalingConfigOutput   `pulumi:"scalingConfig"`
	Status             pulumi.StringOutput            `pulumi:"status"`
	SubnetIds          pulumi.StringArrayOutput       `pulumi:"subnetIds"`
	Tags               pulumi.StringMapOutput         `pulumi:"tags"`
	Version            pulumi.StringOutput            `pulumi:"version"`
}

// NewNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewNodeGroup(ctx *pulumi.Context,
	name string, args *NodeGroupArgs, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.NodeRoleArn == nil {
		return nil, errors.New("missing required argument 'NodeRoleArn'")
	}
	if args == nil || args.ScalingConfig == nil {
		return nil, errors.New("missing required argument 'ScalingConfig'")
	}
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	if args == nil {
		args = &NodeGroupArgs{}
	}
	var resource NodeGroup
	err := ctx.RegisterResource("aws:eks/nodeGroup:NodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeGroup gets an existing NodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeGroupState, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	var resource NodeGroup
	err := ctx.ReadResource("aws:eks/nodeGroup:NodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeGroup resources.
type nodeGroupState struct {
	AmiType            *string                 `pulumi:"amiType"`
	Arn                *string                 `pulumi:"arn"`
	ClusterName        *string                 `pulumi:"clusterName"`
	DiskSize           *int                    `pulumi:"diskSize"`
	ForceUpdateVersion *bool                   `pulumi:"forceUpdateVersion"`
	InstanceTypes      *string                 `pulumi:"instanceTypes"`
	Labels             map[string]string       `pulumi:"labels"`
	NodeGroupName      *string                 `pulumi:"nodeGroupName"`
	NodeRoleArn        *string                 `pulumi:"nodeRoleArn"`
	ReleaseVersion     *string                 `pulumi:"releaseVersion"`
	RemoteAccess       *NodeGroupRemoteAccess  `pulumi:"remoteAccess"`
	Resources          []NodeGroupResource     `pulumi:"resources"`
	ScalingConfig      *NodeGroupScalingConfig `pulumi:"scalingConfig"`
	Status             *string                 `pulumi:"status"`
	SubnetIds          []string                `pulumi:"subnetIds"`
	Tags               map[string]string       `pulumi:"tags"`
	Version            *string                 `pulumi:"version"`
}

type NodeGroupState struct {
	AmiType            pulumi.StringPtrInput
	Arn                pulumi.StringPtrInput
	ClusterName        pulumi.StringPtrInput
	DiskSize           pulumi.IntPtrInput
	ForceUpdateVersion pulumi.BoolPtrInput
	InstanceTypes      pulumi.StringPtrInput
	Labels             pulumi.StringMapInput
	NodeGroupName      pulumi.StringPtrInput
	NodeRoleArn        pulumi.StringPtrInput
	ReleaseVersion     pulumi.StringPtrInput
	RemoteAccess       NodeGroupRemoteAccessPtrInput
	Resources          NodeGroupResourceArrayInput
	ScalingConfig      NodeGroupScalingConfigPtrInput
	Status             pulumi.StringPtrInput
	SubnetIds          pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	Version            pulumi.StringPtrInput
}

func (NodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupState)(nil)).Elem()
}

type nodeGroupArgs struct {
	AmiType            *string                `pulumi:"amiType"`
	ClusterName        string                 `pulumi:"clusterName"`
	DiskSize           *int                   `pulumi:"diskSize"`
	ForceUpdateVersion *bool                  `pulumi:"forceUpdateVersion"`
	InstanceTypes      *string                `pulumi:"instanceTypes"`
	Labels             map[string]string      `pulumi:"labels"`
	NodeGroupName      *string                `pulumi:"nodeGroupName"`
	NodeRoleArn        string                 `pulumi:"nodeRoleArn"`
	ReleaseVersion     *string                `pulumi:"releaseVersion"`
	RemoteAccess       *NodeGroupRemoteAccess `pulumi:"remoteAccess"`
	ScalingConfig      NodeGroupScalingConfig `pulumi:"scalingConfig"`
	SubnetIds          []string               `pulumi:"subnetIds"`
	Tags               map[string]string      `pulumi:"tags"`
	Version            *string                `pulumi:"version"`
}

// The set of arguments for constructing a NodeGroup resource.
type NodeGroupArgs struct {
	AmiType            pulumi.StringPtrInput
	ClusterName        pulumi.StringInput
	DiskSize           pulumi.IntPtrInput
	ForceUpdateVersion pulumi.BoolPtrInput
	InstanceTypes      pulumi.StringPtrInput
	Labels             pulumi.StringMapInput
	NodeGroupName      pulumi.StringPtrInput
	NodeRoleArn        pulumi.StringInput
	ReleaseVersion     pulumi.StringPtrInput
	RemoteAccess       NodeGroupRemoteAccessPtrInput
	ScalingConfig      NodeGroupScalingConfigInput
	SubnetIds          pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	Version            pulumi.StringPtrInput
}

func (NodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupArgs)(nil)).Elem()
}
