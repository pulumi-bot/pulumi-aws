// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClusterCertificateAuthority struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data string `pulumi:"data"`
}

type ClusterCertificateAuthorityInput interface {
	pulumi.Input

	ToClusterCertificateAuthorityOutput() ClusterCertificateAuthorityOutput
	ToClusterCertificateAuthorityOutputWithContext(context.Context) ClusterCertificateAuthorityOutput
}

type ClusterCertificateAuthorityArgs struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data pulumi.StringInput `pulumi:"data"`
}

func (ClusterCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthority)(nil)).Elem()
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityOutput() ClusterCertificateAuthorityOutput {
	return i.ToClusterCertificateAuthorityOutputWithContext(context.Background())
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityOutputWithContext(ctx context.Context) ClusterCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateAuthorityOutput)
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityPtrOutput() ClusterCertificateAuthorityPtrOutput {
	return i.ToClusterCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityPtrOutputWithContext(ctx context.Context) ClusterCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateAuthorityOutput).ToClusterCertificateAuthorityPtrOutputWithContext(ctx)
}

type ClusterCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToClusterCertificateAuthorityPtrOutput() ClusterCertificateAuthorityPtrOutput
	ToClusterCertificateAuthorityPtrOutputWithContext(context.Context) ClusterCertificateAuthorityPtrOutput
}

type clusterCertificateAuthorityPtrType ClusterCertificateAuthorityArgs

func ClusterCertificateAuthorityPtr(v *ClusterCertificateAuthorityArgs) ClusterCertificateAuthorityPtrInput {
	return (*clusterCertificateAuthorityPtrType)(v)
}

func (*clusterCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateAuthority)(nil)).Elem()
}

func (i *clusterCertificateAuthorityPtrType) ToClusterCertificateAuthorityPtrOutput() ClusterCertificateAuthorityPtrOutput {
	return i.ToClusterCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *clusterCertificateAuthorityPtrType) ToClusterCertificateAuthorityPtrOutputWithContext(ctx context.Context) ClusterCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateAuthorityPtrOutput)
}

type ClusterCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ClusterCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthority)(nil)).Elem()
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityOutput() ClusterCertificateAuthorityOutput {
	return o
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityOutputWithContext(ctx context.Context) ClusterCertificateAuthorityOutput {
	return o
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityPtrOutput() ClusterCertificateAuthorityPtrOutput {
	return o.ToClusterCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityPtrOutputWithContext(ctx context.Context) ClusterCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v ClusterCertificateAuthority) *ClusterCertificateAuthority {
		return &v
	}).(ClusterCertificateAuthorityPtrOutput)
}

// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o ClusterCertificateAuthorityOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateAuthority) string { return v.Data }).(pulumi.StringOutput)
}

type ClusterCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ClusterCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateAuthority)(nil)).Elem()
}

func (o ClusterCertificateAuthorityPtrOutput) ToClusterCertificateAuthorityPtrOutput() ClusterCertificateAuthorityPtrOutput {
	return o
}

func (o ClusterCertificateAuthorityPtrOutput) ToClusterCertificateAuthorityPtrOutputWithContext(ctx context.Context) ClusterCertificateAuthorityPtrOutput {
	return o
}

func (o ClusterCertificateAuthorityPtrOutput) Elem() ClusterCertificateAuthorityOutput {
	return o.ApplyT(func(v *ClusterCertificateAuthority) ClusterCertificateAuthority { return *v }).(ClusterCertificateAuthorityOutput)
}

// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o ClusterCertificateAuthorityPtrOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateAuthority) string { return v.Data }).(pulumi.StringOutput)
}

type ClusterCertificateAuthorityState struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data *string `pulumi:"data"`
}

type ClusterCertificateAuthorityStateInput interface {
	pulumi.Input

	ToClusterCertificateAuthorityStateOutput() ClusterCertificateAuthorityStateOutput
	ToClusterCertificateAuthorityStateOutputWithContext(context.Context) ClusterCertificateAuthorityStateOutput
}

type ClusterCertificateAuthorityStateArgs struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data pulumi.StringPtrInput `pulumi:"data"`
}

func (ClusterCertificateAuthorityStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthorityState)(nil)).Elem()
}

func (i ClusterCertificateAuthorityStateArgs) ToClusterCertificateAuthorityStateOutput() ClusterCertificateAuthorityStateOutput {
	return i.ToClusterCertificateAuthorityStateOutputWithContext(context.Background())
}

func (i ClusterCertificateAuthorityStateArgs) ToClusterCertificateAuthorityStateOutputWithContext(ctx context.Context) ClusterCertificateAuthorityStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateAuthorityStateOutput)
}

type ClusterCertificateAuthorityStateOutput struct{ *pulumi.OutputState }

func (ClusterCertificateAuthorityStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthorityState)(nil)).Elem()
}

func (o ClusterCertificateAuthorityStateOutput) ToClusterCertificateAuthorityStateOutput() ClusterCertificateAuthorityStateOutput {
	return o
}

func (o ClusterCertificateAuthorityStateOutput) ToClusterCertificateAuthorityStateOutputWithContext(ctx context.Context) ClusterCertificateAuthorityStateOutput {
	return o
}

// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o ClusterCertificateAuthorityStateOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateAuthorityState) *string { return v.Data }).(pulumi.StringPtrOutput)
}

type ClusterEncryptionConfig struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigProvider `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources []string `pulumi:"resources"`
}

type ClusterEncryptionConfigInput interface {
	pulumi.Input

	ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput
	ToClusterEncryptionConfigOutputWithContext(context.Context) ClusterEncryptionConfigOutput
}

type ClusterEncryptionConfigArgs struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigProviderInput `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (ClusterEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return i.ToClusterEncryptionConfigOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput)
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return i.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput).ToClusterEncryptionConfigPtrOutputWithContext(ctx)
}

type ClusterEncryptionConfigPtrInput interface {
	pulumi.Input

	ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput
	ToClusterEncryptionConfigPtrOutputWithContext(context.Context) ClusterEncryptionConfigPtrOutput
}

type clusterEncryptionConfigPtrType ClusterEncryptionConfigArgs

func ClusterEncryptionConfigPtr(v *ClusterEncryptionConfigArgs) ClusterEncryptionConfigPtrInput {
	return (*clusterEncryptionConfigPtrType)(v)
}

func (*clusterEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfig)(nil)).Elem()
}

func (i *clusterEncryptionConfigPtrType) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return i.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionConfigPtrType) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigPtrOutput)
}

type ClusterEncryptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return o.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) *ClusterEncryptionConfig {
		return &v
	}).(ClusterEncryptionConfigPtrOutput)
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigOutput) Provider() ClusterEncryptionConfigProviderOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) ClusterEncryptionConfigProvider { return v.Provider }).(ClusterEncryptionConfigProviderOutput)
}

// List of strings with resources to be encrypted. Valid values: `secrets`
func (o ClusterEncryptionConfigOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigPtrOutput) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return o
}

func (o ClusterEncryptionConfigPtrOutput) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return o
}

func (o ClusterEncryptionConfigPtrOutput) Elem() ClusterEncryptionConfigOutput {
	return o.ApplyT(func(v *ClusterEncryptionConfig) ClusterEncryptionConfig { return *v }).(ClusterEncryptionConfigOutput)
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigPtrOutput) Provider() ClusterEncryptionConfigProviderOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) ClusterEncryptionConfigProvider { return v.Provider }).(ClusterEncryptionConfigProviderOutput)
}

// List of strings with resources to be encrypted. Valid values: `secrets`
func (o ClusterEncryptionConfigPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigArgs struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigProviderArgs `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources []string `pulumi:"resources"`
}

type ClusterEncryptionConfigArgsInput interface {
	pulumi.Input

	ToClusterEncryptionConfigArgsOutput() ClusterEncryptionConfigArgsOutput
	ToClusterEncryptionConfigArgsOutputWithContext(context.Context) ClusterEncryptionConfigArgsOutput
}

type ClusterEncryptionConfigArgsArgs struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigProviderArgsInput `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (ClusterEncryptionConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigArgs)(nil)).Elem()
}

func (i ClusterEncryptionConfigArgsArgs) ToClusterEncryptionConfigArgsOutput() ClusterEncryptionConfigArgsOutput {
	return i.ToClusterEncryptionConfigArgsOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgsArgs) ToClusterEncryptionConfigArgsOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigArgsOutput)
}

func (i ClusterEncryptionConfigArgsArgs) ToClusterEncryptionConfigArgsPtrOutput() ClusterEncryptionConfigArgsPtrOutput {
	return i.ToClusterEncryptionConfigArgsPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgsArgs) ToClusterEncryptionConfigArgsPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigArgsOutput).ToClusterEncryptionConfigArgsPtrOutputWithContext(ctx)
}

type ClusterEncryptionConfigArgsPtrInput interface {
	pulumi.Input

	ToClusterEncryptionConfigArgsPtrOutput() ClusterEncryptionConfigArgsPtrOutput
	ToClusterEncryptionConfigArgsPtrOutputWithContext(context.Context) ClusterEncryptionConfigArgsPtrOutput
}

type clusterEncryptionConfigArgsPtrType ClusterEncryptionConfigArgsArgs

func ClusterEncryptionConfigArgsPtr(v *ClusterEncryptionConfigArgsArgs) ClusterEncryptionConfigArgsPtrInput {
	return (*clusterEncryptionConfigArgsPtrType)(v)
}

func (*clusterEncryptionConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfigArgs)(nil)).Elem()
}

func (i *clusterEncryptionConfigArgsPtrType) ToClusterEncryptionConfigArgsPtrOutput() ClusterEncryptionConfigArgsPtrOutput {
	return i.ToClusterEncryptionConfigArgsPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionConfigArgsPtrType) ToClusterEncryptionConfigArgsPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigArgsPtrOutput)
}

type ClusterEncryptionConfigArgsOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigArgs)(nil)).Elem()
}

func (o ClusterEncryptionConfigArgsOutput) ToClusterEncryptionConfigArgsOutput() ClusterEncryptionConfigArgsOutput {
	return o
}

func (o ClusterEncryptionConfigArgsOutput) ToClusterEncryptionConfigArgsOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsOutput {
	return o
}

func (o ClusterEncryptionConfigArgsOutput) ToClusterEncryptionConfigArgsPtrOutput() ClusterEncryptionConfigArgsPtrOutput {
	return o.ToClusterEncryptionConfigArgsPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionConfigArgsOutput) ToClusterEncryptionConfigArgsPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigArgs) *ClusterEncryptionConfigArgs {
		return &v
	}).(ClusterEncryptionConfigArgsPtrOutput)
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigArgsOutput) Provider() ClusterEncryptionConfigProviderArgsOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigArgs) ClusterEncryptionConfigProviderArgs { return v.Provider }).(ClusterEncryptionConfigProviderArgsOutput)
}

// List of strings with resources to be encrypted. Valid values: `secrets`
func (o ClusterEncryptionConfigArgsOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigArgs) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfigArgs)(nil)).Elem()
}

func (o ClusterEncryptionConfigArgsPtrOutput) ToClusterEncryptionConfigArgsPtrOutput() ClusterEncryptionConfigArgsPtrOutput {
	return o
}

func (o ClusterEncryptionConfigArgsPtrOutput) ToClusterEncryptionConfigArgsPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigArgsPtrOutput {
	return o
}

func (o ClusterEncryptionConfigArgsPtrOutput) Elem() ClusterEncryptionConfigArgsOutput {
	return o.ApplyT(func(v *ClusterEncryptionConfigArgs) ClusterEncryptionConfigArgs { return *v }).(ClusterEncryptionConfigArgsOutput)
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigArgsPtrOutput) Provider() ClusterEncryptionConfigProviderArgsOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigArgs) ClusterEncryptionConfigProviderArgs { return v.Provider }).(ClusterEncryptionConfigProviderArgsOutput)
}

// List of strings with resources to be encrypted. Valid values: `secrets`
func (o ClusterEncryptionConfigArgsPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigArgs) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigProvider struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn string `pulumi:"keyArn"`
}

type ClusterEncryptionConfigProviderInput interface {
	pulumi.Input

	ToClusterEncryptionConfigProviderOutput() ClusterEncryptionConfigProviderOutput
	ToClusterEncryptionConfigProviderOutputWithContext(context.Context) ClusterEncryptionConfigProviderOutput
}

type ClusterEncryptionConfigProviderArgs struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn pulumi.StringInput `pulumi:"keyArn"`
}

func (ClusterEncryptionConfigProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProvider)(nil)).Elem()
}

func (i ClusterEncryptionConfigProviderArgs) ToClusterEncryptionConfigProviderOutput() ClusterEncryptionConfigProviderOutput {
	return i.ToClusterEncryptionConfigProviderOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigProviderArgs) ToClusterEncryptionConfigProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigProviderOutput)
}

type ClusterEncryptionConfigProviderOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProvider)(nil)).Elem()
}

func (o ClusterEncryptionConfigProviderOutput) ToClusterEncryptionConfigProviderOutput() ClusterEncryptionConfigProviderOutput {
	return o
}

func (o ClusterEncryptionConfigProviderOutput) ToClusterEncryptionConfigProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderOutput {
	return o
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
func (o ClusterEncryptionConfigProviderOutput) KeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigProvider) string { return v.KeyArn }).(pulumi.StringOutput)
}

type ClusterEncryptionConfigProviderArgs struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn string `pulumi:"keyArn"`
}

type ClusterEncryptionConfigProviderArgsInput interface {
	pulumi.Input

	ToClusterEncryptionConfigProviderArgsOutput() ClusterEncryptionConfigProviderArgsOutput
	ToClusterEncryptionConfigProviderArgsOutputWithContext(context.Context) ClusterEncryptionConfigProviderArgsOutput
}

type ClusterEncryptionConfigProviderArgsArgs struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn pulumi.StringInput `pulumi:"keyArn"`
}

func (ClusterEncryptionConfigProviderArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProviderArgs)(nil)).Elem()
}

func (i ClusterEncryptionConfigProviderArgsArgs) ToClusterEncryptionConfigProviderArgsOutput() ClusterEncryptionConfigProviderArgsOutput {
	return i.ToClusterEncryptionConfigProviderArgsOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigProviderArgsArgs) ToClusterEncryptionConfigProviderArgsOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigProviderArgsOutput)
}

type ClusterEncryptionConfigProviderArgsOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigProviderArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProviderArgs)(nil)).Elem()
}

func (o ClusterEncryptionConfigProviderArgsOutput) ToClusterEncryptionConfigProviderArgsOutput() ClusterEncryptionConfigProviderArgsOutput {
	return o
}

func (o ClusterEncryptionConfigProviderArgsOutput) ToClusterEncryptionConfigProviderArgsOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderArgsOutput {
	return o
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
func (o ClusterEncryptionConfigProviderArgsOutput) KeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigProviderArgs) string { return v.KeyArn }).(pulumi.StringOutput)
}

type ClusterEncryptionConfigState struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigStateProvider `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources []string `pulumi:"resources"`
}

type ClusterEncryptionConfigStateInput interface {
	pulumi.Input

	ToClusterEncryptionConfigStateOutput() ClusterEncryptionConfigStateOutput
	ToClusterEncryptionConfigStateOutputWithContext(context.Context) ClusterEncryptionConfigStateOutput
}

type ClusterEncryptionConfigStateArgs struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigStateProviderInput `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (ClusterEncryptionConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigState)(nil)).Elem()
}

func (i ClusterEncryptionConfigStateArgs) ToClusterEncryptionConfigStateOutput() ClusterEncryptionConfigStateOutput {
	return i.ToClusterEncryptionConfigStateOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigStateArgs) ToClusterEncryptionConfigStateOutputWithContext(ctx context.Context) ClusterEncryptionConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigStateOutput)
}

type ClusterEncryptionConfigStateOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigState)(nil)).Elem()
}

func (o ClusterEncryptionConfigStateOutput) ToClusterEncryptionConfigStateOutput() ClusterEncryptionConfigStateOutput {
	return o
}

func (o ClusterEncryptionConfigStateOutput) ToClusterEncryptionConfigStateOutputWithContext(ctx context.Context) ClusterEncryptionConfigStateOutput {
	return o
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigStateOutput) Provider() ClusterEncryptionConfigStateProviderOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigState) ClusterEncryptionConfigStateProvider { return v.Provider }).(ClusterEncryptionConfigStateProviderOutput)
}

// List of strings with resources to be encrypted. Valid values: `secrets`
func (o ClusterEncryptionConfigStateOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigState) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigStateProvider struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn string `pulumi:"keyArn"`
}

type ClusterEncryptionConfigStateProviderInput interface {
	pulumi.Input

	ToClusterEncryptionConfigStateProviderOutput() ClusterEncryptionConfigStateProviderOutput
	ToClusterEncryptionConfigStateProviderOutputWithContext(context.Context) ClusterEncryptionConfigStateProviderOutput
}

type ClusterEncryptionConfigStateProviderArgs struct {
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn pulumi.StringInput `pulumi:"keyArn"`
}

func (ClusterEncryptionConfigStateProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigStateProvider)(nil)).Elem()
}

func (i ClusterEncryptionConfigStateProviderArgs) ToClusterEncryptionConfigStateProviderOutput() ClusterEncryptionConfigStateProviderOutput {
	return i.ToClusterEncryptionConfigStateProviderOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigStateProviderArgs) ToClusterEncryptionConfigStateProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigStateProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigStateProviderOutput)
}

type ClusterEncryptionConfigStateProviderOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigStateProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigStateProvider)(nil)).Elem()
}

func (o ClusterEncryptionConfigStateProviderOutput) ToClusterEncryptionConfigStateProviderOutput() ClusterEncryptionConfigStateProviderOutput {
	return o
}

func (o ClusterEncryptionConfigStateProviderOutput) ToClusterEncryptionConfigStateProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigStateProviderOutput {
	return o
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
func (o ClusterEncryptionConfigStateProviderOutput) KeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionConfigStateProvider) string { return v.KeyArn }).(pulumi.StringOutput)
}

type ClusterIdentity struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs []ClusterIdentityOidc `pulumi:"oidcs"`
}

type ClusterIdentityInput interface {
	pulumi.Input

	ToClusterIdentityOutput() ClusterIdentityOutput
	ToClusterIdentityOutputWithContext(context.Context) ClusterIdentityOutput
}

type ClusterIdentityArgs struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs ClusterIdentityOidcArrayInput `pulumi:"oidcs"`
}

func (ClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (i ClusterIdentityArgs) ToClusterIdentityOutput() ClusterIdentityOutput {
	return i.ToClusterIdentityOutputWithContext(context.Background())
}

func (i ClusterIdentityArgs) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOutput)
}

type ClusterIdentityArrayInput interface {
	pulumi.Input

	ToClusterIdentityArrayOutput() ClusterIdentityArrayOutput
	ToClusterIdentityArrayOutputWithContext(context.Context) ClusterIdentityArrayOutput
}

type ClusterIdentityArray []ClusterIdentityInput

func (ClusterIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentity)(nil)).Elem()
}

func (i ClusterIdentityArray) ToClusterIdentityArrayOutput() ClusterIdentityArrayOutput {
	return i.ToClusterIdentityArrayOutputWithContext(context.Background())
}

func (i ClusterIdentityArray) ToClusterIdentityArrayOutputWithContext(ctx context.Context) ClusterIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityArrayOutput)
}

type ClusterIdentityOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (o ClusterIdentityOutput) ToClusterIdentityOutput() ClusterIdentityOutput {
	return o
}

func (o ClusterIdentityOutput) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return o
}

// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
func (o ClusterIdentityOutput) Oidcs() ClusterIdentityOidcArrayOutput {
	return o.ApplyT(func(v ClusterIdentity) []ClusterIdentityOidc { return v.Oidcs }).(ClusterIdentityOidcArrayOutput)
}

type ClusterIdentityArrayOutput struct{ *pulumi.OutputState }

func (ClusterIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentity)(nil)).Elem()
}

func (o ClusterIdentityArrayOutput) ToClusterIdentityArrayOutput() ClusterIdentityArrayOutput {
	return o
}

func (o ClusterIdentityArrayOutput) ToClusterIdentityArrayOutputWithContext(ctx context.Context) ClusterIdentityArrayOutput {
	return o
}

func (o ClusterIdentityArrayOutput) Index(i pulumi.IntInput) ClusterIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterIdentity {
		return vs[0].([]ClusterIdentity)[vs[1].(int)]
	}).(ClusterIdentityOutput)
}

type ClusterIdentityOidc struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer string `pulumi:"issuer"`
}

type ClusterIdentityOidcInput interface {
	pulumi.Input

	ToClusterIdentityOidcOutput() ClusterIdentityOidcOutput
	ToClusterIdentityOidcOutputWithContext(context.Context) ClusterIdentityOidcOutput
}

type ClusterIdentityOidcArgs struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer pulumi.StringInput `pulumi:"issuer"`
}

func (ClusterIdentityOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityOidc)(nil)).Elem()
}

func (i ClusterIdentityOidcArgs) ToClusterIdentityOidcOutput() ClusterIdentityOidcOutput {
	return i.ToClusterIdentityOidcOutputWithContext(context.Background())
}

func (i ClusterIdentityOidcArgs) ToClusterIdentityOidcOutputWithContext(ctx context.Context) ClusterIdentityOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOidcOutput)
}

type ClusterIdentityOidcArrayInput interface {
	pulumi.Input

	ToClusterIdentityOidcArrayOutput() ClusterIdentityOidcArrayOutput
	ToClusterIdentityOidcArrayOutputWithContext(context.Context) ClusterIdentityOidcArrayOutput
}

type ClusterIdentityOidcArray []ClusterIdentityOidcInput

func (ClusterIdentityOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityOidc)(nil)).Elem()
}

func (i ClusterIdentityOidcArray) ToClusterIdentityOidcArrayOutput() ClusterIdentityOidcArrayOutput {
	return i.ToClusterIdentityOidcArrayOutputWithContext(context.Background())
}

func (i ClusterIdentityOidcArray) ToClusterIdentityOidcArrayOutputWithContext(ctx context.Context) ClusterIdentityOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOidcArrayOutput)
}

type ClusterIdentityOidcOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityOidc)(nil)).Elem()
}

func (o ClusterIdentityOidcOutput) ToClusterIdentityOidcOutput() ClusterIdentityOidcOutput {
	return o
}

func (o ClusterIdentityOidcOutput) ToClusterIdentityOidcOutputWithContext(ctx context.Context) ClusterIdentityOidcOutput {
	return o
}

// Issuer URL for the OpenID Connect identity provider.
func (o ClusterIdentityOidcOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterIdentityOidc) string { return v.Issuer }).(pulumi.StringOutput)
}

type ClusterIdentityOidcArrayOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityOidc)(nil)).Elem()
}

func (o ClusterIdentityOidcArrayOutput) ToClusterIdentityOidcArrayOutput() ClusterIdentityOidcArrayOutput {
	return o
}

func (o ClusterIdentityOidcArrayOutput) ToClusterIdentityOidcArrayOutputWithContext(ctx context.Context) ClusterIdentityOidcArrayOutput {
	return o
}

func (o ClusterIdentityOidcArrayOutput) Index(i pulumi.IntInput) ClusterIdentityOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterIdentityOidc {
		return vs[0].([]ClusterIdentityOidc)[vs[1].(int)]
	}).(ClusterIdentityOidcOutput)
}

type ClusterIdentityState struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs []ClusterIdentityStateOidc `pulumi:"oidcs"`
}

type ClusterIdentityStateInput interface {
	pulumi.Input

	ToClusterIdentityStateOutput() ClusterIdentityStateOutput
	ToClusterIdentityStateOutputWithContext(context.Context) ClusterIdentityStateOutput
}

type ClusterIdentityStateArgs struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs ClusterIdentityStateOidcArrayInput `pulumi:"oidcs"`
}

func (ClusterIdentityStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityState)(nil)).Elem()
}

func (i ClusterIdentityStateArgs) ToClusterIdentityStateOutput() ClusterIdentityStateOutput {
	return i.ToClusterIdentityStateOutputWithContext(context.Background())
}

func (i ClusterIdentityStateArgs) ToClusterIdentityStateOutputWithContext(ctx context.Context) ClusterIdentityStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityStateOutput)
}

type ClusterIdentityStateArrayInput interface {
	pulumi.Input

	ToClusterIdentityStateArrayOutput() ClusterIdentityStateArrayOutput
	ToClusterIdentityStateArrayOutputWithContext(context.Context) ClusterIdentityStateArrayOutput
}

type ClusterIdentityStateArray []ClusterIdentityStateInput

func (ClusterIdentityStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityState)(nil)).Elem()
}

func (i ClusterIdentityStateArray) ToClusterIdentityStateArrayOutput() ClusterIdentityStateArrayOutput {
	return i.ToClusterIdentityStateArrayOutputWithContext(context.Background())
}

func (i ClusterIdentityStateArray) ToClusterIdentityStateArrayOutputWithContext(ctx context.Context) ClusterIdentityStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityStateArrayOutput)
}

type ClusterIdentityStateOutput struct{ *pulumi.OutputState }

func (ClusterIdentityStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityState)(nil)).Elem()
}

func (o ClusterIdentityStateOutput) ToClusterIdentityStateOutput() ClusterIdentityStateOutput {
	return o
}

func (o ClusterIdentityStateOutput) ToClusterIdentityStateOutputWithContext(ctx context.Context) ClusterIdentityStateOutput {
	return o
}

// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
func (o ClusterIdentityStateOutput) Oidcs() ClusterIdentityStateOidcArrayOutput {
	return o.ApplyT(func(v ClusterIdentityState) []ClusterIdentityStateOidc { return v.Oidcs }).(ClusterIdentityStateOidcArrayOutput)
}

type ClusterIdentityStateArrayOutput struct{ *pulumi.OutputState }

func (ClusterIdentityStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityState)(nil)).Elem()
}

func (o ClusterIdentityStateArrayOutput) ToClusterIdentityStateArrayOutput() ClusterIdentityStateArrayOutput {
	return o
}

func (o ClusterIdentityStateArrayOutput) ToClusterIdentityStateArrayOutputWithContext(ctx context.Context) ClusterIdentityStateArrayOutput {
	return o
}

func (o ClusterIdentityStateArrayOutput) Index(i pulumi.IntInput) ClusterIdentityStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterIdentityState {
		return vs[0].([]ClusterIdentityState)[vs[1].(int)]
	}).(ClusterIdentityStateOutput)
}

type ClusterIdentityStateOidc struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer *string `pulumi:"issuer"`
}

type ClusterIdentityStateOidcInput interface {
	pulumi.Input

	ToClusterIdentityStateOidcOutput() ClusterIdentityStateOidcOutput
	ToClusterIdentityStateOidcOutputWithContext(context.Context) ClusterIdentityStateOidcOutput
}

type ClusterIdentityStateOidcArgs struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
}

func (ClusterIdentityStateOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityStateOidc)(nil)).Elem()
}

func (i ClusterIdentityStateOidcArgs) ToClusterIdentityStateOidcOutput() ClusterIdentityStateOidcOutput {
	return i.ToClusterIdentityStateOidcOutputWithContext(context.Background())
}

func (i ClusterIdentityStateOidcArgs) ToClusterIdentityStateOidcOutputWithContext(ctx context.Context) ClusterIdentityStateOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityStateOidcOutput)
}

type ClusterIdentityStateOidcArrayInput interface {
	pulumi.Input

	ToClusterIdentityStateOidcArrayOutput() ClusterIdentityStateOidcArrayOutput
	ToClusterIdentityStateOidcArrayOutputWithContext(context.Context) ClusterIdentityStateOidcArrayOutput
}

type ClusterIdentityStateOidcArray []ClusterIdentityStateOidcInput

func (ClusterIdentityStateOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityStateOidc)(nil)).Elem()
}

func (i ClusterIdentityStateOidcArray) ToClusterIdentityStateOidcArrayOutput() ClusterIdentityStateOidcArrayOutput {
	return i.ToClusterIdentityStateOidcArrayOutputWithContext(context.Background())
}

func (i ClusterIdentityStateOidcArray) ToClusterIdentityStateOidcArrayOutputWithContext(ctx context.Context) ClusterIdentityStateOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityStateOidcArrayOutput)
}

type ClusterIdentityStateOidcOutput struct{ *pulumi.OutputState }

func (ClusterIdentityStateOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityStateOidc)(nil)).Elem()
}

func (o ClusterIdentityStateOidcOutput) ToClusterIdentityStateOidcOutput() ClusterIdentityStateOidcOutput {
	return o
}

func (o ClusterIdentityStateOidcOutput) ToClusterIdentityStateOidcOutputWithContext(ctx context.Context) ClusterIdentityStateOidcOutput {
	return o
}

// Issuer URL for the OpenID Connect identity provider.
func (o ClusterIdentityStateOidcOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterIdentityStateOidc) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

type ClusterIdentityStateOidcArrayOutput struct{ *pulumi.OutputState }

func (ClusterIdentityStateOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterIdentityStateOidc)(nil)).Elem()
}

func (o ClusterIdentityStateOidcArrayOutput) ToClusterIdentityStateOidcArrayOutput() ClusterIdentityStateOidcArrayOutput {
	return o
}

func (o ClusterIdentityStateOidcArrayOutput) ToClusterIdentityStateOidcArrayOutputWithContext(ctx context.Context) ClusterIdentityStateOidcArrayOutput {
	return o
}

func (o ClusterIdentityStateOidcArrayOutput) Index(i pulumi.IntInput) ClusterIdentityStateOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterIdentityStateOidc {
		return vs[0].([]ClusterIdentityStateOidc)[vs[1].(int)]
	}).(ClusterIdentityStateOidcOutput)
}

type ClusterVpcConfig struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId string `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess *bool `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess *bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId string `pulumi:"vpcId"`
}

type ClusterVpcConfigInput interface {
	pulumi.Input

	ToClusterVpcConfigOutput() ClusterVpcConfigOutput
	ToClusterVpcConfigOutputWithContext(context.Context) ClusterVpcConfigOutput
}

type ClusterVpcConfigArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId pulumi.StringInput `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess pulumi.BoolPtrInput `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess pulumi.BoolPtrInput `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs pulumi.StringArrayInput `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfig)(nil)).Elem()
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigOutput() ClusterVpcConfigOutput {
	return i.ToClusterVpcConfigOutputWithContext(context.Background())
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigOutputWithContext(ctx context.Context) ClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigOutput)
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigPtrOutput() ClusterVpcConfigPtrOutput {
	return i.ToClusterVpcConfigPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigPtrOutputWithContext(ctx context.Context) ClusterVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigOutput).ToClusterVpcConfigPtrOutputWithContext(ctx)
}

type ClusterVpcConfigPtrInput interface {
	pulumi.Input

	ToClusterVpcConfigPtrOutput() ClusterVpcConfigPtrOutput
	ToClusterVpcConfigPtrOutputWithContext(context.Context) ClusterVpcConfigPtrOutput
}

type clusterVpcConfigPtrType ClusterVpcConfigArgs

func ClusterVpcConfigPtr(v *ClusterVpcConfigArgs) ClusterVpcConfigPtrInput {
	return (*clusterVpcConfigPtrType)(v)
}

func (*clusterVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConfig)(nil)).Elem()
}

func (i *clusterVpcConfigPtrType) ToClusterVpcConfigPtrOutput() ClusterVpcConfigPtrOutput {
	return i.ToClusterVpcConfigPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConfigPtrType) ToClusterVpcConfigPtrOutputWithContext(ctx context.Context) ClusterVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigPtrOutput)
}

type ClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfig)(nil)).Elem()
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigOutput() ClusterVpcConfigOutput {
	return o
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigOutputWithContext(ctx context.Context) ClusterVpcConfigOutput {
	return o
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigPtrOutput() ClusterVpcConfigPtrOutput {
	return o.ToClusterVpcConfigPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigPtrOutputWithContext(ctx context.Context) ClusterVpcConfigPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfig) *ClusterVpcConfig {
		return &v
	}).(ClusterVpcConfigPtrOutput)
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o ClusterVpcConfigOutput) ClusterSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVpcConfig) string { return v.ClusterSecurityGroupId }).(pulumi.StringOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfig) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfig) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o ClusterVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConfig)(nil)).Elem()
}

func (o ClusterVpcConfigPtrOutput) ToClusterVpcConfigPtrOutput() ClusterVpcConfigPtrOutput {
	return o
}

func (o ClusterVpcConfigPtrOutput) ToClusterVpcConfigPtrOutputWithContext(ctx context.Context) ClusterVpcConfigPtrOutput {
	return o
}

func (o ClusterVpcConfigPtrOutput) Elem() ClusterVpcConfigOutput {
	return o.ApplyT(func(v *ClusterVpcConfig) ClusterVpcConfig { return *v }).(ClusterVpcConfigOutput)
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o ClusterVpcConfigPtrOutput) ClusterSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVpcConfig) string { return v.ClusterSecurityGroupId }).(pulumi.StringOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigPtrOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfig) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigPtrOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfig) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigPtrOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o ClusterVpcConfigPtrOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterVpcConfigArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId *string `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess *bool `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess *bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterVpcConfigArgsInput interface {
	pulumi.Input

	ToClusterVpcConfigArgsOutput() ClusterVpcConfigArgsOutput
	ToClusterVpcConfigArgsOutputWithContext(context.Context) ClusterVpcConfigArgsOutput
}

type ClusterVpcConfigArgsArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId pulumi.StringPtrInput `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess pulumi.BoolPtrInput `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess pulumi.BoolPtrInput `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs pulumi.StringArrayInput `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (ClusterVpcConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfigArgs)(nil)).Elem()
}

func (i ClusterVpcConfigArgsArgs) ToClusterVpcConfigArgsOutput() ClusterVpcConfigArgsOutput {
	return i.ToClusterVpcConfigArgsOutputWithContext(context.Background())
}

func (i ClusterVpcConfigArgsArgs) ToClusterVpcConfigArgsOutputWithContext(ctx context.Context) ClusterVpcConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigArgsOutput)
}

func (i ClusterVpcConfigArgsArgs) ToClusterVpcConfigArgsPtrOutput() ClusterVpcConfigArgsPtrOutput {
	return i.ToClusterVpcConfigArgsPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConfigArgsArgs) ToClusterVpcConfigArgsPtrOutputWithContext(ctx context.Context) ClusterVpcConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigArgsOutput).ToClusterVpcConfigArgsPtrOutputWithContext(ctx)
}

type ClusterVpcConfigArgsPtrInput interface {
	pulumi.Input

	ToClusterVpcConfigArgsPtrOutput() ClusterVpcConfigArgsPtrOutput
	ToClusterVpcConfigArgsPtrOutputWithContext(context.Context) ClusterVpcConfigArgsPtrOutput
}

type clusterVpcConfigArgsPtrType ClusterVpcConfigArgsArgs

func ClusterVpcConfigArgsPtr(v *ClusterVpcConfigArgsArgs) ClusterVpcConfigArgsPtrInput {
	return (*clusterVpcConfigArgsPtrType)(v)
}

func (*clusterVpcConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConfigArgs)(nil)).Elem()
}

func (i *clusterVpcConfigArgsPtrType) ToClusterVpcConfigArgsPtrOutput() ClusterVpcConfigArgsPtrOutput {
	return i.ToClusterVpcConfigArgsPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConfigArgsPtrType) ToClusterVpcConfigArgsPtrOutputWithContext(ctx context.Context) ClusterVpcConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigArgsPtrOutput)
}

type ClusterVpcConfigArgsOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfigArgs)(nil)).Elem()
}

func (o ClusterVpcConfigArgsOutput) ToClusterVpcConfigArgsOutput() ClusterVpcConfigArgsOutput {
	return o
}

func (o ClusterVpcConfigArgsOutput) ToClusterVpcConfigArgsOutputWithContext(ctx context.Context) ClusterVpcConfigArgsOutput {
	return o
}

func (o ClusterVpcConfigArgsOutput) ToClusterVpcConfigArgsPtrOutput() ClusterVpcConfigArgsPtrOutput {
	return o.ToClusterVpcConfigArgsPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConfigArgsOutput) ToClusterVpcConfigArgsPtrOutputWithContext(ctx context.Context) ClusterVpcConfigArgsPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *ClusterVpcConfigArgs {
		return &v
	}).(ClusterVpcConfigArgsPtrOutput)
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o ClusterVpcConfigArgsOutput) ClusterSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *string { return v.ClusterSecurityGroupId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigArgsOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigArgsOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigArgsOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigArgsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigArgsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o ClusterVpcConfigArgsOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ClusterVpcConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConfigArgs)(nil)).Elem()
}

func (o ClusterVpcConfigArgsPtrOutput) ToClusterVpcConfigArgsPtrOutput() ClusterVpcConfigArgsPtrOutput {
	return o
}

func (o ClusterVpcConfigArgsPtrOutput) ToClusterVpcConfigArgsPtrOutputWithContext(ctx context.Context) ClusterVpcConfigArgsPtrOutput {
	return o
}

func (o ClusterVpcConfigArgsPtrOutput) Elem() ClusterVpcConfigArgsOutput {
	return o.ApplyT(func(v *ClusterVpcConfigArgs) ClusterVpcConfigArgs { return *v }).(ClusterVpcConfigArgsOutput)
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o ClusterVpcConfigArgsPtrOutput) ClusterSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *string { return v.ClusterSecurityGroupId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigArgsPtrOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigArgsPtrOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigArgsPtrOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigArgsPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigArgsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o ClusterVpcConfigArgsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigArgs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ClusterVpcConfigState struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId *string `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess *bool `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess *bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterVpcConfigStateInput interface {
	pulumi.Input

	ToClusterVpcConfigStateOutput() ClusterVpcConfigStateOutput
	ToClusterVpcConfigStateOutputWithContext(context.Context) ClusterVpcConfigStateOutput
}

type ClusterVpcConfigStateArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId pulumi.StringPtrInput `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess pulumi.BoolPtrInput `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess pulumi.BoolPtrInput `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs pulumi.StringArrayInput `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (ClusterVpcConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfigState)(nil)).Elem()
}

func (i ClusterVpcConfigStateArgs) ToClusterVpcConfigStateOutput() ClusterVpcConfigStateOutput {
	return i.ToClusterVpcConfigStateOutputWithContext(context.Background())
}

func (i ClusterVpcConfigStateArgs) ToClusterVpcConfigStateOutputWithContext(ctx context.Context) ClusterVpcConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigStateOutput)
}

type ClusterVpcConfigStateOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfigState)(nil)).Elem()
}

func (o ClusterVpcConfigStateOutput) ToClusterVpcConfigStateOutput() ClusterVpcConfigStateOutput {
	return o
}

func (o ClusterVpcConfigStateOutput) ToClusterVpcConfigStateOutputWithContext(ctx context.Context) ClusterVpcConfigStateOutput {
	return o
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o ClusterVpcConfigStateOutput) ClusterSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) *string { return v.ClusterSecurityGroupId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigStateOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigStateOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigStateOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigStateOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigStateOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o ClusterVpcConfigStateOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVpcConfigState) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type FargateProfileSelector struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels map[string]string `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace string `pulumi:"namespace"`
}

type FargateProfileSelectorInput interface {
	pulumi.Input

	ToFargateProfileSelectorOutput() FargateProfileSelectorOutput
	ToFargateProfileSelectorOutputWithContext(context.Context) FargateProfileSelectorOutput
}

type FargateProfileSelectorArgs struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (FargateProfileSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return i.ToFargateProfileSelectorOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorOutput)
}

type FargateProfileSelectorArrayInput interface {
	pulumi.Input

	ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput
	ToFargateProfileSelectorArrayOutputWithContext(context.Context) FargateProfileSelectorArrayOutput
}

type FargateProfileSelectorArray []FargateProfileSelectorInput

func (FargateProfileSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return i.ToFargateProfileSelectorArrayOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorArrayOutput)
}

type FargateProfileSelectorOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return o
}

// Key-value mapping of Kubernetes labels for selection.
func (o FargateProfileSelectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v FargateProfileSelector) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Kubernetes namespace for selection.
func (o FargateProfileSelectorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileSelector) string { return v.Namespace }).(pulumi.StringOutput)
}

type FargateProfileSelectorArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) Index(i pulumi.IntInput) FargateProfileSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileSelector {
		return vs[0].([]FargateProfileSelector)[vs[1].(int)]
	}).(FargateProfileSelectorOutput)
}

type FargateProfileSelectorArgs struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels map[string]string `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace string `pulumi:"namespace"`
}

type FargateProfileSelectorArgsInput interface {
	pulumi.Input

	ToFargateProfileSelectorArgsOutput() FargateProfileSelectorArgsOutput
	ToFargateProfileSelectorArgsOutputWithContext(context.Context) FargateProfileSelectorArgsOutput
}

type FargateProfileSelectorArgsArgs struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (FargateProfileSelectorArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelectorArgs)(nil)).Elem()
}

func (i FargateProfileSelectorArgsArgs) ToFargateProfileSelectorArgsOutput() FargateProfileSelectorArgsOutput {
	return i.ToFargateProfileSelectorArgsOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgsArgs) ToFargateProfileSelectorArgsOutputWithContext(ctx context.Context) FargateProfileSelectorArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorArgsOutput)
}

type FargateProfileSelectorArgsArrayInput interface {
	pulumi.Input

	ToFargateProfileSelectorArgsArrayOutput() FargateProfileSelectorArgsArrayOutput
	ToFargateProfileSelectorArgsArrayOutputWithContext(context.Context) FargateProfileSelectorArgsArrayOutput
}

type FargateProfileSelectorArgsArray []FargateProfileSelectorArgsInput

func (FargateProfileSelectorArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelectorArgs)(nil)).Elem()
}

func (i FargateProfileSelectorArgsArray) ToFargateProfileSelectorArgsArrayOutput() FargateProfileSelectorArgsArrayOutput {
	return i.ToFargateProfileSelectorArgsArrayOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgsArray) ToFargateProfileSelectorArgsArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorArgsArrayOutput)
}

type FargateProfileSelectorArgsOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelectorArgs)(nil)).Elem()
}

func (o FargateProfileSelectorArgsOutput) ToFargateProfileSelectorArgsOutput() FargateProfileSelectorArgsOutput {
	return o
}

func (o FargateProfileSelectorArgsOutput) ToFargateProfileSelectorArgsOutputWithContext(ctx context.Context) FargateProfileSelectorArgsOutput {
	return o
}

// Key-value mapping of Kubernetes labels for selection.
func (o FargateProfileSelectorArgsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v FargateProfileSelectorArgs) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Kubernetes namespace for selection.
func (o FargateProfileSelectorArgsOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileSelectorArgs) string { return v.Namespace }).(pulumi.StringOutput)
}

type FargateProfileSelectorArgsArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelectorArgs)(nil)).Elem()
}

func (o FargateProfileSelectorArgsArrayOutput) ToFargateProfileSelectorArgsArrayOutput() FargateProfileSelectorArgsArrayOutput {
	return o
}

func (o FargateProfileSelectorArgsArrayOutput) ToFargateProfileSelectorArgsArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArgsArrayOutput {
	return o
}

func (o FargateProfileSelectorArgsArrayOutput) Index(i pulumi.IntInput) FargateProfileSelectorArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileSelectorArgs {
		return vs[0].([]FargateProfileSelectorArgs)[vs[1].(int)]
	}).(FargateProfileSelectorArgsOutput)
}

type FargateProfileSelectorState struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels map[string]string `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace string `pulumi:"namespace"`
}

type FargateProfileSelectorStateInput interface {
	pulumi.Input

	ToFargateProfileSelectorStateOutput() FargateProfileSelectorStateOutput
	ToFargateProfileSelectorStateOutputWithContext(context.Context) FargateProfileSelectorStateOutput
}

type FargateProfileSelectorStateArgs struct {
	// Key-value mapping of Kubernetes labels for selection.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Kubernetes namespace for selection.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (FargateProfileSelectorStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelectorState)(nil)).Elem()
}

func (i FargateProfileSelectorStateArgs) ToFargateProfileSelectorStateOutput() FargateProfileSelectorStateOutput {
	return i.ToFargateProfileSelectorStateOutputWithContext(context.Background())
}

func (i FargateProfileSelectorStateArgs) ToFargateProfileSelectorStateOutputWithContext(ctx context.Context) FargateProfileSelectorStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorStateOutput)
}

type FargateProfileSelectorStateArrayInput interface {
	pulumi.Input

	ToFargateProfileSelectorStateArrayOutput() FargateProfileSelectorStateArrayOutput
	ToFargateProfileSelectorStateArrayOutputWithContext(context.Context) FargateProfileSelectorStateArrayOutput
}

type FargateProfileSelectorStateArray []FargateProfileSelectorStateInput

func (FargateProfileSelectorStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelectorState)(nil)).Elem()
}

func (i FargateProfileSelectorStateArray) ToFargateProfileSelectorStateArrayOutput() FargateProfileSelectorStateArrayOutput {
	return i.ToFargateProfileSelectorStateArrayOutputWithContext(context.Background())
}

func (i FargateProfileSelectorStateArray) ToFargateProfileSelectorStateArrayOutputWithContext(ctx context.Context) FargateProfileSelectorStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorStateArrayOutput)
}

type FargateProfileSelectorStateOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelectorState)(nil)).Elem()
}

func (o FargateProfileSelectorStateOutput) ToFargateProfileSelectorStateOutput() FargateProfileSelectorStateOutput {
	return o
}

func (o FargateProfileSelectorStateOutput) ToFargateProfileSelectorStateOutputWithContext(ctx context.Context) FargateProfileSelectorStateOutput {
	return o
}

// Key-value mapping of Kubernetes labels for selection.
func (o FargateProfileSelectorStateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v FargateProfileSelectorState) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Kubernetes namespace for selection.
func (o FargateProfileSelectorStateOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileSelectorState) string { return v.Namespace }).(pulumi.StringOutput)
}

type FargateProfileSelectorStateArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelectorState)(nil)).Elem()
}

func (o FargateProfileSelectorStateArrayOutput) ToFargateProfileSelectorStateArrayOutput() FargateProfileSelectorStateArrayOutput {
	return o
}

func (o FargateProfileSelectorStateArrayOutput) ToFargateProfileSelectorStateArrayOutputWithContext(ctx context.Context) FargateProfileSelectorStateArrayOutput {
	return o
}

func (o FargateProfileSelectorStateArrayOutput) Index(i pulumi.IntInput) FargateProfileSelectorStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileSelectorState {
		return vs[0].([]FargateProfileSelectorState)[vs[1].(int)]
	}).(FargateProfileSelectorStateOutput)
}

type NodeGroupRemoteAccess struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey *string `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds []string `pulumi:"sourceSecurityGroupIds"`
}

type NodeGroupRemoteAccessInput interface {
	pulumi.Input

	ToNodeGroupRemoteAccessOutput() NodeGroupRemoteAccessOutput
	ToNodeGroupRemoteAccessOutputWithContext(context.Context) NodeGroupRemoteAccessOutput
}

type NodeGroupRemoteAccessArgs struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey pulumi.StringPtrInput `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds pulumi.StringArrayInput `pulumi:"sourceSecurityGroupIds"`
}

func (NodeGroupRemoteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccess)(nil)).Elem()
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessOutput() NodeGroupRemoteAccessOutput {
	return i.ToNodeGroupRemoteAccessOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessOutputWithContext(ctx context.Context) NodeGroupRemoteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessOutput)
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessPtrOutput() NodeGroupRemoteAccessPtrOutput {
	return i.ToNodeGroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessOutput).ToNodeGroupRemoteAccessPtrOutputWithContext(ctx)
}

type NodeGroupRemoteAccessPtrInput interface {
	pulumi.Input

	ToNodeGroupRemoteAccessPtrOutput() NodeGroupRemoteAccessPtrOutput
	ToNodeGroupRemoteAccessPtrOutputWithContext(context.Context) NodeGroupRemoteAccessPtrOutput
}

type nodeGroupRemoteAccessPtrType NodeGroupRemoteAccessArgs

func NodeGroupRemoteAccessPtr(v *NodeGroupRemoteAccessArgs) NodeGroupRemoteAccessPtrInput {
	return (*nodeGroupRemoteAccessPtrType)(v)
}

func (*nodeGroupRemoteAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupRemoteAccess)(nil)).Elem()
}

func (i *nodeGroupRemoteAccessPtrType) ToNodeGroupRemoteAccessPtrOutput() NodeGroupRemoteAccessPtrOutput {
	return i.ToNodeGroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (i *nodeGroupRemoteAccessPtrType) ToNodeGroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessPtrOutput)
}

type NodeGroupRemoteAccessOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccess)(nil)).Elem()
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessOutput() NodeGroupRemoteAccessOutput {
	return o
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessOutputWithContext(ctx context.Context) NodeGroupRemoteAccessOutput {
	return o
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessPtrOutput() NodeGroupRemoteAccessPtrOutput {
	return o.ToNodeGroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccess) *NodeGroupRemoteAccess {
		return &v
	}).(NodeGroupRemoteAccessPtrOutput)
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccess) *string { return v.Ec2SshKey }).(pulumi.StringPtrOutput)
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessOutput) SourceSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccess) []string { return v.SourceSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type NodeGroupRemoteAccessPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupRemoteAccess)(nil)).Elem()
}

func (o NodeGroupRemoteAccessPtrOutput) ToNodeGroupRemoteAccessPtrOutput() NodeGroupRemoteAccessPtrOutput {
	return o
}

func (o NodeGroupRemoteAccessPtrOutput) ToNodeGroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessPtrOutput {
	return o
}

func (o NodeGroupRemoteAccessPtrOutput) Elem() NodeGroupRemoteAccessOutput {
	return o.ApplyT(func(v *NodeGroupRemoteAccess) NodeGroupRemoteAccess { return *v }).(NodeGroupRemoteAccessOutput)
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessPtrOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccess) *string { return v.Ec2SshKey }).(pulumi.StringPtrOutput)
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessPtrOutput) SourceSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccess) []string { return v.SourceSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type NodeGroupRemoteAccessArgs struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey *string `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds []string `pulumi:"sourceSecurityGroupIds"`
}

type NodeGroupRemoteAccessArgsInput interface {
	pulumi.Input

	ToNodeGroupRemoteAccessArgsOutput() NodeGroupRemoteAccessArgsOutput
	ToNodeGroupRemoteAccessArgsOutputWithContext(context.Context) NodeGroupRemoteAccessArgsOutput
}

type NodeGroupRemoteAccessArgsArgs struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey pulumi.StringPtrInput `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds pulumi.StringArrayInput `pulumi:"sourceSecurityGroupIds"`
}

func (NodeGroupRemoteAccessArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccessArgs)(nil)).Elem()
}

func (i NodeGroupRemoteAccessArgsArgs) ToNodeGroupRemoteAccessArgsOutput() NodeGroupRemoteAccessArgsOutput {
	return i.ToNodeGroupRemoteAccessArgsOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessArgsArgs) ToNodeGroupRemoteAccessArgsOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessArgsOutput)
}

func (i NodeGroupRemoteAccessArgsArgs) ToNodeGroupRemoteAccessArgsPtrOutput() NodeGroupRemoteAccessArgsPtrOutput {
	return i.ToNodeGroupRemoteAccessArgsPtrOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessArgsArgs) ToNodeGroupRemoteAccessArgsPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessArgsOutput).ToNodeGroupRemoteAccessArgsPtrOutputWithContext(ctx)
}

type NodeGroupRemoteAccessArgsPtrInput interface {
	pulumi.Input

	ToNodeGroupRemoteAccessArgsPtrOutput() NodeGroupRemoteAccessArgsPtrOutput
	ToNodeGroupRemoteAccessArgsPtrOutputWithContext(context.Context) NodeGroupRemoteAccessArgsPtrOutput
}

type nodeGroupRemoteAccessArgsPtrType NodeGroupRemoteAccessArgsArgs

func NodeGroupRemoteAccessArgsPtr(v *NodeGroupRemoteAccessArgsArgs) NodeGroupRemoteAccessArgsPtrInput {
	return (*nodeGroupRemoteAccessArgsPtrType)(v)
}

func (*nodeGroupRemoteAccessArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupRemoteAccessArgs)(nil)).Elem()
}

func (i *nodeGroupRemoteAccessArgsPtrType) ToNodeGroupRemoteAccessArgsPtrOutput() NodeGroupRemoteAccessArgsPtrOutput {
	return i.ToNodeGroupRemoteAccessArgsPtrOutputWithContext(context.Background())
}

func (i *nodeGroupRemoteAccessArgsPtrType) ToNodeGroupRemoteAccessArgsPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessArgsPtrOutput)
}

type NodeGroupRemoteAccessArgsOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccessArgs)(nil)).Elem()
}

func (o NodeGroupRemoteAccessArgsOutput) ToNodeGroupRemoteAccessArgsOutput() NodeGroupRemoteAccessArgsOutput {
	return o
}

func (o NodeGroupRemoteAccessArgsOutput) ToNodeGroupRemoteAccessArgsOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsOutput {
	return o
}

func (o NodeGroupRemoteAccessArgsOutput) ToNodeGroupRemoteAccessArgsPtrOutput() NodeGroupRemoteAccessArgsPtrOutput {
	return o.ToNodeGroupRemoteAccessArgsPtrOutputWithContext(context.Background())
}

func (o NodeGroupRemoteAccessArgsOutput) ToNodeGroupRemoteAccessArgsPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessArgs) *NodeGroupRemoteAccessArgs {
		return &v
	}).(NodeGroupRemoteAccessArgsPtrOutput)
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessArgsOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessArgs) *string { return v.Ec2SshKey }).(pulumi.StringPtrOutput)
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessArgsOutput) SourceSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessArgs) []string { return v.SourceSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type NodeGroupRemoteAccessArgsPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupRemoteAccessArgs)(nil)).Elem()
}

func (o NodeGroupRemoteAccessArgsPtrOutput) ToNodeGroupRemoteAccessArgsPtrOutput() NodeGroupRemoteAccessArgsPtrOutput {
	return o
}

func (o NodeGroupRemoteAccessArgsPtrOutput) ToNodeGroupRemoteAccessArgsPtrOutputWithContext(ctx context.Context) NodeGroupRemoteAccessArgsPtrOutput {
	return o
}

func (o NodeGroupRemoteAccessArgsPtrOutput) Elem() NodeGroupRemoteAccessArgsOutput {
	return o.ApplyT(func(v *NodeGroupRemoteAccessArgs) NodeGroupRemoteAccessArgs { return *v }).(NodeGroupRemoteAccessArgsOutput)
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessArgsPtrOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessArgs) *string { return v.Ec2SshKey }).(pulumi.StringPtrOutput)
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessArgsPtrOutput) SourceSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessArgs) []string { return v.SourceSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type NodeGroupRemoteAccessState struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey *string `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds []string `pulumi:"sourceSecurityGroupIds"`
}

type NodeGroupRemoteAccessStateInput interface {
	pulumi.Input

	ToNodeGroupRemoteAccessStateOutput() NodeGroupRemoteAccessStateOutput
	ToNodeGroupRemoteAccessStateOutputWithContext(context.Context) NodeGroupRemoteAccessStateOutput
}

type NodeGroupRemoteAccessStateArgs struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	Ec2SshKey pulumi.StringPtrInput `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds pulumi.StringArrayInput `pulumi:"sourceSecurityGroupIds"`
}

func (NodeGroupRemoteAccessStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccessState)(nil)).Elem()
}

func (i NodeGroupRemoteAccessStateArgs) ToNodeGroupRemoteAccessStateOutput() NodeGroupRemoteAccessStateOutput {
	return i.ToNodeGroupRemoteAccessStateOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessStateArgs) ToNodeGroupRemoteAccessStateOutputWithContext(ctx context.Context) NodeGroupRemoteAccessStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessStateOutput)
}

type NodeGroupRemoteAccessStateOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccessState)(nil)).Elem()
}

func (o NodeGroupRemoteAccessStateOutput) ToNodeGroupRemoteAccessStateOutput() NodeGroupRemoteAccessStateOutput {
	return o
}

func (o NodeGroupRemoteAccessStateOutput) ToNodeGroupRemoteAccessStateOutputWithContext(ctx context.Context) NodeGroupRemoteAccessStateOutput {
	return o
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessStateOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessState) *string { return v.Ec2SshKey }).(pulumi.StringPtrOutput)
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessStateOutput) SourceSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeGroupRemoteAccessState) []string { return v.SourceSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type NodeGroupResource struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups []NodeGroupResourceAutoscalingGroup `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId string `pulumi:"remoteAccessSecurityGroupId"`
}

type NodeGroupResourceInput interface {
	pulumi.Input

	ToNodeGroupResourceOutput() NodeGroupResourceOutput
	ToNodeGroupResourceOutputWithContext(context.Context) NodeGroupResourceOutput
}

type NodeGroupResourceArgs struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups NodeGroupResourceAutoscalingGroupArrayInput `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId pulumi.StringInput `pulumi:"remoteAccessSecurityGroupId"`
}

func (NodeGroupResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResource)(nil)).Elem()
}

func (i NodeGroupResourceArgs) ToNodeGroupResourceOutput() NodeGroupResourceOutput {
	return i.ToNodeGroupResourceOutputWithContext(context.Background())
}

func (i NodeGroupResourceArgs) ToNodeGroupResourceOutputWithContext(ctx context.Context) NodeGroupResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceOutput)
}

type NodeGroupResourceArrayInput interface {
	pulumi.Input

	ToNodeGroupResourceArrayOutput() NodeGroupResourceArrayOutput
	ToNodeGroupResourceArrayOutputWithContext(context.Context) NodeGroupResourceArrayOutput
}

type NodeGroupResourceArray []NodeGroupResourceInput

func (NodeGroupResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResource)(nil)).Elem()
}

func (i NodeGroupResourceArray) ToNodeGroupResourceArrayOutput() NodeGroupResourceArrayOutput {
	return i.ToNodeGroupResourceArrayOutputWithContext(context.Background())
}

func (i NodeGroupResourceArray) ToNodeGroupResourceArrayOutputWithContext(ctx context.Context) NodeGroupResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceArrayOutput)
}

type NodeGroupResourceOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResource)(nil)).Elem()
}

func (o NodeGroupResourceOutput) ToNodeGroupResourceOutput() NodeGroupResourceOutput {
	return o
}

func (o NodeGroupResourceOutput) ToNodeGroupResourceOutputWithContext(ctx context.Context) NodeGroupResourceOutput {
	return o
}

// List of objects containing information about AutoScaling Groups.
func (o NodeGroupResourceOutput) AutoscalingGroups() NodeGroupResourceAutoscalingGroupArrayOutput {
	return o.ApplyT(func(v NodeGroupResource) []NodeGroupResourceAutoscalingGroup { return v.AutoscalingGroups }).(NodeGroupResourceAutoscalingGroupArrayOutput)
}

// Identifier of the remote access EC2 Security Group.
func (o NodeGroupResourceOutput) RemoteAccessSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGroupResource) string { return v.RemoteAccessSecurityGroupId }).(pulumi.StringOutput)
}

type NodeGroupResourceArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResource)(nil)).Elem()
}

func (o NodeGroupResourceArrayOutput) ToNodeGroupResourceArrayOutput() NodeGroupResourceArrayOutput {
	return o
}

func (o NodeGroupResourceArrayOutput) ToNodeGroupResourceArrayOutputWithContext(ctx context.Context) NodeGroupResourceArrayOutput {
	return o
}

func (o NodeGroupResourceArrayOutput) Index(i pulumi.IntInput) NodeGroupResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeGroupResource {
		return vs[0].([]NodeGroupResource)[vs[1].(int)]
	}).(NodeGroupResourceOutput)
}

type NodeGroupResourceAutoscalingGroup struct {
	// Name of the AutoScaling Group.
	Name string `pulumi:"name"`
}

type NodeGroupResourceAutoscalingGroupInput interface {
	pulumi.Input

	ToNodeGroupResourceAutoscalingGroupOutput() NodeGroupResourceAutoscalingGroupOutput
	ToNodeGroupResourceAutoscalingGroupOutputWithContext(context.Context) NodeGroupResourceAutoscalingGroupOutput
}

type NodeGroupResourceAutoscalingGroupArgs struct {
	// Name of the AutoScaling Group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NodeGroupResourceAutoscalingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (i NodeGroupResourceAutoscalingGroupArgs) ToNodeGroupResourceAutoscalingGroupOutput() NodeGroupResourceAutoscalingGroupOutput {
	return i.ToNodeGroupResourceAutoscalingGroupOutputWithContext(context.Background())
}

func (i NodeGroupResourceAutoscalingGroupArgs) ToNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceAutoscalingGroupOutput)
}

type NodeGroupResourceAutoscalingGroupArrayInput interface {
	pulumi.Input

	ToNodeGroupResourceAutoscalingGroupArrayOutput() NodeGroupResourceAutoscalingGroupArrayOutput
	ToNodeGroupResourceAutoscalingGroupArrayOutputWithContext(context.Context) NodeGroupResourceAutoscalingGroupArrayOutput
}

type NodeGroupResourceAutoscalingGroupArray []NodeGroupResourceAutoscalingGroupInput

func (NodeGroupResourceAutoscalingGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (i NodeGroupResourceAutoscalingGroupArray) ToNodeGroupResourceAutoscalingGroupArrayOutput() NodeGroupResourceAutoscalingGroupArrayOutput {
	return i.ToNodeGroupResourceAutoscalingGroupArrayOutputWithContext(context.Background())
}

func (i NodeGroupResourceAutoscalingGroupArray) ToNodeGroupResourceAutoscalingGroupArrayOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceAutoscalingGroupArrayOutput)
}

type NodeGroupResourceAutoscalingGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceAutoscalingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (o NodeGroupResourceAutoscalingGroupOutput) ToNodeGroupResourceAutoscalingGroupOutput() NodeGroupResourceAutoscalingGroupOutput {
	return o
}

func (o NodeGroupResourceAutoscalingGroupOutput) ToNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupOutput {
	return o
}

// Name of the AutoScaling Group.
func (o NodeGroupResourceAutoscalingGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGroupResourceAutoscalingGroup) string { return v.Name }).(pulumi.StringOutput)
}

type NodeGroupResourceAutoscalingGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceAutoscalingGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (o NodeGroupResourceAutoscalingGroupArrayOutput) ToNodeGroupResourceAutoscalingGroupArrayOutput() NodeGroupResourceAutoscalingGroupArrayOutput {
	return o
}

func (o NodeGroupResourceAutoscalingGroupArrayOutput) ToNodeGroupResourceAutoscalingGroupArrayOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupArrayOutput {
	return o
}

func (o NodeGroupResourceAutoscalingGroupArrayOutput) Index(i pulumi.IntInput) NodeGroupResourceAutoscalingGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeGroupResourceAutoscalingGroup {
		return vs[0].([]NodeGroupResourceAutoscalingGroup)[vs[1].(int)]
	}).(NodeGroupResourceAutoscalingGroupOutput)
}

type NodeGroupResourceState struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups []NodeGroupResourceStateAutoscalingGroup `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId *string `pulumi:"remoteAccessSecurityGroupId"`
}

type NodeGroupResourceStateInput interface {
	pulumi.Input

	ToNodeGroupResourceStateOutput() NodeGroupResourceStateOutput
	ToNodeGroupResourceStateOutputWithContext(context.Context) NodeGroupResourceStateOutput
}

type NodeGroupResourceStateArgs struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups NodeGroupResourceStateAutoscalingGroupArrayInput `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId pulumi.StringPtrInput `pulumi:"remoteAccessSecurityGroupId"`
}

func (NodeGroupResourceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceState)(nil)).Elem()
}

func (i NodeGroupResourceStateArgs) ToNodeGroupResourceStateOutput() NodeGroupResourceStateOutput {
	return i.ToNodeGroupResourceStateOutputWithContext(context.Background())
}

func (i NodeGroupResourceStateArgs) ToNodeGroupResourceStateOutputWithContext(ctx context.Context) NodeGroupResourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceStateOutput)
}

type NodeGroupResourceStateArrayInput interface {
	pulumi.Input

	ToNodeGroupResourceStateArrayOutput() NodeGroupResourceStateArrayOutput
	ToNodeGroupResourceStateArrayOutputWithContext(context.Context) NodeGroupResourceStateArrayOutput
}

type NodeGroupResourceStateArray []NodeGroupResourceStateInput

func (NodeGroupResourceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceState)(nil)).Elem()
}

func (i NodeGroupResourceStateArray) ToNodeGroupResourceStateArrayOutput() NodeGroupResourceStateArrayOutput {
	return i.ToNodeGroupResourceStateArrayOutputWithContext(context.Background())
}

func (i NodeGroupResourceStateArray) ToNodeGroupResourceStateArrayOutputWithContext(ctx context.Context) NodeGroupResourceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceStateArrayOutput)
}

type NodeGroupResourceStateOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceState)(nil)).Elem()
}

func (o NodeGroupResourceStateOutput) ToNodeGroupResourceStateOutput() NodeGroupResourceStateOutput {
	return o
}

func (o NodeGroupResourceStateOutput) ToNodeGroupResourceStateOutputWithContext(ctx context.Context) NodeGroupResourceStateOutput {
	return o
}

// List of objects containing information about AutoScaling Groups.
func (o NodeGroupResourceStateOutput) AutoscalingGroups() NodeGroupResourceStateAutoscalingGroupArrayOutput {
	return o.ApplyT(func(v NodeGroupResourceState) []NodeGroupResourceStateAutoscalingGroup { return v.AutoscalingGroups }).(NodeGroupResourceStateAutoscalingGroupArrayOutput)
}

// Identifier of the remote access EC2 Security Group.
func (o NodeGroupResourceStateOutput) RemoteAccessSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupResourceState) *string { return v.RemoteAccessSecurityGroupId }).(pulumi.StringPtrOutput)
}

type NodeGroupResourceStateArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceState)(nil)).Elem()
}

func (o NodeGroupResourceStateArrayOutput) ToNodeGroupResourceStateArrayOutput() NodeGroupResourceStateArrayOutput {
	return o
}

func (o NodeGroupResourceStateArrayOutput) ToNodeGroupResourceStateArrayOutputWithContext(ctx context.Context) NodeGroupResourceStateArrayOutput {
	return o
}

func (o NodeGroupResourceStateArrayOutput) Index(i pulumi.IntInput) NodeGroupResourceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeGroupResourceState {
		return vs[0].([]NodeGroupResourceState)[vs[1].(int)]
	}).(NodeGroupResourceStateOutput)
}

type NodeGroupResourceStateAutoscalingGroup struct {
	// Name of the AutoScaling Group.
	Name *string `pulumi:"name"`
}

type NodeGroupResourceStateAutoscalingGroupInput interface {
	pulumi.Input

	ToNodeGroupResourceStateAutoscalingGroupOutput() NodeGroupResourceStateAutoscalingGroupOutput
	ToNodeGroupResourceStateAutoscalingGroupOutputWithContext(context.Context) NodeGroupResourceStateAutoscalingGroupOutput
}

type NodeGroupResourceStateAutoscalingGroupArgs struct {
	// Name of the AutoScaling Group.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NodeGroupResourceStateAutoscalingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceStateAutoscalingGroup)(nil)).Elem()
}

func (i NodeGroupResourceStateAutoscalingGroupArgs) ToNodeGroupResourceStateAutoscalingGroupOutput() NodeGroupResourceStateAutoscalingGroupOutput {
	return i.ToNodeGroupResourceStateAutoscalingGroupOutputWithContext(context.Background())
}

func (i NodeGroupResourceStateAutoscalingGroupArgs) ToNodeGroupResourceStateAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceStateAutoscalingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceStateAutoscalingGroupOutput)
}

type NodeGroupResourceStateAutoscalingGroupArrayInput interface {
	pulumi.Input

	ToNodeGroupResourceStateAutoscalingGroupArrayOutput() NodeGroupResourceStateAutoscalingGroupArrayOutput
	ToNodeGroupResourceStateAutoscalingGroupArrayOutputWithContext(context.Context) NodeGroupResourceStateAutoscalingGroupArrayOutput
}

type NodeGroupResourceStateAutoscalingGroupArray []NodeGroupResourceStateAutoscalingGroupInput

func (NodeGroupResourceStateAutoscalingGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceStateAutoscalingGroup)(nil)).Elem()
}

func (i NodeGroupResourceStateAutoscalingGroupArray) ToNodeGroupResourceStateAutoscalingGroupArrayOutput() NodeGroupResourceStateAutoscalingGroupArrayOutput {
	return i.ToNodeGroupResourceStateAutoscalingGroupArrayOutputWithContext(context.Background())
}

func (i NodeGroupResourceStateAutoscalingGroupArray) ToNodeGroupResourceStateAutoscalingGroupArrayOutputWithContext(ctx context.Context) NodeGroupResourceStateAutoscalingGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceStateAutoscalingGroupArrayOutput)
}

type NodeGroupResourceStateAutoscalingGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceStateAutoscalingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceStateAutoscalingGroup)(nil)).Elem()
}

func (o NodeGroupResourceStateAutoscalingGroupOutput) ToNodeGroupResourceStateAutoscalingGroupOutput() NodeGroupResourceStateAutoscalingGroupOutput {
	return o
}

func (o NodeGroupResourceStateAutoscalingGroupOutput) ToNodeGroupResourceStateAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceStateAutoscalingGroupOutput {
	return o
}

// Name of the AutoScaling Group.
func (o NodeGroupResourceStateAutoscalingGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupResourceStateAutoscalingGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NodeGroupResourceStateAutoscalingGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceStateAutoscalingGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGroupResourceStateAutoscalingGroup)(nil)).Elem()
}

func (o NodeGroupResourceStateAutoscalingGroupArrayOutput) ToNodeGroupResourceStateAutoscalingGroupArrayOutput() NodeGroupResourceStateAutoscalingGroupArrayOutput {
	return o
}

func (o NodeGroupResourceStateAutoscalingGroupArrayOutput) ToNodeGroupResourceStateAutoscalingGroupArrayOutputWithContext(ctx context.Context) NodeGroupResourceStateAutoscalingGroupArrayOutput {
	return o
}

func (o NodeGroupResourceStateAutoscalingGroupArrayOutput) Index(i pulumi.IntInput) NodeGroupResourceStateAutoscalingGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeGroupResourceStateAutoscalingGroup {
		return vs[0].([]NodeGroupResourceStateAutoscalingGroup)[vs[1].(int)]
	}).(NodeGroupResourceStateAutoscalingGroupOutput)
}

type NodeGroupScalingConfig struct {
	// Desired number of worker nodes.
	DesiredSize int `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize int `pulumi:"minSize"`
}

type NodeGroupScalingConfigInput interface {
	pulumi.Input

	ToNodeGroupScalingConfigOutput() NodeGroupScalingConfigOutput
	ToNodeGroupScalingConfigOutputWithContext(context.Context) NodeGroupScalingConfigOutput
}

type NodeGroupScalingConfigArgs struct {
	// Desired number of worker nodes.
	DesiredSize pulumi.IntInput `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize pulumi.IntInput `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize pulumi.IntInput `pulumi:"minSize"`
}

func (NodeGroupScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfig)(nil)).Elem()
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigOutput() NodeGroupScalingConfigOutput {
	return i.ToNodeGroupScalingConfigOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigOutputWithContext(ctx context.Context) NodeGroupScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigOutput)
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigPtrOutput() NodeGroupScalingConfigPtrOutput {
	return i.ToNodeGroupScalingConfigPtrOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigOutput).ToNodeGroupScalingConfigPtrOutputWithContext(ctx)
}

type NodeGroupScalingConfigPtrInput interface {
	pulumi.Input

	ToNodeGroupScalingConfigPtrOutput() NodeGroupScalingConfigPtrOutput
	ToNodeGroupScalingConfigPtrOutputWithContext(context.Context) NodeGroupScalingConfigPtrOutput
}

type nodeGroupScalingConfigPtrType NodeGroupScalingConfigArgs

func NodeGroupScalingConfigPtr(v *NodeGroupScalingConfigArgs) NodeGroupScalingConfigPtrInput {
	return (*nodeGroupScalingConfigPtrType)(v)
}

func (*nodeGroupScalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupScalingConfig)(nil)).Elem()
}

func (i *nodeGroupScalingConfigPtrType) ToNodeGroupScalingConfigPtrOutput() NodeGroupScalingConfigPtrOutput {
	return i.ToNodeGroupScalingConfigPtrOutputWithContext(context.Background())
}

func (i *nodeGroupScalingConfigPtrType) ToNodeGroupScalingConfigPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigPtrOutput)
}

type NodeGroupScalingConfigOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfig)(nil)).Elem()
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigOutput() NodeGroupScalingConfigOutput {
	return o
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigOutputWithContext(ctx context.Context) NodeGroupScalingConfigOutput {
	return o
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigPtrOutput() NodeGroupScalingConfigPtrOutput {
	return o.ToNodeGroupScalingConfigPtrOutputWithContext(context.Background())
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigPtrOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) *NodeGroupScalingConfig {
		return &v
	}).(NodeGroupScalingConfigPtrOutput)
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigOutput) DesiredSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.DesiredSize }).(pulumi.IntOutput)
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.MinSize }).(pulumi.IntOutput)
}

type NodeGroupScalingConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupScalingConfig)(nil)).Elem()
}

func (o NodeGroupScalingConfigPtrOutput) ToNodeGroupScalingConfigPtrOutput() NodeGroupScalingConfigPtrOutput {
	return o
}

func (o NodeGroupScalingConfigPtrOutput) ToNodeGroupScalingConfigPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigPtrOutput {
	return o
}

func (o NodeGroupScalingConfigPtrOutput) Elem() NodeGroupScalingConfigOutput {
	return o.ApplyT(func(v *NodeGroupScalingConfig) NodeGroupScalingConfig { return *v }).(NodeGroupScalingConfigOutput)
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigPtrOutput) DesiredSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.DesiredSize }).(pulumi.IntOutput)
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigPtrOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigPtrOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfig) int { return v.MinSize }).(pulumi.IntOutput)
}

type NodeGroupScalingConfigArgs struct {
	// Desired number of worker nodes.
	DesiredSize int `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize int `pulumi:"minSize"`
}

type NodeGroupScalingConfigArgsInput interface {
	pulumi.Input

	ToNodeGroupScalingConfigArgsOutput() NodeGroupScalingConfigArgsOutput
	ToNodeGroupScalingConfigArgsOutputWithContext(context.Context) NodeGroupScalingConfigArgsOutput
}

type NodeGroupScalingConfigArgsArgs struct {
	// Desired number of worker nodes.
	DesiredSize pulumi.IntInput `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize pulumi.IntInput `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize pulumi.IntInput `pulumi:"minSize"`
}

func (NodeGroupScalingConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfigArgs)(nil)).Elem()
}

func (i NodeGroupScalingConfigArgsArgs) ToNodeGroupScalingConfigArgsOutput() NodeGroupScalingConfigArgsOutput {
	return i.ToNodeGroupScalingConfigArgsOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigArgsArgs) ToNodeGroupScalingConfigArgsOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigArgsOutput)
}

func (i NodeGroupScalingConfigArgsArgs) ToNodeGroupScalingConfigArgsPtrOutput() NodeGroupScalingConfigArgsPtrOutput {
	return i.ToNodeGroupScalingConfigArgsPtrOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigArgsArgs) ToNodeGroupScalingConfigArgsPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigArgsOutput).ToNodeGroupScalingConfigArgsPtrOutputWithContext(ctx)
}

type NodeGroupScalingConfigArgsPtrInput interface {
	pulumi.Input

	ToNodeGroupScalingConfigArgsPtrOutput() NodeGroupScalingConfigArgsPtrOutput
	ToNodeGroupScalingConfigArgsPtrOutputWithContext(context.Context) NodeGroupScalingConfigArgsPtrOutput
}

type nodeGroupScalingConfigArgsPtrType NodeGroupScalingConfigArgsArgs

func NodeGroupScalingConfigArgsPtr(v *NodeGroupScalingConfigArgsArgs) NodeGroupScalingConfigArgsPtrInput {
	return (*nodeGroupScalingConfigArgsPtrType)(v)
}

func (*nodeGroupScalingConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupScalingConfigArgs)(nil)).Elem()
}

func (i *nodeGroupScalingConfigArgsPtrType) ToNodeGroupScalingConfigArgsPtrOutput() NodeGroupScalingConfigArgsPtrOutput {
	return i.ToNodeGroupScalingConfigArgsPtrOutputWithContext(context.Background())
}

func (i *nodeGroupScalingConfigArgsPtrType) ToNodeGroupScalingConfigArgsPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigArgsPtrOutput)
}

type NodeGroupScalingConfigArgsOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfigArgs)(nil)).Elem()
}

func (o NodeGroupScalingConfigArgsOutput) ToNodeGroupScalingConfigArgsOutput() NodeGroupScalingConfigArgsOutput {
	return o
}

func (o NodeGroupScalingConfigArgsOutput) ToNodeGroupScalingConfigArgsOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsOutput {
	return o
}

func (o NodeGroupScalingConfigArgsOutput) ToNodeGroupScalingConfigArgsPtrOutput() NodeGroupScalingConfigArgsPtrOutput {
	return o.ToNodeGroupScalingConfigArgsPtrOutputWithContext(context.Background())
}

func (o NodeGroupScalingConfigArgsOutput) ToNodeGroupScalingConfigArgsPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsPtrOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) *NodeGroupScalingConfigArgs {
		return &v
	}).(NodeGroupScalingConfigArgsPtrOutput)
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigArgsOutput) DesiredSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.DesiredSize }).(pulumi.IntOutput)
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigArgsOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigArgsOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.MinSize }).(pulumi.IntOutput)
}

type NodeGroupScalingConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupScalingConfigArgs)(nil)).Elem()
}

func (o NodeGroupScalingConfigArgsPtrOutput) ToNodeGroupScalingConfigArgsPtrOutput() NodeGroupScalingConfigArgsPtrOutput {
	return o
}

func (o NodeGroupScalingConfigArgsPtrOutput) ToNodeGroupScalingConfigArgsPtrOutputWithContext(ctx context.Context) NodeGroupScalingConfigArgsPtrOutput {
	return o
}

func (o NodeGroupScalingConfigArgsPtrOutput) Elem() NodeGroupScalingConfigArgsOutput {
	return o.ApplyT(func(v *NodeGroupScalingConfigArgs) NodeGroupScalingConfigArgs { return *v }).(NodeGroupScalingConfigArgsOutput)
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigArgsPtrOutput) DesiredSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.DesiredSize }).(pulumi.IntOutput)
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigArgsPtrOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigArgsPtrOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigArgs) int { return v.MinSize }).(pulumi.IntOutput)
}

type NodeGroupScalingConfigState struct {
	// Desired number of worker nodes.
	DesiredSize int `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize int `pulumi:"minSize"`
}

type NodeGroupScalingConfigStateInput interface {
	pulumi.Input

	ToNodeGroupScalingConfigStateOutput() NodeGroupScalingConfigStateOutput
	ToNodeGroupScalingConfigStateOutputWithContext(context.Context) NodeGroupScalingConfigStateOutput
}

type NodeGroupScalingConfigStateArgs struct {
	// Desired number of worker nodes.
	DesiredSize pulumi.IntInput `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize pulumi.IntInput `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize pulumi.IntInput `pulumi:"minSize"`
}

func (NodeGroupScalingConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfigState)(nil)).Elem()
}

func (i NodeGroupScalingConfigStateArgs) ToNodeGroupScalingConfigStateOutput() NodeGroupScalingConfigStateOutput {
	return i.ToNodeGroupScalingConfigStateOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigStateArgs) ToNodeGroupScalingConfigStateOutputWithContext(ctx context.Context) NodeGroupScalingConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigStateOutput)
}

type NodeGroupScalingConfigStateOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfigState)(nil)).Elem()
}

func (o NodeGroupScalingConfigStateOutput) ToNodeGroupScalingConfigStateOutput() NodeGroupScalingConfigStateOutput {
	return o
}

func (o NodeGroupScalingConfigStateOutput) ToNodeGroupScalingConfigStateOutputWithContext(ctx context.Context) NodeGroupScalingConfigStateOutput {
	return o
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigStateOutput) DesiredSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigState) int { return v.DesiredSize }).(pulumi.IntOutput)
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigStateOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigState) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigStateOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupScalingConfigState) int { return v.MinSize }).(pulumi.IntOutput)
}

type GetClusterCertificateAuthority struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data string `pulumi:"data"`
}

type GetClusterCertificateAuthorityInput interface {
	pulumi.Input

	ToGetClusterCertificateAuthorityOutput() GetClusterCertificateAuthorityOutput
	ToGetClusterCertificateAuthorityOutputWithContext(context.Context) GetClusterCertificateAuthorityOutput
}

type GetClusterCertificateAuthorityArgs struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data pulumi.StringInput `pulumi:"data"`
}

func (GetClusterCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateAuthority)(nil)).Elem()
}

func (i GetClusterCertificateAuthorityArgs) ToGetClusterCertificateAuthorityOutput() GetClusterCertificateAuthorityOutput {
	return i.ToGetClusterCertificateAuthorityOutputWithContext(context.Background())
}

func (i GetClusterCertificateAuthorityArgs) ToGetClusterCertificateAuthorityOutputWithContext(ctx context.Context) GetClusterCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateAuthorityOutput)
}

type GetClusterCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateAuthority)(nil)).Elem()
}

func (o GetClusterCertificateAuthorityOutput) ToGetClusterCertificateAuthorityOutput() GetClusterCertificateAuthorityOutput {
	return o
}

func (o GetClusterCertificateAuthorityOutput) ToGetClusterCertificateAuthorityOutputWithContext(ctx context.Context) GetClusterCertificateAuthorityOutput {
	return o
}

// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o GetClusterCertificateAuthorityOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateAuthority) string { return v.Data }).(pulumi.StringOutput)
}

type GetClusterIdentity struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs []GetClusterIdentityOidc `pulumi:"oidcs"`
}

type GetClusterIdentityInput interface {
	pulumi.Input

	ToGetClusterIdentityOutput() GetClusterIdentityOutput
	ToGetClusterIdentityOutputWithContext(context.Context) GetClusterIdentityOutput
}

type GetClusterIdentityArgs struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs GetClusterIdentityOidcArrayInput `pulumi:"oidcs"`
}

func (GetClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentity)(nil)).Elem()
}

func (i GetClusterIdentityArgs) ToGetClusterIdentityOutput() GetClusterIdentityOutput {
	return i.ToGetClusterIdentityOutputWithContext(context.Background())
}

func (i GetClusterIdentityArgs) ToGetClusterIdentityOutputWithContext(ctx context.Context) GetClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityOutput)
}

type GetClusterIdentityArrayInput interface {
	pulumi.Input

	ToGetClusterIdentityArrayOutput() GetClusterIdentityArrayOutput
	ToGetClusterIdentityArrayOutputWithContext(context.Context) GetClusterIdentityArrayOutput
}

type GetClusterIdentityArray []GetClusterIdentityInput

func (GetClusterIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterIdentity)(nil)).Elem()
}

func (i GetClusterIdentityArray) ToGetClusterIdentityArrayOutput() GetClusterIdentityArrayOutput {
	return i.ToGetClusterIdentityArrayOutputWithContext(context.Background())
}

func (i GetClusterIdentityArray) ToGetClusterIdentityArrayOutputWithContext(ctx context.Context) GetClusterIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityArrayOutput)
}

type GetClusterIdentityOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentity)(nil)).Elem()
}

func (o GetClusterIdentityOutput) ToGetClusterIdentityOutput() GetClusterIdentityOutput {
	return o
}

func (o GetClusterIdentityOutput) ToGetClusterIdentityOutputWithContext(ctx context.Context) GetClusterIdentityOutput {
	return o
}

// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
func (o GetClusterIdentityOutput) Oidcs() GetClusterIdentityOidcArrayOutput {
	return o.ApplyT(func(v GetClusterIdentity) []GetClusterIdentityOidc { return v.Oidcs }).(GetClusterIdentityOidcArrayOutput)
}

type GetClusterIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterIdentity)(nil)).Elem()
}

func (o GetClusterIdentityArrayOutput) ToGetClusterIdentityArrayOutput() GetClusterIdentityArrayOutput {
	return o
}

func (o GetClusterIdentityArrayOutput) ToGetClusterIdentityArrayOutputWithContext(ctx context.Context) GetClusterIdentityArrayOutput {
	return o
}

func (o GetClusterIdentityArrayOutput) Index(i pulumi.IntInput) GetClusterIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterIdentity {
		return vs[0].([]GetClusterIdentity)[vs[1].(int)]
	}).(GetClusterIdentityOutput)
}

type GetClusterIdentityOidc struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer string `pulumi:"issuer"`
}

type GetClusterIdentityOidcInput interface {
	pulumi.Input

	ToGetClusterIdentityOidcOutput() GetClusterIdentityOidcOutput
	ToGetClusterIdentityOidcOutputWithContext(context.Context) GetClusterIdentityOidcOutput
}

type GetClusterIdentityOidcArgs struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer pulumi.StringInput `pulumi:"issuer"`
}

func (GetClusterIdentityOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentityOidc)(nil)).Elem()
}

func (i GetClusterIdentityOidcArgs) ToGetClusterIdentityOidcOutput() GetClusterIdentityOidcOutput {
	return i.ToGetClusterIdentityOidcOutputWithContext(context.Background())
}

func (i GetClusterIdentityOidcArgs) ToGetClusterIdentityOidcOutputWithContext(ctx context.Context) GetClusterIdentityOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityOidcOutput)
}

type GetClusterIdentityOidcArrayInput interface {
	pulumi.Input

	ToGetClusterIdentityOidcArrayOutput() GetClusterIdentityOidcArrayOutput
	ToGetClusterIdentityOidcArrayOutputWithContext(context.Context) GetClusterIdentityOidcArrayOutput
}

type GetClusterIdentityOidcArray []GetClusterIdentityOidcInput

func (GetClusterIdentityOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterIdentityOidc)(nil)).Elem()
}

func (i GetClusterIdentityOidcArray) ToGetClusterIdentityOidcArrayOutput() GetClusterIdentityOidcArrayOutput {
	return i.ToGetClusterIdentityOidcArrayOutputWithContext(context.Background())
}

func (i GetClusterIdentityOidcArray) ToGetClusterIdentityOidcArrayOutputWithContext(ctx context.Context) GetClusterIdentityOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityOidcArrayOutput)
}

type GetClusterIdentityOidcOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentityOidc)(nil)).Elem()
}

func (o GetClusterIdentityOidcOutput) ToGetClusterIdentityOidcOutput() GetClusterIdentityOidcOutput {
	return o
}

func (o GetClusterIdentityOidcOutput) ToGetClusterIdentityOidcOutputWithContext(ctx context.Context) GetClusterIdentityOidcOutput {
	return o
}

// Issuer URL for the OpenID Connect identity provider.
func (o GetClusterIdentityOidcOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterIdentityOidc) string { return v.Issuer }).(pulumi.StringOutput)
}

type GetClusterIdentityOidcArrayOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterIdentityOidc)(nil)).Elem()
}

func (o GetClusterIdentityOidcArrayOutput) ToGetClusterIdentityOidcArrayOutput() GetClusterIdentityOidcArrayOutput {
	return o
}

func (o GetClusterIdentityOidcArrayOutput) ToGetClusterIdentityOidcArrayOutputWithContext(ctx context.Context) GetClusterIdentityOidcArrayOutput {
	return o
}

func (o GetClusterIdentityOidcArrayOutput) Index(i pulumi.IntInput) GetClusterIdentityOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterIdentityOidc {
		return vs[0].([]GetClusterIdentityOidc)[vs[1].(int)]
	}).(GetClusterIdentityOidcOutput)
}

type GetClusterVpcConfig struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId string `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
	EndpointPrivateAccess bool `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
	EndpointPublicAccess bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId string `pulumi:"vpcId"`
}

type GetClusterVpcConfigInput interface {
	pulumi.Input

	ToGetClusterVpcConfigOutput() GetClusterVpcConfigOutput
	ToGetClusterVpcConfigOutputWithContext(context.Context) GetClusterVpcConfigOutput
}

type GetClusterVpcConfigArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId pulumi.StringInput `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
	EndpointPrivateAccess pulumi.BoolInput `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
	EndpointPublicAccess pulumi.BoolInput `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
	PublicAccessCidrs pulumi.StringArrayInput `pulumi:"publicAccessCidrs"`
	// List of security group IDs
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of subnet IDs
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVpcConfig)(nil)).Elem()
}

func (i GetClusterVpcConfigArgs) ToGetClusterVpcConfigOutput() GetClusterVpcConfigOutput {
	return i.ToGetClusterVpcConfigOutputWithContext(context.Background())
}

func (i GetClusterVpcConfigArgs) ToGetClusterVpcConfigOutputWithContext(ctx context.Context) GetClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterVpcConfigOutput)
}

type GetClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (GetClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVpcConfig)(nil)).Elem()
}

func (o GetClusterVpcConfigOutput) ToGetClusterVpcConfigOutput() GetClusterVpcConfigOutput {
	return o
}

func (o GetClusterVpcConfigOutput) ToGetClusterVpcConfigOutputWithContext(ctx context.Context) GetClusterVpcConfigOutput {
	return o
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o GetClusterVpcConfigOutput) ClusterSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) string { return v.ClusterSecurityGroupId }).(pulumi.StringOutput)
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
func (o GetClusterVpcConfigOutput) EndpointPrivateAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) bool { return v.EndpointPrivateAccess }).(pulumi.BoolOutput)
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
func (o GetClusterVpcConfigOutput) EndpointPublicAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) bool { return v.EndpointPublicAccess }).(pulumi.BoolOutput)
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
func (o GetClusterVpcConfigOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// List of security group IDs
func (o GetClusterVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of subnet IDs
func (o GetClusterVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC associated with your cluster.
func (o GetClusterVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ClusterCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateAuthorityStateOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigArgsOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigProviderOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigProviderArgsOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigStateOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigStateProviderOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOutput{})
	pulumi.RegisterOutputType(ClusterIdentityArrayOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOidcOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOidcArrayOutput{})
	pulumi.RegisterOutputType(ClusterIdentityStateOutput{})
	pulumi.RegisterOutputType(ClusterIdentityStateArrayOutput{})
	pulumi.RegisterOutputType(ClusterIdentityStateOidcOutput{})
	pulumi.RegisterOutputType(ClusterIdentityStateOidcArrayOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigArgsOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigStateOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorArgsOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorArgsArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorStateOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorStateArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessArgsOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessArgsPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessStateOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceAutoscalingGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceAutoscalingGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceStateOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceStateArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceStateAutoscalingGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceStateAutoscalingGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigArgsOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigStateOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityOidcOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityOidcArrayOutput{})
	pulumi.RegisterOutputType(GetClusterVpcConfigOutput{})
}
