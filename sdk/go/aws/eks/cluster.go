// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput               `pulumi:"arn"`
	CertificateAuthority   ClusterCertificateAuthorityOutput `pulumi:"certificateAuthority"`
	CreatedAt              pulumi.StringOutput               `pulumi:"createdAt"`
	EnabledClusterLogTypes pulumi.StringArrayOutput          `pulumi:"enabledClusterLogTypes"`
	EncryptionConfig       ClusterEncryptionConfigPtrOutput  `pulumi:"encryptionConfig"`
	Endpoint               pulumi.StringOutput               `pulumi:"endpoint"`
	Identities             ClusterIdentityArrayOutput        `pulumi:"identities"`
	Name                   pulumi.StringOutput               `pulumi:"name"`
	PlatformVersion        pulumi.StringOutput               `pulumi:"platformVersion"`
	RoleArn                pulumi.StringOutput               `pulumi:"roleArn"`
	Status                 pulumi.StringOutput               `pulumi:"status"`
	Tags                   pulumi.StringMapOutput            `pulumi:"tags"`
	Version                pulumi.StringOutput               `pulumi:"version"`
	VpcConfig              ClusterVpcConfigOutput            `pulumi:"vpcConfig"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	if args == nil || args.VpcConfig == nil {
		return nil, errors.New("missing required argument 'VpcConfig'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:eks/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:eks/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                    *string                      `pulumi:"arn"`
	CertificateAuthority   *ClusterCertificateAuthority `pulumi:"certificateAuthority"`
	CreatedAt              *string                      `pulumi:"createdAt"`
	EnabledClusterLogTypes []string                     `pulumi:"enabledClusterLogTypes"`
	EncryptionConfig       *ClusterEncryptionConfig     `pulumi:"encryptionConfig"`
	Endpoint               *string                      `pulumi:"endpoint"`
	Identities             []ClusterIdentity            `pulumi:"identities"`
	Name                   *string                      `pulumi:"name"`
	PlatformVersion        *string                      `pulumi:"platformVersion"`
	RoleArn                *string                      `pulumi:"roleArn"`
	Status                 *string                      `pulumi:"status"`
	Tags                   map[string]string            `pulumi:"tags"`
	Version                *string                      `pulumi:"version"`
	VpcConfig              *ClusterVpcConfig            `pulumi:"vpcConfig"`
}

type ClusterState struct {
	Arn                    pulumi.StringPtrInput
	CertificateAuthority   ClusterCertificateAuthorityPtrInput
	CreatedAt              pulumi.StringPtrInput
	EnabledClusterLogTypes pulumi.StringArrayInput
	EncryptionConfig       ClusterEncryptionConfigPtrInput
	Endpoint               pulumi.StringPtrInput
	Identities             ClusterIdentityArrayInput
	Name                   pulumi.StringPtrInput
	PlatformVersion        pulumi.StringPtrInput
	RoleArn                pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	Version                pulumi.StringPtrInput
	VpcConfig              ClusterVpcConfigPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	EnabledClusterLogTypes []string                 `pulumi:"enabledClusterLogTypes"`
	EncryptionConfig       *ClusterEncryptionConfig `pulumi:"encryptionConfig"`
	Name                   *string                  `pulumi:"name"`
	RoleArn                string                   `pulumi:"roleArn"`
	Tags                   map[string]string        `pulumi:"tags"`
	Version                *string                  `pulumi:"version"`
	VpcConfig              ClusterVpcConfig         `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	EnabledClusterLogTypes pulumi.StringArrayInput
	EncryptionConfig       ClusterEncryptionConfigPtrInput
	Name                   pulumi.StringPtrInput
	RoleArn                pulumi.StringInput
	Tags                   pulumi.StringMapInput
	Version                pulumi.StringPtrInput
	VpcConfig              ClusterVpcConfigInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
