// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Analyzer struct {
	pulumi.CustomResourceState

	AnalyzerName pulumi.StringOutput    `pulumi:"analyzerName"`
	Arn          pulumi.StringOutput    `pulumi:"arn"`
	Tags         pulumi.StringMapOutput `pulumi:"tags"`
	Type         pulumi.StringPtrOutput `pulumi:"type"`
}

// NewAnalyzer registers a new resource with the given unique name, arguments, and options.
func NewAnalyzer(ctx *pulumi.Context,
	name string, args *AnalyzerArgs, opts ...pulumi.ResourceOption) (*Analyzer, error) {
	if args == nil || args.AnalyzerName == nil {
		return nil, errors.New("missing required argument 'AnalyzerName'")
	}
	if args == nil {
		args = &AnalyzerArgs{}
	}
	var resource Analyzer
	err := ctx.RegisterResource("aws:accessanalyzer/analyzer:Analyzer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyzer gets an existing Analyzer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyzer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyzerState, opts ...pulumi.ResourceOption) (*Analyzer, error) {
	var resource Analyzer
	err := ctx.ReadResource("aws:accessanalyzer/analyzer:Analyzer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Analyzer resources.
type analyzerState struct {
	AnalyzerName *string           `pulumi:"analyzerName"`
	Arn          *string           `pulumi:"arn"`
	Tags         map[string]string `pulumi:"tags"`
	Type         *string           `pulumi:"type"`
}

type AnalyzerState struct {
	AnalyzerName pulumi.StringPtrInput
	Arn          pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	Type         pulumi.StringPtrInput
}

func (AnalyzerState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyzerState)(nil)).Elem()
}

type analyzerArgs struct {
	AnalyzerName string            `pulumi:"analyzerName"`
	Tags         map[string]string `pulumi:"tags"`
	Type         *string           `pulumi:"type"`
}

// The set of arguments for constructing a Analyzer resource.
type AnalyzerArgs struct {
	AnalyzerName pulumi.StringInput
	Tags         pulumi.StringMapInput
	Type         pulumi.StringPtrInput
}

func (AnalyzerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyzerArgs)(nil)).Elem()
}
