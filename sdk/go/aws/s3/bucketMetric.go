// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BucketMetric struct {
	pulumi.CustomResourceState

	Bucket pulumi.StringOutput         `pulumi:"bucket"`
	Filter BucketMetricFilterPtrOutput `pulumi:"filter"`
	Name   pulumi.StringOutput         `pulumi:"name"`
}

// NewBucketMetric registers a new resource with the given unique name, arguments, and options.
func NewBucketMetric(ctx *pulumi.Context,
	name string, args *BucketMetricArgs, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	if args == nil {
		args = &BucketMetricArgs{}
	}
	var resource BucketMetric
	err := ctx.RegisterResource("aws:s3/bucketMetric:BucketMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketMetric gets an existing BucketMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketMetricState, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	var resource BucketMetric
	err := ctx.ReadResource("aws:s3/bucketMetric:BucketMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketMetric resources.
type bucketMetricState struct {
	Bucket *string             `pulumi:"bucket"`
	Filter *BucketMetricFilter `pulumi:"filter"`
	Name   *string             `pulumi:"name"`
}

type BucketMetricState struct {
	Bucket pulumi.StringPtrInput
	Filter BucketMetricFilterPtrInput
	Name   pulumi.StringPtrInput
}

func (BucketMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetricState)(nil)).Elem()
}

type bucketMetricArgs struct {
	Bucket string              `pulumi:"bucket"`
	Filter *BucketMetricFilter `pulumi:"filter"`
	Name   *string             `pulumi:"name"`
}

// The set of arguments for constructing a BucketMetric resource.
type BucketMetricArgs struct {
	Bucket pulumi.StringInput
	Filter BucketMetricFilterPtrInput
	Name   pulumi.StringPtrInput
}

func (BucketMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetricArgs)(nil)).Elem()
}
