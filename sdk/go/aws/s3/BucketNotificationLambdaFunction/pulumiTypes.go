// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package BucketNotificationLambdaFunction

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BucketNotificationLambdaFunction struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events []string `pulumi:"events"`
	// Specifies object key name prefix.
	FilterPrefix *string `pulumi:"filterPrefix"`
	// Specifies object key name suffix.
	FilterSuffix *string `pulumi:"filterSuffix"`
	// Specifies unique identifier for each of the notification configurations.
	Id *string `pulumi:"id"`
	// Specifies Amazon Lambda function ARN.
	LambdaFunctionArn *string `pulumi:"lambdaFunctionArn"`
}

type BucketNotificationLambdaFunctionInput interface {
	pulumi.Input

	ToBucketNotificationLambdaFunctionOutput() BucketNotificationLambdaFunctionOutput
	ToBucketNotificationLambdaFunctionOutputWithContext(context.Context) BucketNotificationLambdaFunctionOutput
}

type BucketNotificationLambdaFunctionArgs struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Specifies object key name prefix.
	FilterPrefix pulumi.StringPtrInput `pulumi:"filterPrefix"`
	// Specifies object key name suffix.
	FilterSuffix pulumi.StringPtrInput `pulumi:"filterSuffix"`
	// Specifies unique identifier for each of the notification configurations.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies Amazon Lambda function ARN.
	LambdaFunctionArn pulumi.StringPtrInput `pulumi:"lambdaFunctionArn"`
}

func (BucketNotificationLambdaFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationLambdaFunction)(nil)).Elem()
}

func (i BucketNotificationLambdaFunctionArgs) ToBucketNotificationLambdaFunctionOutput() BucketNotificationLambdaFunctionOutput {
	return i.ToBucketNotificationLambdaFunctionOutputWithContext(context.Background())
}

func (i BucketNotificationLambdaFunctionArgs) ToBucketNotificationLambdaFunctionOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationLambdaFunctionOutput)
}

type BucketNotificationLambdaFunctionArrayInput interface {
	pulumi.Input

	ToBucketNotificationLambdaFunctionArrayOutput() BucketNotificationLambdaFunctionArrayOutput
	ToBucketNotificationLambdaFunctionArrayOutputWithContext(context.Context) BucketNotificationLambdaFunctionArrayOutput
}

type BucketNotificationLambdaFunctionArray []BucketNotificationLambdaFunctionInput

func (BucketNotificationLambdaFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketNotificationLambdaFunction)(nil)).Elem()
}

func (i BucketNotificationLambdaFunctionArray) ToBucketNotificationLambdaFunctionArrayOutput() BucketNotificationLambdaFunctionArrayOutput {
	return i.ToBucketNotificationLambdaFunctionArrayOutputWithContext(context.Background())
}

func (i BucketNotificationLambdaFunctionArray) ToBucketNotificationLambdaFunctionArrayOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationLambdaFunctionArrayOutput)
}

type BucketNotificationLambdaFunctionOutput struct { *pulumi.OutputState }

func (BucketNotificationLambdaFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationLambdaFunction)(nil)).Elem()
}

func (o BucketNotificationLambdaFunctionOutput) ToBucketNotificationLambdaFunctionOutput() BucketNotificationLambdaFunctionOutput {
	return o
}

func (o BucketNotificationLambdaFunctionOutput) ToBucketNotificationLambdaFunctionOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionOutput {
	return o
}

// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
func (o BucketNotificationLambdaFunctionOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func (v BucketNotificationLambdaFunction) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Specifies object key name prefix.
func (o BucketNotificationLambdaFunctionOutput) FilterPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationLambdaFunction) *string { return v.FilterPrefix }).(pulumi.StringPtrOutput)
}

// Specifies object key name suffix.
func (o BucketNotificationLambdaFunctionOutput) FilterSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationLambdaFunction) *string { return v.FilterSuffix }).(pulumi.StringPtrOutput)
}

// Specifies unique identifier for each of the notification configurations.
func (o BucketNotificationLambdaFunctionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationLambdaFunction) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies Amazon Lambda function ARN.
func (o BucketNotificationLambdaFunctionOutput) LambdaFunctionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationLambdaFunction) *string { return v.LambdaFunctionArn }).(pulumi.StringPtrOutput)
}

type BucketNotificationLambdaFunctionArrayOutput struct { *pulumi.OutputState}

func (BucketNotificationLambdaFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketNotificationLambdaFunction)(nil)).Elem()
}

func (o BucketNotificationLambdaFunctionArrayOutput) ToBucketNotificationLambdaFunctionArrayOutput() BucketNotificationLambdaFunctionArrayOutput {
	return o
}

func (o BucketNotificationLambdaFunctionArrayOutput) ToBucketNotificationLambdaFunctionArrayOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionArrayOutput {
	return o
}

func (o BucketNotificationLambdaFunctionArrayOutput) Index(i pulumi.IntInput) BucketNotificationLambdaFunctionOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) BucketNotificationLambdaFunction {
		return vs[0].([]BucketNotificationLambdaFunction)[vs[1].(int)]
	}).(BucketNotificationLambdaFunctionOutput)
}

func init() {
	pulumi.RegisterOutputType(BucketNotificationLambdaFunctionOutput{})
	pulumi.RegisterOutputType(BucketNotificationLambdaFunctionArrayOutput{})
}
