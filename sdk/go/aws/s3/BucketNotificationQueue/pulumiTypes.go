// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package BucketNotificationQueue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BucketNotificationQueue struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events []string `pulumi:"events"`
	// Specifies object key name prefix.
	FilterPrefix *string `pulumi:"filterPrefix"`
	// Specifies object key name suffix.
	FilterSuffix *string `pulumi:"filterSuffix"`
	// Specifies unique identifier for each of the notification configurations.
	Id *string `pulumi:"id"`
	// Specifies Amazon SQS queue ARN.
	QueueArn string `pulumi:"queueArn"`
}

type BucketNotificationQueueInput interface {
	pulumi.Input

	ToBucketNotificationQueueOutput() BucketNotificationQueueOutput
	ToBucketNotificationQueueOutputWithContext(context.Context) BucketNotificationQueueOutput
}

type BucketNotificationQueueArgs struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Specifies object key name prefix.
	FilterPrefix pulumi.StringPtrInput `pulumi:"filterPrefix"`
	// Specifies object key name suffix.
	FilterSuffix pulumi.StringPtrInput `pulumi:"filterSuffix"`
	// Specifies unique identifier for each of the notification configurations.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies Amazon SQS queue ARN.
	QueueArn pulumi.StringInput `pulumi:"queueArn"`
}

func (BucketNotificationQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationQueue)(nil)).Elem()
}

func (i BucketNotificationQueueArgs) ToBucketNotificationQueueOutput() BucketNotificationQueueOutput {
	return i.ToBucketNotificationQueueOutputWithContext(context.Background())
}

func (i BucketNotificationQueueArgs) ToBucketNotificationQueueOutputWithContext(ctx context.Context) BucketNotificationQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationQueueOutput)
}

type BucketNotificationQueueArrayInput interface {
	pulumi.Input

	ToBucketNotificationQueueArrayOutput() BucketNotificationQueueArrayOutput
	ToBucketNotificationQueueArrayOutputWithContext(context.Context) BucketNotificationQueueArrayOutput
}

type BucketNotificationQueueArray []BucketNotificationQueueInput

func (BucketNotificationQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketNotificationQueue)(nil)).Elem()
}

func (i BucketNotificationQueueArray) ToBucketNotificationQueueArrayOutput() BucketNotificationQueueArrayOutput {
	return i.ToBucketNotificationQueueArrayOutputWithContext(context.Background())
}

func (i BucketNotificationQueueArray) ToBucketNotificationQueueArrayOutputWithContext(ctx context.Context) BucketNotificationQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationQueueArrayOutput)
}

type BucketNotificationQueueOutput struct { *pulumi.OutputState }

func (BucketNotificationQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationQueue)(nil)).Elem()
}

func (o BucketNotificationQueueOutput) ToBucketNotificationQueueOutput() BucketNotificationQueueOutput {
	return o
}

func (o BucketNotificationQueueOutput) ToBucketNotificationQueueOutputWithContext(ctx context.Context) BucketNotificationQueueOutput {
	return o
}

// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
func (o BucketNotificationQueueOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func (v BucketNotificationQueue) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Specifies object key name prefix.
func (o BucketNotificationQueueOutput) FilterPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationQueue) *string { return v.FilterPrefix }).(pulumi.StringPtrOutput)
}

// Specifies object key name suffix.
func (o BucketNotificationQueueOutput) FilterSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationQueue) *string { return v.FilterSuffix }).(pulumi.StringPtrOutput)
}

// Specifies unique identifier for each of the notification configurations.
func (o BucketNotificationQueueOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v BucketNotificationQueue) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies Amazon SQS queue ARN.
func (o BucketNotificationQueueOutput) QueueArn() pulumi.StringOutput {
	return o.ApplyT(func (v BucketNotificationQueue) string { return v.QueueArn }).(pulumi.StringOutput)
}

type BucketNotificationQueueArrayOutput struct { *pulumi.OutputState}

func (BucketNotificationQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketNotificationQueue)(nil)).Elem()
}

func (o BucketNotificationQueueArrayOutput) ToBucketNotificationQueueArrayOutput() BucketNotificationQueueArrayOutput {
	return o
}

func (o BucketNotificationQueueArrayOutput) ToBucketNotificationQueueArrayOutputWithContext(ctx context.Context) BucketNotificationQueueArrayOutput {
	return o
}

func (o BucketNotificationQueueArrayOutput) Index(i pulumi.IntInput) BucketNotificationQueueOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) BucketNotificationQueue {
		return vs[0].([]BucketNotificationQueue)[vs[1].(int)]
	}).(BucketNotificationQueueOutput)
}

func init() {
	pulumi.RegisterOutputType(BucketNotificationQueueOutput{})
	pulumi.RegisterOutputType(BucketNotificationQueueArrayOutput{})
}
