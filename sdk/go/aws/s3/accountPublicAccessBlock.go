// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AccountPublicAccessBlock struct {
	s *pulumi.ResourceState
}

// NewAccountPublicAccessBlock registers a new resource with the given unique name, arguments, and options.
func NewAccountPublicAccessBlock(ctx *pulumi.Context,
	name string, args *AccountPublicAccessBlockArgs, opts ...pulumi.ResourceOpt) (*AccountPublicAccessBlock, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["blockPublicAcls"] = nil
		inputs["blockPublicPolicy"] = nil
		inputs["ignorePublicAcls"] = nil
		inputs["restrictPublicBuckets"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["blockPublicAcls"] = args.BlockPublicAcls
		inputs["blockPublicPolicy"] = args.BlockPublicPolicy
		inputs["ignorePublicAcls"] = args.IgnorePublicAcls
		inputs["restrictPublicBuckets"] = args.RestrictPublicBuckets
	}
	s, err := ctx.RegisterResource("aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPublicAccessBlock{s: s}, nil
}

// GetAccountPublicAccessBlock gets an existing AccountPublicAccessBlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPublicAccessBlock(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountPublicAccessBlockState, opts ...pulumi.ResourceOpt) (*AccountPublicAccessBlock, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["blockPublicAcls"] = state.BlockPublicAcls
		inputs["blockPublicPolicy"] = state.BlockPublicPolicy
		inputs["ignorePublicAcls"] = state.IgnorePublicAcls
		inputs["restrictPublicBuckets"] = state.RestrictPublicBuckets
	}
	s, err := ctx.ReadResource("aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPublicAccessBlock{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountPublicAccessBlock) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountPublicAccessBlock) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *AccountPublicAccessBlock) AccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountId"])
}

// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
// * PUT Bucket acl and PUT Object acl calls will fail if the specified ACL allows public access.
// * PUT Object calls will fail if the request includes an object ACL.
func (r *AccountPublicAccessBlock) BlockPublicAcls() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["blockPublicAcls"])
}

// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
func (r *AccountPublicAccessBlock) BlockPublicPolicy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["blockPublicPolicy"])
}

// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
// * Ignore all public ACLs on buckets in this account and any objects that they contain.
func (r *AccountPublicAccessBlock) IgnorePublicAcls() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ignorePublicAcls"])
}

// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
// * Only the bucket owner and AWS Services can access buckets with public policies.
func (r *AccountPublicAccessBlock) RestrictPublicBuckets() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["restrictPublicBuckets"])
}

// Input properties used for looking up and filtering AccountPublicAccessBlock resources.
type AccountPublicAccessBlockState struct {
	AccountId interface{}
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
	// * PUT Bucket acl and PUT Object acl calls will fail if the specified ACL allows public access.
	// * PUT Object calls will fail if the request includes an object ACL.
	BlockPublicAcls interface{}
	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
	// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
	BlockPublicPolicy interface{}
	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
	// * Ignore all public ACLs on buckets in this account and any objects that they contain.
	IgnorePublicAcls interface{}
	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
	// * Only the bucket owner and AWS Services can access buckets with public policies.
	RestrictPublicBuckets interface{}
}

// The set of arguments for constructing a AccountPublicAccessBlock resource.
type AccountPublicAccessBlockArgs struct {
	AccountId interface{}
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
	// * PUT Bucket acl and PUT Object acl calls will fail if the specified ACL allows public access.
	// * PUT Object calls will fail if the request includes an object ACL.
	BlockPublicAcls interface{}
	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
	// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
	BlockPublicPolicy interface{}
	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `false`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
	// * Ignore all public ACLs on buckets in this account and any objects that they contain.
	IgnorePublicAcls interface{}
	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `false`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
	// * Only the bucket owner and AWS Services can access buckets with public policies.
	RestrictPublicBuckets interface{}
}
