// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Permission struct {
	pulumi.CustomResourceState

	Action            pulumi.StringOutput    `pulumi:"action"`
	EventSourceToken  pulumi.StringPtrOutput `pulumi:"eventSourceToken"`
	Function          pulumi.StringOutput    `pulumi:"function"`
	Principal         pulumi.StringOutput    `pulumi:"principal"`
	Qualifier         pulumi.StringPtrOutput `pulumi:"qualifier"`
	SourceAccount     pulumi.StringPtrOutput `pulumi:"sourceAccount"`
	SourceArn         pulumi.StringPtrOutput `pulumi:"sourceArn"`
	StatementId       pulumi.StringOutput    `pulumi:"statementId"`
	StatementIdPrefix pulumi.StringPtrOutput `pulumi:"statementIdPrefix"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.Function == nil {
		return nil, errors.New("missing required argument 'Function'")
	}
	if args == nil || args.Principal == nil {
		return nil, errors.New("missing required argument 'Principal'")
	}
	if args == nil {
		args = &PermissionArgs{}
	}
	var resource Permission
	err := ctx.RegisterResource("aws:lambda/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("aws:lambda/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	Action            *string `pulumi:"action"`
	EventSourceToken  *string `pulumi:"eventSourceToken"`
	Function          *string `pulumi:"function"`
	Principal         *string `pulumi:"principal"`
	Qualifier         *string `pulumi:"qualifier"`
	SourceAccount     *string `pulumi:"sourceAccount"`
	SourceArn         *string `pulumi:"sourceArn"`
	StatementId       *string `pulumi:"statementId"`
	StatementIdPrefix *string `pulumi:"statementIdPrefix"`
}

type PermissionState struct {
	Action            pulumi.StringPtrInput
	EventSourceToken  pulumi.StringPtrInput
	Function          pulumi.StringPtrInput
	Principal         pulumi.StringPtrInput
	Qualifier         pulumi.StringPtrInput
	SourceAccount     pulumi.StringPtrInput
	SourceArn         pulumi.StringPtrInput
	StatementId       pulumi.StringPtrInput
	StatementIdPrefix pulumi.StringPtrInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	Action            string      `pulumi:"action"`
	EventSourceToken  *string     `pulumi:"eventSourceToken"`
	Function          interface{} `pulumi:"function"`
	Principal         string      `pulumi:"principal"`
	Qualifier         *string     `pulumi:"qualifier"`
	SourceAccount     *string     `pulumi:"sourceAccount"`
	SourceArn         *string     `pulumi:"sourceArn"`
	StatementId       *string     `pulumi:"statementId"`
	StatementIdPrefix *string     `pulumi:"statementIdPrefix"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	Action            pulumi.StringInput
	EventSourceToken  pulumi.StringPtrInput
	Function          pulumi.Input
	Principal         pulumi.StringInput
	Qualifier         pulumi.StringPtrInput
	SourceAccount     pulumi.StringPtrInput
	SourceArn         pulumi.StringPtrInput
	StatementId       pulumi.StringPtrInput
	StatementIdPrefix pulumi.StringPtrInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}
