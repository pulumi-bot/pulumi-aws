// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LayerVersion struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput      `pulumi:"arn"`
	Code               pulumi.ArchiveOutput     `pulumi:"code"`
	CompatibleRuntimes pulumi.StringArrayOutput `pulumi:"compatibleRuntimes"`
	CreatedDate        pulumi.StringOutput      `pulumi:"createdDate"`
	Description        pulumi.StringPtrOutput   `pulumi:"description"`
	LayerArn           pulumi.StringOutput      `pulumi:"layerArn"`
	LayerName          pulumi.StringOutput      `pulumi:"layerName"`
	LicenseInfo        pulumi.StringPtrOutput   `pulumi:"licenseInfo"`
	S3Bucket           pulumi.StringPtrOutput   `pulumi:"s3Bucket"`
	S3Key              pulumi.StringPtrOutput   `pulumi:"s3Key"`
	S3ObjectVersion    pulumi.StringPtrOutput   `pulumi:"s3ObjectVersion"`
	SourceCodeHash     pulumi.StringOutput      `pulumi:"sourceCodeHash"`
	SourceCodeSize     pulumi.IntOutput         `pulumi:"sourceCodeSize"`
	Version            pulumi.StringOutput      `pulumi:"version"`
}

// NewLayerVersion registers a new resource with the given unique name, arguments, and options.
func NewLayerVersion(ctx *pulumi.Context,
	name string, args *LayerVersionArgs, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	if args == nil || args.LayerName == nil {
		return nil, errors.New("missing required argument 'LayerName'")
	}
	if args == nil {
		args = &LayerVersionArgs{}
	}
	var resource LayerVersion
	err := ctx.RegisterResource("aws:lambda/layerVersion:LayerVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersion gets an existing LayerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionState, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	var resource LayerVersion
	err := ctx.ReadResource("aws:lambda/layerVersion:LayerVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersion resources.
type layerVersionState struct {
	Arn                *string        `pulumi:"arn"`
	Code               pulumi.Archive `pulumi:"code"`
	CompatibleRuntimes []string       `pulumi:"compatibleRuntimes"`
	CreatedDate        *string        `pulumi:"createdDate"`
	Description        *string        `pulumi:"description"`
	LayerArn           *string        `pulumi:"layerArn"`
	LayerName          *string        `pulumi:"layerName"`
	LicenseInfo        *string        `pulumi:"licenseInfo"`
	S3Bucket           *string        `pulumi:"s3Bucket"`
	S3Key              *string        `pulumi:"s3Key"`
	S3ObjectVersion    *string        `pulumi:"s3ObjectVersion"`
	SourceCodeHash     *string        `pulumi:"sourceCodeHash"`
	SourceCodeSize     *int           `pulumi:"sourceCodeSize"`
	Version            *string        `pulumi:"version"`
}

type LayerVersionState struct {
	Arn                pulumi.StringPtrInput
	Code               pulumi.ArchiveInput
	CompatibleRuntimes pulumi.StringArrayInput
	CreatedDate        pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	LayerArn           pulumi.StringPtrInput
	LayerName          pulumi.StringPtrInput
	LicenseInfo        pulumi.StringPtrInput
	S3Bucket           pulumi.StringPtrInput
	S3Key              pulumi.StringPtrInput
	S3ObjectVersion    pulumi.StringPtrInput
	SourceCodeHash     pulumi.StringPtrInput
	SourceCodeSize     pulumi.IntPtrInput
	Version            pulumi.StringPtrInput
}

func (LayerVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionState)(nil)).Elem()
}

type layerVersionArgs struct {
	Code               pulumi.Archive `pulumi:"code"`
	CompatibleRuntimes []string       `pulumi:"compatibleRuntimes"`
	Description        *string        `pulumi:"description"`
	LayerName          string         `pulumi:"layerName"`
	LicenseInfo        *string        `pulumi:"licenseInfo"`
	S3Bucket           *string        `pulumi:"s3Bucket"`
	S3Key              *string        `pulumi:"s3Key"`
	S3ObjectVersion    *string        `pulumi:"s3ObjectVersion"`
	SourceCodeHash     *string        `pulumi:"sourceCodeHash"`
}

// The set of arguments for constructing a LayerVersion resource.
type LayerVersionArgs struct {
	Code               pulumi.ArchiveInput
	CompatibleRuntimes pulumi.StringArrayInput
	Description        pulumi.StringPtrInput
	LayerName          pulumi.StringInput
	LicenseInfo        pulumi.StringPtrInput
	S3Bucket           pulumi.StringPtrInput
	S3Key              pulumi.StringPtrInput
	S3ObjectVersion    pulumi.StringPtrInput
	SourceCodeHash     pulumi.StringPtrInput
}

func (LayerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionArgs)(nil)).Elem()
}
