// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Resolver struct {
	pulumi.CustomResourceState

	ApiId            pulumi.StringOutput             `pulumi:"apiId"`
	Arn              pulumi.StringOutput             `pulumi:"arn"`
	CachingConfig    ResolverCachingConfigPtrOutput  `pulumi:"cachingConfig"`
	DataSource       pulumi.StringPtrOutput          `pulumi:"dataSource"`
	Field            pulumi.StringOutput             `pulumi:"field"`
	Kind             pulumi.StringPtrOutput          `pulumi:"kind"`
	PipelineConfig   ResolverPipelineConfigPtrOutput `pulumi:"pipelineConfig"`
	RequestTemplate  pulumi.StringOutput             `pulumi:"requestTemplate"`
	ResponseTemplate pulumi.StringOutput             `pulumi:"responseTemplate"`
	Type             pulumi.StringOutput             `pulumi:"type"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.Field == nil {
		return nil, errors.New("missing required argument 'Field'")
	}
	if args == nil || args.RequestTemplate == nil {
		return nil, errors.New("missing required argument 'RequestTemplate'")
	}
	if args == nil || args.ResponseTemplate == nil {
		return nil, errors.New("missing required argument 'ResponseTemplate'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ResolverArgs{}
	}
	var resource Resolver
	err := ctx.RegisterResource("aws:appsync/resolver:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws:appsync/resolver:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
	ApiId            *string                 `pulumi:"apiId"`
	Arn              *string                 `pulumi:"arn"`
	CachingConfig    *ResolverCachingConfig  `pulumi:"cachingConfig"`
	DataSource       *string                 `pulumi:"dataSource"`
	Field            *string                 `pulumi:"field"`
	Kind             *string                 `pulumi:"kind"`
	PipelineConfig   *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestTemplate  *string                 `pulumi:"requestTemplate"`
	ResponseTemplate *string                 `pulumi:"responseTemplate"`
	Type             *string                 `pulumi:"type"`
}

type ResolverState struct {
	ApiId            pulumi.StringPtrInput
	Arn              pulumi.StringPtrInput
	CachingConfig    ResolverCachingConfigPtrInput
	DataSource       pulumi.StringPtrInput
	Field            pulumi.StringPtrInput
	Kind             pulumi.StringPtrInput
	PipelineConfig   ResolverPipelineConfigPtrInput
	RequestTemplate  pulumi.StringPtrInput
	ResponseTemplate pulumi.StringPtrInput
	Type             pulumi.StringPtrInput
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	ApiId            string                  `pulumi:"apiId"`
	CachingConfig    *ResolverCachingConfig  `pulumi:"cachingConfig"`
	DataSource       *string                 `pulumi:"dataSource"`
	Field            string                  `pulumi:"field"`
	Kind             *string                 `pulumi:"kind"`
	PipelineConfig   *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestTemplate  string                  `pulumi:"requestTemplate"`
	ResponseTemplate string                  `pulumi:"responseTemplate"`
	Type             string                  `pulumi:"type"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	ApiId            pulumi.StringInput
	CachingConfig    ResolverCachingConfigPtrInput
	DataSource       pulumi.StringPtrInput
	Field            pulumi.StringInput
	Kind             pulumi.StringPtrInput
	PipelineConfig   ResolverPipelineConfigPtrInput
	RequestTemplate  pulumi.StringInput
	ResponseTemplate pulumi.StringInput
	Type             pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}
