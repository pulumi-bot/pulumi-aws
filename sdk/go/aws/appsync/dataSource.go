// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DataSource struct {
	pulumi.CustomResourceState

	ApiId               pulumi.StringOutput                    `pulumi:"apiId"`
	Arn                 pulumi.StringOutput                    `pulumi:"arn"`
	Description         pulumi.StringPtrOutput                 `pulumi:"description"`
	DynamodbConfig      DataSourceDynamodbConfigPtrOutput      `pulumi:"dynamodbConfig"`
	ElasticsearchConfig DataSourceElasticsearchConfigPtrOutput `pulumi:"elasticsearchConfig"`
	HttpConfig          DataSourceHttpConfigPtrOutput          `pulumi:"httpConfig"`
	LambdaConfig        DataSourceLambdaConfigPtrOutput        `pulumi:"lambdaConfig"`
	Name                pulumi.StringOutput                    `pulumi:"name"`
	ServiceRoleArn      pulumi.StringPtrOutput                 `pulumi:"serviceRoleArn"`
	Type                pulumi.StringOutput                    `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &DataSourceArgs{}
	}
	var resource DataSource
	err := ctx.RegisterResource("aws:appsync/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws:appsync/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	ApiId               *string                        `pulumi:"apiId"`
	Arn                 *string                        `pulumi:"arn"`
	Description         *string                        `pulumi:"description"`
	DynamodbConfig      *DataSourceDynamodbConfig      `pulumi:"dynamodbConfig"`
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	HttpConfig          *DataSourceHttpConfig          `pulumi:"httpConfig"`
	LambdaConfig        *DataSourceLambdaConfig        `pulumi:"lambdaConfig"`
	Name                *string                        `pulumi:"name"`
	ServiceRoleArn      *string                        `pulumi:"serviceRoleArn"`
	Type                *string                        `pulumi:"type"`
}

type DataSourceState struct {
	ApiId               pulumi.StringPtrInput
	Arn                 pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DynamodbConfig      DataSourceDynamodbConfigPtrInput
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	HttpConfig          DataSourceHttpConfigPtrInput
	LambdaConfig        DataSourceLambdaConfigPtrInput
	Name                pulumi.StringPtrInput
	ServiceRoleArn      pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	ApiId               string                         `pulumi:"apiId"`
	Description         *string                        `pulumi:"description"`
	DynamodbConfig      *DataSourceDynamodbConfig      `pulumi:"dynamodbConfig"`
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	HttpConfig          *DataSourceHttpConfig          `pulumi:"httpConfig"`
	LambdaConfig        *DataSourceLambdaConfig        `pulumi:"lambdaConfig"`
	Name                *string                        `pulumi:"name"`
	ServiceRoleArn      *string                        `pulumi:"serviceRoleArn"`
	Type                string                         `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	ApiId               pulumi.StringInput
	Description         pulumi.StringPtrInput
	DynamodbConfig      DataSourceDynamodbConfigPtrInput
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	HttpConfig          DataSourceHttpConfigPtrInput
	LambdaConfig        DataSourceLambdaConfigPtrInput
	Name                pulumi.StringPtrInput
	ServiceRoleArn      pulumi.StringPtrInput
	Type                pulumi.StringInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}
