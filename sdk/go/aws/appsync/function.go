// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Function struct {
	pulumi.CustomResourceState

	ApiId                   pulumi.StringOutput    `pulumi:"apiId"`
	Arn                     pulumi.StringOutput    `pulumi:"arn"`
	DataSource              pulumi.StringOutput    `pulumi:"dataSource"`
	Description             pulumi.StringPtrOutput `pulumi:"description"`
	FunctionId              pulumi.StringOutput    `pulumi:"functionId"`
	FunctionVersion         pulumi.StringPtrOutput `pulumi:"functionVersion"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	RequestMappingTemplate  pulumi.StringOutput    `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate pulumi.StringOutput    `pulumi:"responseMappingTemplate"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.DataSource == nil {
		return nil, errors.New("missing required argument 'DataSource'")
	}
	if args == nil || args.RequestMappingTemplate == nil {
		return nil, errors.New("missing required argument 'RequestMappingTemplate'")
	}
	if args == nil || args.ResponseMappingTemplate == nil {
		return nil, errors.New("missing required argument 'ResponseMappingTemplate'")
	}
	if args == nil {
		args = &FunctionArgs{}
	}
	var resource Function
	err := ctx.RegisterResource("aws:appsync/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("aws:appsync/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	ApiId                   *string `pulumi:"apiId"`
	Arn                     *string `pulumi:"arn"`
	DataSource              *string `pulumi:"dataSource"`
	Description             *string `pulumi:"description"`
	FunctionId              *string `pulumi:"functionId"`
	FunctionVersion         *string `pulumi:"functionVersion"`
	Name                    *string `pulumi:"name"`
	RequestMappingTemplate  *string `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate *string `pulumi:"responseMappingTemplate"`
}

type FunctionState struct {
	ApiId                   pulumi.StringPtrInput
	Arn                     pulumi.StringPtrInput
	DataSource              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	FunctionId              pulumi.StringPtrInput
	FunctionVersion         pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RequestMappingTemplate  pulumi.StringPtrInput
	ResponseMappingTemplate pulumi.StringPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	ApiId                   string  `pulumi:"apiId"`
	DataSource              string  `pulumi:"dataSource"`
	Description             *string `pulumi:"description"`
	FunctionVersion         *string `pulumi:"functionVersion"`
	Name                    *string `pulumi:"name"`
	RequestMappingTemplate  string  `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate string  `pulumi:"responseMappingTemplate"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	ApiId                   pulumi.StringInput
	DataSource              pulumi.StringInput
	Description             pulumi.StringPtrInput
	FunctionVersion         pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RequestMappingTemplate  pulumi.StringInput
	ResponseMappingTemplate pulumi.StringInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}
