// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package BudgetNotification

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

type BudgetNotificationInput interface {
	pulumi.Input

	ToBudgetNotificationOutput() BudgetNotificationOutput
	ToBudgetNotificationOutputWithContext(context.Context) BudgetNotificationOutput
}

type BudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumi.StringArrayInput `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumi.StringArrayInput `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumi.StringInput `pulumi:"thresholdType"`
}

func (BudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return i.ToBudgetNotificationOutputWithContext(context.Background())
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationOutput)
}

type BudgetNotificationArrayInput interface {
	pulumi.Input

	ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput
	ToBudgetNotificationArrayOutputWithContext(context.Context) BudgetNotificationArrayOutput
}

type BudgetNotificationArray []BudgetNotificationInput

func (BudgetNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return i.ToBudgetNotificationArrayOutputWithContext(context.Background())
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationArrayOutput)
}

type BudgetNotificationOutput struct { *pulumi.OutputState }

func (BudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return o
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o BudgetNotificationOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func (v BudgetNotification) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
func (o BudgetNotificationOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func (v BudgetNotification) string { return v.NotificationType }).(pulumi.StringOutput)
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o BudgetNotificationOutput) SubscriberEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v BudgetNotification) []string { return v.SubscriberEmailAddresses }).(pulumi.StringArrayOutput)
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o BudgetNotificationOutput) SubscriberSnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func (v BudgetNotification) []string { return v.SubscriberSnsTopicArns }).(pulumi.StringArrayOutput)
}

// (Required) Threshold when the notification should be sent.
func (o BudgetNotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func (v BudgetNotification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o BudgetNotificationOutput) ThresholdType() pulumi.StringOutput {
	return o.ApplyT(func (v BudgetNotification) string { return v.ThresholdType }).(pulumi.StringOutput)
}

type BudgetNotificationArrayOutput struct { *pulumi.OutputState}

func (BudgetNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) Index(i pulumi.IntInput) BudgetNotificationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) BudgetNotification {
		return vs[0].([]BudgetNotification)[vs[1].(int)]
	}).(BudgetNotificationOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetNotificationOutput{})
	pulumi.RegisterOutputType(BudgetNotificationArrayOutput{})
}
