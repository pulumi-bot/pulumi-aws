// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Budget struct {
	pulumi.CustomResourceState

	AccountId       pulumi.StringOutput           `pulumi:"accountId"`
	BudgetType      pulumi.StringOutput           `pulumi:"budgetType"`
	CostFilters     pulumi.StringMapOutput        `pulumi:"costFilters"`
	CostTypes       BudgetCostTypesOutput         `pulumi:"costTypes"`
	LimitAmount     pulumi.StringOutput           `pulumi:"limitAmount"`
	LimitUnit       pulumi.StringOutput           `pulumi:"limitUnit"`
	Name            pulumi.StringOutput           `pulumi:"name"`
	NamePrefix      pulumi.StringOutput           `pulumi:"namePrefix"`
	Notifications   BudgetNotificationArrayOutput `pulumi:"notifications"`
	TimePeriodEnd   pulumi.StringPtrOutput        `pulumi:"timePeriodEnd"`
	TimePeriodStart pulumi.StringOutput           `pulumi:"timePeriodStart"`
	TimeUnit        pulumi.StringOutput           `pulumi:"timeUnit"`
}

// NewBudget registers a new resource with the given unique name, arguments, and options.
func NewBudget(ctx *pulumi.Context,
	name string, args *BudgetArgs, opts ...pulumi.ResourceOption) (*Budget, error) {
	if args == nil || args.BudgetType == nil {
		return nil, errors.New("missing required argument 'BudgetType'")
	}
	if args == nil || args.LimitAmount == nil {
		return nil, errors.New("missing required argument 'LimitAmount'")
	}
	if args == nil || args.LimitUnit == nil {
		return nil, errors.New("missing required argument 'LimitUnit'")
	}
	if args == nil || args.TimePeriodStart == nil {
		return nil, errors.New("missing required argument 'TimePeriodStart'")
	}
	if args == nil || args.TimeUnit == nil {
		return nil, errors.New("missing required argument 'TimeUnit'")
	}
	if args == nil {
		args = &BudgetArgs{}
	}
	var resource Budget
	err := ctx.RegisterResource("aws:budgets/budget:Budget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBudget gets an existing Budget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BudgetState, opts ...pulumi.ResourceOption) (*Budget, error) {
	var resource Budget
	err := ctx.ReadResource("aws:budgets/budget:Budget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Budget resources.
type budgetState struct {
	AccountId       *string              `pulumi:"accountId"`
	BudgetType      *string              `pulumi:"budgetType"`
	CostFilters     map[string]string    `pulumi:"costFilters"`
	CostTypes       *BudgetCostTypes     `pulumi:"costTypes"`
	LimitAmount     *string              `pulumi:"limitAmount"`
	LimitUnit       *string              `pulumi:"limitUnit"`
	Name            *string              `pulumi:"name"`
	NamePrefix      *string              `pulumi:"namePrefix"`
	Notifications   []BudgetNotification `pulumi:"notifications"`
	TimePeriodEnd   *string              `pulumi:"timePeriodEnd"`
	TimePeriodStart *string              `pulumi:"timePeriodStart"`
	TimeUnit        *string              `pulumi:"timeUnit"`
}

type BudgetState struct {
	AccountId       pulumi.StringPtrInput
	BudgetType      pulumi.StringPtrInput
	CostFilters     pulumi.StringMapInput
	CostTypes       BudgetCostTypesPtrInput
	LimitAmount     pulumi.StringPtrInput
	LimitUnit       pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	Notifications   BudgetNotificationArrayInput
	TimePeriodEnd   pulumi.StringPtrInput
	TimePeriodStart pulumi.StringPtrInput
	TimeUnit        pulumi.StringPtrInput
}

func (BudgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetState)(nil)).Elem()
}

type budgetArgs struct {
	AccountId       *string              `pulumi:"accountId"`
	BudgetType      string               `pulumi:"budgetType"`
	CostFilters     map[string]string    `pulumi:"costFilters"`
	CostTypes       *BudgetCostTypes     `pulumi:"costTypes"`
	LimitAmount     string               `pulumi:"limitAmount"`
	LimitUnit       string               `pulumi:"limitUnit"`
	Name            *string              `pulumi:"name"`
	NamePrefix      *string              `pulumi:"namePrefix"`
	Notifications   []BudgetNotification `pulumi:"notifications"`
	TimePeriodEnd   *string              `pulumi:"timePeriodEnd"`
	TimePeriodStart string               `pulumi:"timePeriodStart"`
	TimeUnit        string               `pulumi:"timeUnit"`
}

// The set of arguments for constructing a Budget resource.
type BudgetArgs struct {
	AccountId       pulumi.StringPtrInput
	BudgetType      pulumi.StringInput
	CostFilters     pulumi.StringMapInput
	CostTypes       BudgetCostTypesPtrInput
	LimitAmount     pulumi.StringInput
	LimitUnit       pulumi.StringInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	Notifications   BudgetNotificationArrayInput
	TimePeriodEnd   pulumi.StringPtrInput
	TimePeriodStart pulumi.StringInput
	TimeUnit        pulumi.StringInput
}

func (BudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetArgs)(nil)).Elem()
}
