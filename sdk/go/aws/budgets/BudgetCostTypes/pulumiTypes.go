// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package BudgetCostTypes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BudgetCostTypes struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit *bool `pulumi:"includeCredit"`
	// Specifies whether a budget includes discounts. Defaults to `true`
	IncludeDiscount *bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription *bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring *bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund *bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription *bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport *bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax *bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront *bool `pulumi:"includeUpfront"`
	// Specifies whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized *bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended *bool `pulumi:"useBlended"`
}

type BudgetCostTypesInput interface {
	pulumi.Input

	ToBudgetCostTypesOutput() BudgetCostTypesOutput
	ToBudgetCostTypesOutputWithContext(context.Context) BudgetCostTypesOutput
}

type BudgetCostTypesArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit pulumi.BoolPtrInput `pulumi:"includeCredit"`
	// Specifies whether a budget includes discounts. Defaults to `true`
	IncludeDiscount pulumi.BoolPtrInput `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription pulumi.BoolPtrInput `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring pulumi.BoolPtrInput `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund pulumi.BoolPtrInput `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription pulumi.BoolPtrInput `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport pulumi.BoolPtrInput `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax pulumi.BoolPtrInput `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront pulumi.BoolPtrInput `pulumi:"includeUpfront"`
	// Specifies whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized pulumi.BoolPtrInput `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended pulumi.BoolPtrInput `pulumi:"useBlended"`
}

func (BudgetCostTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return i.ToBudgetCostTypesOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput)
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput).ToBudgetCostTypesPtrOutputWithContext(ctx)
}

type BudgetCostTypesPtrInput interface {
	pulumi.Input

	ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput
	ToBudgetCostTypesPtrOutputWithContext(context.Context) BudgetCostTypesPtrOutput
}

type budgetCostTypesPtrType BudgetCostTypesArgs

func BudgetCostTypesPtr(v *BudgetCostTypesArgs) BudgetCostTypesPtrInput {	return (*budgetCostTypesPtrType)(v)
}

func (*budgetCostTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesPtrOutput)
}

type BudgetCostTypesOutput struct { *pulumi.OutputState }

func (BudgetCostTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *BudgetCostTypes {
		return &v
	}).(BudgetCostTypesPtrOutput)
}
// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeCredit }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeDiscount }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeOtherSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeRecurring }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeRefund }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeSupport }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeTax }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeUpfront }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.UseAmortized }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.UseBlended }).(pulumi.BoolPtrOutput)
}

type BudgetCostTypesPtrOutput struct { *pulumi.OutputState}

func (BudgetCostTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) Elem() BudgetCostTypesOutput {
	return o.ApplyT(func (v *BudgetCostTypes) BudgetCostTypes { return *v }).(BudgetCostTypesOutput)
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeCredit }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeDiscount }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeOtherSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeRecurring }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeRefund }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeSupport }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeTax }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.IncludeUpfront }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.UseAmortized }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v BudgetCostTypes) *bool { return v.UseBlended }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetCostTypesOutput{})
	pulumi.RegisterOutputType(BudgetCostTypesPtrOutput{})
}
