// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package DeploymentGroupLoadBalancerInfo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoElbInfo"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoTargetGroupInfo"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoTargetGroupPairInfo"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup"
	"https:/github.com/pulumi/pulumi-aws/codedeploy/DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute"
)

type DeploymentGroupLoadBalancerInfo struct {
	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
	ElbInfos []codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfo `pulumi:"elbInfos"`
	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
	TargetGroupInfos []codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfo `pulumi:"targetGroupInfos"`
	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
	TargetGroupPairInfo *codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo `pulumi:"targetGroupPairInfo"`
}

type DeploymentGroupLoadBalancerInfoInput interface {
	pulumi.Input

	ToDeploymentGroupLoadBalancerInfoOutput() DeploymentGroupLoadBalancerInfoOutput
	ToDeploymentGroupLoadBalancerInfoOutputWithContext(context.Context) DeploymentGroupLoadBalancerInfoOutput
}

type DeploymentGroupLoadBalancerInfoArgs struct {
	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
	ElbInfos codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfoArrayInput `pulumi:"elbInfos"`
	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
	TargetGroupInfos codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfoArrayInput `pulumi:"targetGroupInfos"`
	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
	TargetGroupPairInfo codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoPtrInput `pulumi:"targetGroupPairInfo"`
}

func (DeploymentGroupLoadBalancerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoOutput() DeploymentGroupLoadBalancerInfoOutput {
	return i.ToDeploymentGroupLoadBalancerInfoOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoOutput)
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoPtrOutput() DeploymentGroupLoadBalancerInfoPtrOutput {
	return i.ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoOutput).ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(ctx)
}

type DeploymentGroupLoadBalancerInfoPtrInput interface {
	pulumi.Input

	ToDeploymentGroupLoadBalancerInfoPtrOutput() DeploymentGroupLoadBalancerInfoPtrOutput
	ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(context.Context) DeploymentGroupLoadBalancerInfoPtrOutput
}

type deploymentGroupLoadBalancerInfoPtrType DeploymentGroupLoadBalancerInfoArgs

func DeploymentGroupLoadBalancerInfoPtr(v *DeploymentGroupLoadBalancerInfoArgs) DeploymentGroupLoadBalancerInfoPtrInput {	return (*deploymentGroupLoadBalancerInfoPtrType)(v)
}

func (*deploymentGroupLoadBalancerInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (i *deploymentGroupLoadBalancerInfoPtrType) ToDeploymentGroupLoadBalancerInfoPtrOutput() DeploymentGroupLoadBalancerInfoPtrOutput {
	return i.ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (i *deploymentGroupLoadBalancerInfoPtrType) ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoPtrOutput)
}

type DeploymentGroupLoadBalancerInfoOutput struct { *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoOutput() DeploymentGroupLoadBalancerInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoPtrOutput() DeploymentGroupLoadBalancerInfoPtrOutput {
	return o.ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoPtrOutput {
	return o.ApplyT(func(v DeploymentGroupLoadBalancerInfo) *DeploymentGroupLoadBalancerInfo {
		return &v
	}).(DeploymentGroupLoadBalancerInfoPtrOutput)
}
// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) ElbInfos() codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfoArrayOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) []codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfo { return v.ElbInfos }).(codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfoArrayOutput)
}

// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) TargetGroupInfos() codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfoArrayOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) []codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfo { return v.TargetGroupInfos }).(codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfoArrayOutput)
}

// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) TargetGroupPairInfo() codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoPtrOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) *codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo { return v.TargetGroupPairInfo }).(codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoPtrOutput)
}

type DeploymentGroupLoadBalancerInfoPtrOutput struct { *pulumi.OutputState}

func (DeploymentGroupLoadBalancerInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoPtrOutput) ToDeploymentGroupLoadBalancerInfoPtrOutput() DeploymentGroupLoadBalancerInfoPtrOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoPtrOutput) ToDeploymentGroupLoadBalancerInfoPtrOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoPtrOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoPtrOutput) Elem() DeploymentGroupLoadBalancerInfoOutput {
	return o.ApplyT(func (v *DeploymentGroupLoadBalancerInfo) DeploymentGroupLoadBalancerInfo { return *v }).(DeploymentGroupLoadBalancerInfoOutput)
}

// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoPtrOutput) ElbInfos() codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfoArrayOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) []codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfo { return v.ElbInfos }).(codedeployDeploymentGroupLoadBalancerInfoElbInfo.DeploymentGroupLoadBalancerInfoElbInfoArrayOutput)
}

// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoPtrOutput) TargetGroupInfos() codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfoArrayOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) []codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfo { return v.TargetGroupInfos }).(codedeployDeploymentGroupLoadBalancerInfoTargetGroupInfo.DeploymentGroupLoadBalancerInfoTargetGroupInfoArrayOutput)
}

// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
func (o DeploymentGroupLoadBalancerInfoPtrOutput) TargetGroupPairInfo() codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoPtrOutput {
	return o.ApplyT(func (v DeploymentGroupLoadBalancerInfo) *codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo { return v.TargetGroupPairInfo }).(codedeployDeploymentGroupLoadBalancerInfoTargetGroupPairInfo.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoPtrOutput{})
}
