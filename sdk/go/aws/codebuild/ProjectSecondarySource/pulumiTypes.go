// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectSecondarySource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/codebuild/ProjectSecondarySourceAuth"
)

type ProjectSecondarySource struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths []codebuildProjectSecondarySourceAuth.ProjectSecondarySourceAuth `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
	SourceIdentifier string `pulumi:"sourceIdentifier"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectSecondarySourceInput interface {
	pulumi.Input

	ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput
	ToProjectSecondarySourceOutputWithContext(context.Context) ProjectSecondarySourceOutput
}

type ProjectSecondarySourceArgs struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths codebuildProjectSecondarySourceAuth.ProjectSecondarySourceAuthArrayInput `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec pulumi.StringPtrInput `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth pulumi.IntPtrInput `pulumi:"gitCloneDepth"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumi.BoolPtrInput `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus pulumi.BoolPtrInput `pulumi:"reportBuildStatus"`
	// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
	SourceIdentifier pulumi.StringInput `pulumi:"sourceIdentifier"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSecondarySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return i.ToProjectSecondarySourceOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceOutput)
}

type ProjectSecondarySourceArrayInput interface {
	pulumi.Input

	ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput
	ToProjectSecondarySourceArrayOutputWithContext(context.Context) ProjectSecondarySourceArrayOutput
}

type ProjectSecondarySourceArray []ProjectSecondarySourceInput

func (ProjectSecondarySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySource)(nil)).Elem()
}

func (i ProjectSecondarySourceArray) ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput {
	return i.ToProjectSecondarySourceArrayOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceArray) ToProjectSecondarySourceArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceArrayOutput)
}

type ProjectSecondarySourceOutput struct { *pulumi.OutputState }

func (ProjectSecondarySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return o
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return o
}

// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSecondarySourceOutput) Auths() codebuildProjectSecondarySourceAuth.ProjectSecondarySourceAuthArrayOutput {
	return o.ApplyT(func (v ProjectSecondarySource) []codebuildProjectSecondarySourceAuth.ProjectSecondarySourceAuth { return v.Auths }).(codebuildProjectSecondarySourceAuth.ProjectSecondarySourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds.
func (o ProjectSecondarySourceOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSecondarySourceOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSecondarySourceOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSecondarySourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
func (o ProjectSecondarySourceOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
func (o ProjectSecondarySourceOutput) SourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSecondarySource) string { return v.SourceIdentifier }).(pulumi.StringOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSecondarySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSecondarySource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSecondarySourceArrayOutput struct { *pulumi.OutputState}

func (ProjectSecondarySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySource)(nil)).Elem()
}

func (o ProjectSecondarySourceArrayOutput) ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput {
	return o
}

func (o ProjectSecondarySourceArrayOutput) ToProjectSecondarySourceArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceArrayOutput {
	return o
}

func (o ProjectSecondarySourceArrayOutput) Index(i pulumi.IntInput) ProjectSecondarySourceOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ProjectSecondarySource {
		return vs[0].([]ProjectSecondarySource)[vs[1].(int)]
	}).(ProjectSecondarySourceOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectSecondarySourceOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceArrayOutput{})
}
