// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectSourceAuth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectSourceAuth struct {
	// The resource value that applies to the specified authorization type.
	Resource *string `pulumi:"resource"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectSourceAuthInput interface {
	pulumi.Input

	ToProjectSourceAuthOutput() ProjectSourceAuthOutput
	ToProjectSourceAuthOutputWithContext(context.Context) ProjectSourceAuthOutput
}

type ProjectSourceAuthArgs struct {
	// The resource value that applies to the specified authorization type.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSourceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return i.ToProjectSourceAuthOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthOutput)
}

type ProjectSourceAuthArrayInput interface {
	pulumi.Input

	ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput
	ToProjectSourceAuthArrayOutputWithContext(context.Context) ProjectSourceAuthArrayOutput
}

type ProjectSourceAuthArray []ProjectSourceAuthInput

func (ProjectSourceAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSourceAuth)(nil)).Elem()
}

func (i ProjectSourceAuthArray) ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput {
	return i.ToProjectSourceAuthArrayOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArray) ToProjectSourceAuthArrayOutputWithContext(ctx context.Context) ProjectSourceAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthArrayOutput)
}

type ProjectSourceAuthOutput struct { *pulumi.OutputState }

func (ProjectSourceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return o
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return o
}

// The resource value that applies to the specified authorization type.
func (o ProjectSourceAuthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSourceAuth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSourceAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSourceAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourceAuthArrayOutput struct { *pulumi.OutputState}

func (ProjectSourceAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthArrayOutput) ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput {
	return o
}

func (o ProjectSourceAuthArrayOutput) ToProjectSourceAuthArrayOutputWithContext(ctx context.Context) ProjectSourceAuthArrayOutput {
	return o
}

func (o ProjectSourceAuthArrayOutput) Index(i pulumi.IntInput) ProjectSourceAuthOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ProjectSourceAuth {
		return vs[0].([]ProjectSourceAuth)[vs[1].(int)]
	}).(ProjectSourceAuthOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectSourceAuthOutput{})
	pulumi.RegisterOutputType(ProjectSourceAuthArrayOutput{})
}
