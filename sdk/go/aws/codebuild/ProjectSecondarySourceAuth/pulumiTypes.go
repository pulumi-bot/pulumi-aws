// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectSecondarySourceAuth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectSecondarySourceAuth struct {
	// The resource value that applies to the specified authorization type.
	Resource *string `pulumi:"resource"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectSecondarySourceAuthInput interface {
	pulumi.Input

	ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput
	ToProjectSecondarySourceAuthOutputWithContext(context.Context) ProjectSecondarySourceAuthOutput
}

type ProjectSecondarySourceAuthArgs struct {
	// The resource value that applies to the specified authorization type.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSecondarySourceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceAuth)(nil)).Elem()
}

func (i ProjectSecondarySourceAuthArgs) ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput {
	return i.ToProjectSecondarySourceAuthOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceAuthArgs) ToProjectSecondarySourceAuthOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceAuthOutput)
}

type ProjectSecondarySourceAuthArrayInput interface {
	pulumi.Input

	ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput
	ToProjectSecondarySourceAuthArrayOutputWithContext(context.Context) ProjectSecondarySourceAuthArrayOutput
}

type ProjectSecondarySourceAuthArray []ProjectSecondarySourceAuthInput

func (ProjectSecondarySourceAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySourceAuth)(nil)).Elem()
}

func (i ProjectSecondarySourceAuthArray) ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput {
	return i.ToProjectSecondarySourceAuthArrayOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceAuthArray) ToProjectSecondarySourceAuthArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceAuthArrayOutput)
}

type ProjectSecondarySourceAuthOutput struct { *pulumi.OutputState }

func (ProjectSecondarySourceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceAuth)(nil)).Elem()
}

func (o ProjectSecondarySourceAuthOutput) ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput {
	return o
}

func (o ProjectSecondarySourceAuthOutput) ToProjectSecondarySourceAuthOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthOutput {
	return o
}

// The resource value that applies to the specified authorization type.
func (o ProjectSecondarySourceAuthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSecondarySourceAuth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSecondarySourceAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSecondarySourceAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSecondarySourceAuthArrayOutput struct { *pulumi.OutputState}

func (ProjectSecondarySourceAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySourceAuth)(nil)).Elem()
}

func (o ProjectSecondarySourceAuthArrayOutput) ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput {
	return o
}

func (o ProjectSecondarySourceAuthArrayOutput) ToProjectSecondarySourceAuthArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthArrayOutput {
	return o
}

func (o ProjectSecondarySourceAuthArrayOutput) Index(i pulumi.IntInput) ProjectSecondarySourceAuthOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ProjectSecondarySourceAuth {
		return vs[0].([]ProjectSecondarySourceAuth)[vs[1].(int)]
	}).(ProjectSecondarySourceAuthOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectSecondarySourceAuthOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceAuthArrayOutput{})
}
