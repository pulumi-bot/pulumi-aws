// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectSource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/codebuild/ProjectSourceAuth"
)

type ProjectSource struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths []codebuildProjectSourceAuth.ProjectSourceAuth `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectSourceInput interface {
	pulumi.Input

	ToProjectSourceOutput() ProjectSourceOutput
	ToProjectSourceOutputWithContext(context.Context) ProjectSourceOutput
}

type ProjectSourceArgs struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths codebuildProjectSourceAuth.ProjectSourceAuthArrayInput `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec pulumi.StringPtrInput `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth pulumi.IntPtrInput `pulumi:"gitCloneDepth"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumi.BoolPtrInput `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus pulumi.BoolPtrInput `pulumi:"reportBuildStatus"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (i ProjectSourceArgs) ToProjectSourceOutput() ProjectSourceOutput {
	return i.ToProjectSourceOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput)
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput).ToProjectSourcePtrOutputWithContext(ctx)
}

type ProjectSourcePtrInput interface {
	pulumi.Input

	ToProjectSourcePtrOutput() ProjectSourcePtrOutput
	ToProjectSourcePtrOutputWithContext(context.Context) ProjectSourcePtrOutput
}

type projectSourcePtrType ProjectSourceArgs

func ProjectSourcePtr(v *ProjectSourceArgs) ProjectSourcePtrInput {	return (*projectSourcePtrType)(v)
}

func (*projectSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourcePtrOutput)
}

type ProjectSourceOutput struct { *pulumi.OutputState }

func (ProjectSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (o ProjectSourceOutput) ToProjectSourceOutput() ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectSource {
		return &v
	}).(ProjectSourcePtrOutput)
}
// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSourceOutput) Auths() codebuildProjectSourceAuth.ProjectSourceAuthArrayOutput {
	return o.ApplyT(func (v ProjectSource) []codebuildProjectSourceAuth.ProjectSourceAuth { return v.Auths }).(codebuildProjectSourceAuth.ProjectSourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds.
func (o ProjectSourceOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSourceOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ProjectSource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSourceOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
func (o ProjectSourceOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourcePtrOutput struct { *pulumi.OutputState}

func (ProjectSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) Elem() ProjectSourceOutput {
	return o.ApplyT(func (v *ProjectSource) ProjectSource { return *v }).(ProjectSourceOutput)
}

// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSourcePtrOutput) Auths() codebuildProjectSourceAuth.ProjectSourceAuthArrayOutput {
	return o.ApplyT(func (v ProjectSource) []codebuildProjectSourceAuth.ProjectSourceAuth { return v.Auths }).(codebuildProjectSourceAuth.ProjectSourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds.
func (o ProjectSourcePtrOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSourcePtrOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ProjectSource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSourcePtrOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSourcePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectSource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
func (o ProjectSourcePtrOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectSource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSourcePtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectSource) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectSourceOutput{})
	pulumi.RegisterOutputType(ProjectSourcePtrOutput{})
}
