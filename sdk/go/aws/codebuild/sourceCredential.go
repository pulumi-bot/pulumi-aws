// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeBuild Source Credentials Resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_source_credential.html.markdown.
type SourceCredential struct {
	s *pulumi.ResourceState
}

// NewSourceCredential registers a new resource with the given unique name, arguments, and options.
func NewSourceCredential(ctx *pulumi.Context,
	name string, args *SourceCredentialArgs, opts ...pulumi.ResourceOpt) (*SourceCredential, error) {
	if args == nil || args.AuthType == nil {
		return nil, errors.New("missing required argument 'AuthType'")
	}
	if args == nil || args.ServerType == nil {
		return nil, errors.New("missing required argument 'ServerType'")
	}
	if args == nil || args.Token == nil {
		return nil, errors.New("missing required argument 'Token'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authType"] = nil
		inputs["serverType"] = nil
		inputs["token"] = nil
		inputs["userName"] = nil
	} else {
		inputs["authType"] = args.AuthType
		inputs["serverType"] = args.ServerType
		inputs["token"] = args.Token
		inputs["userName"] = args.UserName
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:codebuild/sourceCredential:SourceCredential", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SourceCredential{s: s}, nil
}

// GetSourceCredential gets an existing SourceCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceCredential(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SourceCredentialState, opts ...pulumi.ResourceOpt) (*SourceCredential, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["authType"] = state.AuthType
		inputs["serverType"] = state.ServerType
		inputs["token"] = state.Token
		inputs["userName"] = state.UserName
	}
	s, err := ctx.ReadResource("aws:codebuild/sourceCredential:SourceCredential", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SourceCredential{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SourceCredential) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SourceCredential) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of Source Credential.
func (r *SourceCredential) Arn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arn"])
}

// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
func (r *SourceCredential) AuthType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authType"])
}

// The source provider used for this project.
func (r *SourceCredential) ServerType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverType"])
}

// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
func (r *SourceCredential) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
func (r *SourceCredential) UserName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userName"])
}

// Input properties used for looking up and filtering SourceCredential resources.
type SourceCredentialState struct {
	// The ARN of Source Credential.
	Arn interface{}
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType interface{}
	// The source provider used for this project.
	ServerType interface{}
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token interface{}
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName interface{}
}

// The set of arguments for constructing a SourceCredential resource.
type SourceCredentialArgs struct {
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType interface{}
	// The source provider used for this project.
	ServerType interface{}
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token interface{}
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName interface{}
}
