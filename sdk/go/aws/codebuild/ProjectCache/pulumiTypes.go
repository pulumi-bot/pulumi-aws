// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectCache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectCache struct {
	// The location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
	Modes []string `pulumi:"modes"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type *string `pulumi:"type"`
}

type ProjectCacheInput interface {
	pulumi.Input

	ToProjectCacheOutput() ProjectCacheOutput
	ToProjectCacheOutputWithContext(context.Context) ProjectCacheOutput
}

type ProjectCacheArgs struct {
	// The location of the source code from git or s3.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ProjectCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (i ProjectCacheArgs) ToProjectCacheOutput() ProjectCacheOutput {
	return i.ToProjectCacheOutputWithContext(context.Background())
}

func (i ProjectCacheArgs) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCacheOutput)
}

func (i ProjectCacheArgs) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return i.ToProjectCachePtrOutputWithContext(context.Background())
}

func (i ProjectCacheArgs) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCacheOutput).ToProjectCachePtrOutputWithContext(ctx)
}

type ProjectCachePtrInput interface {
	pulumi.Input

	ToProjectCachePtrOutput() ProjectCachePtrOutput
	ToProjectCachePtrOutputWithContext(context.Context) ProjectCachePtrOutput
}

type projectCachePtrType ProjectCacheArgs

func ProjectCachePtr(v *ProjectCacheArgs) ProjectCachePtrInput {	return (*projectCachePtrType)(v)
}

func (*projectCachePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCache)(nil)).Elem()
}

func (i *projectCachePtrType) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return i.ToProjectCachePtrOutputWithContext(context.Background())
}

func (i *projectCachePtrType) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCachePtrOutput)
}

type ProjectCacheOutput struct { *pulumi.OutputState }

func (ProjectCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (o ProjectCacheOutput) ToProjectCacheOutput() ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return o.ToProjectCachePtrOutputWithContext(context.Background())
}

func (o ProjectCacheOutput) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return o.ApplyT(func(v ProjectCache) *ProjectCache {
		return &v
	}).(ProjectCachePtrOutput)
}
// The location of the source code from git or s3.
func (o ProjectCacheOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectCache) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
func (o ProjectCacheOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ProjectCache) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectCacheOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectCache) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectCachePtrOutput struct { *pulumi.OutputState}

func (ProjectCachePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCache)(nil)).Elem()
}

func (o ProjectCachePtrOutput) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return o
}

func (o ProjectCachePtrOutput) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return o
}

func (o ProjectCachePtrOutput) Elem() ProjectCacheOutput {
	return o.ApplyT(func (v *ProjectCache) ProjectCache { return *v }).(ProjectCacheOutput)
}

// The location of the source code from git or s3.
func (o ProjectCachePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectCache) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
func (o ProjectCachePtrOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ProjectCache) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectCachePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectCache) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectCacheOutput{})
	pulumi.RegisterOutputType(ProjectCachePtrOutput{})
}
