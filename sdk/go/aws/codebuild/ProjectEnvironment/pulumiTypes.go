// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ProjectEnvironment

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/codebuild/ProjectEnvironmentEnvironmentVariable"
	"https:/github.com/pulumi/pulumi-aws/codebuild/ProjectEnvironmentRegistryCredential"
)

type ProjectEnvironment struct {
	// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate *string `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
	ComputeType string `pulumi:"computeType"`
	// A set of environment variables to make available to builds for this build project.
	EnvironmentVariables []codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariable `pulumi:"environmentVariables"`
	// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image string `pulumi:"image"`
	// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
	ImagePullCredentialsType *string `pulumi:"imagePullCredentialsType"`
	// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode *bool `pulumi:"privilegedMode"`
	// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
	RegistryCredential *codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredential `pulumi:"registryCredential"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(context.Context) ProjectEnvironmentOutput
}

type ProjectEnvironmentArgs struct {
	// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// A set of environment variables to make available to builds for this build project.
	EnvironmentVariables codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image pulumi.StringInput `pulumi:"image"`
	// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
	ImagePullCredentialsType pulumi.StringPtrInput `pulumi:"imagePullCredentialsType"`
	// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode pulumi.BoolPtrInput `pulumi:"privilegedMode"`
	// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
	RegistryCredential codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredentialPtrInput `pulumi:"registryCredential"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput).ToProjectEnvironmentPtrOutputWithContext(ctx)
}

type ProjectEnvironmentPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput
	ToProjectEnvironmentPtrOutputWithContext(context.Context) ProjectEnvironmentPtrOutput
}

type projectEnvironmentPtrType ProjectEnvironmentArgs

func ProjectEnvironmentPtr(v *ProjectEnvironmentArgs) ProjectEnvironmentPtrInput {	return (*projectEnvironmentPtrType)(v)
}

func (*projectEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentPtrOutput)
}

type ProjectEnvironmentOutput struct { *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *ProjectEnvironment {
		return &v
	}).(ProjectEnvironmentPtrOutput)
}
// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
func (o ProjectEnvironmentOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
func (o ProjectEnvironmentOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.ComputeType }).(pulumi.StringOutput)
}

// A set of environment variables to make available to builds for this build project.
func (o ProjectEnvironmentOutput) EnvironmentVariables() codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o.ApplyT(func (v ProjectEnvironment) []codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariable { return v.EnvironmentVariables }).(codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariableArrayOutput)
}

// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
func (o ProjectEnvironmentOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.Image }).(pulumi.StringOutput)
}

// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
func (o ProjectEnvironmentOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *string { return v.ImagePullCredentialsType }).(pulumi.StringPtrOutput)
}

// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
func (o ProjectEnvironmentOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *bool { return v.PrivilegedMode }).(pulumi.BoolPtrOutput)
}

// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
func (o ProjectEnvironmentOutput) RegistryCredential() codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredential { return v.RegistryCredential }).(codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredentialPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentPtrOutput struct { *pulumi.OutputState}

func (ProjectEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) Elem() ProjectEnvironmentOutput {
	return o.ApplyT(func (v *ProjectEnvironment) ProjectEnvironment { return *v }).(ProjectEnvironmentOutput)
}

// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
func (o ProjectEnvironmentPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
func (o ProjectEnvironmentPtrOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.ComputeType }).(pulumi.StringOutput)
}

// A set of environment variables to make available to builds for this build project.
func (o ProjectEnvironmentPtrOutput) EnvironmentVariables() codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o.ApplyT(func (v ProjectEnvironment) []codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariable { return v.EnvironmentVariables }).(codebuildProjectEnvironmentEnvironmentVariable.ProjectEnvironmentEnvironmentVariableArrayOutput)
}

// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
func (o ProjectEnvironmentPtrOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.Image }).(pulumi.StringOutput)
}

// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
func (o ProjectEnvironmentPtrOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *string { return v.ImagePullCredentialsType }).(pulumi.StringPtrOutput)
}

// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
func (o ProjectEnvironmentPtrOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *bool { return v.PrivilegedMode }).(pulumi.BoolPtrOutput)
}

// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
func (o ProjectEnvironmentPtrOutput) RegistryCredential() codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ApplyT(func (v ProjectEnvironment) *codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredential { return v.RegistryCredential }).(codebuildProjectEnvironmentRegistryCredential.ProjectEnvironmentRegistryCredentialPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectEnvironmentPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ProjectEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentPtrOutput{})
}
