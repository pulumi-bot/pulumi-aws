// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                 `pulumi:"arn"`
	Artifacts          ProjectArtifactsOutput              `pulumi:"artifacts"`
	BadgeEnabled       pulumi.BoolPtrOutput                `pulumi:"badgeEnabled"`
	BadgeUrl           pulumi.StringOutput                 `pulumi:"badgeUrl"`
	BuildTimeout       pulumi.IntPtrOutput                 `pulumi:"buildTimeout"`
	Cache              ProjectCachePtrOutput               `pulumi:"cache"`
	Description        pulumi.StringOutput                 `pulumi:"description"`
	EncryptionKey      pulumi.StringOutput                 `pulumi:"encryptionKey"`
	Environment        ProjectEnvironmentOutput            `pulumi:"environment"`
	LogsConfig         ProjectLogsConfigPtrOutput          `pulumi:"logsConfig"`
	Name               pulumi.StringOutput                 `pulumi:"name"`
	QueuedTimeout      pulumi.IntPtrOutput                 `pulumi:"queuedTimeout"`
	SecondaryArtifacts ProjectSecondaryArtifactArrayOutput `pulumi:"secondaryArtifacts"`
	SecondarySources   ProjectSecondarySourceArrayOutput   `pulumi:"secondarySources"`
	ServiceRole        pulumi.StringOutput                 `pulumi:"serviceRole"`
	Source             ProjectSourceOutput                 `pulumi:"source"`
	SourceVersion      pulumi.StringPtrOutput              `pulumi:"sourceVersion"`
	Tags               pulumi.StringMapOutput              `pulumi:"tags"`
	VpcConfig          ProjectVpcConfigPtrOutput           `pulumi:"vpcConfig"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil || args.Artifacts == nil {
		return nil, errors.New("missing required argument 'Artifacts'")
	}
	if args == nil || args.Environment == nil {
		return nil, errors.New("missing required argument 'Environment'")
	}
	if args == nil || args.ServiceRole == nil {
		return nil, errors.New("missing required argument 'ServiceRole'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	if args == nil {
		args = &ProjectArgs{}
	}
	var resource Project
	err := ctx.RegisterResource("aws:codebuild/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:codebuild/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	Arn                *string                    `pulumi:"arn"`
	Artifacts          *ProjectArtifacts          `pulumi:"artifacts"`
	BadgeEnabled       *bool                      `pulumi:"badgeEnabled"`
	BadgeUrl           *string                    `pulumi:"badgeUrl"`
	BuildTimeout       *int                       `pulumi:"buildTimeout"`
	Cache              *ProjectCache              `pulumi:"cache"`
	Description        *string                    `pulumi:"description"`
	EncryptionKey      *string                    `pulumi:"encryptionKey"`
	Environment        *ProjectEnvironment        `pulumi:"environment"`
	LogsConfig         *ProjectLogsConfig         `pulumi:"logsConfig"`
	Name               *string                    `pulumi:"name"`
	QueuedTimeout      *int                       `pulumi:"queuedTimeout"`
	SecondaryArtifacts []ProjectSecondaryArtifact `pulumi:"secondaryArtifacts"`
	SecondarySources   []ProjectSecondarySource   `pulumi:"secondarySources"`
	ServiceRole        *string                    `pulumi:"serviceRole"`
	Source             *ProjectSource             `pulumi:"source"`
	SourceVersion      *string                    `pulumi:"sourceVersion"`
	Tags               map[string]string          `pulumi:"tags"`
	VpcConfig          *ProjectVpcConfig          `pulumi:"vpcConfig"`
}

type ProjectState struct {
	Arn                pulumi.StringPtrInput
	Artifacts          ProjectArtifactsPtrInput
	BadgeEnabled       pulumi.BoolPtrInput
	BadgeUrl           pulumi.StringPtrInput
	BuildTimeout       pulumi.IntPtrInput
	Cache              ProjectCachePtrInput
	Description        pulumi.StringPtrInput
	EncryptionKey      pulumi.StringPtrInput
	Environment        ProjectEnvironmentPtrInput
	LogsConfig         ProjectLogsConfigPtrInput
	Name               pulumi.StringPtrInput
	QueuedTimeout      pulumi.IntPtrInput
	SecondaryArtifacts ProjectSecondaryArtifactArrayInput
	SecondarySources   ProjectSecondarySourceArrayInput
	ServiceRole        pulumi.StringPtrInput
	Source             ProjectSourcePtrInput
	SourceVersion      pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	VpcConfig          ProjectVpcConfigPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	Artifacts          ProjectArtifacts           `pulumi:"artifacts"`
	BadgeEnabled       *bool                      `pulumi:"badgeEnabled"`
	BuildTimeout       *int                       `pulumi:"buildTimeout"`
	Cache              *ProjectCache              `pulumi:"cache"`
	Description        *string                    `pulumi:"description"`
	EncryptionKey      *string                    `pulumi:"encryptionKey"`
	Environment        ProjectEnvironment         `pulumi:"environment"`
	LogsConfig         *ProjectLogsConfig         `pulumi:"logsConfig"`
	Name               *string                    `pulumi:"name"`
	QueuedTimeout      *int                       `pulumi:"queuedTimeout"`
	SecondaryArtifacts []ProjectSecondaryArtifact `pulumi:"secondaryArtifacts"`
	SecondarySources   []ProjectSecondarySource   `pulumi:"secondarySources"`
	ServiceRole        string                     `pulumi:"serviceRole"`
	Source             ProjectSource              `pulumi:"source"`
	SourceVersion      *string                    `pulumi:"sourceVersion"`
	Tags               map[string]string          `pulumi:"tags"`
	VpcConfig          *ProjectVpcConfig          `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	Artifacts          ProjectArtifactsInput
	BadgeEnabled       pulumi.BoolPtrInput
	BuildTimeout       pulumi.IntPtrInput
	Cache              ProjectCachePtrInput
	Description        pulumi.StringPtrInput
	EncryptionKey      pulumi.StringPtrInput
	Environment        ProjectEnvironmentInput
	LogsConfig         ProjectLogsConfigPtrInput
	Name               pulumi.StringPtrInput
	QueuedTimeout      pulumi.IntPtrInput
	SecondaryArtifacts ProjectSecondaryArtifactArrayInput
	SecondarySources   ProjectSecondarySourceArrayInput
	ServiceRole        pulumi.StringInput
	Source             ProjectSourceInput
	SourceVersion      pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	VpcConfig          ProjectVpcConfigPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}
