// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                  `pulumi:"arn"`
	AvailabilityZones     pulumi.StringArrayOutput             `pulumi:"availabilityZones"`
	ClusterAddress        pulumi.StringOutput                  `pulumi:"clusterAddress"`
	ClusterName           pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationEndpoint pulumi.StringOutput                  `pulumi:"configurationEndpoint"`
	Description           pulumi.StringPtrOutput               `pulumi:"description"`
	IamRoleArn            pulumi.StringOutput                  `pulumi:"iamRoleArn"`
	MaintenanceWindow     pulumi.StringOutput                  `pulumi:"maintenanceWindow"`
	NodeType              pulumi.StringOutput                  `pulumi:"nodeType"`
	Nodes                 ClusterNodeArrayOutput               `pulumi:"nodes"`
	NotificationTopicArn  pulumi.StringPtrOutput               `pulumi:"notificationTopicArn"`
	ParameterGroupName    pulumi.StringOutput                  `pulumi:"parameterGroupName"`
	Port                  pulumi.IntOutput                     `pulumi:"port"`
	ReplicationFactor     pulumi.IntOutput                     `pulumi:"replicationFactor"`
	SecurityGroupIds      pulumi.StringArrayOutput             `pulumi:"securityGroupIds"`
	ServerSideEncryption  ClusterServerSideEncryptionPtrOutput `pulumi:"serverSideEncryption"`
	SubnetGroupName       pulumi.StringOutput                  `pulumi:"subnetGroupName"`
	Tags                  pulumi.StringMapOutput               `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.IamRoleArn == nil {
		return nil, errors.New("missing required argument 'IamRoleArn'")
	}
	if args == nil || args.NodeType == nil {
		return nil, errors.New("missing required argument 'NodeType'")
	}
	if args == nil || args.ReplicationFactor == nil {
		return nil, errors.New("missing required argument 'ReplicationFactor'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:dax/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:dax/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                   *string                      `pulumi:"arn"`
	AvailabilityZones     []string                     `pulumi:"availabilityZones"`
	ClusterAddress        *string                      `pulumi:"clusterAddress"`
	ClusterName           *string                      `pulumi:"clusterName"`
	ConfigurationEndpoint *string                      `pulumi:"configurationEndpoint"`
	Description           *string                      `pulumi:"description"`
	IamRoleArn            *string                      `pulumi:"iamRoleArn"`
	MaintenanceWindow     *string                      `pulumi:"maintenanceWindow"`
	NodeType              *string                      `pulumi:"nodeType"`
	Nodes                 []ClusterNode                `pulumi:"nodes"`
	NotificationTopicArn  *string                      `pulumi:"notificationTopicArn"`
	ParameterGroupName    *string                      `pulumi:"parameterGroupName"`
	Port                  *int                         `pulumi:"port"`
	ReplicationFactor     *int                         `pulumi:"replicationFactor"`
	SecurityGroupIds      []string                     `pulumi:"securityGroupIds"`
	ServerSideEncryption  *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	SubnetGroupName       *string                      `pulumi:"subnetGroupName"`
	Tags                  map[string]string            `pulumi:"tags"`
}

type ClusterState struct {
	Arn                   pulumi.StringPtrInput
	AvailabilityZones     pulumi.StringArrayInput
	ClusterAddress        pulumi.StringPtrInput
	ClusterName           pulumi.StringPtrInput
	ConfigurationEndpoint pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	IamRoleArn            pulumi.StringPtrInput
	MaintenanceWindow     pulumi.StringPtrInput
	NodeType              pulumi.StringPtrInput
	Nodes                 ClusterNodeArrayInput
	NotificationTopicArn  pulumi.StringPtrInput
	ParameterGroupName    pulumi.StringPtrInput
	Port                  pulumi.IntPtrInput
	ReplicationFactor     pulumi.IntPtrInput
	SecurityGroupIds      pulumi.StringArrayInput
	ServerSideEncryption  ClusterServerSideEncryptionPtrInput
	SubnetGroupName       pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AvailabilityZones    []string                     `pulumi:"availabilityZones"`
	ClusterName          string                       `pulumi:"clusterName"`
	Description          *string                      `pulumi:"description"`
	IamRoleArn           string                       `pulumi:"iamRoleArn"`
	MaintenanceWindow    *string                      `pulumi:"maintenanceWindow"`
	NodeType             string                       `pulumi:"nodeType"`
	NotificationTopicArn *string                      `pulumi:"notificationTopicArn"`
	ParameterGroupName   *string                      `pulumi:"parameterGroupName"`
	ReplicationFactor    int                          `pulumi:"replicationFactor"`
	SecurityGroupIds     []string                     `pulumi:"securityGroupIds"`
	ServerSideEncryption *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	SubnetGroupName      *string                      `pulumi:"subnetGroupName"`
	Tags                 map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AvailabilityZones    pulumi.StringArrayInput
	ClusterName          pulumi.StringInput
	Description          pulumi.StringPtrInput
	IamRoleArn           pulumi.StringInput
	MaintenanceWindow    pulumi.StringPtrInput
	NodeType             pulumi.StringInput
	NotificationTopicArn pulumi.StringPtrInput
	ParameterGroupName   pulumi.StringPtrInput
	ReplicationFactor    pulumi.IntInput
	SecurityGroupIds     pulumi.StringArrayInput
	ServerSideEncryption ClusterServerSideEncryptionPtrInput
	SubnetGroupName      pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
