// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package getScriptDagEdge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GetScriptDagEdge struct {
	// The ID of the node at which the edge starts.
	Source string `pulumi:"source"`
	// The ID of the node at which the edge ends.
	Target string `pulumi:"target"`
	// The target of the edge.
	TargetParameter *string `pulumi:"targetParameter"`
}

type GetScriptDagEdgeInput interface {
	pulumi.Input

	ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput
	ToGetScriptDagEdgeOutputWithContext(context.Context) GetScriptDagEdgeOutput
}

type GetScriptDagEdgeArgs struct {
	// The ID of the node at which the edge starts.
	Source pulumi.StringInput `pulumi:"source"`
	// The ID of the node at which the edge ends.
	Target pulumi.StringInput `pulumi:"target"`
	// The target of the edge.
	TargetParameter pulumi.StringPtrInput `pulumi:"targetParameter"`
}

func (GetScriptDagEdgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return i.ToGetScriptDagEdgeOutputWithContext(context.Background())
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagEdgeOutput)
}

type GetScriptDagEdgeArrayInput interface {
	pulumi.Input

	ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput
	ToGetScriptDagEdgeArrayOutputWithContext(context.Context) GetScriptDagEdgeArrayOutput
}

type GetScriptDagEdgeArray []GetScriptDagEdgeInput

func (GetScriptDagEdgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagEdge)(nil)).Elem()
}

func (i GetScriptDagEdgeArray) ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput {
	return i.ToGetScriptDagEdgeArrayOutputWithContext(context.Background())
}

func (i GetScriptDagEdgeArray) ToGetScriptDagEdgeArrayOutputWithContext(ctx context.Context) GetScriptDagEdgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagEdgeArrayOutput)
}

type GetScriptDagEdgeOutput struct { *pulumi.OutputState }

func (GetScriptDagEdgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return o
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return o
}

// The ID of the node at which the edge starts.
func (o GetScriptDagEdgeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func (v GetScriptDagEdge) string { return v.Source }).(pulumi.StringOutput)
}

// The ID of the node at which the edge ends.
func (o GetScriptDagEdgeOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func (v GetScriptDagEdge) string { return v.Target }).(pulumi.StringOutput)
}

// The target of the edge.
func (o GetScriptDagEdgeOutput) TargetParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GetScriptDagEdge) *string { return v.TargetParameter }).(pulumi.StringPtrOutput)
}

type GetScriptDagEdgeArrayOutput struct { *pulumi.OutputState}

func (GetScriptDagEdgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagEdge)(nil)).Elem()
}

func (o GetScriptDagEdgeArrayOutput) ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput {
	return o
}

func (o GetScriptDagEdgeArrayOutput) ToGetScriptDagEdgeArrayOutputWithContext(ctx context.Context) GetScriptDagEdgeArrayOutput {
	return o
}

func (o GetScriptDagEdgeArrayOutput) Index(i pulumi.IntInput) GetScriptDagEdgeOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetScriptDagEdge {
		return vs[0].([]GetScriptDagEdge)[vs[1].(int)]
	}).(GetScriptDagEdgeOutput)
}

func init() {
	pulumi.RegisterOutputType(GetScriptDagEdgeOutput{})
	pulumi.RegisterOutputType(GetScriptDagEdgeArrayOutput{})
}
