// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ClassifierGrokClassifier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClassifierGrokClassifier struct {
	// An identifier of the data format that the classifier matches.
	Classification string `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns *string `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern string `pulumi:"grokPattern"`
}

type ClassifierGrokClassifierInput interface {
	pulumi.Input

	ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput
	ToClassifierGrokClassifierOutputWithContext(context.Context) ClassifierGrokClassifierOutput
}

type ClassifierGrokClassifierArgs struct {
	// An identifier of the data format that the classifier matches.
	Classification pulumi.StringInput `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns pulumi.StringPtrInput `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern pulumi.StringInput `pulumi:"grokPattern"`
}

func (ClassifierGrokClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return i.ToClassifierGrokClassifierOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput)
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput).ToClassifierGrokClassifierPtrOutputWithContext(ctx)
}

type ClassifierGrokClassifierPtrInput interface {
	pulumi.Input

	ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput
	ToClassifierGrokClassifierPtrOutputWithContext(context.Context) ClassifierGrokClassifierPtrOutput
}

type classifierGrokClassifierPtrType ClassifierGrokClassifierArgs

func ClassifierGrokClassifierPtr(v *ClassifierGrokClassifierArgs) ClassifierGrokClassifierPtrInput {	return (*classifierGrokClassifierPtrType)(v)
}

func (*classifierGrokClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierPtrOutput)
}

type ClassifierGrokClassifierOutput struct { *pulumi.OutputState }

func (ClassifierGrokClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) *ClassifierGrokClassifier {
		return &v
	}).(ClassifierGrokClassifierPtrOutput)
}
// An identifier of the data format that the classifier matches.
func (o ClassifierGrokClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// Custom grok patterns used by this classifier.
func (o ClassifierGrokClassifierOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) *string { return v.CustomPatterns }).(pulumi.StringPtrOutput)
}

// The grok pattern used by this classifier.
func (o ClassifierGrokClassifierOutput) GrokPattern() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) string { return v.GrokPattern }).(pulumi.StringOutput)
}

type ClassifierGrokClassifierPtrOutput struct { *pulumi.OutputState}

func (ClassifierGrokClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) Elem() ClassifierGrokClassifierOutput {
	return o.ApplyT(func (v *ClassifierGrokClassifier) ClassifierGrokClassifier { return *v }).(ClassifierGrokClassifierOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierGrokClassifierPtrOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// Custom grok patterns used by this classifier.
func (o ClassifierGrokClassifierPtrOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) *string { return v.CustomPatterns }).(pulumi.StringPtrOutput)
}

// The grok pattern used by this classifier.
func (o ClassifierGrokClassifierPtrOutput) GrokPattern() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierGrokClassifier) string { return v.GrokPattern }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ClassifierGrokClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierPtrOutput{})
}
