// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package CrawlerJdbcTarget

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CrawlerJdbcTarget struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName string `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The path to the Amazon S3 target.
	Path string `pulumi:"path"`
}

type CrawlerJdbcTargetInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput
	ToCrawlerJdbcTargetOutputWithContext(context.Context) CrawlerJdbcTargetOutput
}

type CrawlerJdbcTargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The path to the Amazon S3 target.
	Path pulumi.StringInput `pulumi:"path"`
}

func (CrawlerJdbcTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return i.ToCrawlerJdbcTargetOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetOutput)
}

type CrawlerJdbcTargetArrayInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput
	ToCrawlerJdbcTargetArrayOutputWithContext(context.Context) CrawlerJdbcTargetArrayOutput
}

type CrawlerJdbcTargetArray []CrawlerJdbcTargetInput

func (CrawlerJdbcTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return i.ToCrawlerJdbcTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetArrayOutput)
}

type CrawlerJdbcTargetOutput struct { *pulumi.OutputState }

func (CrawlerJdbcTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return o
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerJdbcTargetOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func (v CrawlerJdbcTarget) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerJdbcTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CrawlerJdbcTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The path to the Amazon S3 target.
func (o CrawlerJdbcTargetOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func (v CrawlerJdbcTarget) string { return v.Path }).(pulumi.StringOutput)
}

type CrawlerJdbcTargetArrayOutput struct { *pulumi.OutputState}

func (CrawlerJdbcTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) Index(i pulumi.IntInput) CrawlerJdbcTargetOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CrawlerJdbcTarget {
		return vs[0].([]CrawlerJdbcTarget)[vs[1].(int)]
	}).(CrawlerJdbcTargetOutput)
}

func init() {
	pulumi.RegisterOutputType(CrawlerJdbcTargetOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetArrayOutput{})
}
