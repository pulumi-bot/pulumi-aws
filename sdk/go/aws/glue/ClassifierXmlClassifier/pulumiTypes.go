// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ClassifierXmlClassifier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClassifierXmlClassifier struct {
	// An identifier of the data format that the classifier matches.
	Classification string `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag string `pulumi:"rowTag"`
}

type ClassifierXmlClassifierInput interface {
	pulumi.Input

	ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput
	ToClassifierXmlClassifierOutputWithContext(context.Context) ClassifierXmlClassifierOutput
}

type ClassifierXmlClassifierArgs struct {
	// An identifier of the data format that the classifier matches.
	Classification pulumi.StringInput `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag pulumi.StringInput `pulumi:"rowTag"`
}

func (ClassifierXmlClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return i.ToClassifierXmlClassifierOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput)
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput).ToClassifierXmlClassifierPtrOutputWithContext(ctx)
}

type ClassifierXmlClassifierPtrInput interface {
	pulumi.Input

	ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput
	ToClassifierXmlClassifierPtrOutputWithContext(context.Context) ClassifierXmlClassifierPtrOutput
}

type classifierXmlClassifierPtrType ClassifierXmlClassifierArgs

func ClassifierXmlClassifierPtr(v *ClassifierXmlClassifierArgs) ClassifierXmlClassifierPtrInput {	return (*classifierXmlClassifierPtrType)(v)
}

func (*classifierXmlClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierPtrOutput)
}

type ClassifierXmlClassifierOutput struct { *pulumi.OutputState }

func (ClassifierXmlClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) *ClassifierXmlClassifier {
		return &v
	}).(ClassifierXmlClassifierPtrOutput)
}
// An identifier of the data format that the classifier matches.
func (o ClassifierXmlClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierXmlClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
func (o ClassifierXmlClassifierOutput) RowTag() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierXmlClassifier) string { return v.RowTag }).(pulumi.StringOutput)
}

type ClassifierXmlClassifierPtrOutput struct { *pulumi.OutputState}

func (ClassifierXmlClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) Elem() ClassifierXmlClassifierOutput {
	return o.ApplyT(func (v *ClassifierXmlClassifier) ClassifierXmlClassifier { return *v }).(ClassifierXmlClassifierOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierXmlClassifierPtrOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierXmlClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
func (o ClassifierXmlClassifierPtrOutput) RowTag() pulumi.StringOutput {
	return o.ApplyT(func (v ClassifierXmlClassifier) string { return v.RowTag }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ClassifierXmlClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierPtrOutput{})
}
