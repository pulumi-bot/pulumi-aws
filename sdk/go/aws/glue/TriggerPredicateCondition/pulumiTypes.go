// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TriggerPredicateCondition

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TriggerPredicateCondition struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState *string `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName *string `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator *string `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State *string `pulumi:"state"`
}

type TriggerPredicateConditionInput interface {
	pulumi.Input

	ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput
	ToTriggerPredicateConditionOutputWithContext(context.Context) TriggerPredicateConditionOutput
}

type TriggerPredicateConditionArgs struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState pulumi.StringPtrInput `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator pulumi.StringPtrInput `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (TriggerPredicateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return i.ToTriggerPredicateConditionOutputWithContext(context.Background())
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateConditionOutput)
}

type TriggerPredicateConditionArrayInput interface {
	pulumi.Input

	ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput
	ToTriggerPredicateConditionArrayOutputWithContext(context.Context) TriggerPredicateConditionArrayOutput
}

type TriggerPredicateConditionArray []TriggerPredicateConditionInput

func (TriggerPredicateConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPredicateCondition)(nil)).Elem()
}

func (i TriggerPredicateConditionArray) ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput {
	return i.ToTriggerPredicateConditionArrayOutputWithContext(context.Background())
}

func (i TriggerPredicateConditionArray) ToTriggerPredicateConditionArrayOutputWithContext(ctx context.Context) TriggerPredicateConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateConditionArrayOutput)
}

type TriggerPredicateConditionOutput struct { *pulumi.OutputState }

func (TriggerPredicateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return o
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return o
}

// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
func (o TriggerPredicateConditionOutput) CrawlState() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TriggerPredicateCondition) *string { return v.CrawlState }).(pulumi.StringPtrOutput)
}

// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
func (o TriggerPredicateConditionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TriggerPredicateCondition) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
func (o TriggerPredicateConditionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TriggerPredicateCondition) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// A logical operator. Defaults to `EQUALS`.
func (o TriggerPredicateConditionOutput) LogicalOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TriggerPredicateCondition) *string { return v.LogicalOperator }).(pulumi.StringPtrOutput)
}

// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
func (o TriggerPredicateConditionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TriggerPredicateCondition) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TriggerPredicateConditionArrayOutput struct { *pulumi.OutputState}

func (TriggerPredicateConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPredicateCondition)(nil)).Elem()
}

func (o TriggerPredicateConditionArrayOutput) ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput {
	return o
}

func (o TriggerPredicateConditionArrayOutput) ToTriggerPredicateConditionArrayOutputWithContext(ctx context.Context) TriggerPredicateConditionArrayOutput {
	return o
}

func (o TriggerPredicateConditionArrayOutput) Index(i pulumi.IntInput) TriggerPredicateConditionOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) TriggerPredicateCondition {
		return vs[0].([]TriggerPredicateCondition)[vs[1].(int)]
	}).(TriggerPredicateConditionOutput)
}

func init() {
	pulumi.RegisterOutputType(TriggerPredicateConditionOutput{})
	pulumi.RegisterOutputType(TriggerPredicateConditionArrayOutput{})
}
