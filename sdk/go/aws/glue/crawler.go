// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Crawler struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                `pulumi:"arn"`
	CatalogTargets        CrawlerCatalogTargetArrayOutput    `pulumi:"catalogTargets"`
	Classifiers           pulumi.StringArrayOutput           `pulumi:"classifiers"`
	Configuration         pulumi.StringPtrOutput             `pulumi:"configuration"`
	DatabaseName          pulumi.StringOutput                `pulumi:"databaseName"`
	Description           pulumi.StringPtrOutput             `pulumi:"description"`
	DynamodbTargets       CrawlerDynamodbTargetArrayOutput   `pulumi:"dynamodbTargets"`
	JdbcTargets           CrawlerJdbcTargetArrayOutput       `pulumi:"jdbcTargets"`
	Name                  pulumi.StringOutput                `pulumi:"name"`
	Role                  pulumi.StringOutput                `pulumi:"role"`
	S3Targets             CrawlerS3TargetArrayOutput         `pulumi:"s3Targets"`
	Schedule              pulumi.StringPtrOutput             `pulumi:"schedule"`
	SchemaChangePolicy    CrawlerSchemaChangePolicyPtrOutput `pulumi:"schemaChangePolicy"`
	SecurityConfiguration pulumi.StringPtrOutput             `pulumi:"securityConfiguration"`
	TablePrefix           pulumi.StringPtrOutput             `pulumi:"tablePrefix"`
	Tags                  pulumi.StringMapOutput             `pulumi:"tags"`
}

// NewCrawler registers a new resource with the given unique name, arguments, and options.
func NewCrawler(ctx *pulumi.Context,
	name string, args *CrawlerArgs, opts ...pulumi.ResourceOption) (*Crawler, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil {
		args = &CrawlerArgs{}
	}
	var resource Crawler
	err := ctx.RegisterResource("aws:glue/crawler:Crawler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrawler gets an existing Crawler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrawler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrawlerState, opts ...pulumi.ResourceOption) (*Crawler, error) {
	var resource Crawler
	err := ctx.ReadResource("aws:glue/crawler:Crawler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Crawler resources.
type crawlerState struct {
	Arn                   *string                    `pulumi:"arn"`
	CatalogTargets        []CrawlerCatalogTarget     `pulumi:"catalogTargets"`
	Classifiers           []string                   `pulumi:"classifiers"`
	Configuration         *string                    `pulumi:"configuration"`
	DatabaseName          *string                    `pulumi:"databaseName"`
	Description           *string                    `pulumi:"description"`
	DynamodbTargets       []CrawlerDynamodbTarget    `pulumi:"dynamodbTargets"`
	JdbcTargets           []CrawlerJdbcTarget        `pulumi:"jdbcTargets"`
	Name                  *string                    `pulumi:"name"`
	Role                  *string                    `pulumi:"role"`
	S3Targets             []CrawlerS3Target          `pulumi:"s3Targets"`
	Schedule              *string                    `pulumi:"schedule"`
	SchemaChangePolicy    *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	SecurityConfiguration *string                    `pulumi:"securityConfiguration"`
	TablePrefix           *string                    `pulumi:"tablePrefix"`
	Tags                  map[string]string          `pulumi:"tags"`
}

type CrawlerState struct {
	Arn                   pulumi.StringPtrInput
	CatalogTargets        CrawlerCatalogTargetArrayInput
	Classifiers           pulumi.StringArrayInput
	Configuration         pulumi.StringPtrInput
	DatabaseName          pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	DynamodbTargets       CrawlerDynamodbTargetArrayInput
	JdbcTargets           CrawlerJdbcTargetArrayInput
	Name                  pulumi.StringPtrInput
	Role                  pulumi.StringPtrInput
	S3Targets             CrawlerS3TargetArrayInput
	Schedule              pulumi.StringPtrInput
	SchemaChangePolicy    CrawlerSchemaChangePolicyPtrInput
	SecurityConfiguration pulumi.StringPtrInput
	TablePrefix           pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (CrawlerState) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerState)(nil)).Elem()
}

type crawlerArgs struct {
	CatalogTargets        []CrawlerCatalogTarget     `pulumi:"catalogTargets"`
	Classifiers           []string                   `pulumi:"classifiers"`
	Configuration         *string                    `pulumi:"configuration"`
	DatabaseName          string                     `pulumi:"databaseName"`
	Description           *string                    `pulumi:"description"`
	DynamodbTargets       []CrawlerDynamodbTarget    `pulumi:"dynamodbTargets"`
	JdbcTargets           []CrawlerJdbcTarget        `pulumi:"jdbcTargets"`
	Name                  *string                    `pulumi:"name"`
	Role                  string                     `pulumi:"role"`
	S3Targets             []CrawlerS3Target          `pulumi:"s3Targets"`
	Schedule              *string                    `pulumi:"schedule"`
	SchemaChangePolicy    *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	SecurityConfiguration *string                    `pulumi:"securityConfiguration"`
	TablePrefix           *string                    `pulumi:"tablePrefix"`
	Tags                  map[string]string          `pulumi:"tags"`
}

// The set of arguments for constructing a Crawler resource.
type CrawlerArgs struct {
	CatalogTargets        CrawlerCatalogTargetArrayInput
	Classifiers           pulumi.StringArrayInput
	Configuration         pulumi.StringPtrInput
	DatabaseName          pulumi.StringInput
	Description           pulumi.StringPtrInput
	DynamodbTargets       CrawlerDynamodbTargetArrayInput
	JdbcTargets           CrawlerJdbcTargetArrayInput
	Name                  pulumi.StringPtrInput
	Role                  pulumi.StringInput
	S3Targets             CrawlerS3TargetArrayInput
	Schedule              pulumi.StringPtrInput
	SchemaChangePolicy    CrawlerSchemaChangePolicyPtrInput
	SecurityConfiguration pulumi.StringPtrInput
	TablePrefix           pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (CrawlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerArgs)(nil)).Elem()
}
