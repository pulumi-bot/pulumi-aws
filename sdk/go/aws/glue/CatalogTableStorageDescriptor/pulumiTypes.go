// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package CatalogTableStorageDescriptor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/glue/CatalogTableStorageDescriptorColumn"
	"https:/github.com/pulumi/pulumi-aws/glue/CatalogTableStorageDescriptorSerDeInfo"
	"https:/github.com/pulumi/pulumi-aws/glue/CatalogTableStorageDescriptorSkewedInfo"
	"https:/github.com/pulumi/pulumi-aws/glue/CatalogTableStorageDescriptorSortColumn"
)

type CatalogTableStorageDescriptor struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns []glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumn `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed *bool `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat *string `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location *string `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets *int `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat *string `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo *glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfo `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo *glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfo `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns []glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories *bool `pulumi:"storedAsSubDirectories"`
}

type CatalogTableStorageDescriptorInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput
	ToCatalogTableStorageDescriptorOutputWithContext(context.Context) CatalogTableStorageDescriptorOutput
}

type CatalogTableStorageDescriptorArgs struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumi.StringArrayInput `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumnArrayInput `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed pulumi.BoolPtrInput `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumi.StringPtrInput `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets pulumi.IntPtrInput `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumi.StringPtrInput `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfoPtrInput `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfoPtrInput `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumnArrayInput `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories pulumi.BoolPtrInput `pulumi:"storedAsSubDirectories"`
}

func (CatalogTableStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return i.ToCatalogTableStorageDescriptorOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorOutput)
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return i.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorOutput).ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx)
}

type CatalogTableStorageDescriptorPtrInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput
	ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Context) CatalogTableStorageDescriptorPtrOutput
}

type catalogTableStorageDescriptorPtrType CatalogTableStorageDescriptorArgs

func CatalogTableStorageDescriptorPtr(v *CatalogTableStorageDescriptorArgs) CatalogTableStorageDescriptorPtrInput {	return (*catalogTableStorageDescriptorPtrType)(v)
}

func (*catalogTableStorageDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptor)(nil)).Elem()
}

func (i *catalogTableStorageDescriptorPtrType) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return i.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i *catalogTableStorageDescriptorPtrType) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorPtrOutput)
}

type CatalogTableStorageDescriptorOutput struct { *pulumi.OutputState }

func (CatalogTableStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return o.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptor {
		return &v
	}).(CatalogTableStorageDescriptorPtrOutput)
}
// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o CatalogTableStorageDescriptorOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o CatalogTableStorageDescriptorOutput) Columns() glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumn { return v.Columns }).(glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o CatalogTableStorageDescriptorOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o CatalogTableStorageDescriptorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o CatalogTableStorageDescriptorOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o CatalogTableStorageDescriptorOutput) SerDeInfo() glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfo { return v.SerDeInfo }).(glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o CatalogTableStorageDescriptorOutput) SkewedInfo() glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfo { return v.SkewedInfo }).(glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o CatalogTableStorageDescriptorOutput) SortColumns() glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumn { return v.SortColumns }).(glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o CatalogTableStorageDescriptorOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

type CatalogTableStorageDescriptorPtrOutput struct { *pulumi.OutputState}

func (CatalogTableStorageDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptor)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorPtrOutput) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorPtrOutput) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorPtrOutput) Elem() CatalogTableStorageDescriptorOutput {
	return o.ApplyT(func (v *CatalogTableStorageDescriptor) CatalogTableStorageDescriptor { return *v }).(CatalogTableStorageDescriptorOutput)
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o CatalogTableStorageDescriptorPtrOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o CatalogTableStorageDescriptorPtrOutput) Columns() glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumn { return v.Columns }).(glueCatalogTableStorageDescriptorColumn.CatalogTableStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o CatalogTableStorageDescriptorPtrOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o CatalogTableStorageDescriptorPtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o CatalogTableStorageDescriptorPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o CatalogTableStorageDescriptorPtrOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o CatalogTableStorageDescriptorPtrOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o CatalogTableStorageDescriptorPtrOutput) SerDeInfo() glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfo { return v.SerDeInfo }).(glueCatalogTableStorageDescriptorSerDeInfo.CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o CatalogTableStorageDescriptorPtrOutput) SkewedInfo() glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfo { return v.SkewedInfo }).(glueCatalogTableStorageDescriptorSkewedInfo.CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o CatalogTableStorageDescriptorPtrOutput) SortColumns() glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) []glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumn { return v.SortColumns }).(glueCatalogTableStorageDescriptorSortColumn.CatalogTableStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o CatalogTableStorageDescriptorPtrOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CatalogTableStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorPtrOutput{})
}
