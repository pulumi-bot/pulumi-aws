// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CatalogTable struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                    `pulumi:"arn"`
	CatalogId         pulumi.StringOutput                    `pulumi:"catalogId"`
	DatabaseName      pulumi.StringOutput                    `pulumi:"databaseName"`
	Description       pulumi.StringPtrOutput                 `pulumi:"description"`
	Name              pulumi.StringOutput                    `pulumi:"name"`
	Owner             pulumi.StringPtrOutput                 `pulumi:"owner"`
	Parameters        pulumi.StringMapOutput                 `pulumi:"parameters"`
	PartitionKeys     CatalogTablePartitionKeyArrayOutput    `pulumi:"partitionKeys"`
	Retention         pulumi.IntPtrOutput                    `pulumi:"retention"`
	StorageDescriptor CatalogTableStorageDescriptorPtrOutput `pulumi:"storageDescriptor"`
	TableType         pulumi.StringPtrOutput                 `pulumi:"tableType"`
	ViewExpandedText  pulumi.StringPtrOutput                 `pulumi:"viewExpandedText"`
	ViewOriginalText  pulumi.StringPtrOutput                 `pulumi:"viewOriginalText"`
}

// NewCatalogTable registers a new resource with the given unique name, arguments, and options.
func NewCatalogTable(ctx *pulumi.Context,
	name string, args *CatalogTableArgs, opts ...pulumi.ResourceOption) (*CatalogTable, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil {
		args = &CatalogTableArgs{}
	}
	var resource CatalogTable
	err := ctx.RegisterResource("aws:glue/catalogTable:CatalogTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogTable gets an existing CatalogTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogTableState, opts ...pulumi.ResourceOption) (*CatalogTable, error) {
	var resource CatalogTable
	err := ctx.ReadResource("aws:glue/catalogTable:CatalogTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogTable resources.
type catalogTableState struct {
	Arn               *string                        `pulumi:"arn"`
	CatalogId         *string                        `pulumi:"catalogId"`
	DatabaseName      *string                        `pulumi:"databaseName"`
	Description       *string                        `pulumi:"description"`
	Name              *string                        `pulumi:"name"`
	Owner             *string                        `pulumi:"owner"`
	Parameters        map[string]string              `pulumi:"parameters"`
	PartitionKeys     []CatalogTablePartitionKey     `pulumi:"partitionKeys"`
	Retention         *int                           `pulumi:"retention"`
	StorageDescriptor *CatalogTableStorageDescriptor `pulumi:"storageDescriptor"`
	TableType         *string                        `pulumi:"tableType"`
	ViewExpandedText  *string                        `pulumi:"viewExpandedText"`
	ViewOriginalText  *string                        `pulumi:"viewOriginalText"`
}

type CatalogTableState struct {
	Arn               pulumi.StringPtrInput
	CatalogId         pulumi.StringPtrInput
	DatabaseName      pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Owner             pulumi.StringPtrInput
	Parameters        pulumi.StringMapInput
	PartitionKeys     CatalogTablePartitionKeyArrayInput
	Retention         pulumi.IntPtrInput
	StorageDescriptor CatalogTableStorageDescriptorPtrInput
	TableType         pulumi.StringPtrInput
	ViewExpandedText  pulumi.StringPtrInput
	ViewOriginalText  pulumi.StringPtrInput
}

func (CatalogTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableState)(nil)).Elem()
}

type catalogTableArgs struct {
	CatalogId         *string                        `pulumi:"catalogId"`
	DatabaseName      string                         `pulumi:"databaseName"`
	Description       *string                        `pulumi:"description"`
	Name              *string                        `pulumi:"name"`
	Owner             *string                        `pulumi:"owner"`
	Parameters        map[string]string              `pulumi:"parameters"`
	PartitionKeys     []CatalogTablePartitionKey     `pulumi:"partitionKeys"`
	Retention         *int                           `pulumi:"retention"`
	StorageDescriptor *CatalogTableStorageDescriptor `pulumi:"storageDescriptor"`
	TableType         *string                        `pulumi:"tableType"`
	ViewExpandedText  *string                        `pulumi:"viewExpandedText"`
	ViewOriginalText  *string                        `pulumi:"viewOriginalText"`
}

// The set of arguments for constructing a CatalogTable resource.
type CatalogTableArgs struct {
	CatalogId         pulumi.StringPtrInput
	DatabaseName      pulumi.StringInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Owner             pulumi.StringPtrInput
	Parameters        pulumi.StringMapInput
	PartitionKeys     CatalogTablePartitionKeyArrayInput
	Retention         pulumi.IntPtrInput
	StorageDescriptor CatalogTableStorageDescriptorPtrInput
	TableType         pulumi.StringPtrInput
	ViewExpandedText  pulumi.StringPtrInput
	ViewOriginalText  pulumi.StringPtrInput
}

func (CatalogTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableArgs)(nil)).Elem()
}
