// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ResolverEndpointIpAddress

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ResolverEndpointIpAddress struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip *string `pulumi:"ip"`
	IpId *string `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId string `pulumi:"subnetId"`
}

type ResolverEndpointIpAddressInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput
	ToResolverEndpointIpAddressOutputWithContext(context.Context) ResolverEndpointIpAddressOutput
}

type ResolverEndpointIpAddressArgs struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	IpId pulumi.StringPtrInput `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return i.ToResolverEndpointIpAddressOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressOutput)
}

type ResolverEndpointIpAddressArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput
	ToResolverEndpointIpAddressArrayOutputWithContext(context.Context) ResolverEndpointIpAddressArrayOutput
}

type ResolverEndpointIpAddressArray []ResolverEndpointIpAddressInput

func (ResolverEndpointIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return i.ToResolverEndpointIpAddressArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressArrayOutput)
}

type ResolverEndpointIpAddressOutput struct { *pulumi.OutputState }

func (ResolverEndpointIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return o
}

// The IP address in the subnet that you want to use for DNS queries.
func (o ResolverEndpointIpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ResolverEndpointIpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressOutput) IpId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ResolverEndpointIpAddress) *string { return v.IpId }).(pulumi.StringPtrOutput)
}

// The ID of the subnet that contains the IP address.
func (o ResolverEndpointIpAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func (v ResolverEndpointIpAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpAddressArrayOutput struct { *pulumi.OutputState}

func (ResolverEndpointIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ResolverEndpointIpAddress {
		return vs[0].([]ResolverEndpointIpAddress)[vs[1].(int)]
	}).(ResolverEndpointIpAddressOutput)
}

func init() {
	pulumi.RegisterOutputType(ResolverEndpointIpAddressOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressArrayOutput{})
}
