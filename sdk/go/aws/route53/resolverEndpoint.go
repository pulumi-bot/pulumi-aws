// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ResolverEndpoint struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput                  `pulumi:"arn"`
	Direction        pulumi.StringOutput                  `pulumi:"direction"`
	HostVpcId        pulumi.StringOutput                  `pulumi:"hostVpcId"`
	IpAddresses      ResolverEndpointIpAddressArrayOutput `pulumi:"ipAddresses"`
	Name             pulumi.StringOutput                  `pulumi:"name"`
	SecurityGroupIds pulumi.StringArrayOutput             `pulumi:"securityGroupIds"`
	Tags             pulumi.StringMapOutput               `pulumi:"tags"`
}

// NewResolverEndpoint registers a new resource with the given unique name, arguments, and options.
func NewResolverEndpoint(ctx *pulumi.Context,
	name string, args *ResolverEndpointArgs, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.IpAddresses == nil {
		return nil, errors.New("missing required argument 'IpAddresses'")
	}
	if args == nil || args.SecurityGroupIds == nil {
		return nil, errors.New("missing required argument 'SecurityGroupIds'")
	}
	if args == nil {
		args = &ResolverEndpointArgs{}
	}
	var resource ResolverEndpoint
	err := ctx.RegisterResource("aws:route53/resolverEndpoint:ResolverEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverEndpoint gets an existing ResolverEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverEndpointState, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	var resource ResolverEndpoint
	err := ctx.ReadResource("aws:route53/resolverEndpoint:ResolverEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverEndpoint resources.
type resolverEndpointState struct {
	Arn              *string                     `pulumi:"arn"`
	Direction        *string                     `pulumi:"direction"`
	HostVpcId        *string                     `pulumi:"hostVpcId"`
	IpAddresses      []ResolverEndpointIpAddress `pulumi:"ipAddresses"`
	Name             *string                     `pulumi:"name"`
	SecurityGroupIds []string                    `pulumi:"securityGroupIds"`
	Tags             map[string]string           `pulumi:"tags"`
}

type ResolverEndpointState struct {
	Arn              pulumi.StringPtrInput
	Direction        pulumi.StringPtrInput
	HostVpcId        pulumi.StringPtrInput
	IpAddresses      ResolverEndpointIpAddressArrayInput
	Name             pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
}

func (ResolverEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointState)(nil)).Elem()
}

type resolverEndpointArgs struct {
	Direction        string                      `pulumi:"direction"`
	IpAddresses      []ResolverEndpointIpAddress `pulumi:"ipAddresses"`
	Name             *string                     `pulumi:"name"`
	SecurityGroupIds []string                    `pulumi:"securityGroupIds"`
	Tags             map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a ResolverEndpoint resource.
type ResolverEndpointArgs struct {
	Direction        pulumi.StringInput
	IpAddresses      ResolverEndpointIpAddressArrayInput
	Name             pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
}

func (ResolverEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointArgs)(nil)).Elem()
}
