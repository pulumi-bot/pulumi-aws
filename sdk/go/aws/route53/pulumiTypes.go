// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RecordAlias struct {
	EvaluateTargetHealth bool   `pulumi:"evaluateTargetHealth"`
	Name                 string `pulumi:"name"`
	ZoneId               string `pulumi:"zoneId"`
}

// RecordAliasInput is an input type that accepts RecordAliasArgs and RecordAliasOutput values.
// You can construct a concrete instance of `RecordAliasInput` via:
//
//          RecordAliasArgs{...}
type RecordAliasInput interface {
	pulumi.Input

	ToRecordAliasOutput() RecordAliasOutput
	ToRecordAliasOutputWithContext(context.Context) RecordAliasOutput
}

type RecordAliasArgs struct {
	EvaluateTargetHealth pulumi.BoolInput   `pulumi:"evaluateTargetHealth"`
	Name                 pulumi.StringInput `pulumi:"name"`
	ZoneId               pulumi.StringInput `pulumi:"zoneId"`
}

func (RecordAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (i RecordAliasArgs) ToRecordAliasOutput() RecordAliasOutput {
	return i.ToRecordAliasOutputWithContext(context.Background())
}

func (i RecordAliasArgs) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasOutput)
}

// RecordAliasArrayInput is an input type that accepts RecordAliasArray and RecordAliasArrayOutput values.
// You can construct a concrete instance of `RecordAliasArrayInput` via:
//
//          RecordAliasArray{ RecordAliasArgs{...} }
type RecordAliasArrayInput interface {
	pulumi.Input

	ToRecordAliasArrayOutput() RecordAliasArrayOutput
	ToRecordAliasArrayOutputWithContext(context.Context) RecordAliasArrayOutput
}

type RecordAliasArray []RecordAliasInput

func (RecordAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (i RecordAliasArray) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return i.ToRecordAliasArrayOutputWithContext(context.Background())
}

func (i RecordAliasArray) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasArrayOutput)
}

type RecordAliasOutput struct{ *pulumi.OutputState }

func (RecordAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (o RecordAliasOutput) ToRecordAliasOutput() RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) EvaluateTargetHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordAlias) bool { return v.EvaluateTargetHealth }).(pulumi.BoolOutput)
}

func (o RecordAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.Name }).(pulumi.StringOutput)
}

func (o RecordAliasOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordAliasArrayOutput struct{ *pulumi.OutputState }

func (RecordAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) Index(i pulumi.IntInput) RecordAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAlias {
		return vs[0].([]RecordAlias)[vs[1].(int)]
	}).(RecordAliasOutput)
}

type RecordFailoverRoutingPolicy struct {
	Type string `pulumi:"type"`
}

// RecordFailoverRoutingPolicyInput is an input type that accepts RecordFailoverRoutingPolicyArgs and RecordFailoverRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyInput` via:
//
//          RecordFailoverRoutingPolicyArgs{...}
type RecordFailoverRoutingPolicyInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput
	ToRecordFailoverRoutingPolicyOutputWithContext(context.Context) RecordFailoverRoutingPolicyOutput
}

type RecordFailoverRoutingPolicyArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (RecordFailoverRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return i.ToRecordFailoverRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyOutput)
}

// RecordFailoverRoutingPolicyArrayInput is an input type that accepts RecordFailoverRoutingPolicyArray and RecordFailoverRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyArrayInput` via:
//
//          RecordFailoverRoutingPolicyArray{ RecordFailoverRoutingPolicyArgs{...} }
type RecordFailoverRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput
	ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Context) RecordFailoverRoutingPolicyArrayOutput
}

type RecordFailoverRoutingPolicyArray []RecordFailoverRoutingPolicyInput

func (RecordFailoverRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return i.ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyArrayOutput)
}

type RecordFailoverRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFailoverRoutingPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type RecordFailoverRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordFailoverRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFailoverRoutingPolicy {
		return vs[0].([]RecordFailoverRoutingPolicy)[vs[1].(int)]
	}).(RecordFailoverRoutingPolicyOutput)
}

type RecordGeolocationRoutingPolicy struct {
	Continent   *string `pulumi:"continent"`
	Country     *string `pulumi:"country"`
	Subdivision *string `pulumi:"subdivision"`
}

// RecordGeolocationRoutingPolicyInput is an input type that accepts RecordGeolocationRoutingPolicyArgs and RecordGeolocationRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyInput` via:
//
//          RecordGeolocationRoutingPolicyArgs{...}
type RecordGeolocationRoutingPolicyInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput
	ToRecordGeolocationRoutingPolicyOutputWithContext(context.Context) RecordGeolocationRoutingPolicyOutput
}

type RecordGeolocationRoutingPolicyArgs struct {
	Continent   pulumi.StringPtrInput `pulumi:"continent"`
	Country     pulumi.StringPtrInput `pulumi:"country"`
	Subdivision pulumi.StringPtrInput `pulumi:"subdivision"`
}

func (RecordGeolocationRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return i.ToRecordGeolocationRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyOutput)
}

// RecordGeolocationRoutingPolicyArrayInput is an input type that accepts RecordGeolocationRoutingPolicyArray and RecordGeolocationRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyArrayInput` via:
//
//          RecordGeolocationRoutingPolicyArray{ RecordGeolocationRoutingPolicyArgs{...} }
type RecordGeolocationRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput
	ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Context) RecordGeolocationRoutingPolicyArrayOutput
}

type RecordGeolocationRoutingPolicyArray []RecordGeolocationRoutingPolicyInput

func (RecordGeolocationRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return i.ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyArrayOutput)
}

type RecordGeolocationRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

func (o RecordGeolocationRoutingPolicyOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Country }).(pulumi.StringPtrOutput)
}

func (o RecordGeolocationRoutingPolicyOutput) Subdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Subdivision }).(pulumi.StringPtrOutput)
}

type RecordGeolocationRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordGeolocationRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordGeolocationRoutingPolicy {
		return vs[0].([]RecordGeolocationRoutingPolicy)[vs[1].(int)]
	}).(RecordGeolocationRoutingPolicyOutput)
}

type RecordLatencyRoutingPolicy struct {
	Region string `pulumi:"region"`
}

// RecordLatencyRoutingPolicyInput is an input type that accepts RecordLatencyRoutingPolicyArgs and RecordLatencyRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyInput` via:
//
//          RecordLatencyRoutingPolicyArgs{...}
type RecordLatencyRoutingPolicyInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput
	ToRecordLatencyRoutingPolicyOutputWithContext(context.Context) RecordLatencyRoutingPolicyOutput
}

type RecordLatencyRoutingPolicyArgs struct {
	Region pulumi.StringInput `pulumi:"region"`
}

func (RecordLatencyRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return i.ToRecordLatencyRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyOutput)
}

// RecordLatencyRoutingPolicyArrayInput is an input type that accepts RecordLatencyRoutingPolicyArray and RecordLatencyRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyArrayInput` via:
//
//          RecordLatencyRoutingPolicyArray{ RecordLatencyRoutingPolicyArgs{...} }
type RecordLatencyRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput
	ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Context) RecordLatencyRoutingPolicyArrayOutput
}

type RecordLatencyRoutingPolicyArray []RecordLatencyRoutingPolicyInput

func (RecordLatencyRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return i.ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyArrayOutput)
}

type RecordLatencyRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RecordLatencyRoutingPolicy) string { return v.Region }).(pulumi.StringOutput)
}

type RecordLatencyRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordLatencyRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordLatencyRoutingPolicy {
		return vs[0].([]RecordLatencyRoutingPolicy)[vs[1].(int)]
	}).(RecordLatencyRoutingPolicyOutput)
}

type RecordWeightedRoutingPolicy struct {
	Weight int `pulumi:"weight"`
}

// RecordWeightedRoutingPolicyInput is an input type that accepts RecordWeightedRoutingPolicyArgs and RecordWeightedRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyInput` via:
//
//          RecordWeightedRoutingPolicyArgs{...}
type RecordWeightedRoutingPolicyInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput
	ToRecordWeightedRoutingPolicyOutputWithContext(context.Context) RecordWeightedRoutingPolicyOutput
}

type RecordWeightedRoutingPolicyArgs struct {
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RecordWeightedRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return i.ToRecordWeightedRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyOutput)
}

// RecordWeightedRoutingPolicyArrayInput is an input type that accepts RecordWeightedRoutingPolicyArray and RecordWeightedRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyArrayInput` via:
//
//          RecordWeightedRoutingPolicyArray{ RecordWeightedRoutingPolicyArgs{...} }
type RecordWeightedRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput
	ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Context) RecordWeightedRoutingPolicyArrayOutput
}

type RecordWeightedRoutingPolicyArray []RecordWeightedRoutingPolicyInput

func (RecordWeightedRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return i.ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyArrayOutput)
}

type RecordWeightedRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordWeightedRoutingPolicy) int { return v.Weight }).(pulumi.IntOutput)
}

type RecordWeightedRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordWeightedRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordWeightedRoutingPolicy {
		return vs[0].([]RecordWeightedRoutingPolicy)[vs[1].(int)]
	}).(RecordWeightedRoutingPolicyOutput)
}

type ResolverEndpointIpAddress struct {
	Ip       *string `pulumi:"ip"`
	IpId     *string `pulumi:"ipId"`
	SubnetId string  `pulumi:"subnetId"`
}

// ResolverEndpointIpAddressInput is an input type that accepts ResolverEndpointIpAddressArgs and ResolverEndpointIpAddressOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressInput` via:
//
//          ResolverEndpointIpAddressArgs{...}
type ResolverEndpointIpAddressInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput
	ToResolverEndpointIpAddressOutputWithContext(context.Context) ResolverEndpointIpAddressOutput
}

type ResolverEndpointIpAddressArgs struct {
	Ip       pulumi.StringPtrInput `pulumi:"ip"`
	IpId     pulumi.StringPtrInput `pulumi:"ipId"`
	SubnetId pulumi.StringInput    `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return i.ToResolverEndpointIpAddressOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressOutput)
}

// ResolverEndpointIpAddressArrayInput is an input type that accepts ResolverEndpointIpAddressArray and ResolverEndpointIpAddressArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressArrayInput` via:
//
//          ResolverEndpointIpAddressArray{ ResolverEndpointIpAddressArgs{...} }
type ResolverEndpointIpAddressArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput
	ToResolverEndpointIpAddressArrayOutputWithContext(context.Context) ResolverEndpointIpAddressArrayOutput
}

type ResolverEndpointIpAddressArray []ResolverEndpointIpAddressInput

func (ResolverEndpointIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return i.ToResolverEndpointIpAddressArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressArrayOutput)
}

type ResolverEndpointIpAddressOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressOutput) IpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.IpId }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpAddressArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpAddress {
		return vs[0].([]ResolverEndpointIpAddress)[vs[1].(int)]
	}).(ResolverEndpointIpAddressOutput)
}

type ResolverRuleTargetIp struct {
	Ip   string `pulumi:"ip"`
	Port *int   `pulumi:"port"`
}

// ResolverRuleTargetIpInput is an input type that accepts ResolverRuleTargetIpArgs and ResolverRuleTargetIpOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpInput` via:
//
//          ResolverRuleTargetIpArgs{...}
type ResolverRuleTargetIpInput interface {
	pulumi.Input

	ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput
	ToResolverRuleTargetIpOutputWithContext(context.Context) ResolverRuleTargetIpOutput
}

type ResolverRuleTargetIpArgs struct {
	Ip   pulumi.StringInput `pulumi:"ip"`
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverRuleTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return i.ToResolverRuleTargetIpOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpOutput)
}

// ResolverRuleTargetIpArrayInput is an input type that accepts ResolverRuleTargetIpArray and ResolverRuleTargetIpArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpArrayInput` via:
//
//          ResolverRuleTargetIpArray{ ResolverRuleTargetIpArgs{...} }
type ResolverRuleTargetIpArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput
	ToResolverRuleTargetIpArrayOutputWithContext(context.Context) ResolverRuleTargetIpArrayOutput
}

type ResolverRuleTargetIpArray []ResolverRuleTargetIpInput

func (ResolverRuleTargetIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return i.ToResolverRuleTargetIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpArrayOutput)
}

type ResolverRuleTargetIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) string { return v.Ip }).(pulumi.StringOutput)
}

func (o ResolverRuleTargetIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverRuleTargetIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTargetIp {
		return vs[0].([]ResolverRuleTargetIp)[vs[1].(int)]
	}).(ResolverRuleTargetIpOutput)
}

type ZoneVpc struct {
	VpcId     string  `pulumi:"vpcId"`
	VpcRegion *string `pulumi:"vpcRegion"`
}

// ZoneVpcInput is an input type that accepts ZoneVpcArgs and ZoneVpcOutput values.
// You can construct a concrete instance of `ZoneVpcInput` via:
//
//          ZoneVpcArgs{...}
type ZoneVpcInput interface {
	pulumi.Input

	ToZoneVpcOutput() ZoneVpcOutput
	ToZoneVpcOutputWithContext(context.Context) ZoneVpcOutput
}

type ZoneVpcArgs struct {
	VpcId     pulumi.StringInput    `pulumi:"vpcId"`
	VpcRegion pulumi.StringPtrInput `pulumi:"vpcRegion"`
}

func (ZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArgs) ToZoneVpcOutput() ZoneVpcOutput {
	return i.ToZoneVpcOutputWithContext(context.Background())
}

func (i ZoneVpcArgs) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcOutput)
}

// ZoneVpcArrayInput is an input type that accepts ZoneVpcArray and ZoneVpcArrayOutput values.
// You can construct a concrete instance of `ZoneVpcArrayInput` via:
//
//          ZoneVpcArray{ ZoneVpcArgs{...} }
type ZoneVpcArrayInput interface {
	pulumi.Input

	ToZoneVpcArrayOutput() ZoneVpcArrayOutput
	ToZoneVpcArrayOutputWithContext(context.Context) ZoneVpcArrayOutput
}

type ZoneVpcArray []ZoneVpcInput

func (ZoneVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArray) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return i.ToZoneVpcArrayOutputWithContext(context.Background())
}

func (i ZoneVpcArray) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcArrayOutput)
}

type ZoneVpcOutput struct{ *pulumi.OutputState }

func (ZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcOutput) ToZoneVpcOutput() ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

func (o ZoneVpcOutput) VpcRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneVpc) *string { return v.VpcRegion }).(pulumi.StringPtrOutput)
}

type ZoneVpcArrayOutput struct{ *pulumi.OutputState }

func (ZoneVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) Index(i pulumi.IntInput) ZoneVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneVpc {
		return vs[0].([]ZoneVpc)[vs[1].(int)]
	}).(ZoneVpcOutput)
}

func init() {
	pulumi.RegisterOutputType(RecordAliasOutput{})
	pulumi.RegisterOutputType(RecordAliasArrayOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpArrayOutput{})
	pulumi.RegisterOutputType(ZoneVpcOutput{})
	pulumi.RegisterOutputType(ZoneVpcArrayOutput{})
}
