// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Zone struct {
	pulumi.CustomResourceState

	Comment         pulumi.StringOutput      `pulumi:"comment"`
	DelegationSetId pulumi.StringPtrOutput   `pulumi:"delegationSetId"`
	ForceDestroy    pulumi.BoolPtrOutput     `pulumi:"forceDestroy"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	NameServers     pulumi.StringArrayOutput `pulumi:"nameServers"`
	Tags            pulumi.StringMapOutput   `pulumi:"tags"`
	Vpcs            ZoneVpcArrayOutput       `pulumi:"vpcs"`
	ZoneId          pulumi.StringOutput      `pulumi:"zoneId"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		args = &ZoneArgs{}
	}
	if args.Comment == nil {
		args.Comment = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource Zone
	err := ctx.RegisterResource("aws:route53/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("aws:route53/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	Comment         *string           `pulumi:"comment"`
	DelegationSetId *string           `pulumi:"delegationSetId"`
	ForceDestroy    *bool             `pulumi:"forceDestroy"`
	Name            *string           `pulumi:"name"`
	NameServers     []string          `pulumi:"nameServers"`
	Tags            map[string]string `pulumi:"tags"`
	Vpcs            []ZoneVpc         `pulumi:"vpcs"`
	ZoneId          *string           `pulumi:"zoneId"`
}

type ZoneState struct {
	Comment         pulumi.StringPtrInput
	DelegationSetId pulumi.StringPtrInput
	ForceDestroy    pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	NameServers     pulumi.StringArrayInput
	Tags            pulumi.StringMapInput
	Vpcs            ZoneVpcArrayInput
	ZoneId          pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	Comment         *string           `pulumi:"comment"`
	DelegationSetId *string           `pulumi:"delegationSetId"`
	ForceDestroy    *bool             `pulumi:"forceDestroy"`
	Name            *string           `pulumi:"name"`
	Tags            map[string]string `pulumi:"tags"`
	Vpcs            []ZoneVpc         `pulumi:"vpcs"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	Comment         pulumi.StringPtrInput
	DelegationSetId pulumi.StringPtrInput
	ForceDestroy    pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	Vpcs            ZoneVpcArrayInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}
