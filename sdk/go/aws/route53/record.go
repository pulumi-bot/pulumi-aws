// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Record struct {
	pulumi.CustomResourceState

	Aliases                       RecordAliasArrayOutput                    `pulumi:"aliases"`
	AllowOverwrite                pulumi.BoolOutput                         `pulumi:"allowOverwrite"`
	FailoverRoutingPolicies       RecordFailoverRoutingPolicyArrayOutput    `pulumi:"failoverRoutingPolicies"`
	Fqdn                          pulumi.StringOutput                       `pulumi:"fqdn"`
	GeolocationRoutingPolicies    RecordGeolocationRoutingPolicyArrayOutput `pulumi:"geolocationRoutingPolicies"`
	HealthCheckId                 pulumi.StringPtrOutput                    `pulumi:"healthCheckId"`
	LatencyRoutingPolicies        RecordLatencyRoutingPolicyArrayOutput     `pulumi:"latencyRoutingPolicies"`
	MultivalueAnswerRoutingPolicy pulumi.BoolPtrOutput                      `pulumi:"multivalueAnswerRoutingPolicy"`
	Name                          pulumi.StringOutput                       `pulumi:"name"`
	Records                       pulumi.StringArrayOutput                  `pulumi:"records"`
	SetIdentifier                 pulumi.StringPtrOutput                    `pulumi:"setIdentifier"`
	Ttl                           pulumi.IntPtrOutput                       `pulumi:"ttl"`
	Type                          pulumi.StringOutput                       `pulumi:"type"`
	WeightedRoutingPolicies       RecordWeightedRoutingPolicyArrayOutput    `pulumi:"weightedRoutingPolicies"`
	ZoneId                        pulumi.StringOutput                       `pulumi:"zoneId"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	if args == nil {
		args = &RecordArgs{}
	}
	var resource Record
	err := ctx.RegisterResource("aws:route53/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("aws:route53/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	Aliases                       []RecordAlias                    `pulumi:"aliases"`
	AllowOverwrite                *bool                            `pulumi:"allowOverwrite"`
	FailoverRoutingPolicies       []RecordFailoverRoutingPolicy    `pulumi:"failoverRoutingPolicies"`
	Fqdn                          *string                          `pulumi:"fqdn"`
	GeolocationRoutingPolicies    []RecordGeolocationRoutingPolicy `pulumi:"geolocationRoutingPolicies"`
	HealthCheckId                 *string                          `pulumi:"healthCheckId"`
	LatencyRoutingPolicies        []RecordLatencyRoutingPolicy     `pulumi:"latencyRoutingPolicies"`
	MultivalueAnswerRoutingPolicy *bool                            `pulumi:"multivalueAnswerRoutingPolicy"`
	Name                          *string                          `pulumi:"name"`
	Records                       []string                         `pulumi:"records"`
	SetIdentifier                 *string                          `pulumi:"setIdentifier"`
	Ttl                           *int                             `pulumi:"ttl"`
	Type                          *string                          `pulumi:"type"`
	WeightedRoutingPolicies       []RecordWeightedRoutingPolicy    `pulumi:"weightedRoutingPolicies"`
	ZoneId                        *string                          `pulumi:"zoneId"`
}

type RecordState struct {
	Aliases                       RecordAliasArrayInput
	AllowOverwrite                pulumi.BoolPtrInput
	FailoverRoutingPolicies       RecordFailoverRoutingPolicyArrayInput
	Fqdn                          pulumi.StringPtrInput
	GeolocationRoutingPolicies    RecordGeolocationRoutingPolicyArrayInput
	HealthCheckId                 pulumi.StringPtrInput
	LatencyRoutingPolicies        RecordLatencyRoutingPolicyArrayInput
	MultivalueAnswerRoutingPolicy pulumi.BoolPtrInput
	Name                          pulumi.StringPtrInput
	Records                       pulumi.StringArrayInput
	SetIdentifier                 pulumi.StringPtrInput
	Ttl                           pulumi.IntPtrInput
	Type                          pulumi.StringPtrInput
	WeightedRoutingPolicies       RecordWeightedRoutingPolicyArrayInput
	ZoneId                        pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	Aliases                       []RecordAlias                    `pulumi:"aliases"`
	AllowOverwrite                *bool                            `pulumi:"allowOverwrite"`
	FailoverRoutingPolicies       []RecordFailoverRoutingPolicy    `pulumi:"failoverRoutingPolicies"`
	GeolocationRoutingPolicies    []RecordGeolocationRoutingPolicy `pulumi:"geolocationRoutingPolicies"`
	HealthCheckId                 *string                          `pulumi:"healthCheckId"`
	LatencyRoutingPolicies        []RecordLatencyRoutingPolicy     `pulumi:"latencyRoutingPolicies"`
	MultivalueAnswerRoutingPolicy *bool                            `pulumi:"multivalueAnswerRoutingPolicy"`
	Name                          string                           `pulumi:"name"`
	Records                       []string                         `pulumi:"records"`
	SetIdentifier                 *string                          `pulumi:"setIdentifier"`
	Ttl                           *int                             `pulumi:"ttl"`
	Type                          interface{}                      `pulumi:"type"`
	WeightedRoutingPolicies       []RecordWeightedRoutingPolicy    `pulumi:"weightedRoutingPolicies"`
	ZoneId                        string                           `pulumi:"zoneId"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	Aliases                       RecordAliasArrayInput
	AllowOverwrite                pulumi.BoolPtrInput
	FailoverRoutingPolicies       RecordFailoverRoutingPolicyArrayInput
	GeolocationRoutingPolicies    RecordGeolocationRoutingPolicyArrayInput
	HealthCheckId                 pulumi.StringPtrInput
	LatencyRoutingPolicies        RecordLatencyRoutingPolicyArrayInput
	MultivalueAnswerRoutingPolicy pulumi.BoolPtrInput
	Name                          pulumi.StringInput
	Records                       pulumi.StringArrayInput
	SetIdentifier                 pulumi.StringPtrInput
	Ttl                           pulumi.IntPtrInput
	Type                          pulumi.Input
	WeightedRoutingPolicies       RecordWeightedRoutingPolicyArrayInput
	ZoneId                        pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}
