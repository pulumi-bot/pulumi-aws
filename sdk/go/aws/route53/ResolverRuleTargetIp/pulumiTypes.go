// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ResolverRuleTargetIp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ResolverRuleTargetIp struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip string `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port *int `pulumi:"port"`
}

type ResolverRuleTargetIpInput interface {
	pulumi.Input

	ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput
	ToResolverRuleTargetIpOutputWithContext(context.Context) ResolverRuleTargetIpOutput
}

type ResolverRuleTargetIpArgs struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverRuleTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return i.ToResolverRuleTargetIpOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpOutput)
}

type ResolverRuleTargetIpArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput
	ToResolverRuleTargetIpArrayOutputWithContext(context.Context) ResolverRuleTargetIpArrayOutput
}

type ResolverRuleTargetIpArray []ResolverRuleTargetIpInput

func (ResolverRuleTargetIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return i.ToResolverRuleTargetIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpArrayOutput)
}

type ResolverRuleTargetIpOutput struct { *pulumi.OutputState }

func (ResolverRuleTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return o
}

// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
func (o ResolverRuleTargetIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func (v ResolverRuleTargetIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port at `ip` that you want to forward DNS queries to. Default value is `53`
func (o ResolverRuleTargetIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func (v ResolverRuleTargetIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverRuleTargetIpArrayOutput struct { *pulumi.OutputState}

func (ResolverRuleTargetIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetIpOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ResolverRuleTargetIp {
		return vs[0].([]ResolverRuleTargetIp)[vs[1].(int)]
	}).(ResolverRuleTargetIpOutput)
}

func init() {
	pulumi.RegisterOutputType(ResolverRuleTargetIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpArrayOutput{})
}
