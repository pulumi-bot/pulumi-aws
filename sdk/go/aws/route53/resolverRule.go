// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Route53 Resolver rule.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route53_resolver_rule.html.markdown.
type ResolverRule struct {
	s *pulumi.ResourceState
}

// NewResolverRule registers a new resource with the given unique name, arguments, and options.
func NewResolverRule(ctx *pulumi.Context,
	name string, args *ResolverRuleArgs, opts ...pulumi.ResourceOpt) (*ResolverRule, error) {
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	if args == nil || args.RuleType == nil {
		return nil, errors.New("missing required argument 'RuleType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["domainName"] = nil
		inputs["name"] = nil
		inputs["resolverEndpointId"] = nil
		inputs["ruleType"] = nil
		inputs["tags"] = nil
		inputs["targetIps"] = nil
	} else {
		inputs["domainName"] = args.DomainName
		inputs["name"] = args.Name
		inputs["resolverEndpointId"] = args.ResolverEndpointId
		inputs["ruleType"] = args.RuleType
		inputs["tags"] = args.Tags
		inputs["targetIps"] = args.TargetIps
	}
	inputs["arn"] = nil
	inputs["ownerId"] = nil
	inputs["shareStatus"] = nil
	s, err := ctx.RegisterResource("aws:route53/resolverRule:ResolverRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResolverRule{s: s}, nil
}

// GetResolverRule gets an existing ResolverRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResolverRuleState, opts ...pulumi.ResourceOpt) (*ResolverRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["domainName"] = state.DomainName
		inputs["name"] = state.Name
		inputs["ownerId"] = state.OwnerId
		inputs["resolverEndpointId"] = state.ResolverEndpointId
		inputs["ruleType"] = state.RuleType
		inputs["shareStatus"] = state.ShareStatus
		inputs["tags"] = state.Tags
		inputs["targetIps"] = state.TargetIps
	}
	s, err := ctx.ReadResource("aws:route53/resolverRule:ResolverRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResolverRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ResolverRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ResolverRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN (Amazon Resource Name) for the resolver rule.
func (r *ResolverRule) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
func (r *ResolverRule) DomainName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domainName"])
}

// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
func (r *ResolverRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
func (r *ResolverRule) OwnerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ownerId"])
}

// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
// This argument should only be specified for `FORWARD` type rules.
func (r *ResolverRule) ResolverEndpointId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resolverEndpointId"])
}

// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
func (r *ResolverRule) RuleType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ruleType"])
}

// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
func (r *ResolverRule) ShareStatus() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["shareStatus"])
}

// A mapping of tags to assign to the resource.
func (r *ResolverRule) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
// This argument should only be specified for `FORWARD` type rules.
func (r *ResolverRule) TargetIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetIps"])
}

// Input properties used for looking up and filtering ResolverRule resources.
type ResolverRuleState struct {
	// The ARN (Amazon Resource Name) for the resolver rule.
	Arn interface{}
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName interface{}
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name interface{}
	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	OwnerId interface{}
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId interface{}
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType interface{}
	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps interface{}
}

// The set of arguments for constructing a ResolverRule resource.
type ResolverRuleArgs struct {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName interface{}
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name interface{}
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId interface{}
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps interface{}
}
