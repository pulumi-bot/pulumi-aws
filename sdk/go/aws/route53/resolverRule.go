// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ResolverRule struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput             `pulumi:"arn"`
	DomainName         pulumi.StringOutput             `pulumi:"domainName"`
	Name               pulumi.StringOutput             `pulumi:"name"`
	OwnerId            pulumi.StringOutput             `pulumi:"ownerId"`
	ResolverEndpointId pulumi.StringPtrOutput          `pulumi:"resolverEndpointId"`
	RuleType           pulumi.StringOutput             `pulumi:"ruleType"`
	ShareStatus        pulumi.StringOutput             `pulumi:"shareStatus"`
	Tags               pulumi.StringMapOutput          `pulumi:"tags"`
	TargetIps          ResolverRuleTargetIpArrayOutput `pulumi:"targetIps"`
}

// NewResolverRule registers a new resource with the given unique name, arguments, and options.
func NewResolverRule(ctx *pulumi.Context,
	name string, args *ResolverRuleArgs, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	if args == nil || args.RuleType == nil {
		return nil, errors.New("missing required argument 'RuleType'")
	}
	if args == nil {
		args = &ResolverRuleArgs{}
	}
	var resource ResolverRule
	err := ctx.RegisterResource("aws:route53/resolverRule:ResolverRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverRule gets an existing ResolverRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverRuleState, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	var resource ResolverRule
	err := ctx.ReadResource("aws:route53/resolverRule:ResolverRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverRule resources.
type resolverRuleState struct {
	Arn                *string                `pulumi:"arn"`
	DomainName         *string                `pulumi:"domainName"`
	Name               *string                `pulumi:"name"`
	OwnerId            *string                `pulumi:"ownerId"`
	ResolverEndpointId *string                `pulumi:"resolverEndpointId"`
	RuleType           *string                `pulumi:"ruleType"`
	ShareStatus        *string                `pulumi:"shareStatus"`
	Tags               map[string]string      `pulumi:"tags"`
	TargetIps          []ResolverRuleTargetIp `pulumi:"targetIps"`
}

type ResolverRuleState struct {
	Arn                pulumi.StringPtrInput
	DomainName         pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OwnerId            pulumi.StringPtrInput
	ResolverEndpointId pulumi.StringPtrInput
	RuleType           pulumi.StringPtrInput
	ShareStatus        pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TargetIps          ResolverRuleTargetIpArrayInput
}

func (ResolverRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleState)(nil)).Elem()
}

type resolverRuleArgs struct {
	DomainName         string                 `pulumi:"domainName"`
	Name               *string                `pulumi:"name"`
	ResolverEndpointId *string                `pulumi:"resolverEndpointId"`
	RuleType           string                 `pulumi:"ruleType"`
	Tags               map[string]string      `pulumi:"tags"`
	TargetIps          []ResolverRuleTargetIp `pulumi:"targetIps"`
}

// The set of arguments for constructing a ResolverRule resource.
type ResolverRuleArgs struct {
	DomainName         pulumi.StringInput
	Name               pulumi.StringPtrInput
	ResolverEndpointId pulumi.StringPtrInput
	RuleType           pulumi.StringInput
	Tags               pulumi.StringMapInput
	TargetIps          ResolverRuleTargetIpArrayInput
}

func (ResolverRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleArgs)(nil)).Elem()
}
