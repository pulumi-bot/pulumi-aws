// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RecordFailoverRoutingPolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RecordFailoverRoutingPolicy struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type string `pulumi:"type"`
}

type RecordFailoverRoutingPolicyInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput
	ToRecordFailoverRoutingPolicyOutputWithContext(context.Context) RecordFailoverRoutingPolicyOutput
}

type RecordFailoverRoutingPolicyArgs struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type pulumi.StringInput `pulumi:"type"`
}

func (RecordFailoverRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return i.ToRecordFailoverRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyOutput)
}

type RecordFailoverRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput
	ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Context) RecordFailoverRoutingPolicyArrayOutput
}

type RecordFailoverRoutingPolicyArray []RecordFailoverRoutingPolicyInput

func (RecordFailoverRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return i.ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyArrayOutput)
}

type RecordFailoverRoutingPolicyOutput struct { *pulumi.OutputState }

func (RecordFailoverRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return o
}

// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
func (o RecordFailoverRoutingPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v RecordFailoverRoutingPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type RecordFailoverRoutingPolicyArrayOutput struct { *pulumi.OutputState}

func (RecordFailoverRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordFailoverRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RecordFailoverRoutingPolicy {
		return vs[0].([]RecordFailoverRoutingPolicy)[vs[1].(int)]
	}).(RecordFailoverRoutingPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyArrayOutput{})
}
