// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecordType pulumi.String

const (
	RecordTypeA     = RecordType("A")
	RecordTypeAAAA  = RecordType("AAAA")
	RecordTypeCNAME = RecordType("CNAME")
	RecordTypeCAA   = RecordType("CAA")
	RecordTypeMX    = RecordType("MX")
	RecordTypeNAPTR = RecordType("NAPTR")
	RecordTypeNS    = RecordType("NS")
	RecordTypePTR   = RecordType("PTR")
	RecordTypeSOA   = RecordType("SOA")
	RecordTypeSPF   = RecordType("SPF")
	RecordTypeSRV   = RecordType("SRV")
	RecordTypeTXT   = RecordType("TXT")
)

type RecordTypeOutput struct{ *pulumi.OutputState }

func (RecordTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordType)(nil)).Elem()
}

func (o RecordTypeOutput) ToRecordTypeOutput() RecordTypeOutput {
	return o
}

func (o RecordTypeOutput) ToRecordTypeOutputWithContext(ctx context.Context) RecordTypeOutput {
	return o
}

func (o RecordTypeOutput) ToRecordTypePtrOutput() RecordTypePtrOutput {
	return o.ToRecordTypePtrOutputWithContext(context.Background())
}

func (o RecordTypeOutput) ToRecordTypePtrOutputWithContext(ctx context.Context) RecordTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v string) *string {
		return &v
	}).(RecordTypePtrOutput)
}

type RecordTypePtrOutput struct{ *pulumi.OutputState }

func (RecordTypePtrOutput) ElementType() reflect.Type {
	return recordTypePtrType
}

func (o RecordTypePtrOutput) ToRecordTypePtrOutput() RecordTypePtrOutput {
	return o
}

func (o RecordTypePtrOutput) ToRecordTypePtrOutputWithContext(ctx context.Context) RecordTypePtrOutput {
	return o
}

func (o RecordTypePtrOutput) Elem() RecordTypeOutput {
	return o.ApplyT(func(v *string) string {
		var ret string
		if v != nil {
			ret = *v
		}
		return ret
	}).(RecordTypeOutput)
}

// RecordTypeInput is an input type that accepts RecordTypeArgs and RecordTypeOutput values.
// You can construct a concrete instance of `RecordTypeInput` via:
//
//          RecordTypeArgs{...}
type RecordTypeInput interface {
	pulumi.Input

	ToRecordTypeOutput() RecordTypeOutput
	ToRecordTypeOutputWithContext(context.Context) RecordTypeOutput
}

func (RecordType) ElementType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

func (e RecordType) ToRecordTypeOutput() RecordTypeOutput {
	return pulumi.ToOutput(RecordType(e)).(RecordTypeOutput)
}

func (e RecordType) ToRecordTypeOutputWithContext(ctx context.Context) RecordTypeOutput {
	return pulumi.ToOutputWithContext(ctx, RecordType(e)).(RecordTypeOutput)
}

func (e RecordType) ToRecordTypePtrOutput() RecordTypePtrOutput {
	return RecordType(e).ToRecordTypePtrOutputWithContext(context.Background())
}

func (e RecordType) ToRecordTypePtrOutputWithContext(ctx context.Context) RecordTypePtrOutput {
	return RecordType(e).ToRecordTypeOutputWithContext(ctx).ToRecordTypePtrOutputWithContext(ctx)
}

var recordTypePtrType = reflect.TypeOf((**string)(nil)).Elem()

type RecordTypePtrInput interface {
	pulumi.Input

	ToRecordTypePtrOutput() RecordTypePtrOutput
	ToRecordTypePtrOutputWithContext(context.Context) RecordTypePtrOutput
}

type recordTypePtr string

func RecordTypePtr(v string) RecordTypePtrInput {
	return (*recordTypePtr)(&v)
}

func (*recordTypePtr) ElementType() reflect.Type {
	return recordTypePtrType
}

func (in *recordTypePtr) ToRecordTypePtrOutput() RecordTypePtrOutput {
	return pulumi.ToOutput(in).(RecordTypePtrOutput)
}

func (in *recordTypePtr) ToRecordTypePtrOutputWithContext(ctx context.Context) RecordTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecordTypePtrOutput)
}
