// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to fetch information about a specific
// IAM group. By using this data source, you can reference IAM group
// properties without having to hard code ARNs as input.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := iam.LookupGroup(ctx, &iam.LookupGroupArgs{
// 			GroupName: "an_example_group_name",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	var rv LookupGroupResult
	err := ctx.Invoke("aws:iam/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// The friendly IAM group name to match.
	GroupName string `pulumi:"groupName"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// The Amazon Resource Name (ARN) specifying the iam user.
	Arn string `pulumi:"arn"`
	// The stable and unique string identifying the group.
	GroupId   string `pulumi:"groupId"`
	GroupName string `pulumi:"groupName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The path to the iam user.
	Path string `pulumi:"path"`
	// List of objects containing group member information. See supported fields below.
	Users []GetGroupUser `pulumi:"users"`
}

func LookupGroupApply(ctx *pulumi.Context, args LookupGroupApplyInput, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return args.ToLookupGroupApplyOutput().ApplyT(func(v LookupGroupArgs) (LookupGroupResult, error) {
		r, err := LookupGroup(ctx, &v, opts...)
		return *r, err

	}).(LookupGroupResultOutput)
}

// LookupGroupApplyInput is an input type that accepts LookupGroupApplyArgs and LookupGroupApplyOutput values.
// You can construct a concrete instance of `LookupGroupApplyInput` via:
//
//          LookupGroupApplyArgs{...}
type LookupGroupApplyInput interface {
	pulumi.Input

	ToLookupGroupApplyOutput() LookupGroupApplyOutput
	ToLookupGroupApplyOutputWithContext(context.Context) LookupGroupApplyOutput
}

// A collection of arguments for invoking getGroup.
type LookupGroupApplyArgs struct {
	// The friendly IAM group name to match.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (LookupGroupApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

func (i LookupGroupApplyArgs) ToLookupGroupApplyOutput() LookupGroupApplyOutput {
	return i.ToLookupGroupApplyOutputWithContext(context.Background())
}

func (i LookupGroupApplyArgs) ToLookupGroupApplyOutputWithContext(ctx context.Context) LookupGroupApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupGroupApplyOutput)
}

// A collection of arguments for invoking getGroup.
type LookupGroupApplyOutput struct{ *pulumi.OutputState }

func (LookupGroupApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

func (o LookupGroupApplyOutput) ToLookupGroupApplyOutput() LookupGroupApplyOutput {
	return o
}

func (o LookupGroupApplyOutput) ToLookupGroupApplyOutputWithContext(ctx context.Context) LookupGroupApplyOutput {
	return o
}

// The friendly IAM group name to match.
func (o LookupGroupApplyOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupArgs) string { return v.GroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getGroup.
type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

// The Amazon Resource Name (ARN) specifying the iam user.
func (o LookupGroupResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The stable and unique string identifying the group.
func (o LookupGroupResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.GroupId }).(pulumi.StringOutput)
}

func (o LookupGroupResultOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.GroupName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The path to the iam user.
func (o LookupGroupResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Path }).(pulumi.StringOutput)
}

// List of objects containing group member information. See supported fields below.
func (o LookupGroupResultOutput) Users() GetGroupUserArrayOutput {
	return o.ApplyT(func(v LookupGroupResult) []GetGroupUser { return v.Users }).(GetGroupUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupApplyOutput{})
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
