// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GetGroupUser struct {
	// The Amazon Resource Name (ARN) specifying the iam user.
	Arn string `pulumi:"arn"`
	// The path to the iam user.
	Path string `pulumi:"path"`
	// The stable and unique string identifying the iam user.
	UserId string `pulumi:"userId"`
	// The name of the iam user.
	UserName string `pulumi:"userName"`
}

type GetPolicyDocumentStatement struct {
	// A list of actions that this statement either allows
	// or denies. For example, ``["ec2:RunInstances", "s3:*"]``.
	Actions []string `pulumi:"actions"`
	// A nested configuration block (described below)
	// that defines a further, possibly-service-specific condition that constrains
	// whether this statement applies.
	Conditions []GetPolicyDocumentStatementCondition `pulumi:"conditions"`
	// Either "Allow" or "Deny", to specify whether this
	// statement allows or denies the given actions. The default is "Allow".
	Effect *string `pulumi:"effect"`
	// A list of actions that this statement does *not*
	// apply to. Used to apply a policy statement to all actions *except* those
	// listed.
	NotActions []string `pulumi:"notActions"`
	// Like `principals` except gives principals that
	// the statement does *not* apply to.
	NotPrincipals []GetPolicyDocumentStatementNotPrincipal `pulumi:"notPrincipals"`
	// A list of resource ARNs that this statement
	// does *not* apply to. Used to apply a policy statement to all resources
	// *except* those listed.
	NotResources []string `pulumi:"notResources"`
	// A nested configuration block (described below)
	// specifying a principal (or principal pattern) to which this statement applies.
	Principals []GetPolicyDocumentStatementPrincipal `pulumi:"principals"`
	// A list of resource ARNs that this statement applies
	// to. This is required by AWS if used for an IAM policy.
	Resources []string `pulumi:"resources"`
	// An ID for the policy statement.
	Sid *string `pulumi:"sid"`
}

type GetPolicyDocumentStatementCondition struct {
	// The name of the
	// [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)
	// to evaluate.
	Test string `pulumi:"test"`
	// The values to evaluate the condition against. If multiple
	// values are provided, the condition matches if at least one of them applies.
	// (That is, the tests are combined with the "OR" boolean operation.)
	Values []string `pulumi:"values"`
	// The name of a
	// [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)
	// to apply the condition to. Context variables may either be standard AWS
	// variables starting with `aws:`, or service-specific variables prefixed with
	// the service name.
	Variable string `pulumi:"variable"`
}

type GetPolicyDocumentStatementNotPrincipal struct {
	// List of identifiers for principals. When `type`
	// is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
	Identifiers []string `pulumi:"identifiers"`
	// The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
	Type string `pulumi:"type"`
}

type GetPolicyDocumentStatementPrincipal struct {
	// List of identifiers for principals. When `type`
	// is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
	Identifiers []string `pulumi:"identifiers"`
	// The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
	Type string `pulumi:"type"`
}

func init() {
	pulumi.RegisterOutputType(GetGroupUserOutput{})
	pulumi.RegisterOutputType(GetGroupUserArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementConditionOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementConditionArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementNotPrincipalOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementNotPrincipalArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementPrincipalOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementPrincipalArrayOutput{})
}
