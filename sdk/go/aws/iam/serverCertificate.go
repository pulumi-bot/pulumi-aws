// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ServerCertificate struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput    `pulumi:"arn"`
	CertificateBody  pulumi.StringOutput    `pulumi:"certificateBody"`
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	NamePrefix       pulumi.StringPtrOutput `pulumi:"namePrefix"`
	Path             pulumi.StringPtrOutput `pulumi:"path"`
	PrivateKey       pulumi.StringOutput    `pulumi:"privateKey"`
}

// NewServerCertificate registers a new resource with the given unique name, arguments, and options.
func NewServerCertificate(ctx *pulumi.Context,
	name string, args *ServerCertificateArgs, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	if args == nil || args.CertificateBody == nil {
		return nil, errors.New("missing required argument 'CertificateBody'")
	}
	if args == nil || args.PrivateKey == nil {
		return nil, errors.New("missing required argument 'PrivateKey'")
	}
	if args == nil {
		args = &ServerCertificateArgs{}
	}
	var resource ServerCertificate
	err := ctx.RegisterResource("aws:iam/serverCertificate:ServerCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerCertificate gets an existing ServerCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerCertificateState, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	var resource ServerCertificate
	err := ctx.ReadResource("aws:iam/serverCertificate:ServerCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerCertificate resources.
type serverCertificateState struct {
	Arn              *string `pulumi:"arn"`
	CertificateBody  *string `pulumi:"certificateBody"`
	CertificateChain *string `pulumi:"certificateChain"`
	Name             *string `pulumi:"name"`
	NamePrefix       *string `pulumi:"namePrefix"`
	Path             *string `pulumi:"path"`
	PrivateKey       *string `pulumi:"privateKey"`
}

type ServerCertificateState struct {
	Arn              pulumi.StringPtrInput
	CertificateBody  pulumi.StringPtrInput
	CertificateChain pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NamePrefix       pulumi.StringPtrInput
	Path             pulumi.StringPtrInput
	PrivateKey       pulumi.StringPtrInput
}

func (ServerCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateState)(nil)).Elem()
}

type serverCertificateArgs struct {
	Arn              *string `pulumi:"arn"`
	CertificateBody  string  `pulumi:"certificateBody"`
	CertificateChain *string `pulumi:"certificateChain"`
	Name             *string `pulumi:"name"`
	NamePrefix       *string `pulumi:"namePrefix"`
	Path             *string `pulumi:"path"`
	PrivateKey       string  `pulumi:"privateKey"`
}

// The set of arguments for constructing a ServerCertificate resource.
type ServerCertificateArgs struct {
	Arn              pulumi.StringPtrInput
	CertificateBody  pulumi.StringInput
	CertificateChain pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NamePrefix       pulumi.StringPtrInput
	Path             pulumi.StringPtrInput
	PrivateKey       pulumi.StringInput
}

func (ServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateArgs)(nil)).Elem()
}
