// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KeyPair struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	EncryptedFingerprint pulumi.StringOutput    `pulumi:"encryptedFingerprint"`
	EncryptedPrivateKey  pulumi.StringOutput    `pulumi:"encryptedPrivateKey"`
	Fingerprint          pulumi.StringOutput    `pulumi:"fingerprint"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	NamePrefix           pulumi.StringPtrOutput `pulumi:"namePrefix"`
	PgpKey               pulumi.StringPtrOutput `pulumi:"pgpKey"`
	PrivateKey           pulumi.StringOutput    `pulumi:"privateKey"`
	PublicKey            pulumi.StringOutput    `pulumi:"publicKey"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil {
		args = &KeyPairArgs{}
	}
	var resource KeyPair
	err := ctx.RegisterResource("aws:lightsail/keyPair:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("aws:lightsail/keyPair:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
	Arn                  *string `pulumi:"arn"`
	EncryptedFingerprint *string `pulumi:"encryptedFingerprint"`
	EncryptedPrivateKey  *string `pulumi:"encryptedPrivateKey"`
	Fingerprint          *string `pulumi:"fingerprint"`
	Name                 *string `pulumi:"name"`
	NamePrefix           *string `pulumi:"namePrefix"`
	PgpKey               *string `pulumi:"pgpKey"`
	PrivateKey           *string `pulumi:"privateKey"`
	PublicKey            *string `pulumi:"publicKey"`
}

type KeyPairState struct {
	Arn                  pulumi.StringPtrInput
	EncryptedFingerprint pulumi.StringPtrInput
	EncryptedPrivateKey  pulumi.StringPtrInput
	Fingerprint          pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	NamePrefix           pulumi.StringPtrInput
	PgpKey               pulumi.StringPtrInput
	PrivateKey           pulumi.StringPtrInput
	PublicKey            pulumi.StringPtrInput
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	PgpKey     *string `pulumi:"pgpKey"`
	PublicKey  *string `pulumi:"publicKey"`
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	PgpKey     pulumi.StringPtrInput
	PublicKey  pulumi.StringPtrInput
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}
