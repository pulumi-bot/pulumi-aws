// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package GroupMixedInstancesPolicyInstancesDistribution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GroupMixedInstancesPolicyInstancesDistribution struct {
	// Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
	OnDemandAllocationStrategy *string `pulumi:"onDemandAllocationStrategy"`
	// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
	OnDemandBaseCapacity *int `pulumi:"onDemandBaseCapacity"`
	// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
	OnDemandPercentageAboveBaseCapacity *int `pulumi:"onDemandPercentageAboveBaseCapacity"`
	// How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
	SpotAllocationStrategy *string `pulumi:"spotAllocationStrategy"`
	// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
	SpotInstancePools *int `pulumi:"spotInstancePools"`
	// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
	SpotMaxPrice *string `pulumi:"spotMaxPrice"`
}

type GroupMixedInstancesPolicyInstancesDistributionInput interface {
	pulumi.Input

	ToGroupMixedInstancesPolicyInstancesDistributionOutput() GroupMixedInstancesPolicyInstancesDistributionOutput
	ToGroupMixedInstancesPolicyInstancesDistributionOutputWithContext(context.Context) GroupMixedInstancesPolicyInstancesDistributionOutput
}

type GroupMixedInstancesPolicyInstancesDistributionArgs struct {
	// Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
	OnDemandAllocationStrategy pulumi.StringPtrInput `pulumi:"onDemandAllocationStrategy"`
	// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
	OnDemandBaseCapacity pulumi.IntPtrInput `pulumi:"onDemandBaseCapacity"`
	// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
	OnDemandPercentageAboveBaseCapacity pulumi.IntPtrInput `pulumi:"onDemandPercentageAboveBaseCapacity"`
	// How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
	SpotAllocationStrategy pulumi.StringPtrInput `pulumi:"spotAllocationStrategy"`
	// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
	SpotInstancePools pulumi.IntPtrInput `pulumi:"spotInstancePools"`
	// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
	SpotMaxPrice pulumi.StringPtrInput `pulumi:"spotMaxPrice"`
}

func (GroupMixedInstancesPolicyInstancesDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMixedInstancesPolicyInstancesDistribution)(nil)).Elem()
}

func (i GroupMixedInstancesPolicyInstancesDistributionArgs) ToGroupMixedInstancesPolicyInstancesDistributionOutput() GroupMixedInstancesPolicyInstancesDistributionOutput {
	return i.ToGroupMixedInstancesPolicyInstancesDistributionOutputWithContext(context.Background())
}

func (i GroupMixedInstancesPolicyInstancesDistributionArgs) ToGroupMixedInstancesPolicyInstancesDistributionOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMixedInstancesPolicyInstancesDistributionOutput)
}

func (i GroupMixedInstancesPolicyInstancesDistributionArgs) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutput() GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return i.ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(context.Background())
}

func (i GroupMixedInstancesPolicyInstancesDistributionArgs) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMixedInstancesPolicyInstancesDistributionOutput).ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(ctx)
}

type GroupMixedInstancesPolicyInstancesDistributionPtrInput interface {
	pulumi.Input

	ToGroupMixedInstancesPolicyInstancesDistributionPtrOutput() GroupMixedInstancesPolicyInstancesDistributionPtrOutput
	ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(context.Context) GroupMixedInstancesPolicyInstancesDistributionPtrOutput
}

type groupMixedInstancesPolicyInstancesDistributionPtrType GroupMixedInstancesPolicyInstancesDistributionArgs

func GroupMixedInstancesPolicyInstancesDistributionPtr(v *GroupMixedInstancesPolicyInstancesDistributionArgs) GroupMixedInstancesPolicyInstancesDistributionPtrInput {	return (*groupMixedInstancesPolicyInstancesDistributionPtrType)(v)
}

func (*groupMixedInstancesPolicyInstancesDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMixedInstancesPolicyInstancesDistribution)(nil)).Elem()
}

func (i *groupMixedInstancesPolicyInstancesDistributionPtrType) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutput() GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return i.ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(context.Background())
}

func (i *groupMixedInstancesPolicyInstancesDistributionPtrType) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMixedInstancesPolicyInstancesDistributionPtrOutput)
}

type GroupMixedInstancesPolicyInstancesDistributionOutput struct { *pulumi.OutputState }

func (GroupMixedInstancesPolicyInstancesDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMixedInstancesPolicyInstancesDistribution)(nil)).Elem()
}

func (o GroupMixedInstancesPolicyInstancesDistributionOutput) ToGroupMixedInstancesPolicyInstancesDistributionOutput() GroupMixedInstancesPolicyInstancesDistributionOutput {
	return o
}

func (o GroupMixedInstancesPolicyInstancesDistributionOutput) ToGroupMixedInstancesPolicyInstancesDistributionOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionOutput {
	return o
}

func (o GroupMixedInstancesPolicyInstancesDistributionOutput) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutput() GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return o.ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(context.Background())
}

func (o GroupMixedInstancesPolicyInstancesDistributionOutput) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return o.ApplyT(func(v GroupMixedInstancesPolicyInstancesDistribution) *GroupMixedInstancesPolicyInstancesDistribution {
		return &v
	}).(GroupMixedInstancesPolicyInstancesDistributionPtrOutput)
}
// Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) OnDemandAllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.OnDemandAllocationStrategy }).(pulumi.StringPtrOutput)
}

// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) OnDemandBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.OnDemandBaseCapacity }).(pulumi.IntPtrOutput)
}

// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) OnDemandPercentageAboveBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.OnDemandPercentageAboveBaseCapacity }).(pulumi.IntPtrOutput)
}

// How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) SpotAllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.SpotAllocationStrategy }).(pulumi.StringPtrOutput)
}

// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) SpotInstancePools() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.SpotInstancePools }).(pulumi.IntPtrOutput)
}

// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
func (o GroupMixedInstancesPolicyInstancesDistributionOutput) SpotMaxPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.SpotMaxPrice }).(pulumi.StringPtrOutput)
}

type GroupMixedInstancesPolicyInstancesDistributionPtrOutput struct { *pulumi.OutputState}

func (GroupMixedInstancesPolicyInstancesDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMixedInstancesPolicyInstancesDistribution)(nil)).Elem()
}

func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutput() GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return o
}

func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) ToGroupMixedInstancesPolicyInstancesDistributionPtrOutputWithContext(ctx context.Context) GroupMixedInstancesPolicyInstancesDistributionPtrOutput {
	return o
}

func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) Elem() GroupMixedInstancesPolicyInstancesDistributionOutput {
	return o.ApplyT(func (v *GroupMixedInstancesPolicyInstancesDistribution) GroupMixedInstancesPolicyInstancesDistribution { return *v }).(GroupMixedInstancesPolicyInstancesDistributionOutput)
}

// Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) OnDemandAllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.OnDemandAllocationStrategy }).(pulumi.StringPtrOutput)
}

// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) OnDemandBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.OnDemandBaseCapacity }).(pulumi.IntPtrOutput)
}

// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) OnDemandPercentageAboveBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.OnDemandPercentageAboveBaseCapacity }).(pulumi.IntPtrOutput)
}

// How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) SpotAllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.SpotAllocationStrategy }).(pulumi.StringPtrOutput)
}

// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) SpotInstancePools() pulumi.IntPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *int { return v.SpotInstancePools }).(pulumi.IntPtrOutput)
}

// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
func (o GroupMixedInstancesPolicyInstancesDistributionPtrOutput) SpotMaxPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func (v GroupMixedInstancesPolicyInstancesDistribution) *string { return v.SpotMaxPrice }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupMixedInstancesPolicyInstancesDistributionOutput{})
	pulumi.RegisterOutputType(GroupMixedInstancesPolicyInstancesDistributionPtrOutput{})
}
