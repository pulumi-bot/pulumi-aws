// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aws:apigatewayv2/api:Api":
		r, err = NewApi(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/apiMapping:ApiMapping":
		r, err = NewApiMapping(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/authorizer:Authorizer":
		r, err = NewAuthorizer(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/deployment:Deployment":
		r, err = NewDeployment(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/domainName:DomainName":
		r, err = NewDomainName(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/integration:Integration":
		r, err = NewIntegration(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/integrationResponse:IntegrationResponse":
		r, err = NewIntegrationResponse(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/model:Model":
		r, err = NewModel(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/route:Route":
		r, err = NewRoute(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/routeResponse:RouteResponse":
		r, err = NewRouteResponse(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/stage:Stage":
		r, err = NewStage(ctx, name, nil, pulumi.URN_(urn))
	case "aws:apigatewayv2/vpcLink:VpcLink":
		r, err = NewVpcLink(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := aws.PkgVersion()
	if err != nil {
		panic(fmt.Errorf("failed to determine package version: %v", err))
	}
	pulumi.RegisterResourceModule(
		"aws",
		"apigatewayv2/api",
		&module{version},
	)
}
