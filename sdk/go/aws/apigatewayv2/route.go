// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	ApiId                            pulumi.StringOutput      `pulumi:"apiId"`
	ApiKeyRequired                   pulumi.BoolPtrOutput     `pulumi:"apiKeyRequired"`
	AuthorizationScopes              pulumi.StringArrayOutput `pulumi:"authorizationScopes"`
	AuthorizationType                pulumi.StringPtrOutput   `pulumi:"authorizationType"`
	AuthorizerId                     pulumi.StringPtrOutput   `pulumi:"authorizerId"`
	ModelSelectionExpression         pulumi.StringPtrOutput   `pulumi:"modelSelectionExpression"`
	OperationName                    pulumi.StringPtrOutput   `pulumi:"operationName"`
	RequestModels                    pulumi.StringMapOutput   `pulumi:"requestModels"`
	RouteKey                         pulumi.StringOutput      `pulumi:"routeKey"`
	RouteResponseSelectionExpression pulumi.StringPtrOutput   `pulumi:"routeResponseSelectionExpression"`
	Target                           pulumi.StringPtrOutput   `pulumi:"target"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.RouteKey == nil {
		return nil, errors.New("missing required argument 'RouteKey'")
	}
	if args == nil {
		args = &RouteArgs{}
	}
	var resource Route
	err := ctx.RegisterResource("aws:apigatewayv2/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:apigatewayv2/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	ApiId                            *string           `pulumi:"apiId"`
	ApiKeyRequired                   *bool             `pulumi:"apiKeyRequired"`
	AuthorizationScopes              []string          `pulumi:"authorizationScopes"`
	AuthorizationType                *string           `pulumi:"authorizationType"`
	AuthorizerId                     *string           `pulumi:"authorizerId"`
	ModelSelectionExpression         *string           `pulumi:"modelSelectionExpression"`
	OperationName                    *string           `pulumi:"operationName"`
	RequestModels                    map[string]string `pulumi:"requestModels"`
	RouteKey                         *string           `pulumi:"routeKey"`
	RouteResponseSelectionExpression *string           `pulumi:"routeResponseSelectionExpression"`
	Target                           *string           `pulumi:"target"`
}

type RouteState struct {
	ApiId                            pulumi.StringPtrInput
	ApiKeyRequired                   pulumi.BoolPtrInput
	AuthorizationScopes              pulumi.StringArrayInput
	AuthorizationType                pulumi.StringPtrInput
	AuthorizerId                     pulumi.StringPtrInput
	ModelSelectionExpression         pulumi.StringPtrInput
	OperationName                    pulumi.StringPtrInput
	RequestModels                    pulumi.StringMapInput
	RouteKey                         pulumi.StringPtrInput
	RouteResponseSelectionExpression pulumi.StringPtrInput
	Target                           pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	ApiId                            string            `pulumi:"apiId"`
	ApiKeyRequired                   *bool             `pulumi:"apiKeyRequired"`
	AuthorizationScopes              []string          `pulumi:"authorizationScopes"`
	AuthorizationType                *string           `pulumi:"authorizationType"`
	AuthorizerId                     *string           `pulumi:"authorizerId"`
	ModelSelectionExpression         *string           `pulumi:"modelSelectionExpression"`
	OperationName                    *string           `pulumi:"operationName"`
	RequestModels                    map[string]string `pulumi:"requestModels"`
	RouteKey                         string            `pulumi:"routeKey"`
	RouteResponseSelectionExpression *string           `pulumi:"routeResponseSelectionExpression"`
	Target                           *string           `pulumi:"target"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	ApiId                            pulumi.StringInput
	ApiKeyRequired                   pulumi.BoolPtrInput
	AuthorizationScopes              pulumi.StringArrayInput
	AuthorizationType                pulumi.StringPtrInput
	AuthorizerId                     pulumi.StringPtrInput
	ModelSelectionExpression         pulumi.StringPtrInput
	OperationName                    pulumi.StringPtrInput
	RequestModels                    pulumi.StringMapInput
	RouteKey                         pulumi.StringInput
	RouteResponseSelectionExpression pulumi.StringPtrInput
	Target                           pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}
