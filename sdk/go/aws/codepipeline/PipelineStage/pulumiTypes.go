// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PipelineStage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/codepipeline/PipelineStageAction"
)

type PipelineStage struct {
	Actions []codepipelinePipelineStageAction.PipelineStageAction `pulumi:"actions"`
	// The name of the pipeline.
	Name string `pulumi:"name"`
}

type PipelineStageInput interface {
	pulumi.Input

	ToPipelineStageOutput() PipelineStageOutput
	ToPipelineStageOutputWithContext(context.Context) PipelineStageOutput
}

type PipelineStageArgs struct {
	Actions codepipelinePipelineStageAction.PipelineStageActionArrayInput `pulumi:"actions"`
	// The name of the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PipelineStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (i PipelineStageArgs) ToPipelineStageOutput() PipelineStageOutput {
	return i.ToPipelineStageOutputWithContext(context.Background())
}

func (i PipelineStageArgs) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageOutput)
}

type PipelineStageArrayInput interface {
	pulumi.Input

	ToPipelineStageArrayOutput() PipelineStageArrayOutput
	ToPipelineStageArrayOutputWithContext(context.Context) PipelineStageArrayOutput
}

type PipelineStageArray []PipelineStageInput

func (PipelineStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStage)(nil)).Elem()
}

func (i PipelineStageArray) ToPipelineStageArrayOutput() PipelineStageArrayOutput {
	return i.ToPipelineStageArrayOutputWithContext(context.Background())
}

func (i PipelineStageArray) ToPipelineStageArrayOutputWithContext(ctx context.Context) PipelineStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageArrayOutput)
}

type PipelineStageOutput struct { *pulumi.OutputState }

func (PipelineStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (o PipelineStageOutput) ToPipelineStageOutput() PipelineStageOutput {
	return o
}

func (o PipelineStageOutput) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return o
}

func (o PipelineStageOutput) Actions() codepipelinePipelineStageAction.PipelineStageActionArrayOutput {
	return o.ApplyT(func (v PipelineStage) []codepipelinePipelineStageAction.PipelineStageAction { return v.Actions }).(codepipelinePipelineStageAction.PipelineStageActionArrayOutput)
}

// The name of the pipeline.
func (o PipelineStageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v PipelineStage) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineStageArrayOutput struct { *pulumi.OutputState}

func (PipelineStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStage)(nil)).Elem()
}

func (o PipelineStageArrayOutput) ToPipelineStageArrayOutput() PipelineStageArrayOutput {
	return o
}

func (o PipelineStageArrayOutput) ToPipelineStageArrayOutputWithContext(ctx context.Context) PipelineStageArrayOutput {
	return o
}

func (o PipelineStageArrayOutput) Index(i pulumi.IntInput) PipelineStageOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) PipelineStage {
		return vs[0].([]PipelineStage)[vs[1].(int)]
	}).(PipelineStageOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineStageOutput{})
	pulumi.RegisterOutputType(PipelineStageArrayOutput{})
}
