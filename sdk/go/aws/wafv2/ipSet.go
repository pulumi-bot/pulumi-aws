// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wafv2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IpSet struct {
	pulumi.CustomResourceState

	Addresses        pulumi.StringArrayOutput `pulumi:"addresses"`
	Arn              pulumi.StringOutput      `pulumi:"arn"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	IpAddressVersion pulumi.StringOutput      `pulumi:"ipAddressVersion"`
	LockToken        pulumi.StringOutput      `pulumi:"lockToken"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	Scope            pulumi.StringOutput      `pulumi:"scope"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
}

// NewIpSet registers a new resource with the given unique name, arguments, and options.
func NewIpSet(ctx *pulumi.Context,
	name string, args *IpSetArgs, opts ...pulumi.ResourceOption) (*IpSet, error) {
	if args == nil || args.IpAddressVersion == nil {
		return nil, errors.New("missing required argument 'IpAddressVersion'")
	}
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil {
		args = &IpSetArgs{}
	}
	var resource IpSet
	err := ctx.RegisterResource("aws:wafv2/ipSet:IpSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSet gets an existing IpSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSetState, opts ...pulumi.ResourceOption) (*IpSet, error) {
	var resource IpSet
	err := ctx.ReadResource("aws:wafv2/ipSet:IpSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSet resources.
type ipSetState struct {
	Addresses        []string          `pulumi:"addresses"`
	Arn              *string           `pulumi:"arn"`
	Description      *string           `pulumi:"description"`
	IpAddressVersion *string           `pulumi:"ipAddressVersion"`
	LockToken        *string           `pulumi:"lockToken"`
	Name             *string           `pulumi:"name"`
	Scope            *string           `pulumi:"scope"`
	Tags             map[string]string `pulumi:"tags"`
}

type IpSetState struct {
	Addresses        pulumi.StringArrayInput
	Arn              pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	IpAddressVersion pulumi.StringPtrInput
	LockToken        pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Scope            pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
}

func (IpSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSetState)(nil)).Elem()
}

type ipSetArgs struct {
	Addresses        []string          `pulumi:"addresses"`
	Description      *string           `pulumi:"description"`
	IpAddressVersion string            `pulumi:"ipAddressVersion"`
	Name             *string           `pulumi:"name"`
	Scope            string            `pulumi:"scope"`
	Tags             map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IpSet resource.
type IpSetArgs struct {
	Addresses        pulumi.StringArrayInput
	Description      pulumi.StringPtrInput
	IpAddressVersion pulumi.StringInput
	Name             pulumi.StringPtrInput
	Scope            pulumi.StringInput
	Tags             pulumi.StringMapInput
}

func (IpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSetArgs)(nil)).Elem()
}
