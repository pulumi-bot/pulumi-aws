// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput            `pulumi:"arn"`
	Endpoint             pulumi.StringOutput            `pulumi:"endpoint"`
	EndpointDetails      ServerEndpointDetailsPtrOutput `pulumi:"endpointDetails"`
	EndpointType         pulumi.StringPtrOutput         `pulumi:"endpointType"`
	ForceDestroy         pulumi.BoolPtrOutput           `pulumi:"forceDestroy"`
	HostKey              pulumi.StringPtrOutput         `pulumi:"hostKey"`
	HostKeyFingerprint   pulumi.StringOutput            `pulumi:"hostKeyFingerprint"`
	IdentityProviderType pulumi.StringPtrOutput         `pulumi:"identityProviderType"`
	InvocationRole       pulumi.StringPtrOutput         `pulumi:"invocationRole"`
	LoggingRole          pulumi.StringPtrOutput         `pulumi:"loggingRole"`
	Tags                 pulumi.StringMapOutput         `pulumi:"tags"`
	Url                  pulumi.StringPtrOutput         `pulumi:"url"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("aws:transfer/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("aws:transfer/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	Arn                  *string                `pulumi:"arn"`
	Endpoint             *string                `pulumi:"endpoint"`
	EndpointDetails      *ServerEndpointDetails `pulumi:"endpointDetails"`
	EndpointType         *string                `pulumi:"endpointType"`
	ForceDestroy         *bool                  `pulumi:"forceDestroy"`
	HostKey              *string                `pulumi:"hostKey"`
	HostKeyFingerprint   *string                `pulumi:"hostKeyFingerprint"`
	IdentityProviderType *string                `pulumi:"identityProviderType"`
	InvocationRole       *string                `pulumi:"invocationRole"`
	LoggingRole          *string                `pulumi:"loggingRole"`
	Tags                 map[string]string      `pulumi:"tags"`
	Url                  *string                `pulumi:"url"`
}

type ServerState struct {
	Arn                  pulumi.StringPtrInput
	Endpoint             pulumi.StringPtrInput
	EndpointDetails      ServerEndpointDetailsPtrInput
	EndpointType         pulumi.StringPtrInput
	ForceDestroy         pulumi.BoolPtrInput
	HostKey              pulumi.StringPtrInput
	HostKeyFingerprint   pulumi.StringPtrInput
	IdentityProviderType pulumi.StringPtrInput
	InvocationRole       pulumi.StringPtrInput
	LoggingRole          pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	Url                  pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	EndpointDetails      *ServerEndpointDetails `pulumi:"endpointDetails"`
	EndpointType         *string                `pulumi:"endpointType"`
	ForceDestroy         *bool                  `pulumi:"forceDestroy"`
	HostKey              *string                `pulumi:"hostKey"`
	IdentityProviderType *string                `pulumi:"identityProviderType"`
	InvocationRole       *string                `pulumi:"invocationRole"`
	LoggingRole          *string                `pulumi:"loggingRole"`
	Tags                 map[string]string      `pulumi:"tags"`
	Url                  *string                `pulumi:"url"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	EndpointDetails      ServerEndpointDetailsPtrInput
	EndpointType         pulumi.StringPtrInput
	ForceDestroy         pulumi.BoolPtrInput
	HostKey              pulumi.StringPtrInput
	IdentityProviderType pulumi.StringPtrInput
	InvocationRole       pulumi.StringPtrInput
	LoggingRole          pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	Url                  pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}
