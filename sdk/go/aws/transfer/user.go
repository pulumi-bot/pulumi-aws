// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput    `pulumi:"arn"`
	HomeDirectory pulumi.StringPtrOutput `pulumi:"homeDirectory"`
	Policy        pulumi.StringPtrOutput `pulumi:"policy"`
	Role          pulumi.StringOutput    `pulumi:"role"`
	ServerId      pulumi.StringOutput    `pulumi:"serverId"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
	UserName      pulumi.StringOutput    `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.ServerId == nil {
		return nil, errors.New("missing required argument 'ServerId'")
	}
	if args == nil || args.UserName == nil {
		return nil, errors.New("missing required argument 'UserName'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("aws:transfer/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:transfer/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Arn           *string           `pulumi:"arn"`
	HomeDirectory *string           `pulumi:"homeDirectory"`
	Policy        *string           `pulumi:"policy"`
	Role          *string           `pulumi:"role"`
	ServerId      *string           `pulumi:"serverId"`
	Tags          map[string]string `pulumi:"tags"`
	UserName      *string           `pulumi:"userName"`
}

type UserState struct {
	Arn           pulumi.StringPtrInput
	HomeDirectory pulumi.StringPtrInput
	Policy        pulumi.StringPtrInput
	Role          pulumi.StringPtrInput
	ServerId      pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	UserName      pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	HomeDirectory *string           `pulumi:"homeDirectory"`
	Policy        *string           `pulumi:"policy"`
	Role          string            `pulumi:"role"`
	ServerId      string            `pulumi:"serverId"`
	Tags          map[string]string `pulumi:"tags"`
	UserName      string            `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	HomeDirectory pulumi.StringPtrInput
	Policy        pulumi.StringPtrInput
	Role          pulumi.StringInput
	ServerId      pulumi.StringInput
	Tags          pulumi.StringMapInput
	UserName      pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}
