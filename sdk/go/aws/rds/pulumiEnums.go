// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"fmt"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EngineMode pulumi.String

const (
	Provisioned   = EngineMode("provisioned")
	Serverless    = EngineMode("serverless")
	ParallelQuery = EngineMode("parallelquery")
	Global        = EngineMode("global")
)

func (EngineMode) possibleValues() map[EngineMode]bool {
	return map[EngineMode]bool{
		Provisioned:   true,
		Serverless:    true,
		ParallelQuery: true,
		Global:        true,
	}
}

func (e EngineMode) Validate() error {
	if !e.possibleValues()[e] {
		return fmt.Errorf("unexpected value: %v", e)
	}
	return nil
}

func (EngineMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EngineMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EngineMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EngineMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EngineMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EngineType pulumi.String

const (
	Aurora           = EngineType("aurora")
	AuroraMysql      = EngineType("aurora-mysql")
	AuroraPostgresql = EngineType("aurora-postgresql")
)

func (EngineType) possibleValues() map[EngineType]bool {
	return map[EngineType]bool{
		Aurora:           true,
		AuroraMysql:      true,
		AuroraPostgresql: true,
	}
}

func (e EngineType) Validate() error {
	if !e.possibleValues()[e] {
		return fmt.Errorf("unexpected value: %v", e)
	}
	return nil
}

func (EngineType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EngineType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EngineType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EngineType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EngineType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InstanceType pulumi.String

const (
	T3_Micro     = InstanceType("db.t3.micro")
	T3_Small     = InstanceType("db.t3.small")
	T3_Medium    = InstanceType("db.t3.medium")
	T3_Large     = InstanceType("db.t3.large")
	T3_XLarge    = InstanceType("db.t3.xlarge")
	T3_2XLarge   = InstanceType("db.t3.2xlarge")
	T2_Micro     = InstanceType("db.t2.micro")
	T2_Small     = InstanceType("db.t2.small")
	T2_Medium    = InstanceType("db.t2.medium")
	T2_Large     = InstanceType("db.t2.large")
	T2_XLarge    = InstanceType("db.t2.xlarge")
	T2_2XLarge   = InstanceType("db.t2.2xlarge")
	M1_Small     = InstanceType("db.m1.small")
	M1_Medium    = InstanceType("db.m1.medium")
	M1_Large     = InstanceType("db.m1.large")
	M1_XLarge    = InstanceType("db.m1.xlarge")
	M2_XLarge    = InstanceType("db.m2.xlarge")
	M2_2XLarge   = InstanceType("db.m2.2xlarge")
	M2_4XLarge   = InstanceType("db.m2.4xlarge")
	M3_Medium    = InstanceType("db.m3.medium")
	M3_Large     = InstanceType("db.m3.large")
	M3_XLarge    = InstanceType("db.m3.xlarge")
	M3_2XLarge   = InstanceType("db.m3.2xlarge")
	M4_Large     = InstanceType("db.m4.large")
	M4_XLarge    = InstanceType("db.m4.xlarge")
	M4_2XLarge   = InstanceType("db.m4.2xlarge")
	M4_4XLarge   = InstanceType("db.m4.4xlarge")
	M4_10XLarge  = InstanceType("db.m4.10xlarge")
	M4_16XLarge  = InstanceType("db.m4.10xlarge")
	M5_Large     = InstanceType("db.m5.large")
	M5_XLarge    = InstanceType("db.m5.xlarge")
	M5_2XLarge   = InstanceType("db.m5.2xlarge")
	M5_4XLarge   = InstanceType("db.m5.4xlarge")
	M5_12XLarge  = InstanceType("db.m5.12xlarge")
	M5_24XLarge  = InstanceType("db.m5.24xlarge")
	R3_Large     = InstanceType("db.r3.large")
	R3_XLarge    = InstanceType("db.r3.xlarge")
	R3_2XLarge   = InstanceType("db.r3.2xlarge")
	R3_4XLarge   = InstanceType("db.r3.4xlarge")
	R3_8XLarge   = InstanceType("db.r3.8xlarge")
	R4_Large     = InstanceType("db.r4.large")
	R4_XLarge    = InstanceType("db.r4.xlarge")
	R4_2XLarge   = InstanceType("db.r4.2xlarge")
	R4_4XLarge   = InstanceType("db.r4.4xlarge")
	R4_8XLarge   = InstanceType("db.r4.8xlarge")
	R4_16XLarge  = InstanceType("db.r4.16xlarge")
	R5_Large     = InstanceType("db.r5.large")
	R5_XLarge    = InstanceType("db.r5.xlarge")
	R5_2XLarge   = InstanceType("db.r5.2xlarge")
	R5_4XLarge   = InstanceType("db.r5.4xlarge")
	R5_12XLarge  = InstanceType("db.r5.12xlarge")
	R5_24XLarge  = InstanceType("db.r5.24xlarge")
	X1_16XLarge  = InstanceType("db.x1.16xlarge")
	X1_32XLarge  = InstanceType("db.x1.32xlarge")
	X1E_XLarge   = InstanceType("db.x1e.xlarge")
	X1E_2XLarge  = InstanceType("db.x1e.2xlarge")
	X1E_4XLarge  = InstanceType("db.x1e.4xlarge")
	X1E_8XLarge  = InstanceType("db.x1e.8xlarge")
	X1E_32XLarge = InstanceType("db.x1e.32xlarge")
)

func (InstanceType) possibleValues() map[InstanceType]bool {
	return map[InstanceType]bool{
		T3_Micro:     true,
		T3_Small:     true,
		T3_Medium:    true,
		T3_Large:     true,
		T3_XLarge:    true,
		T3_2XLarge:   true,
		T2_Micro:     true,
		T2_Small:     true,
		T2_Medium:    true,
		T2_Large:     true,
		T2_XLarge:    true,
		T2_2XLarge:   true,
		M1_Small:     true,
		M1_Medium:    true,
		M1_Large:     true,
		M1_XLarge:    true,
		M2_XLarge:    true,
		M2_2XLarge:   true,
		M2_4XLarge:   true,
		M3_Medium:    true,
		M3_Large:     true,
		M3_XLarge:    true,
		M3_2XLarge:   true,
		M4_Large:     true,
		M4_XLarge:    true,
		M4_2XLarge:   true,
		M4_4XLarge:   true,
		M4_10XLarge:  true,
		M4_16XLarge:  true,
		M5_Large:     true,
		M5_XLarge:    true,
		M5_2XLarge:   true,
		M5_4XLarge:   true,
		M5_12XLarge:  true,
		M5_24XLarge:  true,
		R3_Large:     true,
		R3_XLarge:    true,
		R3_2XLarge:   true,
		R3_4XLarge:   true,
		R3_8XLarge:   true,
		R4_Large:     true,
		R4_XLarge:    true,
		R4_2XLarge:   true,
		R4_4XLarge:   true,
		R4_8XLarge:   true,
		R4_16XLarge:  true,
		R5_Large:     true,
		R5_XLarge:    true,
		R5_2XLarge:   true,
		R5_4XLarge:   true,
		R5_12XLarge:  true,
		R5_24XLarge:  true,
		X1_16XLarge:  true,
		X1_32XLarge:  true,
		X1E_XLarge:   true,
		X1E_2XLarge:  true,
		X1E_4XLarge:  true,
		X1E_8XLarge:  true,
		X1E_32XLarge: true,
	}
}

func (e InstanceType) Validate() error {
	if !e.possibleValues()[e] {
		return fmt.Errorf("unexpected value: %v", e)
	}
	return nil
}

func (InstanceType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StorageType pulumi.String

const (
	Standard = StorageType("standard")
	GP2      = StorageType("gp2")
	IO1      = StorageType("io1")
)

func (StorageType) possibleValues() map[StorageType]bool {
	return map[StorageType]bool{
		Standard: true,
		GP2:      true,
		IO1:      true,
	}
}

func (e StorageType) Validate() error {
	if !e.possibleValues()[e] {
		return fmt.Errorf("unexpected value: %v", e)
	}
	return nil
}

func (StorageType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e StorageType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StorageType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
