// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package InstanceS3Import

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type InstanceS3Import struct {
	// The bucket name where your backup is stored
	BucketName string `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole string `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine string `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion string `pulumi:"sourceEngineVersion"`
}

type InstanceS3ImportInput interface {
	pulumi.Input

	ToInstanceS3ImportOutput() InstanceS3ImportOutput
	ToInstanceS3ImportOutputWithContext(context.Context) InstanceS3ImportOutput
}

type InstanceS3ImportArgs struct {
	// The bucket name where your backup is stored
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole pulumi.StringInput `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine pulumi.StringInput `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion pulumi.StringInput `pulumi:"sourceEngineVersion"`
}

func (InstanceS3ImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return i.ToInstanceS3ImportOutputWithContext(context.Background())
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportOutput)
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return i.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportOutput).ToInstanceS3ImportPtrOutputWithContext(ctx)
}

type InstanceS3ImportPtrInput interface {
	pulumi.Input

	ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput
	ToInstanceS3ImportPtrOutputWithContext(context.Context) InstanceS3ImportPtrOutput
}

type instanceS3ImportPtrType InstanceS3ImportArgs

func InstanceS3ImportPtr(v *InstanceS3ImportArgs) InstanceS3ImportPtrInput {	return (*instanceS3ImportPtrType)(v)
}

func (*instanceS3ImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceS3Import)(nil)).Elem()
}

func (i *instanceS3ImportPtrType) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return i.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (i *instanceS3ImportPtrType) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportPtrOutput)
}

type InstanceS3ImportOutput struct { *pulumi.OutputState }

func (InstanceS3ImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return o.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return o.ApplyT(func(v InstanceS3Import) *InstanceS3Import {
		return &v
	}).(InstanceS3ImportPtrOutput)
}
// The bucket name where your backup is stored
func (o InstanceS3ImportOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o InstanceS3ImportOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o InstanceS3ImportOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o InstanceS3ImportOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o InstanceS3ImportOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

type InstanceS3ImportPtrOutput struct { *pulumi.OutputState}

func (InstanceS3ImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceS3Import)(nil)).Elem()
}

func (o InstanceS3ImportPtrOutput) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return o
}

func (o InstanceS3ImportPtrOutput) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return o
}

func (o InstanceS3ImportPtrOutput) Elem() InstanceS3ImportOutput {
	return o.ApplyT(func (v *InstanceS3Import) InstanceS3Import { return *v }).(InstanceS3ImportOutput)
}

// The bucket name where your backup is stored
func (o InstanceS3ImportPtrOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o InstanceS3ImportPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o InstanceS3ImportPtrOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o InstanceS3ImportPtrOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o InstanceS3ImportPtrOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceS3ImportOutput{})
	pulumi.RegisterOutputType(InstanceS3ImportPtrOutput{})
}
