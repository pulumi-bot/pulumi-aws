// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClusterSnapshot struct {
	pulumi.CustomResourceState

	AllocatedStorage            pulumi.IntOutput         `pulumi:"allocatedStorage"`
	AvailabilityZones           pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	DbClusterIdentifier         pulumi.StringOutput      `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotArn        pulumi.StringOutput      `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier pulumi.StringOutput      `pulumi:"dbClusterSnapshotIdentifier"`
	Engine                      pulumi.StringOutput      `pulumi:"engine"`
	EngineVersion               pulumi.StringOutput      `pulumi:"engineVersion"`
	KmsKeyId                    pulumi.StringOutput      `pulumi:"kmsKeyId"`
	LicenseModel                pulumi.StringOutput      `pulumi:"licenseModel"`
	Port                        pulumi.IntOutput         `pulumi:"port"`
	SnapshotType                pulumi.StringOutput      `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn  pulumi.StringOutput      `pulumi:"sourceDbClusterSnapshotArn"`
	Status                      pulumi.StringOutput      `pulumi:"status"`
	StorageEncrypted            pulumi.BoolOutput        `pulumi:"storageEncrypted"`
	Tags                        pulumi.StringMapOutput   `pulumi:"tags"`
	VpcId                       pulumi.StringOutput      `pulumi:"vpcId"`
}

// NewClusterSnapshot registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshot(ctx *pulumi.Context,
	name string, args *ClusterSnapshotArgs, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	if args == nil || args.DbClusterIdentifier == nil {
		return nil, errors.New("missing required argument 'DbClusterIdentifier'")
	}
	if args == nil || args.DbClusterSnapshotIdentifier == nil {
		return nil, errors.New("missing required argument 'DbClusterSnapshotIdentifier'")
	}
	if args == nil {
		args = &ClusterSnapshotArgs{}
	}
	var resource ClusterSnapshot
	err := ctx.RegisterResource("aws:rds/clusterSnapshot:ClusterSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshot gets an existing ClusterSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSnapshotState, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	var resource ClusterSnapshot
	err := ctx.ReadResource("aws:rds/clusterSnapshot:ClusterSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSnapshot resources.
type clusterSnapshotState struct {
	AllocatedStorage            *int              `pulumi:"allocatedStorage"`
	AvailabilityZones           []string          `pulumi:"availabilityZones"`
	DbClusterIdentifier         *string           `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotArn        *string           `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier *string           `pulumi:"dbClusterSnapshotIdentifier"`
	Engine                      *string           `pulumi:"engine"`
	EngineVersion               *string           `pulumi:"engineVersion"`
	KmsKeyId                    *string           `pulumi:"kmsKeyId"`
	LicenseModel                *string           `pulumi:"licenseModel"`
	Port                        *int              `pulumi:"port"`
	SnapshotType                *string           `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn  *string           `pulumi:"sourceDbClusterSnapshotArn"`
	Status                      *string           `pulumi:"status"`
	StorageEncrypted            *bool             `pulumi:"storageEncrypted"`
	Tags                        map[string]string `pulumi:"tags"`
	VpcId                       *string           `pulumi:"vpcId"`
}

type ClusterSnapshotState struct {
	AllocatedStorage            pulumi.IntPtrInput
	AvailabilityZones           pulumi.StringArrayInput
	DbClusterIdentifier         pulumi.StringPtrInput
	DbClusterSnapshotArn        pulumi.StringPtrInput
	DbClusterSnapshotIdentifier pulumi.StringPtrInput
	Engine                      pulumi.StringPtrInput
	EngineVersion               pulumi.StringPtrInput
	KmsKeyId                    pulumi.StringPtrInput
	LicenseModel                pulumi.StringPtrInput
	Port                        pulumi.IntPtrInput
	SnapshotType                pulumi.StringPtrInput
	SourceDbClusterSnapshotArn  pulumi.StringPtrInput
	Status                      pulumi.StringPtrInput
	StorageEncrypted            pulumi.BoolPtrInput
	Tags                        pulumi.StringMapInput
	VpcId                       pulumi.StringPtrInput
}

func (ClusterSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotState)(nil)).Elem()
}

type clusterSnapshotArgs struct {
	DbClusterIdentifier         string            `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotIdentifier string            `pulumi:"dbClusterSnapshotIdentifier"`
	Tags                        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClusterSnapshot resource.
type ClusterSnapshotArgs struct {
	DbClusterIdentifier         pulumi.StringInput
	DbClusterSnapshotIdentifier pulumi.StringInput
	Tags                        pulumi.StringMapInput
}

func (ClusterSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotArgs)(nil)).Elem()
}
