// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package LoadBalancerHealthCheck

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancerHealthCheck struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval int `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target string `pulumi:"target"`
	// The length of time before the check times out.
	Timeout int `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type LoadBalancerHealthCheckInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput
	ToLoadBalancerHealthCheckOutputWithContext(context.Context) LoadBalancerHealthCheckOutput
}

type LoadBalancerHealthCheckArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target pulumi.StringInput `pulumi:"target"`
	// The length of time before the check times out.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return i.ToLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput)
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput).ToLoadBalancerHealthCheckPtrOutputWithContext(ctx)
}

type LoadBalancerHealthCheckPtrInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput
	ToLoadBalancerHealthCheckPtrOutputWithContext(context.Context) LoadBalancerHealthCheckPtrOutput
}

type loadBalancerHealthCheckPtrType LoadBalancerHealthCheckArgs

func LoadBalancerHealthCheckPtr(v *LoadBalancerHealthCheckArgs) LoadBalancerHealthCheckPtrInput {	return (*loadBalancerHealthCheckPtrType)(v)
}

func (*loadBalancerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckPtrOutput)
}

type LoadBalancerHealthCheckOutput struct { *pulumi.OutputState }

func (LoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) *LoadBalancerHealthCheck {
		return &v
	}).(LoadBalancerHealthCheckPtrOutput)
}
// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckPtrOutput struct { *pulumi.OutputState}

func (LoadBalancerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) Elem() LoadBalancerHealthCheckOutput {
	return o.ApplyT(func (v *LoadBalancerHealthCheck) LoadBalancerHealthCheck { return *v }).(LoadBalancerHealthCheckOutput)
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckPtrOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckPtrOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckPtrOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckPtrOutput{})
}
