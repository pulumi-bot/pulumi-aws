// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LoadBalancerPolicy struct {
	pulumi.CustomResourceState

	LoadBalancerName pulumi.StringOutput                          `pulumi:"loadBalancerName"`
	PolicyAttributes LoadBalancerPolicyPolicyAttributeArrayOutput `pulumi:"policyAttributes"`
	PolicyName       pulumi.StringOutput                          `pulumi:"policyName"`
	PolicyTypeName   pulumi.StringOutput                          `pulumi:"policyTypeName"`
}

// NewLoadBalancerPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerPolicyArgs, opts ...pulumi.ResourceOption) (*LoadBalancerPolicy, error) {
	if args == nil || args.LoadBalancerName == nil {
		return nil, errors.New("missing required argument 'LoadBalancerName'")
	}
	if args == nil || args.PolicyName == nil {
		return nil, errors.New("missing required argument 'PolicyName'")
	}
	if args == nil || args.PolicyTypeName == nil {
		return nil, errors.New("missing required argument 'PolicyTypeName'")
	}
	if args == nil {
		args = &LoadBalancerPolicyArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/loadBalancerPolicy:LoadBalancerPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource LoadBalancerPolicy
	err := ctx.RegisterResource("aws:elb/loadBalancerPolicy:LoadBalancerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerPolicy gets an existing LoadBalancerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerPolicyState, opts ...pulumi.ResourceOption) (*LoadBalancerPolicy, error) {
	var resource LoadBalancerPolicy
	err := ctx.ReadResource("aws:elb/loadBalancerPolicy:LoadBalancerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerPolicy resources.
type loadBalancerPolicyState struct {
	LoadBalancerName *string                             `pulumi:"loadBalancerName"`
	PolicyAttributes []LoadBalancerPolicyPolicyAttribute `pulumi:"policyAttributes"`
	PolicyName       *string                             `pulumi:"policyName"`
	PolicyTypeName   *string                             `pulumi:"policyTypeName"`
}

type LoadBalancerPolicyState struct {
	LoadBalancerName pulumi.StringPtrInput
	PolicyAttributes LoadBalancerPolicyPolicyAttributeArrayInput
	PolicyName       pulumi.StringPtrInput
	PolicyTypeName   pulumi.StringPtrInput
}

func (LoadBalancerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPolicyState)(nil)).Elem()
}

type loadBalancerPolicyArgs struct {
	LoadBalancerName string                              `pulumi:"loadBalancerName"`
	PolicyAttributes []LoadBalancerPolicyPolicyAttribute `pulumi:"policyAttributes"`
	PolicyName       string                              `pulumi:"policyName"`
	PolicyTypeName   string                              `pulumi:"policyTypeName"`
}

// The set of arguments for constructing a LoadBalancerPolicy resource.
type LoadBalancerPolicyArgs struct {
	LoadBalancerName pulumi.StringInput
	PolicyAttributes LoadBalancerPolicyPolicyAttributeArrayInput
	PolicyName       pulumi.StringInput
	PolicyTypeName   pulumi.StringInput
}

func (LoadBalancerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPolicyArgs)(nil)).Elem()
}
