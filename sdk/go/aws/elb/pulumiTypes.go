// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancerAccessLogs struct {
	// The S3 bucket name to store the logs in.
	Bucket string `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval *int `pulumi:"interval"`
}

type LoadBalancerAccessLogsInput interface {
	pulumi.Input

	ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput
	ToLoadBalancerAccessLogsOutputWithContext(context.Context) LoadBalancerAccessLogsOutput
}

type LoadBalancerAccessLogsArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (LoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return i.ToLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsOutput)
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsPtrOutput() LoadBalancerAccessLogsPtrOutput {
	return i.ToLoadBalancerAccessLogsPtrOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsOutput).ToLoadBalancerAccessLogsPtrOutputWithContext(ctx)
}

type LoadBalancerAccessLogsPtrInput interface {
	pulumi.Input

	ToLoadBalancerAccessLogsPtrOutput() LoadBalancerAccessLogsPtrOutput
	ToLoadBalancerAccessLogsPtrOutputWithContext(context.Context) LoadBalancerAccessLogsPtrOutput
}

type loadBalancerAccessLogsPtrType LoadBalancerAccessLogsArgs

func LoadBalancerAccessLogsPtr(v *LoadBalancerAccessLogsArgs) LoadBalancerAccessLogsPtrInput {
	return (*loadBalancerAccessLogsPtrType)(v)
}

func (*loadBalancerAccessLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAccessLogs)(nil)).Elem()
}

func (i *loadBalancerAccessLogsPtrType) ToLoadBalancerAccessLogsPtrOutput() LoadBalancerAccessLogsPtrOutput {
	return i.ToLoadBalancerAccessLogsPtrOutputWithContext(context.Background())
}

func (i *loadBalancerAccessLogsPtrType) ToLoadBalancerAccessLogsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsPtrOutput)
}

type LoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsPtrOutput() LoadBalancerAccessLogsPtrOutput {
	return o.ToLoadBalancerAccessLogsPtrOutputWithContext(context.Background())
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *LoadBalancerAccessLogs {
		return &v
	}).(LoadBalancerAccessLogsPtrOutput)
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) string { return v.Bucket }).(pulumi.StringOutput)
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The publishing interval in minutes. Default: 60 minutes.
func (o LoadBalancerAccessLogsOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type LoadBalancerAccessLogsPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAccessLogs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsPtrOutput) ToLoadBalancerAccessLogsPtrOutput() LoadBalancerAccessLogsPtrOutput {
	return o
}

func (o LoadBalancerAccessLogsPtrOutput) ToLoadBalancerAccessLogsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsPtrOutput {
	return o
}

func (o LoadBalancerAccessLogsPtrOutput) Elem() LoadBalancerAccessLogsOutput {
	return o.ApplyT(func(v *LoadBalancerAccessLogs) LoadBalancerAccessLogs { return *v }).(LoadBalancerAccessLogsOutput)
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsPtrOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) string { return v.Bucket }).(pulumi.StringOutput)
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The publishing interval in minutes. Default: 60 minutes.
func (o LoadBalancerAccessLogsPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogs) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type LoadBalancerAccessLogsArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket string `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval *int `pulumi:"interval"`
}

type LoadBalancerAccessLogsArgsInput interface {
	pulumi.Input

	ToLoadBalancerAccessLogsArgsOutput() LoadBalancerAccessLogsArgsOutput
	ToLoadBalancerAccessLogsArgsOutputWithContext(context.Context) LoadBalancerAccessLogsArgsOutput
}

type LoadBalancerAccessLogsArgsArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (LoadBalancerAccessLogsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogsArgs)(nil)).Elem()
}

func (i LoadBalancerAccessLogsArgsArgs) ToLoadBalancerAccessLogsArgsOutput() LoadBalancerAccessLogsArgsOutput {
	return i.ToLoadBalancerAccessLogsArgsOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgsArgs) ToLoadBalancerAccessLogsArgsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsArgsOutput)
}

func (i LoadBalancerAccessLogsArgsArgs) ToLoadBalancerAccessLogsArgsPtrOutput() LoadBalancerAccessLogsArgsPtrOutput {
	return i.ToLoadBalancerAccessLogsArgsPtrOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgsArgs) ToLoadBalancerAccessLogsArgsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsArgsOutput).ToLoadBalancerAccessLogsArgsPtrOutputWithContext(ctx)
}

type LoadBalancerAccessLogsArgsPtrInput interface {
	pulumi.Input

	ToLoadBalancerAccessLogsArgsPtrOutput() LoadBalancerAccessLogsArgsPtrOutput
	ToLoadBalancerAccessLogsArgsPtrOutputWithContext(context.Context) LoadBalancerAccessLogsArgsPtrOutput
}

type loadBalancerAccessLogsArgsPtrType LoadBalancerAccessLogsArgsArgs

func LoadBalancerAccessLogsArgsPtr(v *LoadBalancerAccessLogsArgsArgs) LoadBalancerAccessLogsArgsPtrInput {
	return (*loadBalancerAccessLogsArgsPtrType)(v)
}

func (*loadBalancerAccessLogsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAccessLogsArgs)(nil)).Elem()
}

func (i *loadBalancerAccessLogsArgsPtrType) ToLoadBalancerAccessLogsArgsPtrOutput() LoadBalancerAccessLogsArgsPtrOutput {
	return i.ToLoadBalancerAccessLogsArgsPtrOutputWithContext(context.Background())
}

func (i *loadBalancerAccessLogsArgsPtrType) ToLoadBalancerAccessLogsArgsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsArgsPtrOutput)
}

type LoadBalancerAccessLogsArgsOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogsArgs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsArgsOutput) ToLoadBalancerAccessLogsArgsOutput() LoadBalancerAccessLogsArgsOutput {
	return o
}

func (o LoadBalancerAccessLogsArgsOutput) ToLoadBalancerAccessLogsArgsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsOutput {
	return o
}

func (o LoadBalancerAccessLogsArgsOutput) ToLoadBalancerAccessLogsArgsPtrOutput() LoadBalancerAccessLogsArgsPtrOutput {
	return o.ToLoadBalancerAccessLogsArgsPtrOutputWithContext(context.Background())
}

func (o LoadBalancerAccessLogsArgsOutput) ToLoadBalancerAccessLogsArgsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *LoadBalancerAccessLogsArgs {
		return &v
	}).(LoadBalancerAccessLogsArgsPtrOutput)
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsArgsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) string { return v.Bucket }).(pulumi.StringOutput)
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsArgsOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsArgsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The publishing interval in minutes. Default: 60 minutes.
func (o LoadBalancerAccessLogsArgsOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type LoadBalancerAccessLogsArgsPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAccessLogsArgs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsArgsPtrOutput) ToLoadBalancerAccessLogsArgsPtrOutput() LoadBalancerAccessLogsArgsPtrOutput {
	return o
}

func (o LoadBalancerAccessLogsArgsPtrOutput) ToLoadBalancerAccessLogsArgsPtrOutputWithContext(ctx context.Context) LoadBalancerAccessLogsArgsPtrOutput {
	return o
}

func (o LoadBalancerAccessLogsArgsPtrOutput) Elem() LoadBalancerAccessLogsArgsOutput {
	return o.ApplyT(func(v *LoadBalancerAccessLogsArgs) LoadBalancerAccessLogsArgs { return *v }).(LoadBalancerAccessLogsArgsOutput)
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsArgsPtrOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) string { return v.Bucket }).(pulumi.StringOutput)
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsArgsPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsArgsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The publishing interval in minutes. Default: 60 minutes.
func (o LoadBalancerAccessLogsArgsPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsArgs) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type LoadBalancerAccessLogsState struct {
	// The S3 bucket name to store the logs in.
	Bucket string `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval *int `pulumi:"interval"`
}

type LoadBalancerAccessLogsStateInput interface {
	pulumi.Input

	ToLoadBalancerAccessLogsStateOutput() LoadBalancerAccessLogsStateOutput
	ToLoadBalancerAccessLogsStateOutputWithContext(context.Context) LoadBalancerAccessLogsStateOutput
}

type LoadBalancerAccessLogsStateArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The publishing interval in minutes. Default: 60 minutes.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (LoadBalancerAccessLogsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogsState)(nil)).Elem()
}

func (i LoadBalancerAccessLogsStateArgs) ToLoadBalancerAccessLogsStateOutput() LoadBalancerAccessLogsStateOutput {
	return i.ToLoadBalancerAccessLogsStateOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsStateArgs) ToLoadBalancerAccessLogsStateOutputWithContext(ctx context.Context) LoadBalancerAccessLogsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsStateOutput)
}

type LoadBalancerAccessLogsStateOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogsState)(nil)).Elem()
}

func (o LoadBalancerAccessLogsStateOutput) ToLoadBalancerAccessLogsStateOutput() LoadBalancerAccessLogsStateOutput {
	return o
}

func (o LoadBalancerAccessLogsStateOutput) ToLoadBalancerAccessLogsStateOutputWithContext(ctx context.Context) LoadBalancerAccessLogsStateOutput {
	return o
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsStateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsState) string { return v.Bucket }).(pulumi.StringOutput)
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsStateOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsState) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsStateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsState) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The publishing interval in minutes. Default: 60 minutes.
func (o LoadBalancerAccessLogsStateOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerAccessLogsState) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type LoadBalancerHealthCheck struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval int `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target string `pulumi:"target"`
	// The length of time before the check times out.
	Timeout int `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type LoadBalancerHealthCheckInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput
	ToLoadBalancerHealthCheckOutputWithContext(context.Context) LoadBalancerHealthCheckOutput
}

type LoadBalancerHealthCheckArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target pulumi.StringInput `pulumi:"target"`
	// The length of time before the check times out.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return i.ToLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput)
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput).ToLoadBalancerHealthCheckPtrOutputWithContext(ctx)
}

type LoadBalancerHealthCheckPtrInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput
	ToLoadBalancerHealthCheckPtrOutputWithContext(context.Context) LoadBalancerHealthCheckPtrOutput
}

type loadBalancerHealthCheckPtrType LoadBalancerHealthCheckArgs

func LoadBalancerHealthCheckPtr(v *LoadBalancerHealthCheckArgs) LoadBalancerHealthCheckPtrInput {
	return (*loadBalancerHealthCheckPtrType)(v)
}

func (*loadBalancerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckPtrOutput)
}

type LoadBalancerHealthCheckOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) *LoadBalancerHealthCheck {
		return &v
	}).(LoadBalancerHealthCheckPtrOutput)
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) Elem() LoadBalancerHealthCheckOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) LoadBalancerHealthCheck { return *v }).(LoadBalancerHealthCheckOutput)
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckPtrOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckPtrOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckPtrOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval int `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target string `pulumi:"target"`
	// The length of time before the check times out.
	Timeout int `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type LoadBalancerHealthCheckArgsInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckArgsOutput() LoadBalancerHealthCheckArgsOutput
	ToLoadBalancerHealthCheckArgsOutputWithContext(context.Context) LoadBalancerHealthCheckArgsOutput
}

type LoadBalancerHealthCheckArgsArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target pulumi.StringInput `pulumi:"target"`
	// The length of time before the check times out.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheckArgs)(nil)).Elem()
}

func (i LoadBalancerHealthCheckArgsArgs) ToLoadBalancerHealthCheckArgsOutput() LoadBalancerHealthCheckArgsOutput {
	return i.ToLoadBalancerHealthCheckArgsOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgsArgs) ToLoadBalancerHealthCheckArgsOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckArgsOutput)
}

func (i LoadBalancerHealthCheckArgsArgs) ToLoadBalancerHealthCheckArgsPtrOutput() LoadBalancerHealthCheckArgsPtrOutput {
	return i.ToLoadBalancerHealthCheckArgsPtrOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgsArgs) ToLoadBalancerHealthCheckArgsPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckArgsOutput).ToLoadBalancerHealthCheckArgsPtrOutputWithContext(ctx)
}

type LoadBalancerHealthCheckArgsPtrInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckArgsPtrOutput() LoadBalancerHealthCheckArgsPtrOutput
	ToLoadBalancerHealthCheckArgsPtrOutputWithContext(context.Context) LoadBalancerHealthCheckArgsPtrOutput
}

type loadBalancerHealthCheckArgsPtrType LoadBalancerHealthCheckArgsArgs

func LoadBalancerHealthCheckArgsPtr(v *LoadBalancerHealthCheckArgsArgs) LoadBalancerHealthCheckArgsPtrInput {
	return (*loadBalancerHealthCheckArgsPtrType)(v)
}

func (*loadBalancerHealthCheckArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheckArgs)(nil)).Elem()
}

func (i *loadBalancerHealthCheckArgsPtrType) ToLoadBalancerHealthCheckArgsPtrOutput() LoadBalancerHealthCheckArgsPtrOutput {
	return i.ToLoadBalancerHealthCheckArgsPtrOutputWithContext(context.Background())
}

func (i *loadBalancerHealthCheckArgsPtrType) ToLoadBalancerHealthCheckArgsPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckArgsPtrOutput)
}

type LoadBalancerHealthCheckArgsOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheckArgs)(nil)).Elem()
}

func (o LoadBalancerHealthCheckArgsOutput) ToLoadBalancerHealthCheckArgsOutput() LoadBalancerHealthCheckArgsOutput {
	return o
}

func (o LoadBalancerHealthCheckArgsOutput) ToLoadBalancerHealthCheckArgsOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsOutput {
	return o
}

func (o LoadBalancerHealthCheckArgsOutput) ToLoadBalancerHealthCheckArgsPtrOutput() LoadBalancerHealthCheckArgsPtrOutput {
	return o.ToLoadBalancerHealthCheckArgsPtrOutputWithContext(context.Background())
}

func (o LoadBalancerHealthCheckArgsOutput) ToLoadBalancerHealthCheckArgsPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) *LoadBalancerHealthCheckArgs {
		return &v
	}).(LoadBalancerHealthCheckArgsPtrOutput)
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckArgsOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckArgsOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckArgsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckArgsOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckArgsOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckArgsPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheckArgs)(nil)).Elem()
}

func (o LoadBalancerHealthCheckArgsPtrOutput) ToLoadBalancerHealthCheckArgsPtrOutput() LoadBalancerHealthCheckArgsPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckArgsPtrOutput) ToLoadBalancerHealthCheckArgsPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckArgsPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckArgsPtrOutput) Elem() LoadBalancerHealthCheckArgsOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheckArgs) LoadBalancerHealthCheckArgs { return *v }).(LoadBalancerHealthCheckArgsOutput)
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckArgsPtrOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckArgsPtrOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckArgsPtrOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckArgsPtrOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckArgsPtrOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckArgs) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckState struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval int `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target string `pulumi:"target"`
	// The length of time before the check times out.
	Timeout int `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type LoadBalancerHealthCheckStateInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckStateOutput() LoadBalancerHealthCheckStateOutput
	ToLoadBalancerHealthCheckStateOutputWithContext(context.Context) LoadBalancerHealthCheckStateOutput
}

type LoadBalancerHealthCheckStateArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// * `HTTP`, `HTTPS` - PORT and PATH are required
	// * `TCP`, `SSL` - PORT is required, PATH is not supported
	Target pulumi.StringInput `pulumi:"target"`
	// The length of time before the check times out.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheckState)(nil)).Elem()
}

func (i LoadBalancerHealthCheckStateArgs) ToLoadBalancerHealthCheckStateOutput() LoadBalancerHealthCheckStateOutput {
	return i.ToLoadBalancerHealthCheckStateOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckStateArgs) ToLoadBalancerHealthCheckStateOutputWithContext(ctx context.Context) LoadBalancerHealthCheckStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckStateOutput)
}

type LoadBalancerHealthCheckStateOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheckState)(nil)).Elem()
}

func (o LoadBalancerHealthCheckStateOutput) ToLoadBalancerHealthCheckStateOutput() LoadBalancerHealthCheckStateOutput {
	return o
}

func (o LoadBalancerHealthCheckStateOutput) ToLoadBalancerHealthCheckStateOutputWithContext(ctx context.Context) LoadBalancerHealthCheckStateOutput {
	return o
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckStateOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckState) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The interval between checks.
func (o LoadBalancerHealthCheckStateOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckState) int { return v.Interval }).(pulumi.IntOutput)
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
// * `HTTP`, `HTTPS` - PORT and PATH are required
// * `TCP`, `SSL` - PORT is required, PATH is not supported
func (o LoadBalancerHealthCheckStateOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckState) string { return v.Target }).(pulumi.StringOutput)
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckStateOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckState) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckStateOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheckState) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerListener struct {
	// The port on the instance to route to
	InstancePort int `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort int `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol string `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId *string `pulumi:"sslCertificateId"`
}

type LoadBalancerListenerInput interface {
	pulumi.Input

	ToLoadBalancerListenerOutput() LoadBalancerListenerOutput
	ToLoadBalancerListenerOutputWithContext(context.Context) LoadBalancerListenerOutput
}

type LoadBalancerListenerArgs struct {
	// The port on the instance to route to
	InstancePort pulumi.IntInput `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol pulumi.StringInput `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol pulumi.StringInput `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId pulumi.StringPtrInput `pulumi:"sslCertificateId"`
}

func (LoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return i.ToLoadBalancerListenerOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerOutput)
}

type LoadBalancerListenerArrayInput interface {
	pulumi.Input

	ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput
	ToLoadBalancerListenerArrayOutputWithContext(context.Context) LoadBalancerListenerArrayOutput
}

type LoadBalancerListenerArray []LoadBalancerListenerInput

func (LoadBalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListener)(nil)).Elem()
}

func (i LoadBalancerListenerArray) ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput {
	return i.ToLoadBalancerListenerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArray) ToLoadBalancerListenerArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerArrayOutput)
}

type LoadBalancerListenerOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return o
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return o
}

// The port on the instance to route to
func (o LoadBalancerListenerOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListener) int { return v.InstancePort }).(pulumi.IntOutput)
}

// The protocol to use to the instance. Valid
// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) InstanceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListener) string { return v.InstanceProtocol }).(pulumi.StringOutput)
}

// The port to listen on for the load balancer
func (o LoadBalancerListenerOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListener) int { return v.LbPort }).(pulumi.IntOutput)
}

// The protocol to listen on. Valid values are `HTTP`,
// `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) LbProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListener) string { return v.LbProtocol }).(pulumi.StringOutput)
}

// The ARN of an SSL certificate you have
// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
func (o LoadBalancerListenerOutput) SslCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerListener) *string { return v.SslCertificateId }).(pulumi.StringPtrOutput)
}

type LoadBalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListener)(nil)).Elem()
}

func (o LoadBalancerListenerArrayOutput) ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput {
	return o
}

func (o LoadBalancerListenerArrayOutput) ToLoadBalancerListenerArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArrayOutput {
	return o
}

func (o LoadBalancerListenerArrayOutput) Index(i pulumi.IntInput) LoadBalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerListener {
		return vs[0].([]LoadBalancerListener)[vs[1].(int)]
	}).(LoadBalancerListenerOutput)
}

type LoadBalancerListenerArgs struct {
	// The port on the instance to route to
	InstancePort int `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort int `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol string `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId *string `pulumi:"sslCertificateId"`
}

type LoadBalancerListenerArgsInput interface {
	pulumi.Input

	ToLoadBalancerListenerArgsOutput() LoadBalancerListenerArgsOutput
	ToLoadBalancerListenerArgsOutputWithContext(context.Context) LoadBalancerListenerArgsOutput
}

type LoadBalancerListenerArgsArgs struct {
	// The port on the instance to route to
	InstancePort pulumi.IntInput `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol pulumi.StringInput `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol pulumi.StringInput `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId pulumi.StringPtrInput `pulumi:"sslCertificateId"`
}

func (LoadBalancerListenerArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListenerArgs)(nil)).Elem()
}

func (i LoadBalancerListenerArgsArgs) ToLoadBalancerListenerArgsOutput() LoadBalancerListenerArgsOutput {
	return i.ToLoadBalancerListenerArgsOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArgsArgs) ToLoadBalancerListenerArgsOutputWithContext(ctx context.Context) LoadBalancerListenerArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerArgsOutput)
}

type LoadBalancerListenerArgsArrayInput interface {
	pulumi.Input

	ToLoadBalancerListenerArgsArrayOutput() LoadBalancerListenerArgsArrayOutput
	ToLoadBalancerListenerArgsArrayOutputWithContext(context.Context) LoadBalancerListenerArgsArrayOutput
}

type LoadBalancerListenerArgsArray []LoadBalancerListenerArgsInput

func (LoadBalancerListenerArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListenerArgs)(nil)).Elem()
}

func (i LoadBalancerListenerArgsArray) ToLoadBalancerListenerArgsArrayOutput() LoadBalancerListenerArgsArrayOutput {
	return i.ToLoadBalancerListenerArgsArrayOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArgsArray) ToLoadBalancerListenerArgsArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerArgsArrayOutput)
}

type LoadBalancerListenerArgsOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListenerArgs)(nil)).Elem()
}

func (o LoadBalancerListenerArgsOutput) ToLoadBalancerListenerArgsOutput() LoadBalancerListenerArgsOutput {
	return o
}

func (o LoadBalancerListenerArgsOutput) ToLoadBalancerListenerArgsOutputWithContext(ctx context.Context) LoadBalancerListenerArgsOutput {
	return o
}

// The port on the instance to route to
func (o LoadBalancerListenerArgsOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListenerArgs) int { return v.InstancePort }).(pulumi.IntOutput)
}

// The protocol to use to the instance. Valid
// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerArgsOutput) InstanceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListenerArgs) string { return v.InstanceProtocol }).(pulumi.StringOutput)
}

// The port to listen on for the load balancer
func (o LoadBalancerListenerArgsOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListenerArgs) int { return v.LbPort }).(pulumi.IntOutput)
}

// The protocol to listen on. Valid values are `HTTP`,
// `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerArgsOutput) LbProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListenerArgs) string { return v.LbProtocol }).(pulumi.StringOutput)
}

// The ARN of an SSL certificate you have
// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
func (o LoadBalancerListenerArgsOutput) SslCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerListenerArgs) *string { return v.SslCertificateId }).(pulumi.StringPtrOutput)
}

type LoadBalancerListenerArgsArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListenerArgs)(nil)).Elem()
}

func (o LoadBalancerListenerArgsArrayOutput) ToLoadBalancerListenerArgsArrayOutput() LoadBalancerListenerArgsArrayOutput {
	return o
}

func (o LoadBalancerListenerArgsArrayOutput) ToLoadBalancerListenerArgsArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArgsArrayOutput {
	return o
}

func (o LoadBalancerListenerArgsArrayOutput) Index(i pulumi.IntInput) LoadBalancerListenerArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerListenerArgs {
		return vs[0].([]LoadBalancerListenerArgs)[vs[1].(int)]
	}).(LoadBalancerListenerArgsOutput)
}

type LoadBalancerListenerState struct {
	// The port on the instance to route to
	InstancePort int `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort int `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol string `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId *string `pulumi:"sslCertificateId"`
}

type LoadBalancerListenerStateInput interface {
	pulumi.Input

	ToLoadBalancerListenerStateOutput() LoadBalancerListenerStateOutput
	ToLoadBalancerListenerStateOutputWithContext(context.Context) LoadBalancerListenerStateOutput
}

type LoadBalancerListenerStateArgs struct {
	// The port on the instance to route to
	InstancePort pulumi.IntInput `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol pulumi.StringInput `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol pulumi.StringInput `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId pulumi.StringPtrInput `pulumi:"sslCertificateId"`
}

func (LoadBalancerListenerStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListenerState)(nil)).Elem()
}

func (i LoadBalancerListenerStateArgs) ToLoadBalancerListenerStateOutput() LoadBalancerListenerStateOutput {
	return i.ToLoadBalancerListenerStateOutputWithContext(context.Background())
}

func (i LoadBalancerListenerStateArgs) ToLoadBalancerListenerStateOutputWithContext(ctx context.Context) LoadBalancerListenerStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerStateOutput)
}

type LoadBalancerListenerStateArrayInput interface {
	pulumi.Input

	ToLoadBalancerListenerStateArrayOutput() LoadBalancerListenerStateArrayOutput
	ToLoadBalancerListenerStateArrayOutputWithContext(context.Context) LoadBalancerListenerStateArrayOutput
}

type LoadBalancerListenerStateArray []LoadBalancerListenerStateInput

func (LoadBalancerListenerStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListenerState)(nil)).Elem()
}

func (i LoadBalancerListenerStateArray) ToLoadBalancerListenerStateArrayOutput() LoadBalancerListenerStateArrayOutput {
	return i.ToLoadBalancerListenerStateArrayOutputWithContext(context.Background())
}

func (i LoadBalancerListenerStateArray) ToLoadBalancerListenerStateArrayOutputWithContext(ctx context.Context) LoadBalancerListenerStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerStateArrayOutput)
}

type LoadBalancerListenerStateOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListenerState)(nil)).Elem()
}

func (o LoadBalancerListenerStateOutput) ToLoadBalancerListenerStateOutput() LoadBalancerListenerStateOutput {
	return o
}

func (o LoadBalancerListenerStateOutput) ToLoadBalancerListenerStateOutputWithContext(ctx context.Context) LoadBalancerListenerStateOutput {
	return o
}

// The port on the instance to route to
func (o LoadBalancerListenerStateOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListenerState) int { return v.InstancePort }).(pulumi.IntOutput)
}

// The protocol to use to the instance. Valid
// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerStateOutput) InstanceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListenerState) string { return v.InstanceProtocol }).(pulumi.StringOutput)
}

// The port to listen on for the load balancer
func (o LoadBalancerListenerStateOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerListenerState) int { return v.LbPort }).(pulumi.IntOutput)
}

// The protocol to listen on. Valid values are `HTTP`,
// `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerStateOutput) LbProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerListenerState) string { return v.LbProtocol }).(pulumi.StringOutput)
}

// The ARN of an SSL certificate you have
// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
func (o LoadBalancerListenerStateOutput) SslCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerListenerState) *string { return v.SslCertificateId }).(pulumi.StringPtrOutput)
}

type LoadBalancerListenerStateArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListenerState)(nil)).Elem()
}

func (o LoadBalancerListenerStateArrayOutput) ToLoadBalancerListenerStateArrayOutput() LoadBalancerListenerStateArrayOutput {
	return o
}

func (o LoadBalancerListenerStateArrayOutput) ToLoadBalancerListenerStateArrayOutputWithContext(ctx context.Context) LoadBalancerListenerStateArrayOutput {
	return o
}

func (o LoadBalancerListenerStateArrayOutput) Index(i pulumi.IntInput) LoadBalancerListenerStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerListenerState {
		return vs[0].([]LoadBalancerListenerState)[vs[1].(int)]
	}).(LoadBalancerListenerStateOutput)
}

type LoadBalancerPolicyPolicyAttribute struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type LoadBalancerPolicyPolicyAttributeInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeOutput() LoadBalancerPolicyPolicyAttributeOutput
	ToLoadBalancerPolicyPolicyAttributeOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeOutput
}

type LoadBalancerPolicyPolicyAttributeArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LoadBalancerPolicyPolicyAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeArgs) ToLoadBalancerPolicyPolicyAttributeOutput() LoadBalancerPolicyPolicyAttributeOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeArgs) ToLoadBalancerPolicyPolicyAttributeOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeOutput)
}

type LoadBalancerPolicyPolicyAttributeArrayInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeArrayOutput() LoadBalancerPolicyPolicyAttributeArrayOutput
	ToLoadBalancerPolicyPolicyAttributeArrayOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeArrayOutput
}

type LoadBalancerPolicyPolicyAttributeArray []LoadBalancerPolicyPolicyAttributeInput

func (LoadBalancerPolicyPolicyAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeArray) ToLoadBalancerPolicyPolicyAttributeArrayOutput() LoadBalancerPolicyPolicyAttributeArrayOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeArray) ToLoadBalancerPolicyPolicyAttributeArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeArrayOutput)
}

type LoadBalancerPolicyPolicyAttributeOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeOutput) ToLoadBalancerPolicyPolicyAttributeOutput() LoadBalancerPolicyPolicyAttributeOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeOutput) ToLoadBalancerPolicyPolicyAttributeOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerPolicyPolicyAttributeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttribute) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LoadBalancerPolicyPolicyAttributeArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeArrayOutput) ToLoadBalancerPolicyPolicyAttributeArrayOutput() LoadBalancerPolicyPolicyAttributeArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArrayOutput) ToLoadBalancerPolicyPolicyAttributeArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArrayOutput) Index(i pulumi.IntInput) LoadBalancerPolicyPolicyAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPolicyPolicyAttribute {
		return vs[0].([]LoadBalancerPolicyPolicyAttribute)[vs[1].(int)]
	}).(LoadBalancerPolicyPolicyAttributeOutput)
}

type LoadBalancerPolicyPolicyAttributeArgs struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type LoadBalancerPolicyPolicyAttributeArgsInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeArgsOutput() LoadBalancerPolicyPolicyAttributeArgsOutput
	ToLoadBalancerPolicyPolicyAttributeArgsOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeArgsOutput
}

type LoadBalancerPolicyPolicyAttributeArgsArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LoadBalancerPolicyPolicyAttributeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttributeArgs)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeArgsArgs) ToLoadBalancerPolicyPolicyAttributeArgsOutput() LoadBalancerPolicyPolicyAttributeArgsOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeArgsOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeArgsArgs) ToLoadBalancerPolicyPolicyAttributeArgsOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeArgsOutput)
}

type LoadBalancerPolicyPolicyAttributeArgsArrayInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeArgsArrayOutput() LoadBalancerPolicyPolicyAttributeArgsArrayOutput
	ToLoadBalancerPolicyPolicyAttributeArgsArrayOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeArgsArrayOutput
}

type LoadBalancerPolicyPolicyAttributeArgsArray []LoadBalancerPolicyPolicyAttributeArgsInput

func (LoadBalancerPolicyPolicyAttributeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttributeArgs)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeArgsArray) ToLoadBalancerPolicyPolicyAttributeArgsArrayOutput() LoadBalancerPolicyPolicyAttributeArgsArrayOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeArgsArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeArgsArray) ToLoadBalancerPolicyPolicyAttributeArgsArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeArgsArrayOutput)
}

type LoadBalancerPolicyPolicyAttributeArgsOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttributeArgs)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeArgsOutput) ToLoadBalancerPolicyPolicyAttributeArgsOutput() LoadBalancerPolicyPolicyAttributeArgsOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArgsOutput) ToLoadBalancerPolicyPolicyAttributeArgsOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArgsOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArgsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttributeArgs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerPolicyPolicyAttributeArgsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttributeArgs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LoadBalancerPolicyPolicyAttributeArgsArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttributeArgs)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeArgsArrayOutput) ToLoadBalancerPolicyPolicyAttributeArgsArrayOutput() LoadBalancerPolicyPolicyAttributeArgsArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArgsArrayOutput) ToLoadBalancerPolicyPolicyAttributeArgsArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeArgsArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeArgsArrayOutput) Index(i pulumi.IntInput) LoadBalancerPolicyPolicyAttributeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPolicyPolicyAttributeArgs {
		return vs[0].([]LoadBalancerPolicyPolicyAttributeArgs)[vs[1].(int)]
	}).(LoadBalancerPolicyPolicyAttributeArgsOutput)
}

type LoadBalancerPolicyPolicyAttributeState struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type LoadBalancerPolicyPolicyAttributeStateInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeStateOutput() LoadBalancerPolicyPolicyAttributeStateOutput
	ToLoadBalancerPolicyPolicyAttributeStateOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeStateOutput
}

type LoadBalancerPolicyPolicyAttributeStateArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LoadBalancerPolicyPolicyAttributeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttributeState)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeStateArgs) ToLoadBalancerPolicyPolicyAttributeStateOutput() LoadBalancerPolicyPolicyAttributeStateOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeStateOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeStateArgs) ToLoadBalancerPolicyPolicyAttributeStateOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeStateOutput)
}

type LoadBalancerPolicyPolicyAttributeStateArrayInput interface {
	pulumi.Input

	ToLoadBalancerPolicyPolicyAttributeStateArrayOutput() LoadBalancerPolicyPolicyAttributeStateArrayOutput
	ToLoadBalancerPolicyPolicyAttributeStateArrayOutputWithContext(context.Context) LoadBalancerPolicyPolicyAttributeStateArrayOutput
}

type LoadBalancerPolicyPolicyAttributeStateArray []LoadBalancerPolicyPolicyAttributeStateInput

func (LoadBalancerPolicyPolicyAttributeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttributeState)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeStateArray) ToLoadBalancerPolicyPolicyAttributeStateArrayOutput() LoadBalancerPolicyPolicyAttributeStateArrayOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeStateArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeStateArray) ToLoadBalancerPolicyPolicyAttributeStateArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeStateArrayOutput)
}

type LoadBalancerPolicyPolicyAttributeStateOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttributeState)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeStateOutput) ToLoadBalancerPolicyPolicyAttributeStateOutput() LoadBalancerPolicyPolicyAttributeStateOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeStateOutput) ToLoadBalancerPolicyPolicyAttributeStateOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeStateOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeStateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttributeState) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerPolicyPolicyAttributeStateOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPolicyPolicyAttributeState) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LoadBalancerPolicyPolicyAttributeStateArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPolicyPolicyAttributeState)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeStateArrayOutput) ToLoadBalancerPolicyPolicyAttributeStateArrayOutput() LoadBalancerPolicyPolicyAttributeStateArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeStateArrayOutput) ToLoadBalancerPolicyPolicyAttributeStateArrayOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeStateArrayOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeStateArrayOutput) Index(i pulumi.IntInput) LoadBalancerPolicyPolicyAttributeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPolicyPolicyAttributeState {
		return vs[0].([]LoadBalancerPolicyPolicyAttributeState)[vs[1].(int)]
	}).(LoadBalancerPolicyPolicyAttributeStateOutput)
}

type SslNegotiationPolicyAttribute struct {
	// The name of the attribute
	Name string `pulumi:"name"`
	// The value of the attribute
	Value string `pulumi:"value"`
}

type SslNegotiationPolicyAttributeInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeOutput() SslNegotiationPolicyAttributeOutput
	ToSslNegotiationPolicyAttributeOutputWithContext(context.Context) SslNegotiationPolicyAttributeOutput
}

type SslNegotiationPolicyAttributeArgs struct {
	// The name of the attribute
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the attribute
	Value pulumi.StringInput `pulumi:"value"`
}

func (SslNegotiationPolicyAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeArgs) ToSslNegotiationPolicyAttributeOutput() SslNegotiationPolicyAttributeOutput {
	return i.ToSslNegotiationPolicyAttributeOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeArgs) ToSslNegotiationPolicyAttributeOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeOutput)
}

type SslNegotiationPolicyAttributeArrayInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeArrayOutput() SslNegotiationPolicyAttributeArrayOutput
	ToSslNegotiationPolicyAttributeArrayOutputWithContext(context.Context) SslNegotiationPolicyAttributeArrayOutput
}

type SslNegotiationPolicyAttributeArray []SslNegotiationPolicyAttributeInput

func (SslNegotiationPolicyAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeArray) ToSslNegotiationPolicyAttributeArrayOutput() SslNegotiationPolicyAttributeArrayOutput {
	return i.ToSslNegotiationPolicyAttributeArrayOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeArray) ToSslNegotiationPolicyAttributeArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeArrayOutput)
}

type SslNegotiationPolicyAttributeOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeOutput) ToSslNegotiationPolicyAttributeOutput() SslNegotiationPolicyAttributeOutput {
	return o
}

func (o SslNegotiationPolicyAttributeOutput) ToSslNegotiationPolicyAttributeOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeOutput {
	return o
}

// The name of the attribute
func (o SslNegotiationPolicyAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the attribute
func (o SslNegotiationPolicyAttributeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttribute) string { return v.Value }).(pulumi.StringOutput)
}

type SslNegotiationPolicyAttributeArrayOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeArrayOutput) ToSslNegotiationPolicyAttributeArrayOutput() SslNegotiationPolicyAttributeArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeArrayOutput) ToSslNegotiationPolicyAttributeArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeArrayOutput) Index(i pulumi.IntInput) SslNegotiationPolicyAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslNegotiationPolicyAttribute {
		return vs[0].([]SslNegotiationPolicyAttribute)[vs[1].(int)]
	}).(SslNegotiationPolicyAttributeOutput)
}

type SslNegotiationPolicyAttributeArgs struct {
	// The name of the attribute
	Name string `pulumi:"name"`
	// The value of the attribute
	Value string `pulumi:"value"`
}

type SslNegotiationPolicyAttributeArgsInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeArgsOutput() SslNegotiationPolicyAttributeArgsOutput
	ToSslNegotiationPolicyAttributeArgsOutputWithContext(context.Context) SslNegotiationPolicyAttributeArgsOutput
}

type SslNegotiationPolicyAttributeArgsArgs struct {
	// The name of the attribute
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the attribute
	Value pulumi.StringInput `pulumi:"value"`
}

func (SslNegotiationPolicyAttributeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttributeArgs)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeArgsArgs) ToSslNegotiationPolicyAttributeArgsOutput() SslNegotiationPolicyAttributeArgsOutput {
	return i.ToSslNegotiationPolicyAttributeArgsOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeArgsArgs) ToSslNegotiationPolicyAttributeArgsOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeArgsOutput)
}

type SslNegotiationPolicyAttributeArgsArrayInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeArgsArrayOutput() SslNegotiationPolicyAttributeArgsArrayOutput
	ToSslNegotiationPolicyAttributeArgsArrayOutputWithContext(context.Context) SslNegotiationPolicyAttributeArgsArrayOutput
}

type SslNegotiationPolicyAttributeArgsArray []SslNegotiationPolicyAttributeArgsInput

func (SslNegotiationPolicyAttributeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttributeArgs)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeArgsArray) ToSslNegotiationPolicyAttributeArgsArrayOutput() SslNegotiationPolicyAttributeArgsArrayOutput {
	return i.ToSslNegotiationPolicyAttributeArgsArrayOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeArgsArray) ToSslNegotiationPolicyAttributeArgsArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeArgsArrayOutput)
}

type SslNegotiationPolicyAttributeArgsOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttributeArgs)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeArgsOutput) ToSslNegotiationPolicyAttributeArgsOutput() SslNegotiationPolicyAttributeArgsOutput {
	return o
}

func (o SslNegotiationPolicyAttributeArgsOutput) ToSslNegotiationPolicyAttributeArgsOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArgsOutput {
	return o
}

// The name of the attribute
func (o SslNegotiationPolicyAttributeArgsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttributeArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the attribute
func (o SslNegotiationPolicyAttributeArgsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttributeArgs) string { return v.Value }).(pulumi.StringOutput)
}

type SslNegotiationPolicyAttributeArgsArrayOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttributeArgs)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeArgsArrayOutput) ToSslNegotiationPolicyAttributeArgsArrayOutput() SslNegotiationPolicyAttributeArgsArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeArgsArrayOutput) ToSslNegotiationPolicyAttributeArgsArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeArgsArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeArgsArrayOutput) Index(i pulumi.IntInput) SslNegotiationPolicyAttributeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslNegotiationPolicyAttributeArgs {
		return vs[0].([]SslNegotiationPolicyAttributeArgs)[vs[1].(int)]
	}).(SslNegotiationPolicyAttributeArgsOutput)
}

type SslNegotiationPolicyAttributeState struct {
	// The name of the attribute
	Name string `pulumi:"name"`
	// The value of the attribute
	Value string `pulumi:"value"`
}

type SslNegotiationPolicyAttributeStateInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeStateOutput() SslNegotiationPolicyAttributeStateOutput
	ToSslNegotiationPolicyAttributeStateOutputWithContext(context.Context) SslNegotiationPolicyAttributeStateOutput
}

type SslNegotiationPolicyAttributeStateArgs struct {
	// The name of the attribute
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the attribute
	Value pulumi.StringInput `pulumi:"value"`
}

func (SslNegotiationPolicyAttributeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttributeState)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeStateArgs) ToSslNegotiationPolicyAttributeStateOutput() SslNegotiationPolicyAttributeStateOutput {
	return i.ToSslNegotiationPolicyAttributeStateOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeStateArgs) ToSslNegotiationPolicyAttributeStateOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeStateOutput)
}

type SslNegotiationPolicyAttributeStateArrayInput interface {
	pulumi.Input

	ToSslNegotiationPolicyAttributeStateArrayOutput() SslNegotiationPolicyAttributeStateArrayOutput
	ToSslNegotiationPolicyAttributeStateArrayOutputWithContext(context.Context) SslNegotiationPolicyAttributeStateArrayOutput
}

type SslNegotiationPolicyAttributeStateArray []SslNegotiationPolicyAttributeStateInput

func (SslNegotiationPolicyAttributeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttributeState)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeStateArray) ToSslNegotiationPolicyAttributeStateArrayOutput() SslNegotiationPolicyAttributeStateArrayOutput {
	return i.ToSslNegotiationPolicyAttributeStateArrayOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeStateArray) ToSslNegotiationPolicyAttributeStateArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeStateArrayOutput)
}

type SslNegotiationPolicyAttributeStateOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttributeState)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeStateOutput) ToSslNegotiationPolicyAttributeStateOutput() SslNegotiationPolicyAttributeStateOutput {
	return o
}

func (o SslNegotiationPolicyAttributeStateOutput) ToSslNegotiationPolicyAttributeStateOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeStateOutput {
	return o
}

// The name of the attribute
func (o SslNegotiationPolicyAttributeStateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttributeState) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the attribute
func (o SslNegotiationPolicyAttributeStateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SslNegotiationPolicyAttributeState) string { return v.Value }).(pulumi.StringOutput)
}

type SslNegotiationPolicyAttributeStateArrayOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslNegotiationPolicyAttributeState)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeStateArrayOutput) ToSslNegotiationPolicyAttributeStateArrayOutput() SslNegotiationPolicyAttributeStateArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeStateArrayOutput) ToSslNegotiationPolicyAttributeStateArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeStateArrayOutput {
	return o
}

func (o SslNegotiationPolicyAttributeStateArrayOutput) Index(i pulumi.IntInput) SslNegotiationPolicyAttributeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslNegotiationPolicyAttributeState {
		return vs[0].([]SslNegotiationPolicyAttributeState)[vs[1].(int)]
	}).(SslNegotiationPolicyAttributeStateOutput)
}

type GetLoadBalancerAccessLogs struct {
	Bucket       string `pulumi:"bucket"`
	BucketPrefix string `pulumi:"bucketPrefix"`
	Enabled      bool   `pulumi:"enabled"`
	Interval     int    `pulumi:"interval"`
}

type GetLoadBalancerAccessLogsInput interface {
	pulumi.Input

	ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput
	ToGetLoadBalancerAccessLogsOutputWithContext(context.Context) GetLoadBalancerAccessLogsOutput
}

type GetLoadBalancerAccessLogsArgs struct {
	Bucket       pulumi.StringInput `pulumi:"bucket"`
	BucketPrefix pulumi.StringInput `pulumi:"bucketPrefix"`
	Enabled      pulumi.BoolInput   `pulumi:"enabled"`
	Interval     pulumi.IntInput    `pulumi:"interval"`
}

func (GetLoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return i.ToGetLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerAccessLogsOutput)
}

type GetLoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerAccessLogs) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetLoadBalancerAccessLogsOutput) BucketPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerAccessLogs) string { return v.BucketPrefix }).(pulumi.StringOutput)
}

func (o GetLoadBalancerAccessLogsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerAccessLogs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetLoadBalancerAccessLogsOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerAccessLogs) int { return v.Interval }).(pulumi.IntOutput)
}

type GetLoadBalancerHealthCheck struct {
	HealthyThreshold   int    `pulumi:"healthyThreshold"`
	Interval           int    `pulumi:"interval"`
	Target             string `pulumi:"target"`
	Timeout            int    `pulumi:"timeout"`
	UnhealthyThreshold int    `pulumi:"unhealthyThreshold"`
}

type GetLoadBalancerHealthCheckInput interface {
	pulumi.Input

	ToGetLoadBalancerHealthCheckOutput() GetLoadBalancerHealthCheckOutput
	ToGetLoadBalancerHealthCheckOutputWithContext(context.Context) GetLoadBalancerHealthCheckOutput
}

type GetLoadBalancerHealthCheckArgs struct {
	HealthyThreshold   pulumi.IntInput    `pulumi:"healthyThreshold"`
	Interval           pulumi.IntInput    `pulumi:"interval"`
	Target             pulumi.StringInput `pulumi:"target"`
	Timeout            pulumi.IntInput    `pulumi:"timeout"`
	UnhealthyThreshold pulumi.IntInput    `pulumi:"unhealthyThreshold"`
}

func (GetLoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancerHealthCheckArgs) ToGetLoadBalancerHealthCheckOutput() GetLoadBalancerHealthCheckOutput {
	return i.ToGetLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i GetLoadBalancerHealthCheckArgs) ToGetLoadBalancerHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerHealthCheckOutput)
}

type GetLoadBalancerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancerHealthCheckOutput) ToGetLoadBalancerHealthCheckOutput() GetLoadBalancerHealthCheckOutput {
	return o
}

func (o GetLoadBalancerHealthCheckOutput) ToGetLoadBalancerHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthCheckOutput {
	return o
}

func (o GetLoadBalancerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthCheckOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthCheck) string { return v.Target }).(pulumi.StringOutput)
}

func (o GetLoadBalancerHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type GetLoadBalancerListener struct {
	InstancePort     int    `pulumi:"instancePort"`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	LbPort           int    `pulumi:"lbPort"`
	LbProtocol       string `pulumi:"lbProtocol"`
	SslCertificateId string `pulumi:"sslCertificateId"`
}

type GetLoadBalancerListenerInput interface {
	pulumi.Input

	ToGetLoadBalancerListenerOutput() GetLoadBalancerListenerOutput
	ToGetLoadBalancerListenerOutputWithContext(context.Context) GetLoadBalancerListenerOutput
}

type GetLoadBalancerListenerArgs struct {
	InstancePort     pulumi.IntInput    `pulumi:"instancePort"`
	InstanceProtocol pulumi.StringInput `pulumi:"instanceProtocol"`
	LbPort           pulumi.IntInput    `pulumi:"lbPort"`
	LbProtocol       pulumi.StringInput `pulumi:"lbProtocol"`
	SslCertificateId pulumi.StringInput `pulumi:"sslCertificateId"`
}

func (GetLoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerListener)(nil)).Elem()
}

func (i GetLoadBalancerListenerArgs) ToGetLoadBalancerListenerOutput() GetLoadBalancerListenerOutput {
	return i.ToGetLoadBalancerListenerOutputWithContext(context.Background())
}

func (i GetLoadBalancerListenerArgs) ToGetLoadBalancerListenerOutputWithContext(ctx context.Context) GetLoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerListenerOutput)
}

type GetLoadBalancerListenerArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerListenerArrayOutput() GetLoadBalancerListenerArrayOutput
	ToGetLoadBalancerListenerArrayOutputWithContext(context.Context) GetLoadBalancerListenerArrayOutput
}

type GetLoadBalancerListenerArray []GetLoadBalancerListenerInput

func (GetLoadBalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerListener)(nil)).Elem()
}

func (i GetLoadBalancerListenerArray) ToGetLoadBalancerListenerArrayOutput() GetLoadBalancerListenerArrayOutput {
	return i.ToGetLoadBalancerListenerArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerListenerArray) ToGetLoadBalancerListenerArrayOutputWithContext(ctx context.Context) GetLoadBalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerListenerArrayOutput)
}

type GetLoadBalancerListenerOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerListener)(nil)).Elem()
}

func (o GetLoadBalancerListenerOutput) ToGetLoadBalancerListenerOutput() GetLoadBalancerListenerOutput {
	return o
}

func (o GetLoadBalancerListenerOutput) ToGetLoadBalancerListenerOutputWithContext(ctx context.Context) GetLoadBalancerListenerOutput {
	return o
}

func (o GetLoadBalancerListenerOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerListener) int { return v.InstancePort }).(pulumi.IntOutput)
}

func (o GetLoadBalancerListenerOutput) InstanceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerListener) string { return v.InstanceProtocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancerListenerOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerListener) int { return v.LbPort }).(pulumi.IntOutput)
}

func (o GetLoadBalancerListenerOutput) LbProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerListener) string { return v.LbProtocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancerListenerOutput) SslCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerListener) string { return v.SslCertificateId }).(pulumi.StringOutput)
}

type GetLoadBalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerListener)(nil)).Elem()
}

func (o GetLoadBalancerListenerArrayOutput) ToGetLoadBalancerListenerArrayOutput() GetLoadBalancerListenerArrayOutput {
	return o
}

func (o GetLoadBalancerListenerArrayOutput) ToGetLoadBalancerListenerArrayOutputWithContext(ctx context.Context) GetLoadBalancerListenerArrayOutput {
	return o
}

func (o GetLoadBalancerListenerArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerListener {
		return vs[0].([]GetLoadBalancerListener)[vs[1].(int)]
	}).(GetLoadBalancerListenerOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(LoadBalancerAccessLogsPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerAccessLogsArgsOutput{})
	pulumi.RegisterOutputType(LoadBalancerAccessLogsArgsPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerAccessLogsStateOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckArgsOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckArgsPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckStateOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerArgsOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerArgsArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerStateOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerStateArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeArgsOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeArgsArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeStateOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeStateArrayOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeArrayOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeArgsOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeArgsArrayOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeStateOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeStateArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerListenerOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerListenerArrayOutput{})
}
