// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LicenseConfiguration struct {
	pulumi.CustomResourceState

	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	LicenseCount          pulumi.IntPtrOutput      `pulumi:"licenseCount"`
	LicenseCountHardLimit pulumi.BoolPtrOutput     `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   pulumi.StringOutput      `pulumi:"licenseCountingType"`
	LicenseRules          pulumi.StringArrayOutput `pulumi:"licenseRules"`
	Name                  pulumi.StringOutput      `pulumi:"name"`
	Tags                  pulumi.StringMapOutput   `pulumi:"tags"`
}

// NewLicenseConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLicenseConfiguration(ctx *pulumi.Context,
	name string, args *LicenseConfigurationArgs, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	if args == nil || args.LicenseCountingType == nil {
		return nil, errors.New("missing required argument 'LicenseCountingType'")
	}
	if args == nil {
		args = &LicenseConfigurationArgs{}
	}
	var resource LicenseConfiguration
	err := ctx.RegisterResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseConfiguration gets an existing LicenseConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseConfigurationState, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	var resource LicenseConfiguration
	err := ctx.ReadResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseConfiguration resources.
type licenseConfigurationState struct {
	Description           *string           `pulumi:"description"`
	LicenseCount          *int              `pulumi:"licenseCount"`
	LicenseCountHardLimit *bool             `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   *string           `pulumi:"licenseCountingType"`
	LicenseRules          []string          `pulumi:"licenseRules"`
	Name                  *string           `pulumi:"name"`
	Tags                  map[string]string `pulumi:"tags"`
}

type LicenseConfigurationState struct {
	Description           pulumi.StringPtrInput
	LicenseCount          pulumi.IntPtrInput
	LicenseCountHardLimit pulumi.BoolPtrInput
	LicenseCountingType   pulumi.StringPtrInput
	LicenseRules          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (LicenseConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationState)(nil)).Elem()
}

type licenseConfigurationArgs struct {
	Description           *string           `pulumi:"description"`
	LicenseCount          *int              `pulumi:"licenseCount"`
	LicenseCountHardLimit *bool             `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   string            `pulumi:"licenseCountingType"`
	LicenseRules          []string          `pulumi:"licenseRules"`
	Name                  *string           `pulumi:"name"`
	Tags                  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LicenseConfiguration resource.
type LicenseConfigurationArgs struct {
	Description           pulumi.StringPtrInput
	LicenseCount          pulumi.IntPtrInput
	LicenseCountHardLimit pulumi.BoolPtrInput
	LicenseCountingType   pulumi.StringInput
	LicenseRules          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (LicenseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationArgs)(nil)).Elem()
}
