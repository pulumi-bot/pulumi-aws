// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Certificate struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput                          `pulumi:"arn"`
	CertificateAuthorityArn pulumi.StringPtrOutput                       `pulumi:"certificateAuthorityArn"`
	CertificateBody         pulumi.StringPtrOutput                       `pulumi:"certificateBody"`
	CertificateChain        pulumi.StringPtrOutput                       `pulumi:"certificateChain"`
	DomainName              pulumi.StringOutput                          `pulumi:"domainName"`
	DomainValidationOptions CertificateDomainValidationOptionArrayOutput `pulumi:"domainValidationOptions"`
	Options                 CertificateOptionsPtrOutput                  `pulumi:"options"`
	PrivateKey              pulumi.StringPtrOutput                       `pulumi:"privateKey"`
	Status                  pulumi.StringOutput                          `pulumi:"status"`
	SubjectAlternativeNames pulumi.StringArrayOutput                     `pulumi:"subjectAlternativeNames"`
	Tags                    pulumi.StringMapOutput                       `pulumi:"tags"`
	ValidationEmails        pulumi.StringArrayOutput                     `pulumi:"validationEmails"`
	ValidationMethod        pulumi.StringOutput                          `pulumi:"validationMethod"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("aws:acm/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:acm/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	Arn                     *string                             `pulumi:"arn"`
	CertificateAuthorityArn *string                             `pulumi:"certificateAuthorityArn"`
	CertificateBody         *string                             `pulumi:"certificateBody"`
	CertificateChain        *string                             `pulumi:"certificateChain"`
	DomainName              *string                             `pulumi:"domainName"`
	DomainValidationOptions []CertificateDomainValidationOption `pulumi:"domainValidationOptions"`
	Options                 *CertificateOptions                 `pulumi:"options"`
	PrivateKey              *string                             `pulumi:"privateKey"`
	Status                  *string                             `pulumi:"status"`
	SubjectAlternativeNames []string                            `pulumi:"subjectAlternativeNames"`
	Tags                    map[string]string                   `pulumi:"tags"`
	ValidationEmails        []string                            `pulumi:"validationEmails"`
	ValidationMethod        *string                             `pulumi:"validationMethod"`
}

type CertificateState struct {
	Arn                     pulumi.StringPtrInput
	CertificateAuthorityArn pulumi.StringPtrInput
	CertificateBody         pulumi.StringPtrInput
	CertificateChain        pulumi.StringPtrInput
	DomainName              pulumi.StringPtrInput
	DomainValidationOptions CertificateDomainValidationOptionArrayInput
	Options                 CertificateOptionsPtrInput
	PrivateKey              pulumi.StringPtrInput
	Status                  pulumi.StringPtrInput
	SubjectAlternativeNames pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
	ValidationEmails        pulumi.StringArrayInput
	ValidationMethod        pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	CertificateAuthorityArn *string             `pulumi:"certificateAuthorityArn"`
	CertificateBody         *string             `pulumi:"certificateBody"`
	CertificateChain        *string             `pulumi:"certificateChain"`
	DomainName              *string             `pulumi:"domainName"`
	Options                 *CertificateOptions `pulumi:"options"`
	PrivateKey              *string             `pulumi:"privateKey"`
	SubjectAlternativeNames []string            `pulumi:"subjectAlternativeNames"`
	Tags                    map[string]string   `pulumi:"tags"`
	ValidationMethod        *string             `pulumi:"validationMethod"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	CertificateAuthorityArn pulumi.StringPtrInput
	CertificateBody         pulumi.StringPtrInput
	CertificateChain        pulumi.StringPtrInput
	DomainName              pulumi.StringPtrInput
	Options                 CertificateOptionsPtrInput
	PrivateKey              pulumi.StringPtrInput
	SubjectAlternativeNames pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
	ValidationMethod        pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}
