// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ReceiptRule struct {
	pulumi.CustomResourceState

	AddHeaderActions ReceiptRuleAddHeaderActionArrayOutput `pulumi:"addHeaderActions"`
	After            pulumi.StringPtrOutput                `pulumi:"after"`
	BounceActions    ReceiptRuleBounceActionArrayOutput    `pulumi:"bounceActions"`
	Enabled          pulumi.BoolOutput                     `pulumi:"enabled"`
	LambdaActions    ReceiptRuleLambdaActionArrayOutput    `pulumi:"lambdaActions"`
	Name             pulumi.StringOutput                   `pulumi:"name"`
	Recipients       pulumi.StringArrayOutput              `pulumi:"recipients"`
	RuleSetName      pulumi.StringOutput                   `pulumi:"ruleSetName"`
	S3Actions        ReceiptRuleS3ActionArrayOutput        `pulumi:"s3Actions"`
	ScanEnabled      pulumi.BoolOutput                     `pulumi:"scanEnabled"`
	SnsActions       ReceiptRuleSnsActionArrayOutput       `pulumi:"snsActions"`
	StopActions      ReceiptRuleStopActionArrayOutput      `pulumi:"stopActions"`
	TlsPolicy        pulumi.StringOutput                   `pulumi:"tlsPolicy"`
	WorkmailActions  ReceiptRuleWorkmailActionArrayOutput  `pulumi:"workmailActions"`
}

// NewReceiptRule registers a new resource with the given unique name, arguments, and options.
func NewReceiptRule(ctx *pulumi.Context,
	name string, args *ReceiptRuleArgs, opts ...pulumi.ResourceOption) (*ReceiptRule, error) {
	if args == nil || args.RuleSetName == nil {
		return nil, errors.New("missing required argument 'RuleSetName'")
	}
	if args == nil {
		args = &ReceiptRuleArgs{}
	}
	var resource ReceiptRule
	err := ctx.RegisterResource("aws:ses/receiptRule:ReceiptRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiptRule gets an existing ReceiptRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiptRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiptRuleState, opts ...pulumi.ResourceOption) (*ReceiptRule, error) {
	var resource ReceiptRule
	err := ctx.ReadResource("aws:ses/receiptRule:ReceiptRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiptRule resources.
type receiptRuleState struct {
	AddHeaderActions []ReceiptRuleAddHeaderAction `pulumi:"addHeaderActions"`
	After            *string                      `pulumi:"after"`
	BounceActions    []ReceiptRuleBounceAction    `pulumi:"bounceActions"`
	Enabled          *bool                        `pulumi:"enabled"`
	LambdaActions    []ReceiptRuleLambdaAction    `pulumi:"lambdaActions"`
	Name             *string                      `pulumi:"name"`
	Recipients       []string                     `pulumi:"recipients"`
	RuleSetName      *string                      `pulumi:"ruleSetName"`
	S3Actions        []ReceiptRuleS3Action        `pulumi:"s3Actions"`
	ScanEnabled      *bool                        `pulumi:"scanEnabled"`
	SnsActions       []ReceiptRuleSnsAction       `pulumi:"snsActions"`
	StopActions      []ReceiptRuleStopAction      `pulumi:"stopActions"`
	TlsPolicy        *string                      `pulumi:"tlsPolicy"`
	WorkmailActions  []ReceiptRuleWorkmailAction  `pulumi:"workmailActions"`
}

type ReceiptRuleState struct {
	AddHeaderActions ReceiptRuleAddHeaderActionArrayInput
	After            pulumi.StringPtrInput
	BounceActions    ReceiptRuleBounceActionArrayInput
	Enabled          pulumi.BoolPtrInput
	LambdaActions    ReceiptRuleLambdaActionArrayInput
	Name             pulumi.StringPtrInput
	Recipients       pulumi.StringArrayInput
	RuleSetName      pulumi.StringPtrInput
	S3Actions        ReceiptRuleS3ActionArrayInput
	ScanEnabled      pulumi.BoolPtrInput
	SnsActions       ReceiptRuleSnsActionArrayInput
	StopActions      ReceiptRuleStopActionArrayInput
	TlsPolicy        pulumi.StringPtrInput
	WorkmailActions  ReceiptRuleWorkmailActionArrayInput
}

func (ReceiptRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptRuleState)(nil)).Elem()
}

type receiptRuleArgs struct {
	AddHeaderActions []ReceiptRuleAddHeaderAction `pulumi:"addHeaderActions"`
	After            *string                      `pulumi:"after"`
	BounceActions    []ReceiptRuleBounceAction    `pulumi:"bounceActions"`
	Enabled          *bool                        `pulumi:"enabled"`
	LambdaActions    []ReceiptRuleLambdaAction    `pulumi:"lambdaActions"`
	Name             *string                      `pulumi:"name"`
	Recipients       []string                     `pulumi:"recipients"`
	RuleSetName      string                       `pulumi:"ruleSetName"`
	S3Actions        []ReceiptRuleS3Action        `pulumi:"s3Actions"`
	ScanEnabled      *bool                        `pulumi:"scanEnabled"`
	SnsActions       []ReceiptRuleSnsAction       `pulumi:"snsActions"`
	StopActions      []ReceiptRuleStopAction      `pulumi:"stopActions"`
	TlsPolicy        *string                      `pulumi:"tlsPolicy"`
	WorkmailActions  []ReceiptRuleWorkmailAction  `pulumi:"workmailActions"`
}

// The set of arguments for constructing a ReceiptRule resource.
type ReceiptRuleArgs struct {
	AddHeaderActions ReceiptRuleAddHeaderActionArrayInput
	After            pulumi.StringPtrInput
	BounceActions    ReceiptRuleBounceActionArrayInput
	Enabled          pulumi.BoolPtrInput
	LambdaActions    ReceiptRuleLambdaActionArrayInput
	Name             pulumi.StringPtrInput
	Recipients       pulumi.StringArrayInput
	RuleSetName      pulumi.StringInput
	S3Actions        ReceiptRuleS3ActionArrayInput
	ScanEnabled      pulumi.BoolPtrInput
	SnsActions       ReceiptRuleSnsActionArrayInput
	StopActions      ReceiptRuleStopActionArrayInput
	TlsPolicy        pulumi.StringPtrInput
	WorkmailActions  ReceiptRuleWorkmailActionArrayInput
}

func (ReceiptRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptRuleArgs)(nil)).Elem()
}
