// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package SelectionSelectionTag

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SelectionSelectionTag struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type string `pulumi:"type"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionSelectionTagInput interface {
	pulumi.Input

	ToSelectionSelectionTagOutput() SelectionSelectionTagOutput
	ToSelectionSelectionTagOutputWithContext(context.Context) SelectionSelectionTagOutput
}

type SelectionSelectionTagArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type pulumi.StringInput `pulumi:"type"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionSelectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return i.ToSelectionSelectionTagOutputWithContext(context.Background())
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionSelectionTagOutput)
}

type SelectionSelectionTagArrayInput interface {
	pulumi.Input

	ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput
	ToSelectionSelectionTagArrayOutputWithContext(context.Context) SelectionSelectionTagArrayOutput
}

type SelectionSelectionTagArray []SelectionSelectionTagInput

func (SelectionSelectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionSelectionTag)(nil)).Elem()
}

func (i SelectionSelectionTagArray) ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput {
	return i.ToSelectionSelectionTagArrayOutputWithContext(context.Background())
}

func (i SelectionSelectionTagArray) ToSelectionSelectionTagArrayOutputWithContext(ctx context.Context) SelectionSelectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionSelectionTagArrayOutput)
}

type SelectionSelectionTagOutput struct { *pulumi.OutputState }

func (SelectionSelectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return o
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionSelectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func (v SelectionSelectionTag) string { return v.Key }).(pulumi.StringOutput)
}

// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
func (o SelectionSelectionTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v SelectionSelectionTag) string { return v.Type }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionSelectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func (v SelectionSelectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionSelectionTagArrayOutput struct { *pulumi.OutputState}

func (SelectionSelectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionSelectionTag)(nil)).Elem()
}

func (o SelectionSelectionTagArrayOutput) ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput {
	return o
}

func (o SelectionSelectionTagArrayOutput) ToSelectionSelectionTagArrayOutputWithContext(ctx context.Context) SelectionSelectionTagArrayOutput {
	return o
}

func (o SelectionSelectionTagArrayOutput) Index(i pulumi.IntInput) SelectionSelectionTagOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) SelectionSelectionTag {
		return vs[0].([]SelectionSelectionTag)[vs[1].(int)]
	}).(SelectionSelectionTagOutput)
}

func init() {
	pulumi.RegisterOutputType(SelectionSelectionTagOutput{})
	pulumi.RegisterOutputType(SelectionSelectionTagArrayOutput{})
}
