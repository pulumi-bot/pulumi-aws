// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Plan struct {
	pulumi.CustomResourceState

	Arn     pulumi.StringOutput    `pulumi:"arn"`
	Name    pulumi.StringOutput    `pulumi:"name"`
	Rules   PlanRuleArrayOutput    `pulumi:"rules"`
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	Version pulumi.StringOutput    `pulumi:"version"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOption) (*Plan, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	if args == nil {
		args = &PlanArgs{}
	}
	var resource Plan
	err := ctx.RegisterResource("aws:backup/plan:Plan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanState, opts ...pulumi.ResourceOption) (*Plan, error) {
	var resource Plan
	err := ctx.ReadResource("aws:backup/plan:Plan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plan resources.
type planState struct {
	Arn     *string           `pulumi:"arn"`
	Name    *string           `pulumi:"name"`
	Rules   []PlanRule        `pulumi:"rules"`
	Tags    map[string]string `pulumi:"tags"`
	Version *string           `pulumi:"version"`
}

type PlanState struct {
	Arn     pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	Rules   PlanRuleArrayInput
	Tags    pulumi.StringMapInput
	Version pulumi.StringPtrInput
}

func (PlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*planState)(nil)).Elem()
}

type planArgs struct {
	Name  *string           `pulumi:"name"`
	Rules []PlanRule        `pulumi:"rules"`
	Tags  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	Name  pulumi.StringPtrInput
	Rules PlanRuleArrayInput
	Tags  pulumi.StringMapInput
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planArgs)(nil)).Elem()
}
