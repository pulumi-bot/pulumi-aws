// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an existing backup plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/backup"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := backup.LookupPlan(ctx, &backup.LookupPlanArgs{
// 			PlanId: "tf_example_backup_plan_id",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupPlan(ctx *pulumi.Context, args *LookupPlanArgs, opts ...pulumi.InvokeOption) (*LookupPlanResult, error) {
	var rv LookupPlanResult
	err := ctx.Invoke("aws:backup/getPlan:getPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlan.
type LookupPlanArgs struct {
	// The backup plan ID.
	PlanId string `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPlan.
type LookupPlanResult struct {
	// The ARN of the backup plan.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The display name of a backup plan.
	Name   string `pulumi:"name"`
	PlanId string `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags map[string]string `pulumi:"tags"`
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version string `pulumi:"version"`
}

func LookupPlanApply(ctx *pulumi.Context, args LookupPlanApplyInput, opts ...pulumi.InvokeOption) LookupPlanResultOutput {
	return args.ToLookupPlanApplyOutput().ApplyT(func(v LookupPlanArgs) (LookupPlanResult, error) {
		r, err := LookupPlan(ctx, &v, opts...)
		return *r, err

	}).(LookupPlanResultOutput)
}

// LookupPlanApplyInput is an input type that accepts LookupPlanApplyArgs and LookupPlanApplyOutput values.
// You can construct a concrete instance of `LookupPlanApplyInput` via:
//
//          LookupPlanApplyArgs{...}
type LookupPlanApplyInput interface {
	pulumi.Input

	ToLookupPlanApplyOutput() LookupPlanApplyOutput
	ToLookupPlanApplyOutputWithContext(context.Context) LookupPlanApplyOutput
}

// A collection of arguments for invoking getPlan.
type LookupPlanApplyArgs struct {
	// The backup plan ID.
	PlanId pulumi.StringInput `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupPlanApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanArgs)(nil)).Elem()
}

func (i LookupPlanApplyArgs) ToLookupPlanApplyOutput() LookupPlanApplyOutput {
	return i.ToLookupPlanApplyOutputWithContext(context.Background())
}

func (i LookupPlanApplyArgs) ToLookupPlanApplyOutputWithContext(ctx context.Context) LookupPlanApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupPlanApplyOutput)
}

// A collection of arguments for invoking getPlan.
type LookupPlanApplyOutput struct{ *pulumi.OutputState }

func (LookupPlanApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanArgs)(nil)).Elem()
}

func (o LookupPlanApplyOutput) ToLookupPlanApplyOutput() LookupPlanApplyOutput {
	return o
}

func (o LookupPlanApplyOutput) ToLookupPlanApplyOutputWithContext(ctx context.Context) LookupPlanApplyOutput {
	return o
}

// The backup plan ID.
func (o LookupPlanApplyOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanArgs) string { return v.PlanId }).(pulumi.StringOutput)
}

// Metadata that you can assign to help organize the plans you create.
func (o LookupPlanApplyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPlanArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A collection of values returned by getPlan.
type LookupPlanResultOutput struct{ *pulumi.OutputState }

func (LookupPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanResult)(nil)).Elem()
}

func (o LookupPlanResultOutput) ToLookupPlanResultOutput() LookupPlanResultOutput {
	return o
}

func (o LookupPlanResultOutput) ToLookupPlanResultOutputWithContext(ctx context.Context) LookupPlanResultOutput {
	return o
}

// The ARN of the backup plan.
func (o LookupPlanResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// The display name of a backup plan.
func (o LookupPlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPlanResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanResult) string { return v.PlanId }).(pulumi.StringOutput)
}

// Metadata that you can assign to help organize the plans you create.
func (o LookupPlanResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPlanResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
func (o LookupPlanResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanApplyOutput{})
	pulumi.RegisterOutputType(LookupPlanResultOutput{})
}
