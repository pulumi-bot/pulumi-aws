// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package PlanRule

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/backup/PlanRuleLifecycle"
)

type PlanRule struct {
	// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow *int `pulumi:"completionWindow"`
	// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
	Lifecycle *backupPlanRuleLifecycle.PlanRuleLifecycle `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags map[string]interface{} `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName string `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule *string `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow *int `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName string `pulumi:"targetVaultName"`
}

type PlanRuleInput interface {
	pulumi.Input

	ToPlanRuleOutput() PlanRuleOutput
	ToPlanRuleOutputWithContext(context.Context) PlanRuleOutput
}

type PlanRuleArgs struct {
	// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow pulumi.IntPtrInput `pulumi:"completionWindow"`
	// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
	Lifecycle backupPlanRuleLifecycle.PlanRuleLifecyclePtrInput `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags pulumi.MapInput `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow pulumi.IntPtrInput `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName pulumi.StringInput `pulumi:"targetVaultName"`
}

func (PlanRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (i PlanRuleArgs) ToPlanRuleOutput() PlanRuleOutput {
	return i.ToPlanRuleOutputWithContext(context.Background())
}

func (i PlanRuleArgs) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleOutput)
}

type PlanRuleArrayInput interface {
	pulumi.Input

	ToPlanRuleArrayOutput() PlanRuleArrayOutput
	ToPlanRuleArrayOutputWithContext(context.Context) PlanRuleArrayOutput
}

type PlanRuleArray []PlanRuleInput

func (PlanRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRule)(nil)).Elem()
}

func (i PlanRuleArray) ToPlanRuleArrayOutput() PlanRuleArrayOutput {
	return i.ToPlanRuleArrayOutputWithContext(context.Background())
}

func (i PlanRuleArray) ToPlanRuleArrayOutputWithContext(ctx context.Context) PlanRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleArrayOutput)
}

type PlanRuleOutput struct { *pulumi.OutputState }

func (PlanRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (o PlanRuleOutput) ToPlanRuleOutput() PlanRuleOutput {
	return o
}

func (o PlanRuleOutput) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return o
}

// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
func (o PlanRuleOutput) CompletionWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func (v PlanRule) *int { return v.CompletionWindow }).(pulumi.IntPtrOutput)
}

// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
func (o PlanRuleOutput) Lifecycle() backupPlanRuleLifecycle.PlanRuleLifecyclePtrOutput {
	return o.ApplyT(func (v PlanRule) *backupPlanRuleLifecycle.PlanRuleLifecycle { return v.Lifecycle }).(backupPlanRuleLifecycle.PlanRuleLifecyclePtrOutput)
}

// Metadata that you can assign to help organize the resources that you create.
func (o PlanRuleOutput) RecoveryPointTags() pulumi.MapOutput {
	return o.ApplyT(func (v PlanRule) map[string]interface{} { return v.RecoveryPointTags }).(pulumi.MapOutput)
}

// An display name for a backup rule.
func (o PlanRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func (v PlanRule) string { return v.RuleName }).(pulumi.StringOutput)
}

// A CRON expression specifying when AWS Backup initiates a backup job.
func (o PlanRuleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func (v PlanRule) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The amount of time in minutes before beginning a backup.
func (o PlanRuleOutput) StartWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func (v PlanRule) *int { return v.StartWindow }).(pulumi.IntPtrOutput)
}

// The name of a logical container where backups are stored.
func (o PlanRuleOutput) TargetVaultName() pulumi.StringOutput {
	return o.ApplyT(func (v PlanRule) string { return v.TargetVaultName }).(pulumi.StringOutput)
}

type PlanRuleArrayOutput struct { *pulumi.OutputState}

func (PlanRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRule)(nil)).Elem()
}

func (o PlanRuleArrayOutput) ToPlanRuleArrayOutput() PlanRuleArrayOutput {
	return o
}

func (o PlanRuleArrayOutput) ToPlanRuleArrayOutputWithContext(ctx context.Context) PlanRuleArrayOutput {
	return o
}

func (o PlanRuleArrayOutput) Index(i pulumi.IntInput) PlanRuleOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) PlanRule {
		return vs[0].([]PlanRule)[vs[1].(int)]
	}).(PlanRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(PlanRuleOutput{})
	pulumi.RegisterOutputType(PlanRuleArrayOutput{})
}
