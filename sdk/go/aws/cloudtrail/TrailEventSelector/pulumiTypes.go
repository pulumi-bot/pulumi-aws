// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TrailEventSelector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/cloudtrail/TrailEventSelectorDataResource"
)

type TrailEventSelector struct {
	// Specifies logging data events. Fields documented below.
	DataResources []cloudtrailTrailEventSelectorDataResource.TrailEventSelectorDataResource `pulumi:"dataResources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents *bool `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. By default, the value is All. You can specify only the following value: "ReadOnly", "WriteOnly", "All". Defaults to `All`.
	ReadWriteType *string `pulumi:"readWriteType"`
}

type TrailEventSelectorInput interface {
	pulumi.Input

	ToTrailEventSelectorOutput() TrailEventSelectorOutput
	ToTrailEventSelectorOutputWithContext(context.Context) TrailEventSelectorOutput
}

type TrailEventSelectorArgs struct {
	// Specifies logging data events. Fields documented below.
	DataResources cloudtrailTrailEventSelectorDataResource.TrailEventSelectorDataResourceArrayInput `pulumi:"dataResources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents pulumi.BoolPtrInput `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. By default, the value is All. You can specify only the following value: "ReadOnly", "WriteOnly", "All". Defaults to `All`.
	ReadWriteType pulumi.StringPtrInput `pulumi:"readWriteType"`
}

func (TrailEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return i.ToTrailEventSelectorOutputWithContext(context.Background())
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorOutput)
}

type TrailEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput
	ToTrailEventSelectorArrayOutputWithContext(context.Context) TrailEventSelectorArrayOutput
}

type TrailEventSelectorArray []TrailEventSelectorInput

func (TrailEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return i.ToTrailEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorArrayOutput)
}

type TrailEventSelectorOutput struct { *pulumi.OutputState }

func (TrailEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return o
}

// Specifies logging data events. Fields documented below.
func (o TrailEventSelectorOutput) DataResources() cloudtrailTrailEventSelectorDataResource.TrailEventSelectorDataResourceArrayOutput {
	return o.ApplyT(func (v TrailEventSelector) []cloudtrailTrailEventSelectorDataResource.TrailEventSelectorDataResource { return v.DataResources }).(cloudtrailTrailEventSelectorDataResource.TrailEventSelectorDataResourceArrayOutput)
}

// Specify if you want your event selector to include management events for your trail.
func (o TrailEventSelectorOutput) IncludeManagementEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v TrailEventSelector) *bool { return v.IncludeManagementEvents }).(pulumi.BoolPtrOutput)
}

// Specify if you want your trail to log read-only events, write-only events, or all. By default, the value is All. You can specify only the following value: "ReadOnly", "WriteOnly", "All". Defaults to `All`.
func (o TrailEventSelectorOutput) ReadWriteType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TrailEventSelector) *string { return v.ReadWriteType }).(pulumi.StringPtrOutput)
}

type TrailEventSelectorArrayOutput struct { *pulumi.OutputState}

func (TrailEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) TrailEventSelector {
		return vs[0].([]TrailEventSelector)[vs[1].(int)]
	}).(TrailEventSelectorOutput)
}

func init() {
	pulumi.RegisterOutputType(TrailEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorArrayOutput{})
}
