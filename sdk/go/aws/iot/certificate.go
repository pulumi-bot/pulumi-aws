// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Certificate struct {
	pulumi.CustomResourceState

	Active         pulumi.BoolOutput      `pulumi:"active"`
	Arn            pulumi.StringOutput    `pulumi:"arn"`
	CertificatePem pulumi.StringOutput    `pulumi:"certificatePem"`
	Csr            pulumi.StringPtrOutput `pulumi:"csr"`
	PrivateKey     pulumi.StringOutput    `pulumi:"privateKey"`
	PublicKey      pulumi.StringOutput    `pulumi:"publicKey"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.Active == nil {
		return nil, errors.New("missing required argument 'Active'")
	}
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("aws:iot/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:iot/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	Active         *bool   `pulumi:"active"`
	Arn            *string `pulumi:"arn"`
	CertificatePem *string `pulumi:"certificatePem"`
	Csr            *string `pulumi:"csr"`
	PrivateKey     *string `pulumi:"privateKey"`
	PublicKey      *string `pulumi:"publicKey"`
}

type CertificateState struct {
	Active         pulumi.BoolPtrInput
	Arn            pulumi.StringPtrInput
	CertificatePem pulumi.StringPtrInput
	Csr            pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
	PublicKey      pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	Active bool    `pulumi:"active"`
	Csr    *string `pulumi:"csr"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	Active pulumi.BoolInput
	Csr    pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}
