// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides network associations for AWS Client VPN endpoints. For more information on usage, please see the 
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_client_vpn_network_association.html.markdown.
type NetworkAssociation struct {
	s *pulumi.ResourceState
}

// NewNetworkAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkAssociation(ctx *pulumi.Context,
	name string, args *NetworkAssociationArgs, opts ...pulumi.ResourceOpt) (*NetworkAssociation, error) {
	if args == nil || args.ClientVpnEndpointId == nil {
		return nil, errors.New("missing required argument 'ClientVpnEndpointId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientVpnEndpointId"] = nil
		inputs["subnetId"] = nil
	} else {
		inputs["clientVpnEndpointId"] = args.ClientVpnEndpointId
		inputs["subnetId"] = args.SubnetId
	}
	inputs["securityGroups"] = nil
	inputs["status"] = nil
	inputs["vpcId"] = nil
	s, err := ctx.RegisterResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkAssociation{s: s}, nil
}

// GetNetworkAssociation gets an existing NetworkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkAssociationState, opts ...pulumi.ResourceOpt) (*NetworkAssociation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientVpnEndpointId"] = state.ClientVpnEndpointId
		inputs["securityGroups"] = state.SecurityGroups
		inputs["status"] = state.Status
		inputs["subnetId"] = state.SubnetId
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkAssociation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkAssociation) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkAssociation) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the Client VPN endpoint.
func (r *NetworkAssociation) ClientVpnEndpointId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientVpnEndpointId"])
}

// The IDs of the security groups applied to the target network association.
func (r *NetworkAssociation) SecurityGroups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["securityGroups"])
}

// The current state of the target network association.
func (r *NetworkAssociation) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// The ID of the subnet to associate with the Client VPN endpoint.
func (r *NetworkAssociation) SubnetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subnetId"])
}

// The ID of the VPC in which the target network (subnet) is located. 
func (r *NetworkAssociation) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering NetworkAssociation resources.
type NetworkAssociationState struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId interface{}
	// The IDs of the security groups applied to the target network association.
	SecurityGroups interface{}
	// The current state of the target network association.
	Status interface{}
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId interface{}
	// The ID of the VPC in which the target network (subnet) is located. 
	VpcId interface{}
}

// The set of arguments for constructing a NetworkAssociation resource.
type NetworkAssociationArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId interface{}
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId interface{}
}
