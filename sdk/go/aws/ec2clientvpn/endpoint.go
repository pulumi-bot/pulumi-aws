// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_client_vpn_endpoint.html.markdown.
type Endpoint struct {
	s *pulumi.ResourceState
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	if args == nil || args.AuthenticationOptions == nil {
		return nil, errors.New("missing required argument 'AuthenticationOptions'")
	}
	if args == nil || args.ClientCidrBlock == nil {
		return nil, errors.New("missing required argument 'ClientCidrBlock'")
	}
	if args == nil || args.ConnectionLogOptions == nil {
		return nil, errors.New("missing required argument 'ConnectionLogOptions'")
	}
	if args == nil || args.ServerCertificateArn == nil {
		return nil, errors.New("missing required argument 'ServerCertificateArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authenticationOptions"] = nil
		inputs["clientCidrBlock"] = nil
		inputs["connectionLogOptions"] = nil
		inputs["description"] = nil
		inputs["dnsServers"] = nil
		inputs["serverCertificateArn"] = nil
		inputs["splitTunnel"] = nil
		inputs["tags"] = nil
		inputs["transportProtocol"] = nil
	} else {
		inputs["authenticationOptions"] = args.AuthenticationOptions
		inputs["clientCidrBlock"] = args.ClientCidrBlock
		inputs["connectionLogOptions"] = args.ConnectionLogOptions
		inputs["description"] = args.Description
		inputs["dnsServers"] = args.DnsServers
		inputs["serverCertificateArn"] = args.ServerCertificateArn
		inputs["splitTunnel"] = args.SplitTunnel
		inputs["tags"] = args.Tags
		inputs["transportProtocol"] = args.TransportProtocol
	}
	inputs["dnsName"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("aws:ec2clientvpn/endpoint:Endpoint", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointState, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authenticationOptions"] = state.AuthenticationOptions
		inputs["clientCidrBlock"] = state.ClientCidrBlock
		inputs["connectionLogOptions"] = state.ConnectionLogOptions
		inputs["description"] = state.Description
		inputs["dnsName"] = state.DnsName
		inputs["dnsServers"] = state.DnsServers
		inputs["serverCertificateArn"] = state.ServerCertificateArn
		inputs["splitTunnel"] = state.SplitTunnel
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
		inputs["transportProtocol"] = state.TransportProtocol
	}
	s, err := ctx.ReadResource("aws:ec2clientvpn/endpoint:Endpoint", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Endpoint) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Endpoint) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Information about the authentication method to be used to authenticate clients.
func (r *Endpoint) AuthenticationOptions() pulumi.Output {
	return r.s.State["authenticationOptions"]
}

// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
func (r *Endpoint) ClientCidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientCidrBlock"])
}

// Information about the client connection logging options.
func (r *Endpoint) ConnectionLogOptions() pulumi.Output {
	return r.s.State["connectionLogOptions"]
}

// Name of the repository.
func (r *Endpoint) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The DNS name to be used by clients when establishing their VPN session.
func (r *Endpoint) DnsName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dnsName"])
}

// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
func (r *Endpoint) DnsServers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["dnsServers"])
}

// The ARN of the ACM server certificate.
func (r *Endpoint) ServerCertificateArn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverCertificateArn"])
}

// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
func (r *Endpoint) SplitTunnel() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["splitTunnel"])
}

// The current state of the Client VPN endpoint.
func (r *Endpoint) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// A mapping of tags to assign to the resource.
func (r *Endpoint) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The transport protocol to be used by the VPN session. Default value is `udp`.
func (r *Endpoint) TransportProtocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["transportProtocol"])
}

// Input properties used for looking up and filtering Endpoint resources.
type EndpointState struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions interface{}
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock interface{}
	// Information about the client connection logging options.
	ConnectionLogOptions interface{}
	// Name of the repository.
	Description interface{}
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName interface{}
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
	DnsServers interface{}
	// The ARN of the ACM server certificate.
	ServerCertificateArn interface{}
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel interface{}
	// The current state of the Client VPN endpoint.
	Status interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol interface{}
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions interface{}
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock interface{}
	// Information about the client connection logging options.
	ConnectionLogOptions interface{}
	// Name of the repository.
	Description interface{}
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
	DnsServers interface{}
	// The ARN of the ACM server certificate.
	ServerCertificateArn interface{}
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol interface{}
}
