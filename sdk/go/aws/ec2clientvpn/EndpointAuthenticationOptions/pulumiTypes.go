// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package EndpointAuthenticationOptions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EndpointAuthenticationOptions struct {
	// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
	RootCertificateChainArn *string `pulumi:"rootCertificateChainArn"`
	// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, or `directory-service-authentication` to use Active Directory authentication.
	Type string `pulumi:"type"`
}

type EndpointAuthenticationOptionsInput interface {
	pulumi.Input

	ToEndpointAuthenticationOptionsOutput() EndpointAuthenticationOptionsOutput
	ToEndpointAuthenticationOptionsOutputWithContext(context.Context) EndpointAuthenticationOptionsOutput
}

type EndpointAuthenticationOptionsArgs struct {
	// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
	ActiveDirectoryId pulumi.StringPtrInput `pulumi:"activeDirectoryId"`
	// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
	RootCertificateChainArn pulumi.StringPtrInput `pulumi:"rootCertificateChainArn"`
	// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, or `directory-service-authentication` to use Active Directory authentication.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EndpointAuthenticationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthenticationOptions)(nil)).Elem()
}

func (i EndpointAuthenticationOptionsArgs) ToEndpointAuthenticationOptionsOutput() EndpointAuthenticationOptionsOutput {
	return i.ToEndpointAuthenticationOptionsOutputWithContext(context.Background())
}

func (i EndpointAuthenticationOptionsArgs) ToEndpointAuthenticationOptionsOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthenticationOptionsOutput)
}

func (i EndpointAuthenticationOptionsArgs) ToEndpointAuthenticationOptionsPtrOutput() EndpointAuthenticationOptionsPtrOutput {
	return i.ToEndpointAuthenticationOptionsPtrOutputWithContext(context.Background())
}

func (i EndpointAuthenticationOptionsArgs) ToEndpointAuthenticationOptionsPtrOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthenticationOptionsOutput).ToEndpointAuthenticationOptionsPtrOutputWithContext(ctx)
}

type EndpointAuthenticationOptionsPtrInput interface {
	pulumi.Input

	ToEndpointAuthenticationOptionsPtrOutput() EndpointAuthenticationOptionsPtrOutput
	ToEndpointAuthenticationOptionsPtrOutputWithContext(context.Context) EndpointAuthenticationOptionsPtrOutput
}

type endpointAuthenticationOptionsPtrType EndpointAuthenticationOptionsArgs

func EndpointAuthenticationOptionsPtr(v *EndpointAuthenticationOptionsArgs) EndpointAuthenticationOptionsPtrInput {	return (*endpointAuthenticationOptionsPtrType)(v)
}

func (*endpointAuthenticationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthenticationOptions)(nil)).Elem()
}

func (i *endpointAuthenticationOptionsPtrType) ToEndpointAuthenticationOptionsPtrOutput() EndpointAuthenticationOptionsPtrOutput {
	return i.ToEndpointAuthenticationOptionsPtrOutputWithContext(context.Background())
}

func (i *endpointAuthenticationOptionsPtrType) ToEndpointAuthenticationOptionsPtrOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthenticationOptionsPtrOutput)
}

type EndpointAuthenticationOptionsOutput struct { *pulumi.OutputState }

func (EndpointAuthenticationOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthenticationOptions)(nil)).Elem()
}

func (o EndpointAuthenticationOptionsOutput) ToEndpointAuthenticationOptionsOutput() EndpointAuthenticationOptionsOutput {
	return o
}

func (o EndpointAuthenticationOptionsOutput) ToEndpointAuthenticationOptionsOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsOutput {
	return o
}

func (o EndpointAuthenticationOptionsOutput) ToEndpointAuthenticationOptionsPtrOutput() EndpointAuthenticationOptionsPtrOutput {
	return o.ToEndpointAuthenticationOptionsPtrOutputWithContext(context.Background())
}

func (o EndpointAuthenticationOptionsOutput) ToEndpointAuthenticationOptionsPtrOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsPtrOutput {
	return o.ApplyT(func(v EndpointAuthenticationOptions) *EndpointAuthenticationOptions {
		return &v
	}).(EndpointAuthenticationOptionsPtrOutput)
}
// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
func (o EndpointAuthenticationOptionsOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
func (o EndpointAuthenticationOptionsOutput) RootCertificateChainArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) *string { return v.RootCertificateChainArn }).(pulumi.StringPtrOutput)
}

// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, or `directory-service-authentication` to use Active Directory authentication.
func (o EndpointAuthenticationOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) string { return v.Type }).(pulumi.StringOutput)
}

type EndpointAuthenticationOptionsPtrOutput struct { *pulumi.OutputState}

func (EndpointAuthenticationOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthenticationOptions)(nil)).Elem()
}

func (o EndpointAuthenticationOptionsPtrOutput) ToEndpointAuthenticationOptionsPtrOutput() EndpointAuthenticationOptionsPtrOutput {
	return o
}

func (o EndpointAuthenticationOptionsPtrOutput) ToEndpointAuthenticationOptionsPtrOutputWithContext(ctx context.Context) EndpointAuthenticationOptionsPtrOutput {
	return o
}

func (o EndpointAuthenticationOptionsPtrOutput) Elem() EndpointAuthenticationOptionsOutput {
	return o.ApplyT(func (v *EndpointAuthenticationOptions) EndpointAuthenticationOptions { return *v }).(EndpointAuthenticationOptionsOutput)
}

// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
func (o EndpointAuthenticationOptionsPtrOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
func (o EndpointAuthenticationOptionsPtrOutput) RootCertificateChainArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) *string { return v.RootCertificateChainArn }).(pulumi.StringPtrOutput)
}

// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, or `directory-service-authentication` to use Active Directory authentication.
func (o EndpointAuthenticationOptionsPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v EndpointAuthenticationOptions) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EndpointAuthenticationOptionsOutput{})
	pulumi.RegisterOutputType(EndpointAuthenticationOptionsPtrOutput{})
}
