// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package OrganizationRoot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/organizations/OrganizationRootPolicyType"
)

type OrganizationRoot struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes []organizationsOrganizationRootPolicyType.OrganizationRootPolicyType `pulumi:"policyTypes"`
}

type OrganizationRootInput interface {
	pulumi.Input

	ToOrganizationRootOutput() OrganizationRootOutput
	ToOrganizationRootOutputWithContext(context.Context) OrganizationRootOutput
}

type OrganizationRootArgs struct {
	// ARN of the root
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Identifier of the root
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes organizationsOrganizationRootPolicyType.OrganizationRootPolicyTypeArrayInput `pulumi:"policyTypes"`
}

func (OrganizationRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (i OrganizationRootArgs) ToOrganizationRootOutput() OrganizationRootOutput {
	return i.ToOrganizationRootOutputWithContext(context.Background())
}

func (i OrganizationRootArgs) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootOutput)
}

type OrganizationRootArrayInput interface {
	pulumi.Input

	ToOrganizationRootArrayOutput() OrganizationRootArrayOutput
	ToOrganizationRootArrayOutputWithContext(context.Context) OrganizationRootArrayOutput
}

type OrganizationRootArray []OrganizationRootInput

func (OrganizationRootArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRoot)(nil)).Elem()
}

func (i OrganizationRootArray) ToOrganizationRootArrayOutput() OrganizationRootArrayOutput {
	return i.ToOrganizationRootArrayOutputWithContext(context.Background())
}

func (i OrganizationRootArray) ToOrganizationRootArrayOutputWithContext(ctx context.Context) OrganizationRootArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootArrayOutput)
}

type OrganizationRootOutput struct { *pulumi.OutputState }

func (OrganizationRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (o OrganizationRootOutput) ToOrganizationRootOutput() OrganizationRootOutput {
	return o
}

func (o OrganizationRootOutput) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return o
}

// ARN of the root
func (o OrganizationRootOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v OrganizationRoot) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Identifier of the root
func (o OrganizationRootOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v OrganizationRoot) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the policy type
func (o OrganizationRootOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v OrganizationRoot) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of policy types enabled for this root. All elements have these attributes:
func (o OrganizationRootOutput) PolicyTypes() organizationsOrganizationRootPolicyType.OrganizationRootPolicyTypeArrayOutput {
	return o.ApplyT(func (v OrganizationRoot) []organizationsOrganizationRootPolicyType.OrganizationRootPolicyType { return v.PolicyTypes }).(organizationsOrganizationRootPolicyType.OrganizationRootPolicyTypeArrayOutput)
}

type OrganizationRootArrayOutput struct { *pulumi.OutputState}

func (OrganizationRootArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRoot)(nil)).Elem()
}

func (o OrganizationRootArrayOutput) ToOrganizationRootArrayOutput() OrganizationRootArrayOutput {
	return o
}

func (o OrganizationRootArrayOutput) ToOrganizationRootArrayOutputWithContext(ctx context.Context) OrganizationRootArrayOutput {
	return o
}

func (o OrganizationRootArrayOutput) Index(i pulumi.IntInput) OrganizationRootOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) OrganizationRoot {
		return vs[0].([]OrganizationRoot)[vs[1].(int)]
	}).(OrganizationRootOutput)
}

func init() {
	pulumi.RegisterOutputType(OrganizationRootOutput{})
	pulumi.RegisterOutputType(OrganizationRootArrayOutput{})
}
