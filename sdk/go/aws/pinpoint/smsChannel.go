// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## ---
// 
// layout: "aws"
// page_title: "AWS: aws_pinpoint_sms_channel"
// sidebar_current: "docs-aws-resource-pinpoint-sms-channel"
// description: |-
//   Provides a Pinpoint SMS Channel resource.
// ---
// 
// # aws_pinpoint_sms_channel
// 
// Provides a Pinpoint SMS Channel resource.
// 
// ## Argument Reference
// 
// The following arguments are supported:
// 
// * `application_id` - (Required) The application ID.
// * `enabled` - (Optional) Whether the channel is enabled or disabled. Defaults to `true`.
// * `sender_id` - (Optional) Sender identifier of your messages.
// * `short_code` - (Optional) The Short Code registered with the phone provider.
// 
// ## Attributes Reference
// 
// In addition to all arguments above, the following attributes are exported:
// 
// * `promotional_messages_per_second` - Promotional messages per second that can be sent.
// * `transactional_messages_per_second` - Transactional messages per second that can be sent.
type SmsChannel struct {
	s *pulumi.ResourceState
}

// NewSmsChannel registers a new resource with the given unique name, arguments, and options.
func NewSmsChannel(ctx *pulumi.Context,
	name string, args *SmsChannelArgs, opts ...pulumi.ResourceOpt) (*SmsChannel, error) {
	if args == nil || args.ApplicationId == nil {
		return nil, errors.New("missing required argument 'ApplicationId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["applicationId"] = nil
		inputs["enabled"] = nil
		inputs["senderId"] = nil
		inputs["shortCode"] = nil
	} else {
		inputs["applicationId"] = args.ApplicationId
		inputs["enabled"] = args.Enabled
		inputs["senderId"] = args.SenderId
		inputs["shortCode"] = args.ShortCode
	}
	inputs["promotionalMessagesPerSecond"] = nil
	inputs["transactionalMessagesPerSecond"] = nil
	s, err := ctx.RegisterResource("aws:pinpoint/smsChannel:SmsChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SmsChannel{s: s}, nil
}

// GetSmsChannel gets an existing SmsChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmsChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SmsChannelState, opts ...pulumi.ResourceOpt) (*SmsChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["applicationId"] = state.ApplicationId
		inputs["enabled"] = state.Enabled
		inputs["promotionalMessagesPerSecond"] = state.PromotionalMessagesPerSecond
		inputs["senderId"] = state.SenderId
		inputs["shortCode"] = state.ShortCode
		inputs["transactionalMessagesPerSecond"] = state.TransactionalMessagesPerSecond
	}
	s, err := ctx.ReadResource("aws:pinpoint/smsChannel:SmsChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SmsChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SmsChannel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SmsChannel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *SmsChannel) ApplicationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["applicationId"])
}

func (r *SmsChannel) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *SmsChannel) PromotionalMessagesPerSecond() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["promotionalMessagesPerSecond"])
}

func (r *SmsChannel) SenderId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["senderId"])
}

func (r *SmsChannel) ShortCode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["shortCode"])
}

func (r *SmsChannel) TransactionalMessagesPerSecond() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["transactionalMessagesPerSecond"])
}

// Input properties used for looking up and filtering SmsChannel resources.
type SmsChannelState struct {
	ApplicationId interface{}
	Enabled interface{}
	PromotionalMessagesPerSecond interface{}
	SenderId interface{}
	ShortCode interface{}
	TransactionalMessagesPerSecond interface{}
}

// The set of arguments for constructing a SmsChannel resource.
type SmsChannelArgs struct {
	ApplicationId interface{}
	Enabled interface{}
	SenderId interface{}
	ShortCode interface{}
}
