// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Stack struct {
	pulumi.CustomResourceState

	Capabilities     pulumi.StringArrayOutput `pulumi:"capabilities"`
	DisableRollback  pulumi.BoolPtrOutput     `pulumi:"disableRollback"`
	IamRoleArn       pulumi.StringPtrOutput   `pulumi:"iamRoleArn"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	NotificationArns pulumi.StringArrayOutput `pulumi:"notificationArns"`
	OnFailure        pulumi.StringPtrOutput   `pulumi:"onFailure"`
	Outputs          pulumi.StringMapOutput   `pulumi:"outputs"`
	Parameters       pulumi.StringMapOutput   `pulumi:"parameters"`
	PolicyBody       pulumi.StringOutput      `pulumi:"policyBody"`
	PolicyUrl        pulumi.StringPtrOutput   `pulumi:"policyUrl"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
	TemplateBody     pulumi.StringOutput      `pulumi:"templateBody"`
	TemplateUrl      pulumi.StringPtrOutput   `pulumi:"templateUrl"`
	TimeoutInMinutes pulumi.IntPtrOutput      `pulumi:"timeoutInMinutes"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		args = &StackArgs{}
	}
	var resource Stack
	err := ctx.RegisterResource("aws:cloudformation/stack:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("aws:cloudformation/stack:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
	Capabilities     []string          `pulumi:"capabilities"`
	DisableRollback  *bool             `pulumi:"disableRollback"`
	IamRoleArn       *string           `pulumi:"iamRoleArn"`
	Name             *string           `pulumi:"name"`
	NotificationArns []string          `pulumi:"notificationArns"`
	OnFailure        *string           `pulumi:"onFailure"`
	Outputs          map[string]string `pulumi:"outputs"`
	Parameters       map[string]string `pulumi:"parameters"`
	PolicyBody       *string           `pulumi:"policyBody"`
	PolicyUrl        *string           `pulumi:"policyUrl"`
	Tags             map[string]string `pulumi:"tags"`
	TemplateBody     *string           `pulumi:"templateBody"`
	TemplateUrl      *string           `pulumi:"templateUrl"`
	TimeoutInMinutes *int              `pulumi:"timeoutInMinutes"`
}

type StackState struct {
	Capabilities     pulumi.StringArrayInput
	DisableRollback  pulumi.BoolPtrInput
	IamRoleArn       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NotificationArns pulumi.StringArrayInput
	OnFailure        pulumi.StringPtrInput
	Outputs          pulumi.StringMapInput
	Parameters       pulumi.StringMapInput
	PolicyBody       pulumi.StringPtrInput
	PolicyUrl        pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TemplateBody     pulumi.StringPtrInput
	TemplateUrl      pulumi.StringPtrInput
	TimeoutInMinutes pulumi.IntPtrInput
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	Capabilities     []string          `pulumi:"capabilities"`
	DisableRollback  *bool             `pulumi:"disableRollback"`
	IamRoleArn       *string           `pulumi:"iamRoleArn"`
	Name             *string           `pulumi:"name"`
	NotificationArns []string          `pulumi:"notificationArns"`
	OnFailure        *string           `pulumi:"onFailure"`
	Parameters       map[string]string `pulumi:"parameters"`
	PolicyBody       *string           `pulumi:"policyBody"`
	PolicyUrl        *string           `pulumi:"policyUrl"`
	Tags             map[string]string `pulumi:"tags"`
	TemplateBody     *string           `pulumi:"templateBody"`
	TemplateUrl      *string           `pulumi:"templateUrl"`
	TimeoutInMinutes *int              `pulumi:"timeoutInMinutes"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	Capabilities     pulumi.StringArrayInput
	DisableRollback  pulumi.BoolPtrInput
	IamRoleArn       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NotificationArns pulumi.StringArrayInput
	OnFailure        pulumi.StringPtrInput
	Parameters       pulumi.StringMapInput
	PolicyBody       pulumi.StringPtrInput
	PolicyUrl        pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TemplateBody     pulumi.StringPtrInput
	TemplateUrl      pulumi.StringPtrInput
	TimeoutInMinutes pulumi.IntPtrInput
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}
