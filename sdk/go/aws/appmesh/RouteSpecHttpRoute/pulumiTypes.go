// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RouteSpecHttpRoute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteAction"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteActionWeightedTarget"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteMatch"
)

type RouteSpecHttpRoute struct {
	// The action to take if a match is determined.
	Action appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteAction `pulumi:"action"`
	// The criteria for determining an HTTP request match.
	Match appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatch `pulumi:"match"`
}

type RouteSpecHttpRouteInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput
	ToRouteSpecHttpRouteOutputWithContext(context.Context) RouteSpecHttpRouteOutput
}

type RouteSpecHttpRouteArgs struct {
	// The action to take if a match is determined.
	Action appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteActionInput `pulumi:"action"`
	// The criteria for determining an HTTP request match.
	Match appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatchInput `pulumi:"match"`
}

func (RouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return i.ToRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteOutput)
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return i.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteOutput).ToRouteSpecHttpRoutePtrOutputWithContext(ctx)
}

type RouteSpecHttpRoutePtrInput interface {
	pulumi.Input

	ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput
	ToRouteSpecHttpRoutePtrOutputWithContext(context.Context) RouteSpecHttpRoutePtrOutput
}

type routeSpecHttpRoutePtrType RouteSpecHttpRouteArgs

func RouteSpecHttpRoutePtr(v *RouteSpecHttpRouteArgs) RouteSpecHttpRoutePtrInput {	return (*routeSpecHttpRoutePtrType)(v)
}

func (*routeSpecHttpRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRoute)(nil)).Elem()
}

func (i *routeSpecHttpRoutePtrType) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return i.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (i *routeSpecHttpRoutePtrType) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRoutePtrOutput)
}

type RouteSpecHttpRouteOutput struct { *pulumi.OutputState }

func (RouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return o.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) *RouteSpecHttpRoute {
		return &v
	}).(RouteSpecHttpRoutePtrOutput)
}
// The action to take if a match is determined.
func (o RouteSpecHttpRouteOutput) Action() appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteActionOutput {
	return o.ApplyT(func (v RouteSpecHttpRoute) appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteAction { return v.Action }).(appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteActionOutput)
}

// The criteria for determining an HTTP request match.
func (o RouteSpecHttpRouteOutput) Match() appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatchOutput {
	return o.ApplyT(func (v RouteSpecHttpRoute) appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatch { return v.Match }).(appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatchOutput)
}

type RouteSpecHttpRoutePtrOutput struct { *pulumi.OutputState}

func (RouteSpecHttpRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRoute)(nil)).Elem()
}

func (o RouteSpecHttpRoutePtrOutput) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return o
}

func (o RouteSpecHttpRoutePtrOutput) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return o
}

func (o RouteSpecHttpRoutePtrOutput) Elem() RouteSpecHttpRouteOutput {
	return o.ApplyT(func (v *RouteSpecHttpRoute) RouteSpecHttpRoute { return *v }).(RouteSpecHttpRouteOutput)
}

// The action to take if a match is determined.
func (o RouteSpecHttpRoutePtrOutput) Action() appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteActionOutput {
	return o.ApplyT(func (v RouteSpecHttpRoute) appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteAction { return v.Action }).(appmeshRouteSpecHttpRouteAction.RouteSpecHttpRouteActionOutput)
}

// The criteria for determining an HTTP request match.
func (o RouteSpecHttpRoutePtrOutput) Match() appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatchOutput {
	return o.ApplyT(func (v RouteSpecHttpRoute) appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatch { return v.Match }).(appmeshRouteSpecHttpRouteMatch.RouteSpecHttpRouteMatchOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRoutePtrOutput{})
}
