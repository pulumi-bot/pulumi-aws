// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RouteSpecTcpRoute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecTcpRouteAction"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecTcpRouteActionWeightedTarget"
)

type RouteSpecTcpRoute struct {
	// The action to take if a match is determined.
	Action appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteAction `pulumi:"action"`
}

type RouteSpecTcpRouteInput interface {
	pulumi.Input

	ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput
	ToRouteSpecTcpRouteOutputWithContext(context.Context) RouteSpecTcpRouteOutput
}

type RouteSpecTcpRouteArgs struct {
	// The action to take if a match is determined.
	Action appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteActionInput `pulumi:"action"`
}

func (RouteSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return i.ToRouteSpecTcpRouteOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteOutput)
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return i.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteOutput).ToRouteSpecTcpRoutePtrOutputWithContext(ctx)
}

type RouteSpecTcpRoutePtrInput interface {
	pulumi.Input

	ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput
	ToRouteSpecTcpRoutePtrOutputWithContext(context.Context) RouteSpecTcpRoutePtrOutput
}

type routeSpecTcpRoutePtrType RouteSpecTcpRouteArgs

func RouteSpecTcpRoutePtr(v *RouteSpecTcpRouteArgs) RouteSpecTcpRoutePtrInput {	return (*routeSpecTcpRoutePtrType)(v)
}

func (*routeSpecTcpRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecTcpRoute)(nil)).Elem()
}

func (i *routeSpecTcpRoutePtrType) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return i.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (i *routeSpecTcpRoutePtrType) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRoutePtrOutput)
}

type RouteSpecTcpRouteOutput struct { *pulumi.OutputState }

func (RouteSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return o.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpecTcpRoute) *RouteSpecTcpRoute {
		return &v
	}).(RouteSpecTcpRoutePtrOutput)
}
// The action to take if a match is determined.
func (o RouteSpecTcpRouteOutput) Action() appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteActionOutput {
	return o.ApplyT(func (v RouteSpecTcpRoute) appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteAction { return v.Action }).(appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteActionOutput)
}

type RouteSpecTcpRoutePtrOutput struct { *pulumi.OutputState}

func (RouteSpecTcpRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecTcpRoute)(nil)).Elem()
}

func (o RouteSpecTcpRoutePtrOutput) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return o
}

func (o RouteSpecTcpRoutePtrOutput) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return o
}

func (o RouteSpecTcpRoutePtrOutput) Elem() RouteSpecTcpRouteOutput {
	return o.ApplyT(func (v *RouteSpecTcpRoute) RouteSpecTcpRoute { return *v }).(RouteSpecTcpRouteOutput)
}

// The action to take if a match is determined.
func (o RouteSpecTcpRoutePtrOutput) Action() appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteActionOutput {
	return o.ApplyT(func (v RouteSpecTcpRoute) appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteAction { return v.Action }).(appmeshRouteSpecTcpRouteAction.RouteSpecTcpRouteActionOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRoutePtrOutput{})
}
