// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RouteSpec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRoute"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteAction"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteActionWeightedTarget"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecHttpRouteMatch"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecTcpRoute"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecTcpRouteAction"
	"https:/github.com/pulumi/pulumi-aws/appmesh/RouteSpecTcpRouteActionWeightedTarget"
)

type RouteSpec struct {
	// The HTTP routing information for the route.
	HttpRoute *appmeshRouteSpecHttpRoute.RouteSpecHttpRoute `pulumi:"httpRoute"`
	// The TCP routing information for the route.
	TcpRoute *appmeshRouteSpecTcpRoute.RouteSpecTcpRoute `pulumi:"tcpRoute"`
}

type RouteSpecInput interface {
	pulumi.Input

	ToRouteSpecOutput() RouteSpecOutput
	ToRouteSpecOutputWithContext(context.Context) RouteSpecOutput
}

type RouteSpecArgs struct {
	// The HTTP routing information for the route.
	HttpRoute appmeshRouteSpecHttpRoute.RouteSpecHttpRoutePtrInput `pulumi:"httpRoute"`
	// The TCP routing information for the route.
	TcpRoute appmeshRouteSpecTcpRoute.RouteSpecTcpRoutePtrInput `pulumi:"tcpRoute"`
}

func (RouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (i RouteSpecArgs) ToRouteSpecOutput() RouteSpecOutput {
	return i.ToRouteSpecOutputWithContext(context.Background())
}

func (i RouteSpecArgs) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecOutput)
}

func (i RouteSpecArgs) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return i.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (i RouteSpecArgs) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecOutput).ToRouteSpecPtrOutputWithContext(ctx)
}

type RouteSpecPtrInput interface {
	pulumi.Input

	ToRouteSpecPtrOutput() RouteSpecPtrOutput
	ToRouteSpecPtrOutputWithContext(context.Context) RouteSpecPtrOutput
}

type routeSpecPtrType RouteSpecArgs

func RouteSpecPtr(v *RouteSpecArgs) RouteSpecPtrInput {	return (*routeSpecPtrType)(v)
}

func (*routeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpec)(nil)).Elem()
}

func (i *routeSpecPtrType) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return i.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (i *routeSpecPtrType) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecPtrOutput)
}

type RouteSpecOutput struct { *pulumi.OutputState }

func (RouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (o RouteSpecOutput) ToRouteSpecOutput() RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return o.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (o RouteSpecOutput) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpec {
		return &v
	}).(RouteSpecPtrOutput)
}
// The HTTP routing information for the route.
func (o RouteSpecOutput) HttpRoute() appmeshRouteSpecHttpRoute.RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func (v RouteSpec) *appmeshRouteSpecHttpRoute.RouteSpecHttpRoute { return v.HttpRoute }).(appmeshRouteSpecHttpRoute.RouteSpecHttpRoutePtrOutput)
}

// The TCP routing information for the route.
func (o RouteSpecOutput) TcpRoute() appmeshRouteSpecTcpRoute.RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func (v RouteSpec) *appmeshRouteSpecTcpRoute.RouteSpecTcpRoute { return v.TcpRoute }).(appmeshRouteSpecTcpRoute.RouteSpecTcpRoutePtrOutput)
}

type RouteSpecPtrOutput struct { *pulumi.OutputState}

func (RouteSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpec)(nil)).Elem()
}

func (o RouteSpecPtrOutput) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return o
}

func (o RouteSpecPtrOutput) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return o
}

func (o RouteSpecPtrOutput) Elem() RouteSpecOutput {
	return o.ApplyT(func (v *RouteSpec) RouteSpec { return *v }).(RouteSpecOutput)
}

// The HTTP routing information for the route.
func (o RouteSpecPtrOutput) HttpRoute() appmeshRouteSpecHttpRoute.RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func (v RouteSpec) *appmeshRouteSpecHttpRoute.RouteSpecHttpRoute { return v.HttpRoute }).(appmeshRouteSpecHttpRoute.RouteSpecHttpRoutePtrOutput)
}

// The TCP routing information for the route.
func (o RouteSpecPtrOutput) TcpRoute() appmeshRouteSpecTcpRoute.RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func (v RouteSpec) *appmeshRouteSpecTcpRoute.RouteSpecTcpRoute { return v.TcpRoute }).(appmeshRouteSpecTcpRoute.RouteSpecTcpRoutePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteSpecOutput{})
	pulumi.RegisterOutputType(RouteSpecPtrOutput{})
}
