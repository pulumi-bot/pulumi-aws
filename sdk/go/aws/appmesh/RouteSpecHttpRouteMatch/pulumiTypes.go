// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RouteSpecHttpRouteMatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RouteSpecHttpRouteMatch struct {
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix string `pulumi:"prefix"`
}

type RouteSpecHttpRouteMatchInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput
	ToRouteSpecHttpRouteMatchOutputWithContext(context.Context) RouteSpecHttpRouteMatchOutput
}

type RouteSpecHttpRouteMatchArgs struct {
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (RouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return i.ToRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchOutput)
}

type RouteSpecHttpRouteMatchOutput struct { *pulumi.OutputState }

func (RouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return o
}

// Specifies the path with which to match requests.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecHttpRouteMatchOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func (v RouteSpecHttpRouteMatch) string { return v.Prefix }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchOutput{})
}
