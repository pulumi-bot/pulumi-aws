// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cur

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ReportDefinition struct {
	pulumi.CustomResourceState

	AdditionalArtifacts      pulumi.StringArrayOutput `pulumi:"additionalArtifacts"`
	AdditionalSchemaElements pulumi.StringArrayOutput `pulumi:"additionalSchemaElements"`
	Compression              pulumi.StringOutput      `pulumi:"compression"`
	Format                   pulumi.StringOutput      `pulumi:"format"`
	ReportName               pulumi.StringOutput      `pulumi:"reportName"`
	S3Bucket                 pulumi.StringOutput      `pulumi:"s3Bucket"`
	S3Prefix                 pulumi.StringPtrOutput   `pulumi:"s3Prefix"`
	S3Region                 pulumi.StringOutput      `pulumi:"s3Region"`
	TimeUnit                 pulumi.StringOutput      `pulumi:"timeUnit"`
}

// NewReportDefinition registers a new resource with the given unique name, arguments, and options.
func NewReportDefinition(ctx *pulumi.Context,
	name string, args *ReportDefinitionArgs, opts ...pulumi.ResourceOption) (*ReportDefinition, error) {
	if args == nil || args.AdditionalSchemaElements == nil {
		return nil, errors.New("missing required argument 'AdditionalSchemaElements'")
	}
	if args == nil || args.Compression == nil {
		return nil, errors.New("missing required argument 'Compression'")
	}
	if args == nil || args.Format == nil {
		return nil, errors.New("missing required argument 'Format'")
	}
	if args == nil || args.ReportName == nil {
		return nil, errors.New("missing required argument 'ReportName'")
	}
	if args == nil || args.S3Bucket == nil {
		return nil, errors.New("missing required argument 'S3Bucket'")
	}
	if args == nil || args.S3Region == nil {
		return nil, errors.New("missing required argument 'S3Region'")
	}
	if args == nil || args.TimeUnit == nil {
		return nil, errors.New("missing required argument 'TimeUnit'")
	}
	if args == nil {
		args = &ReportDefinitionArgs{}
	}
	var resource ReportDefinition
	err := ctx.RegisterResource("aws:cur/reportDefinition:ReportDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportDefinition gets an existing ReportDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportDefinitionState, opts ...pulumi.ResourceOption) (*ReportDefinition, error) {
	var resource ReportDefinition
	err := ctx.ReadResource("aws:cur/reportDefinition:ReportDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportDefinition resources.
type reportDefinitionState struct {
	AdditionalArtifacts      []string `pulumi:"additionalArtifacts"`
	AdditionalSchemaElements []string `pulumi:"additionalSchemaElements"`
	Compression              *string  `pulumi:"compression"`
	Format                   *string  `pulumi:"format"`
	ReportName               *string  `pulumi:"reportName"`
	S3Bucket                 *string  `pulumi:"s3Bucket"`
	S3Prefix                 *string  `pulumi:"s3Prefix"`
	S3Region                 *string  `pulumi:"s3Region"`
	TimeUnit                 *string  `pulumi:"timeUnit"`
}

type ReportDefinitionState struct {
	AdditionalArtifacts      pulumi.StringArrayInput
	AdditionalSchemaElements pulumi.StringArrayInput
	Compression              pulumi.StringPtrInput
	Format                   pulumi.StringPtrInput
	ReportName               pulumi.StringPtrInput
	S3Bucket                 pulumi.StringPtrInput
	S3Prefix                 pulumi.StringPtrInput
	S3Region                 pulumi.StringPtrInput
	TimeUnit                 pulumi.StringPtrInput
}

func (ReportDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDefinitionState)(nil)).Elem()
}

type reportDefinitionArgs struct {
	AdditionalArtifacts      []string `pulumi:"additionalArtifacts"`
	AdditionalSchemaElements []string `pulumi:"additionalSchemaElements"`
	Compression              string   `pulumi:"compression"`
	Format                   string   `pulumi:"format"`
	ReportName               string   `pulumi:"reportName"`
	S3Bucket                 string   `pulumi:"s3Bucket"`
	S3Prefix                 *string  `pulumi:"s3Prefix"`
	S3Region                 string   `pulumi:"s3Region"`
	TimeUnit                 string   `pulumi:"timeUnit"`
}

// The set of arguments for constructing a ReportDefinition resource.
type ReportDefinitionArgs struct {
	AdditionalArtifacts      pulumi.StringArrayInput
	AdditionalSchemaElements pulumi.StringArrayInput
	Compression              pulumi.StringInput
	Format                   pulumi.StringInput
	ReportName               pulumi.StringInput
	S3Bucket                 pulumi.StringInput
	S3Prefix                 pulumi.StringPtrInput
	S3Region                 pulumi.StringInput
	TimeUnit                 pulumi.StringInput
}

func (ReportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDefinitionArgs)(nil)).Elem()
}
