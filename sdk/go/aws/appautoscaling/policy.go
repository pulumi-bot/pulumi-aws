// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appautoscaling

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Application AutoScaling Policy resource.
// 
// ## Nested fields
// 
// ### `target_tracking_scaling_policy_configuration`
// 
// * `target_value` - (Required) The target value for the metric.
// * `disable_scale_in` - (Optional) Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is `false`.
// * `scale_in_cooldown` - (Optional) The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
// * `scale_out_cooldown` - (Optional) The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
// * `customized_metric_specification` - (Optional) Reserved for future use. See supported fields below.
// * `predefined_metric_specification` - (Optional) A predefined metric. See supported fields below.
// 
// ### `customized_metric_specification`
// 
// * `dimensions` - (Optional) The dimensions of the metric.
// * `metric_name` - (Required) The name of the metric.
// * `namespace` - (Required) The namespace of the metric.
// * `statistic` - (Required) The statistic of the metric.
// * `unit` - (Optional) The unit of the metric.
// 
// ### `predefined_metric_specification`
// 
// * `predefined_metric_type` - (Required) The metric type.
// * `resource_label` - (Optional) Reserved for future use.
type Policy struct {
	s *pulumi.ResourceState
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.ScalableDimension == nil {
		return nil, errors.New("missing required argument 'ScalableDimension'")
	}
	if args == nil || args.ServiceNamespace == nil {
		return nil, errors.New("missing required argument 'ServiceNamespace'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adjustmentType"] = nil
		inputs["alarms"] = nil
		inputs["cooldown"] = nil
		inputs["metricAggregationType"] = nil
		inputs["minAdjustmentMagnitude"] = nil
		inputs["name"] = nil
		inputs["policyType"] = nil
		inputs["resourceId"] = nil
		inputs["scalableDimension"] = nil
		inputs["serviceNamespace"] = nil
		inputs["stepAdjustments"] = nil
		inputs["stepScalingPolicyConfigurations"] = nil
		inputs["targetTrackingScalingPolicyConfiguration"] = nil
	} else {
		inputs["adjustmentType"] = args.AdjustmentType
		inputs["alarms"] = args.Alarms
		inputs["cooldown"] = args.Cooldown
		inputs["metricAggregationType"] = args.MetricAggregationType
		inputs["minAdjustmentMagnitude"] = args.MinAdjustmentMagnitude
		inputs["name"] = args.Name
		inputs["policyType"] = args.PolicyType
		inputs["resourceId"] = args.ResourceId
		inputs["scalableDimension"] = args.ScalableDimension
		inputs["serviceNamespace"] = args.ServiceNamespace
		inputs["stepAdjustments"] = args.StepAdjustments
		inputs["stepScalingPolicyConfigurations"] = args.StepScalingPolicyConfigurations
		inputs["targetTrackingScalingPolicyConfiguration"] = args.TargetTrackingScalingPolicyConfiguration
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:appautoscaling/policy:Policy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adjustmentType"] = state.AdjustmentType
		inputs["alarms"] = state.Alarms
		inputs["arn"] = state.Arn
		inputs["cooldown"] = state.Cooldown
		inputs["metricAggregationType"] = state.MetricAggregationType
		inputs["minAdjustmentMagnitude"] = state.MinAdjustmentMagnitude
		inputs["name"] = state.Name
		inputs["policyType"] = state.PolicyType
		inputs["resourceId"] = state.ResourceId
		inputs["scalableDimension"] = state.ScalableDimension
		inputs["serviceNamespace"] = state.ServiceNamespace
		inputs["stepAdjustments"] = state.StepAdjustments
		inputs["stepScalingPolicyConfigurations"] = state.StepScalingPolicyConfigurations
		inputs["targetTrackingScalingPolicyConfiguration"] = state.TargetTrackingScalingPolicyConfiguration
	}
	s, err := ctx.ReadResource("aws:appautoscaling/policy:Policy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Policy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Policy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The scaling policy's adjustment type.
func (r *Policy) AdjustmentType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["adjustmentType"])
}

func (r *Policy) Alarms() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["alarms"])
}

// The ARN assigned by AWS to the scaling policy.
func (r *Policy) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

func (r *Policy) Cooldown() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["cooldown"])
}

func (r *Policy) MetricAggregationType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metricAggregationType"])
}

func (r *Policy) MinAdjustmentMagnitude() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minAdjustmentMagnitude"])
}

// The name of the policy.
func (r *Policy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// For DynamoDB, only `TargetTrackingScaling` is supported. For Amazon ECS, Spot Fleet, and Amazon RDS, both `StepScaling` and `TargetTrackingScaling` are supported. For any other service, only `StepScaling` is supported. Defaults to `StepScaling`.
func (r *Policy) PolicyType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyType"])
}

// The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the `ResourceId` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
func (r *Policy) ResourceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceId"])
}

// The scalable dimension of the scalable target. Documentation can be found in the `ScalableDimension` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
func (r *Policy) ScalableDimension() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scalableDimension"])
}

// The AWS service namespace of the scalable target. Documentation can be found in the `ServiceNamespace` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
func (r *Policy) ServiceNamespace() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceNamespace"])
}

func (r *Policy) StepAdjustments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["stepAdjustments"])
}

// Step scaling policy configuration, requires `policy_type = "StepScaling"` (default). See supported fields below.
func (r *Policy) StepScalingPolicyConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["stepScalingPolicyConfigurations"])
}

// A target tracking policy, requires `policy_type = "TargetTrackingScaling"`. See supported fields below.
func (r *Policy) TargetTrackingScalingPolicyConfiguration() *pulumi.Output {
	return r.s.State["targetTrackingScalingPolicyConfiguration"]
}

// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// The scaling policy's adjustment type.
	AdjustmentType interface{}
	Alarms interface{}
	// The ARN assigned by AWS to the scaling policy.
	Arn interface{}
	Cooldown interface{}
	MetricAggregationType interface{}
	MinAdjustmentMagnitude interface{}
	// The name of the policy.
	Name interface{}
	// For DynamoDB, only `TargetTrackingScaling` is supported. For Amazon ECS, Spot Fleet, and Amazon RDS, both `StepScaling` and `TargetTrackingScaling` are supported. For any other service, only `StepScaling` is supported. Defaults to `StepScaling`.
	PolicyType interface{}
	// The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the `ResourceId` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ResourceId interface{}
	// The scalable dimension of the scalable target. Documentation can be found in the `ScalableDimension` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ScalableDimension interface{}
	// The AWS service namespace of the scalable target. Documentation can be found in the `ServiceNamespace` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ServiceNamespace interface{}
	StepAdjustments interface{}
	// Step scaling policy configuration, requires `policy_type = "StepScaling"` (default). See supported fields below.
	StepScalingPolicyConfigurations interface{}
	// A target tracking policy, requires `policy_type = "TargetTrackingScaling"`. See supported fields below.
	TargetTrackingScalingPolicyConfiguration interface{}
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// The scaling policy's adjustment type.
	AdjustmentType interface{}
	Alarms interface{}
	Cooldown interface{}
	MetricAggregationType interface{}
	MinAdjustmentMagnitude interface{}
	// The name of the policy.
	Name interface{}
	// For DynamoDB, only `TargetTrackingScaling` is supported. For Amazon ECS, Spot Fleet, and Amazon RDS, both `StepScaling` and `TargetTrackingScaling` are supported. For any other service, only `StepScaling` is supported. Defaults to `StepScaling`.
	PolicyType interface{}
	// The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the `ResourceId` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ResourceId interface{}
	// The scalable dimension of the scalable target. Documentation can be found in the `ScalableDimension` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ScalableDimension interface{}
	// The AWS service namespace of the scalable target. Documentation can be found in the `ServiceNamespace` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
	ServiceNamespace interface{}
	StepAdjustments interface{}
	// Step scaling policy configuration, requires `policy_type = "StepScaling"` (default). See supported fields below.
	StepScalingPolicyConfigurations interface{}
	// A target tracking policy, requires `policy_type = "TargetTrackingScaling"`. See supported fields below.
	TargetTrackingScalingPolicyConfiguration interface{}
}
