// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appautoscaling

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Policy struct {
	pulumi.CustomResourceState

	Arn                                      pulumi.StringOutput                                     `pulumi:"arn"`
	Name                                     pulumi.StringOutput                                     `pulumi:"name"`
	PolicyType                               pulumi.StringPtrOutput                                  `pulumi:"policyType"`
	ResourceId                               pulumi.StringOutput                                     `pulumi:"resourceId"`
	ScalableDimension                        pulumi.StringOutput                                     `pulumi:"scalableDimension"`
	ServiceNamespace                         pulumi.StringOutput                                     `pulumi:"serviceNamespace"`
	StepScalingPolicyConfiguration           PolicyStepScalingPolicyConfigurationPtrOutput           `pulumi:"stepScalingPolicyConfiguration"`
	TargetTrackingScalingPolicyConfiguration PolicyTargetTrackingScalingPolicyConfigurationPtrOutput `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.ScalableDimension == nil {
		return nil, errors.New("missing required argument 'ScalableDimension'")
	}
	if args == nil || args.ServiceNamespace == nil {
		return nil, errors.New("missing required argument 'ServiceNamespace'")
	}
	if args == nil {
		args = &PolicyArgs{}
	}
	var resource Policy
	err := ctx.RegisterResource("aws:appautoscaling/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws:appautoscaling/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	Arn                                      *string                                         `pulumi:"arn"`
	Name                                     *string                                         `pulumi:"name"`
	PolicyType                               *string                                         `pulumi:"policyType"`
	ResourceId                               *string                                         `pulumi:"resourceId"`
	ScalableDimension                        *string                                         `pulumi:"scalableDimension"`
	ServiceNamespace                         *string                                         `pulumi:"serviceNamespace"`
	StepScalingPolicyConfiguration           *PolicyStepScalingPolicyConfiguration           `pulumi:"stepScalingPolicyConfiguration"`
	TargetTrackingScalingPolicyConfiguration *PolicyTargetTrackingScalingPolicyConfiguration `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

type PolicyState struct {
	Arn                                      pulumi.StringPtrInput
	Name                                     pulumi.StringPtrInput
	PolicyType                               pulumi.StringPtrInput
	ResourceId                               pulumi.StringPtrInput
	ScalableDimension                        pulumi.StringPtrInput
	ServiceNamespace                         pulumi.StringPtrInput
	StepScalingPolicyConfiguration           PolicyStepScalingPolicyConfigurationPtrInput
	TargetTrackingScalingPolicyConfiguration PolicyTargetTrackingScalingPolicyConfigurationPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	Name                                     *string                                         `pulumi:"name"`
	PolicyType                               *string                                         `pulumi:"policyType"`
	ResourceId                               string                                          `pulumi:"resourceId"`
	ScalableDimension                        string                                          `pulumi:"scalableDimension"`
	ServiceNamespace                         string                                          `pulumi:"serviceNamespace"`
	StepScalingPolicyConfiguration           *PolicyStepScalingPolicyConfiguration           `pulumi:"stepScalingPolicyConfiguration"`
	TargetTrackingScalingPolicyConfiguration *PolicyTargetTrackingScalingPolicyConfiguration `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	Name                                     pulumi.StringPtrInput
	PolicyType                               pulumi.StringPtrInput
	ResourceId                               pulumi.StringInput
	ScalableDimension                        pulumi.StringInput
	ServiceNamespace                         pulumi.StringInput
	StepScalingPolicyConfiguration           PolicyStepScalingPolicyConfigurationPtrInput
	TargetTrackingScalingPolicyConfiguration PolicyTargetTrackingScalingPolicyConfigurationPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}
