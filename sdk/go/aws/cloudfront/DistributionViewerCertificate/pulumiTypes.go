// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package DistributionViewerCertificate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DistributionViewerCertificate struct {
	// The ARN of the [AWS Certificate Manager][6]
	// certificate that you wish to use with this distribution. Specify this,
	// `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
	// certificate must be in  US-EAST-1.
	AcmCertificateArn *string `pulumi:"acmCertificateArn"`
	// `true` if you want viewers to use HTTPS
	// to request your objects and you're using the CloudFront domain name for your
	// distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
	CloudfrontDefaultCertificate *bool `pulumi:"cloudfrontDefaultCertificate"`
	// The IAM certificate identifier of the custom viewer
	// certificate for this distribution if you are using a custom domain. Specify
	// this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
	IamCertificateId *string `pulumi:"iamCertificateId"`
	// The minimum version of the SSL protocol that
	// you want CloudFront to use for HTTPS connections. One of `SSLv3`, `TLSv1`,
	// `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
	// If you are using a custom certificate (specified with `acmCertificateArn`
	// or `iamCertificateId`), and have specified `sni-only` in
	// `sslSupportMethod`, `TLSv1` or later must be specified. If you have
	// specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
	// specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
	// must be specified.
	MinimumProtocolVersion *string `pulumi:"minimumProtocolVersion"`
	SslSupportMethod *string `pulumi:"sslSupportMethod"`
}

type DistributionViewerCertificateInput interface {
	pulumi.Input

	ToDistributionViewerCertificateOutput() DistributionViewerCertificateOutput
	ToDistributionViewerCertificateOutputWithContext(context.Context) DistributionViewerCertificateOutput
}

type DistributionViewerCertificateArgs struct {
	// The ARN of the [AWS Certificate Manager][6]
	// certificate that you wish to use with this distribution. Specify this,
	// `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
	// certificate must be in  US-EAST-1.
	AcmCertificateArn pulumi.StringPtrInput `pulumi:"acmCertificateArn"`
	// `true` if you want viewers to use HTTPS
	// to request your objects and you're using the CloudFront domain name for your
	// distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
	CloudfrontDefaultCertificate pulumi.BoolPtrInput `pulumi:"cloudfrontDefaultCertificate"`
	// The IAM certificate identifier of the custom viewer
	// certificate for this distribution if you are using a custom domain. Specify
	// this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
	IamCertificateId pulumi.StringPtrInput `pulumi:"iamCertificateId"`
	// The minimum version of the SSL protocol that
	// you want CloudFront to use for HTTPS connections. One of `SSLv3`, `TLSv1`,
	// `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
	// If you are using a custom certificate (specified with `acmCertificateArn`
	// or `iamCertificateId`), and have specified `sni-only` in
	// `sslSupportMethod`, `TLSv1` or later must be specified. If you have
	// specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
	// specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
	// must be specified.
	MinimumProtocolVersion pulumi.StringPtrInput `pulumi:"minimumProtocolVersion"`
	SslSupportMethod pulumi.StringPtrInput `pulumi:"sslSupportMethod"`
}

func (DistributionViewerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionViewerCertificate)(nil)).Elem()
}

func (i DistributionViewerCertificateArgs) ToDistributionViewerCertificateOutput() DistributionViewerCertificateOutput {
	return i.ToDistributionViewerCertificateOutputWithContext(context.Background())
}

func (i DistributionViewerCertificateArgs) ToDistributionViewerCertificateOutputWithContext(ctx context.Context) DistributionViewerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionViewerCertificateOutput)
}

func (i DistributionViewerCertificateArgs) ToDistributionViewerCertificatePtrOutput() DistributionViewerCertificatePtrOutput {
	return i.ToDistributionViewerCertificatePtrOutputWithContext(context.Background())
}

func (i DistributionViewerCertificateArgs) ToDistributionViewerCertificatePtrOutputWithContext(ctx context.Context) DistributionViewerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionViewerCertificateOutput).ToDistributionViewerCertificatePtrOutputWithContext(ctx)
}

type DistributionViewerCertificatePtrInput interface {
	pulumi.Input

	ToDistributionViewerCertificatePtrOutput() DistributionViewerCertificatePtrOutput
	ToDistributionViewerCertificatePtrOutputWithContext(context.Context) DistributionViewerCertificatePtrOutput
}

type distributionViewerCertificatePtrType DistributionViewerCertificateArgs

func DistributionViewerCertificatePtr(v *DistributionViewerCertificateArgs) DistributionViewerCertificatePtrInput {	return (*distributionViewerCertificatePtrType)(v)
}

func (*distributionViewerCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionViewerCertificate)(nil)).Elem()
}

func (i *distributionViewerCertificatePtrType) ToDistributionViewerCertificatePtrOutput() DistributionViewerCertificatePtrOutput {
	return i.ToDistributionViewerCertificatePtrOutputWithContext(context.Background())
}

func (i *distributionViewerCertificatePtrType) ToDistributionViewerCertificatePtrOutputWithContext(ctx context.Context) DistributionViewerCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionViewerCertificatePtrOutput)
}

type DistributionViewerCertificateOutput struct { *pulumi.OutputState }

func (DistributionViewerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionViewerCertificate)(nil)).Elem()
}

func (o DistributionViewerCertificateOutput) ToDistributionViewerCertificateOutput() DistributionViewerCertificateOutput {
	return o
}

func (o DistributionViewerCertificateOutput) ToDistributionViewerCertificateOutputWithContext(ctx context.Context) DistributionViewerCertificateOutput {
	return o
}

func (o DistributionViewerCertificateOutput) ToDistributionViewerCertificatePtrOutput() DistributionViewerCertificatePtrOutput {
	return o.ToDistributionViewerCertificatePtrOutputWithContext(context.Background())
}

func (o DistributionViewerCertificateOutput) ToDistributionViewerCertificatePtrOutputWithContext(ctx context.Context) DistributionViewerCertificatePtrOutput {
	return o.ApplyT(func(v DistributionViewerCertificate) *DistributionViewerCertificate {
		return &v
	}).(DistributionViewerCertificatePtrOutput)
}
// The ARN of the [AWS Certificate Manager][6]
// certificate that you wish to use with this distribution. Specify this,
// `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
// certificate must be in  US-EAST-1.
func (o DistributionViewerCertificateOutput) AcmCertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.AcmCertificateArn }).(pulumi.StringPtrOutput)
}

// `true` if you want viewers to use HTTPS
// to request your objects and you're using the CloudFront domain name for your
// distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
func (o DistributionViewerCertificateOutput) CloudfrontDefaultCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *bool { return v.CloudfrontDefaultCertificate }).(pulumi.BoolPtrOutput)
}

// The IAM certificate identifier of the custom viewer
// certificate for this distribution if you are using a custom domain. Specify
// this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
func (o DistributionViewerCertificateOutput) IamCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.IamCertificateId }).(pulumi.StringPtrOutput)
}

// The minimum version of the SSL protocol that
// you want CloudFront to use for HTTPS connections. One of `SSLv3`, `TLSv1`,
// `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
// If you are using a custom certificate (specified with `acmCertificateArn`
// or `iamCertificateId`), and have specified `sni-only` in
// `sslSupportMethod`, `TLSv1` or later must be specified. If you have
// specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
// specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
// must be specified.
func (o DistributionViewerCertificateOutput) MinimumProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.MinimumProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o DistributionViewerCertificateOutput) SslSupportMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.SslSupportMethod }).(pulumi.StringPtrOutput)
}

type DistributionViewerCertificatePtrOutput struct { *pulumi.OutputState}

func (DistributionViewerCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionViewerCertificate)(nil)).Elem()
}

func (o DistributionViewerCertificatePtrOutput) ToDistributionViewerCertificatePtrOutput() DistributionViewerCertificatePtrOutput {
	return o
}

func (o DistributionViewerCertificatePtrOutput) ToDistributionViewerCertificatePtrOutputWithContext(ctx context.Context) DistributionViewerCertificatePtrOutput {
	return o
}

func (o DistributionViewerCertificatePtrOutput) Elem() DistributionViewerCertificateOutput {
	return o.ApplyT(func (v *DistributionViewerCertificate) DistributionViewerCertificate { return *v }).(DistributionViewerCertificateOutput)
}

// The ARN of the [AWS Certificate Manager][6]
// certificate that you wish to use with this distribution. Specify this,
// `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
// certificate must be in  US-EAST-1.
func (o DistributionViewerCertificatePtrOutput) AcmCertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.AcmCertificateArn }).(pulumi.StringPtrOutput)
}

// `true` if you want viewers to use HTTPS
// to request your objects and you're using the CloudFront domain name for your
// distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
func (o DistributionViewerCertificatePtrOutput) CloudfrontDefaultCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *bool { return v.CloudfrontDefaultCertificate }).(pulumi.BoolPtrOutput)
}

// The IAM certificate identifier of the custom viewer
// certificate for this distribution if you are using a custom domain. Specify
// this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
func (o DistributionViewerCertificatePtrOutput) IamCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.IamCertificateId }).(pulumi.StringPtrOutput)
}

// The minimum version of the SSL protocol that
// you want CloudFront to use for HTTPS connections. One of `SSLv3`, `TLSv1`,
// `TLSv1_2016`, `TLSv1.1_2016` or `TLSv1.2_2018`. Default: `TLSv1`. **NOTE**:
// If you are using a custom certificate (specified with `acmCertificateArn`
// or `iamCertificateId`), and have specified `sni-only` in
// `sslSupportMethod`, `TLSv1` or later must be specified. If you have
// specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
// specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
// must be specified.
func (o DistributionViewerCertificatePtrOutput) MinimumProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.MinimumProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o DistributionViewerCertificatePtrOutput) SslSupportMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DistributionViewerCertificate) *string { return v.SslSupportMethod }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DistributionViewerCertificateOutput{})
	pulumi.RegisterOutputType(DistributionViewerCertificatePtrOutput{})
}
