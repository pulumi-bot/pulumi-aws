// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package RulePredicate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RulePredicate struct {
	DataId string `pulumi:"dataId"`
	Negated bool `pulumi:"negated"`
	Type string `pulumi:"type"`
}

type RulePredicateInput interface {
	pulumi.Input

	ToRulePredicateOutput() RulePredicateOutput
	ToRulePredicateOutputWithContext(context.Context) RulePredicateOutput
}

type RulePredicateArgs struct {
	DataId pulumi.StringInput `pulumi:"dataId"`
	Negated pulumi.BoolInput `pulumi:"negated"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (RulePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (i RulePredicateArgs) ToRulePredicateOutput() RulePredicateOutput {
	return i.ToRulePredicateOutputWithContext(context.Background())
}

func (i RulePredicateArgs) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateOutput)
}

type RulePredicateArrayInput interface {
	pulumi.Input

	ToRulePredicateArrayOutput() RulePredicateArrayOutput
	ToRulePredicateArrayOutputWithContext(context.Context) RulePredicateArrayOutput
}

type RulePredicateArray []RulePredicateInput

func (RulePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (i RulePredicateArray) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return i.ToRulePredicateArrayOutputWithContext(context.Background())
}

func (i RulePredicateArray) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateArrayOutput)
}

type RulePredicateOutput struct { *pulumi.OutputState }

func (RulePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (o RulePredicateOutput) ToRulePredicateOutput() RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func (v RulePredicate) string { return v.DataId }).(pulumi.StringOutput)
}

func (o RulePredicateOutput) Negated() pulumi.BoolOutput {
	return o.ApplyT(func (v RulePredicate) bool { return v.Negated }).(pulumi.BoolOutput)
}

func (o RulePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v RulePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type RulePredicateArrayOutput struct { *pulumi.OutputState}

func (RulePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) Index(i pulumi.IntInput) RulePredicateOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) RulePredicate {
		return vs[0].([]RulePredicate)[vs[1].(int)]
	}).(RulePredicateOutput)
}

func init() {
	pulumi.RegisterOutputType(RulePredicateOutput{})
	pulumi.RegisterOutputType(RulePredicateArrayOutput{})
}
