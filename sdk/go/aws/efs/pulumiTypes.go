// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AccessPointPosixUser struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid int `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids []int `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid int `pulumi:"uid"`
}

// AccessPointPosixUserInput is an input type that accepts AccessPointPosixUserArgs and AccessPointPosixUserOutput values.
// You can construct a concrete instance of `AccessPointPosixUserInput` via:
//
//          AccessPointPosixUserArgs{...}
type AccessPointPosixUserInput interface {
	pulumi.Input

	ToAccessPointPosixUserOutput() AccessPointPosixUserOutput
	ToAccessPointPosixUserOutputWithContext(context.Context) AccessPointPosixUserOutput
}

type AccessPointPosixUserArgs struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid pulumi.IntInput `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids pulumi.IntArrayInput `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid pulumi.IntInput `pulumi:"uid"`
}

func (AccessPointPosixUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return i.ToAccessPointPosixUserOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput)
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput).ToAccessPointPosixUserPtrOutputWithContext(ctx)
}

// AccessPointPosixUserPtrInput is an input type that accepts AccessPointPosixUserArgs, AccessPointPosixUserPtr and AccessPointPosixUserPtrOutput values.
// You can construct a concrete instance of `AccessPointPosixUserPtrInput` via:
//
//          AccessPointPosixUserArgs{...}
//
//  or:
//
//          nil
type AccessPointPosixUserPtrInput interface {
	pulumi.Input

	ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput
	ToAccessPointPosixUserPtrOutputWithContext(context.Context) AccessPointPosixUserPtrOutput
}

type accessPointPosixUserPtrType AccessPointPosixUserArgs

func AccessPointPosixUserPtr(v *AccessPointPosixUserArgs) AccessPointPosixUserPtrInput {
	return (*accessPointPosixUserPtrType)(v)
}

func (*accessPointPosixUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserPtrOutput)
}

type AccessPointPosixUserOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o.ApplyT(func(v AccessPointPosixUser) *AccessPointPosixUser {
		return &v
	}).(AccessPointPosixUserPtrOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Gid() pulumi.IntOutput {
	return o.ApplyT(func(v AccessPointPosixUser) int { return v.Gid }).(pulumi.IntOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) SecondaryGids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AccessPointPosixUser) []int { return v.SecondaryGids }).(pulumi.IntArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Uid() pulumi.IntOutput {
	return o.ApplyT(func(v AccessPointPosixUser) int { return v.Uid }).(pulumi.IntOutput)
}

type AccessPointPosixUserPtrOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) Elem() AccessPointPosixUserOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) AccessPointPosixUser { return *v }).(AccessPointPosixUserOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *int {
		if v == nil {
			return nil
		}
		return &v.Gid
	}).(pulumi.IntPtrOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) SecondaryGids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) []int {
		if v == nil {
			return nil
		}
		return v.SecondaryGids
	}).(pulumi.IntArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *int {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.IntPtrOutput)
}

type AccessPointRootDirectory struct {
	// Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	CreationInfo *AccessPointRootDirectoryCreationInfo `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
	Path *string `pulumi:"path"`
}

// AccessPointRootDirectoryInput is an input type that accepts AccessPointRootDirectoryArgs and AccessPointRootDirectoryOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryInput` via:
//
//          AccessPointRootDirectoryArgs{...}
type AccessPointRootDirectoryInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput
	ToAccessPointRootDirectoryOutputWithContext(context.Context) AccessPointRootDirectoryOutput
}

type AccessPointRootDirectoryArgs struct {
	// Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	CreationInfo AccessPointRootDirectoryCreationInfoPtrInput `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AccessPointRootDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return i.ToAccessPointRootDirectoryOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput)
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput).ToAccessPointRootDirectoryPtrOutputWithContext(ctx)
}

// AccessPointRootDirectoryPtrInput is an input type that accepts AccessPointRootDirectoryArgs, AccessPointRootDirectoryPtr and AccessPointRootDirectoryPtrOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryPtrInput` via:
//
//          AccessPointRootDirectoryArgs{...}
//
//  or:
//
//          nil
type AccessPointRootDirectoryPtrInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput
	ToAccessPointRootDirectoryPtrOutputWithContext(context.Context) AccessPointRootDirectoryPtrOutput
}

type accessPointRootDirectoryPtrType AccessPointRootDirectoryArgs

func AccessPointRootDirectoryPtr(v *AccessPointRootDirectoryArgs) AccessPointRootDirectoryPtrInput {
	return (*accessPointRootDirectoryPtrType)(v)
}

func (*accessPointRootDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryPtrOutput)
}

type AccessPointRootDirectoryOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *AccessPointRootDirectory {
		return &v
	}).(AccessPointRootDirectoryPtrOutput)
}

// Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
func (o AccessPointRootDirectoryOutput) CreationInfo() AccessPointRootDirectoryCreationInfoPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *AccessPointRootDirectoryCreationInfo { return v.CreationInfo }).(AccessPointRootDirectoryCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
func (o AccessPointRootDirectoryOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AccessPointRootDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) Elem() AccessPointRootDirectoryOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) AccessPointRootDirectory { return *v }).(AccessPointRootDirectoryOutput)
}

// Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
func (o AccessPointRootDirectoryPtrOutput) CreationInfo() AccessPointRootDirectoryCreationInfoPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *AccessPointRootDirectoryCreationInfo {
		if v == nil {
			return nil
		}
		return v.CreationInfo
	}).(AccessPointRootDirectoryCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
func (o AccessPointRootDirectoryPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type AccessPointRootDirectoryCreationInfo struct {
	// Specifies the POSIX group ID to apply to the `rootDirectory`.
	OwnerGid int `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the `rootDirectory`.
	OwnerUid int `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions string `pulumi:"permissions"`
}

// AccessPointRootDirectoryCreationInfoInput is an input type that accepts AccessPointRootDirectoryCreationInfoArgs and AccessPointRootDirectoryCreationInfoOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryCreationInfoInput` via:
//
//          AccessPointRootDirectoryCreationInfoArgs{...}
type AccessPointRootDirectoryCreationInfoInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryCreationInfoOutput() AccessPointRootDirectoryCreationInfoOutput
	ToAccessPointRootDirectoryCreationInfoOutputWithContext(context.Context) AccessPointRootDirectoryCreationInfoOutput
}

type AccessPointRootDirectoryCreationInfoArgs struct {
	// Specifies the POSIX group ID to apply to the `rootDirectory`.
	OwnerGid pulumi.IntInput `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the `rootDirectory`.
	OwnerUid pulumi.IntInput `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions pulumi.StringInput `pulumi:"permissions"`
}

func (AccessPointRootDirectoryCreationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoOutput() AccessPointRootDirectoryCreationInfoOutput {
	return i.ToAccessPointRootDirectoryCreationInfoOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryCreationInfoOutput)
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoPtrOutput() AccessPointRootDirectoryCreationInfoPtrOutput {
	return i.ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryCreationInfoOutput).ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(ctx)
}

// AccessPointRootDirectoryCreationInfoPtrInput is an input type that accepts AccessPointRootDirectoryCreationInfoArgs, AccessPointRootDirectoryCreationInfoPtr and AccessPointRootDirectoryCreationInfoPtrOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryCreationInfoPtrInput` via:
//
//          AccessPointRootDirectoryCreationInfoArgs{...}
//
//  or:
//
//          nil
type AccessPointRootDirectoryCreationInfoPtrInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryCreationInfoPtrOutput() AccessPointRootDirectoryCreationInfoPtrOutput
	ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(context.Context) AccessPointRootDirectoryCreationInfoPtrOutput
}

type accessPointRootDirectoryCreationInfoPtrType AccessPointRootDirectoryCreationInfoArgs

func AccessPointRootDirectoryCreationInfoPtr(v *AccessPointRootDirectoryCreationInfoArgs) AccessPointRootDirectoryCreationInfoPtrInput {
	return (*accessPointRootDirectoryCreationInfoPtrType)(v)
}

func (*accessPointRootDirectoryCreationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (i *accessPointRootDirectoryCreationInfoPtrType) ToAccessPointRootDirectoryCreationInfoPtrOutput() AccessPointRootDirectoryCreationInfoPtrOutput {
	return i.ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(context.Background())
}

func (i *accessPointRootDirectoryCreationInfoPtrType) ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryCreationInfoPtrOutput)
}

type AccessPointRootDirectoryCreationInfoOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryCreationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoOutput() AccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoPtrOutput() AccessPointRootDirectoryCreationInfoPtrOutput {
	return o.ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(context.Background())
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectoryCreationInfo) *AccessPointRootDirectoryCreationInfo {
		return &v
	}).(AccessPointRootDirectoryCreationInfoPtrOutput)
}

// Specifies the POSIX group ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoOutput) OwnerGid() pulumi.IntOutput {
	return o.ApplyT(func(v AccessPointRootDirectoryCreationInfo) int { return v.OwnerGid }).(pulumi.IntOutput)
}

// Specifies the POSIX user ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoOutput) OwnerUid() pulumi.IntOutput {
	return o.ApplyT(func(v AccessPointRootDirectoryCreationInfo) int { return v.OwnerUid }).(pulumi.IntOutput)
}

// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
func (o AccessPointRootDirectoryCreationInfoOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointRootDirectoryCreationInfo) string { return v.Permissions }).(pulumi.StringOutput)
}

type AccessPointRootDirectoryCreationInfoPtrOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryCreationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (o AccessPointRootDirectoryCreationInfoPtrOutput) ToAccessPointRootDirectoryCreationInfoPtrOutput() AccessPointRootDirectoryCreationInfoPtrOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoPtrOutput) ToAccessPointRootDirectoryCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoPtrOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoPtrOutput) Elem() AccessPointRootDirectoryCreationInfoOutput {
	return o.ApplyT(func(v *AccessPointRootDirectoryCreationInfo) AccessPointRootDirectoryCreationInfo { return *v }).(AccessPointRootDirectoryCreationInfoOutput)
}

// Specifies the POSIX group ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoPtrOutput) OwnerGid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectoryCreationInfo) *int {
		if v == nil {
			return nil
		}
		return &v.OwnerGid
	}).(pulumi.IntPtrOutput)
}

// Specifies the POSIX user ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoPtrOutput) OwnerUid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectoryCreationInfo) *int {
		if v == nil {
			return nil
		}
		return &v.OwnerUid
	}).(pulumi.IntPtrOutput)
}

// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
func (o AccessPointRootDirectoryCreationInfoPtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectoryCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Permissions
	}).(pulumi.StringPtrOutput)
}

type FileSystemLifecyclePolicy struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa string `pulumi:"transitionToIa"`
}

// FileSystemLifecyclePolicyInput is an input type that accepts FileSystemLifecyclePolicyArgs and FileSystemLifecyclePolicyOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyInput` via:
//
//          FileSystemLifecyclePolicyArgs{...}
type FileSystemLifecyclePolicyInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput
	ToFileSystemLifecyclePolicyOutputWithContext(context.Context) FileSystemLifecyclePolicyOutput
}

type FileSystemLifecyclePolicyArgs struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa pulumi.StringInput `pulumi:"transitionToIa"`
}

func (FileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return i.ToFileSystemLifecyclePolicyOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyOutput)
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyPtrOutput() FileSystemLifecyclePolicyPtrOutput {
	return i.ToFileSystemLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyPtrOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyOutput).ToFileSystemLifecyclePolicyPtrOutputWithContext(ctx)
}

// FileSystemLifecyclePolicyPtrInput is an input type that accepts FileSystemLifecyclePolicyArgs, FileSystemLifecyclePolicyPtr and FileSystemLifecyclePolicyPtrOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyPtrInput` via:
//
//          FileSystemLifecyclePolicyArgs{...}
//
//  or:
//
//          nil
type FileSystemLifecyclePolicyPtrInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyPtrOutput() FileSystemLifecyclePolicyPtrOutput
	ToFileSystemLifecyclePolicyPtrOutputWithContext(context.Context) FileSystemLifecyclePolicyPtrOutput
}

type fileSystemLifecyclePolicyPtrType FileSystemLifecyclePolicyArgs

func FileSystemLifecyclePolicyPtr(v *FileSystemLifecyclePolicyArgs) FileSystemLifecyclePolicyPtrInput {
	return (*fileSystemLifecyclePolicyPtrType)(v)
}

func (*fileSystemLifecyclePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i *fileSystemLifecyclePolicyPtrType) ToFileSystemLifecyclePolicyPtrOutput() FileSystemLifecyclePolicyPtrOutput {
	return i.ToFileSystemLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (i *fileSystemLifecyclePolicyPtrType) ToFileSystemLifecyclePolicyPtrOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyPtrOutput)
}

type FileSystemLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyPtrOutput() FileSystemLifecyclePolicyPtrOutput {
	return o.ToFileSystemLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyPtrOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *FileSystemLifecyclePolicy {
		return &v
	}).(FileSystemLifecyclePolicyPtrOutput)
}

// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
func (o FileSystemLifecyclePolicyOutput) TransitionToIa() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) string { return v.TransitionToIa }).(pulumi.StringOutput)
}

type FileSystemLifecyclePolicyPtrOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyPtrOutput) ToFileSystemLifecyclePolicyPtrOutput() FileSystemLifecyclePolicyPtrOutput {
	return o
}

func (o FileSystemLifecyclePolicyPtrOutput) ToFileSystemLifecyclePolicyPtrOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyPtrOutput {
	return o
}

func (o FileSystemLifecyclePolicyPtrOutput) Elem() FileSystemLifecyclePolicyOutput {
	return o.ApplyT(func(v *FileSystemLifecyclePolicy) FileSystemLifecyclePolicy { return *v }).(FileSystemLifecyclePolicyOutput)
}

// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
func (o FileSystemLifecyclePolicyPtrOutput) TransitionToIa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemLifecyclePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.TransitionToIa
	}).(pulumi.StringPtrOutput)
}

type GetAccessPointPosixUser struct {
	// Group ID
	Gid int `pulumi:"gid"`
	// Secondary group IDs
	SecondaryGids []int `pulumi:"secondaryGids"`
	// User Id
	// * `rootDirectory`- Single element list containing information on the directory on the Amazon EFS file system that the access point provides access to.
	Uid int `pulumi:"uid"`
}

type GetAccessPointRootDirectory struct {
	// Single element list containing information on the creation permissions of the directory
	CreationInfos []GetAccessPointRootDirectoryCreationInfo `pulumi:"creationInfos"`
	// Path exposed as the root directory
	Path string `pulumi:"path"`
}

type GetAccessPointRootDirectoryCreationInfo struct {
	// POSIX owner group ID
	OwnerGid int `pulumi:"ownerGid"`
	// POSIX owner user ID
	OwnerUid int `pulumi:"ownerUid"`
	// POSIX permissions mode
	Permissions string `pulumi:"permissions"`
}

type GetFileSystemLifecyclePolicy struct {
	TransitionToIa string `pulumi:"transitionToIa"`
}

func init() {
	pulumi.RegisterOutputType(AccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(AccessPointPosixUserPtrOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryCreationInfoOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryCreationInfoPtrOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyPtrOutput{})
	pulumi.RegisterOutputType(GetAccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(GetAccessPointPosixUserArrayOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryArrayOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryCreationInfoOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryCreationInfoArrayOutput{})
	pulumi.RegisterOutputType(GetFileSystemLifecyclePolicyOutput{})
}
