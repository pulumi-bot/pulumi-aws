// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Gamelift Game Session Queue resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_game_session_queue.html.markdown.
type GameSessionQueue struct {
	s *pulumi.ResourceState
}

// NewGameSessionQueue registers a new resource with the given unique name, arguments, and options.
func NewGameSessionQueue(ctx *pulumi.Context,
	name string, args *GameSessionQueueArgs, opts ...pulumi.ResourceOpt) (*GameSessionQueue, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["destinations"] = nil
		inputs["name"] = nil
		inputs["playerLatencyPolicies"] = nil
		inputs["timeoutInSeconds"] = nil
	} else {
		inputs["destinations"] = args.Destinations
		inputs["name"] = args.Name
		inputs["playerLatencyPolicies"] = args.PlayerLatencyPolicies
		inputs["timeoutInSeconds"] = args.TimeoutInSeconds
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GameSessionQueue{s: s}, nil
}

// GetGameSessionQueue gets an existing GameSessionQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameSessionQueue(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GameSessionQueueState, opts ...pulumi.ResourceOpt) (*GameSessionQueue, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["destinations"] = state.Destinations
		inputs["name"] = state.Name
		inputs["playerLatencyPolicies"] = state.PlayerLatencyPolicies
		inputs["timeoutInSeconds"] = state.TimeoutInSeconds
	}
	s, err := ctx.ReadResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GameSessionQueue{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GameSessionQueue) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GameSessionQueue) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Game Session Queue ARN.
func (r *GameSessionQueue) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// List of fleet/alias ARNs used by session queue for placing game sessions.
func (r *GameSessionQueue) Destinations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["destinations"])
}

// Name of the session queue.
func (r *GameSessionQueue) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// One or more policies used to choose fleet based on player latency. See below.
func (r *GameSessionQueue) PlayerLatencyPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["playerLatencyPolicies"])
}

// Maximum time a game session request can remain in the queue.
func (r *GameSessionQueue) TimeoutInSeconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeoutInSeconds"])
}

// Input properties used for looking up and filtering GameSessionQueue resources.
type GameSessionQueueState struct {
	// Game Session Queue ARN.
	Arn interface{}
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations interface{}
	// Name of the session queue.
	Name interface{}
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies interface{}
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds interface{}
}

// The set of arguments for constructing a GameSessionQueue resource.
type GameSessionQueueArgs struct {
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations interface{}
	// Name of the session queue.
	Name interface{}
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies interface{}
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds interface{}
}
