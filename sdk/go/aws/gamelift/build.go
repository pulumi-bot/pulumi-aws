// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Build struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput        `pulumi:"arn"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	OperatingSystem pulumi.StringOutput        `pulumi:"operatingSystem"`
	StorageLocation BuildStorageLocationOutput `pulumi:"storageLocation"`
	Tags            pulumi.StringMapOutput     `pulumi:"tags"`
	Version         pulumi.StringPtrOutput     `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil || args.OperatingSystem == nil {
		return nil, errors.New("missing required argument 'OperatingSystem'")
	}
	if args == nil || args.StorageLocation == nil {
		return nil, errors.New("missing required argument 'StorageLocation'")
	}
	if args == nil {
		args = &BuildArgs{}
	}
	var resource Build
	err := ctx.RegisterResource("aws:gamelift/build:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("aws:gamelift/build:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
	Arn             *string               `pulumi:"arn"`
	Name            *string               `pulumi:"name"`
	OperatingSystem *string               `pulumi:"operatingSystem"`
	StorageLocation *BuildStorageLocation `pulumi:"storageLocation"`
	Tags            map[string]string     `pulumi:"tags"`
	Version         *string               `pulumi:"version"`
}

type BuildState struct {
	Arn             pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	OperatingSystem pulumi.StringPtrInput
	StorageLocation BuildStorageLocationPtrInput
	Tags            pulumi.StringMapInput
	Version         pulumi.StringPtrInput
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	Name            *string              `pulumi:"name"`
	OperatingSystem string               `pulumi:"operatingSystem"`
	StorageLocation BuildStorageLocation `pulumi:"storageLocation"`
	Tags            map[string]string    `pulumi:"tags"`
	Version         *string              `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	Name            pulumi.StringPtrInput
	OperatingSystem pulumi.StringInput
	StorageLocation BuildStorageLocationInput
	Tags            pulumi.StringMapInput
	Version         pulumi.StringPtrInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}
