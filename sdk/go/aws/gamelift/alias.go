// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Alias struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput        `pulumi:"arn"`
	Description     pulumi.StringPtrOutput     `pulumi:"description"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	RoutingStrategy AliasRoutingStrategyOutput `pulumi:"routingStrategy"`
	Tags            pulumi.StringMapOutput     `pulumi:"tags"`
}

// NewAlias registers a new resource with the given unique name, arguments, and options.
func NewAlias(ctx *pulumi.Context,
	name string, args *AliasArgs, opts ...pulumi.ResourceOption) (*Alias, error) {
	if args == nil || args.RoutingStrategy == nil {
		return nil, errors.New("missing required argument 'RoutingStrategy'")
	}
	if args == nil {
		args = &AliasArgs{}
	}
	var resource Alias
	err := ctx.RegisterResource("aws:gamelift/alias:Alias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlias gets an existing Alias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AliasState, opts ...pulumi.ResourceOption) (*Alias, error) {
	var resource Alias
	err := ctx.ReadResource("aws:gamelift/alias:Alias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alias resources.
type aliasState struct {
	Arn             *string               `pulumi:"arn"`
	Description     *string               `pulumi:"description"`
	Name            *string               `pulumi:"name"`
	RoutingStrategy *AliasRoutingStrategy `pulumi:"routingStrategy"`
	Tags            map[string]string     `pulumi:"tags"`
}

type AliasState struct {
	Arn             pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	RoutingStrategy AliasRoutingStrategyPtrInput
	Tags            pulumi.StringMapInput
}

func (AliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*aliasState)(nil)).Elem()
}

type aliasArgs struct {
	Description     *string              `pulumi:"description"`
	Name            *string              `pulumi:"name"`
	RoutingStrategy AliasRoutingStrategy `pulumi:"routingStrategy"`
	Tags            map[string]string    `pulumi:"tags"`
}

// The set of arguments for constructing a Alias resource.
type AliasArgs struct {
	Description     pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	RoutingStrategy AliasRoutingStrategyInput
	Tags            pulumi.StringMapInput
}

func (AliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aliasArgs)(nil)).Elem()
}
