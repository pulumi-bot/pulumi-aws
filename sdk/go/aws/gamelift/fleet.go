// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Fleet struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                       `pulumi:"arn"`
	BuildId                        pulumi.StringOutput                       `pulumi:"buildId"`
	Description                    pulumi.StringPtrOutput                    `pulumi:"description"`
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayOutput      `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                pulumi.StringOutput                       `pulumi:"ec2InstanceType"`
	FleetType                      pulumi.StringPtrOutput                    `pulumi:"fleetType"`
	InstanceRoleArn                pulumi.StringPtrOutput                    `pulumi:"instanceRoleArn"`
	LogPaths                       pulumi.StringArrayOutput                  `pulumi:"logPaths"`
	MetricGroups                   pulumi.StringArrayOutput                  `pulumi:"metricGroups"`
	Name                           pulumi.StringOutput                       `pulumi:"name"`
	NewGameSessionProtectionPolicy pulumi.StringPtrOutput                    `pulumi:"newGameSessionProtectionPolicy"`
	OperatingSystem                pulumi.StringOutput                       `pulumi:"operatingSystem"`
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrOutput `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           FleetRuntimeConfigurationPtrOutput        `pulumi:"runtimeConfiguration"`
	Tags                           pulumi.StringMapOutput                    `pulumi:"tags"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil || args.BuildId == nil {
		return nil, errors.New("missing required argument 'BuildId'")
	}
	if args == nil || args.Ec2InstanceType == nil {
		return nil, errors.New("missing required argument 'Ec2InstanceType'")
	}
	if args == nil {
		args = &FleetArgs{}
	}
	var resource Fleet
	err := ctx.RegisterResource("aws:gamelift/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:gamelift/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	Arn                            *string                           `pulumi:"arn"`
	BuildId                        *string                           `pulumi:"buildId"`
	Description                    *string                           `pulumi:"description"`
	Ec2InboundPermissions          []FleetEc2InboundPermission       `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                *string                           `pulumi:"ec2InstanceType"`
	FleetType                      *string                           `pulumi:"fleetType"`
	InstanceRoleArn                *string                           `pulumi:"instanceRoleArn"`
	LogPaths                       []string                          `pulumi:"logPaths"`
	MetricGroups                   []string                          `pulumi:"metricGroups"`
	Name                           *string                           `pulumi:"name"`
	NewGameSessionProtectionPolicy *string                           `pulumi:"newGameSessionProtectionPolicy"`
	OperatingSystem                *string                           `pulumi:"operatingSystem"`
	ResourceCreationLimitPolicy    *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           *FleetRuntimeConfiguration        `pulumi:"runtimeConfiguration"`
	Tags                           map[string]string                 `pulumi:"tags"`
}

type FleetState struct {
	Arn                            pulumi.StringPtrInput
	BuildId                        pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayInput
	Ec2InstanceType                pulumi.StringPtrInput
	FleetType                      pulumi.StringPtrInput
	InstanceRoleArn                pulumi.StringPtrInput
	LogPaths                       pulumi.StringArrayInput
	MetricGroups                   pulumi.StringArrayInput
	Name                           pulumi.StringPtrInput
	NewGameSessionProtectionPolicy pulumi.StringPtrInput
	OperatingSystem                pulumi.StringPtrInput
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrInput
	RuntimeConfiguration           FleetRuntimeConfigurationPtrInput
	Tags                           pulumi.StringMapInput
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	BuildId                        string                            `pulumi:"buildId"`
	Description                    *string                           `pulumi:"description"`
	Ec2InboundPermissions          []FleetEc2InboundPermission       `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                string                            `pulumi:"ec2InstanceType"`
	FleetType                      *string                           `pulumi:"fleetType"`
	InstanceRoleArn                *string                           `pulumi:"instanceRoleArn"`
	MetricGroups                   []string                          `pulumi:"metricGroups"`
	Name                           *string                           `pulumi:"name"`
	NewGameSessionProtectionPolicy *string                           `pulumi:"newGameSessionProtectionPolicy"`
	ResourceCreationLimitPolicy    *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           *FleetRuntimeConfiguration        `pulumi:"runtimeConfiguration"`
	Tags                           map[string]string                 `pulumi:"tags"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	BuildId                        pulumi.StringInput
	Description                    pulumi.StringPtrInput
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayInput
	Ec2InstanceType                pulumi.StringInput
	FleetType                      pulumi.StringPtrInput
	InstanceRoleArn                pulumi.StringPtrInput
	MetricGroups                   pulumi.StringArrayInput
	Name                           pulumi.StringPtrInput
	NewGameSessionProtectionPolicy pulumi.StringPtrInput
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrInput
	RuntimeConfiguration           FleetRuntimeConfigurationPtrInput
	Tags                           pulumi.StringMapInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}
