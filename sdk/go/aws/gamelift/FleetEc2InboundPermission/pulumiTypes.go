// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package FleetEc2InboundPermission

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type FleetEc2InboundPermission struct {
	// Starting value for a range of allowed port numbers.
	FromPort int `pulumi:"fromPort"`
	// Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
	IpRange string `pulumi:"ipRange"`
	// Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
	Protocol string `pulumi:"protocol"`
	// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `fromPort`.
	ToPort int `pulumi:"toPort"`
}

type FleetEc2InboundPermissionInput interface {
	pulumi.Input

	ToFleetEc2InboundPermissionOutput() FleetEc2InboundPermissionOutput
	ToFleetEc2InboundPermissionOutputWithContext(context.Context) FleetEc2InboundPermissionOutput
}

type FleetEc2InboundPermissionArgs struct {
	// Starting value for a range of allowed port numbers.
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `fromPort`.
	ToPort pulumi.IntInput `pulumi:"toPort"`
}

func (FleetEc2InboundPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetEc2InboundPermission)(nil)).Elem()
}

func (i FleetEc2InboundPermissionArgs) ToFleetEc2InboundPermissionOutput() FleetEc2InboundPermissionOutput {
	return i.ToFleetEc2InboundPermissionOutputWithContext(context.Background())
}

func (i FleetEc2InboundPermissionArgs) ToFleetEc2InboundPermissionOutputWithContext(ctx context.Context) FleetEc2InboundPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetEc2InboundPermissionOutput)
}

type FleetEc2InboundPermissionArrayInput interface {
	pulumi.Input

	ToFleetEc2InboundPermissionArrayOutput() FleetEc2InboundPermissionArrayOutput
	ToFleetEc2InboundPermissionArrayOutputWithContext(context.Context) FleetEc2InboundPermissionArrayOutput
}

type FleetEc2InboundPermissionArray []FleetEc2InboundPermissionInput

func (FleetEc2InboundPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetEc2InboundPermission)(nil)).Elem()
}

func (i FleetEc2InboundPermissionArray) ToFleetEc2InboundPermissionArrayOutput() FleetEc2InboundPermissionArrayOutput {
	return i.ToFleetEc2InboundPermissionArrayOutputWithContext(context.Background())
}

func (i FleetEc2InboundPermissionArray) ToFleetEc2InboundPermissionArrayOutputWithContext(ctx context.Context) FleetEc2InboundPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetEc2InboundPermissionArrayOutput)
}

type FleetEc2InboundPermissionOutput struct { *pulumi.OutputState }

func (FleetEc2InboundPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetEc2InboundPermission)(nil)).Elem()
}

func (o FleetEc2InboundPermissionOutput) ToFleetEc2InboundPermissionOutput() FleetEc2InboundPermissionOutput {
	return o
}

func (o FleetEc2InboundPermissionOutput) ToFleetEc2InboundPermissionOutputWithContext(ctx context.Context) FleetEc2InboundPermissionOutput {
	return o
}

// Starting value for a range of allowed port numbers.
func (o FleetEc2InboundPermissionOutput) FromPort() pulumi.IntOutput {
	return o.ApplyT(func (v FleetEc2InboundPermission) int { return v.FromPort }).(pulumi.IntOutput)
}

// Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
func (o FleetEc2InboundPermissionOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func (v FleetEc2InboundPermission) string { return v.IpRange }).(pulumi.StringOutput)
}

// Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
func (o FleetEc2InboundPermissionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func (v FleetEc2InboundPermission) string { return v.Protocol }).(pulumi.StringOutput)
}

// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `fromPort`.
func (o FleetEc2InboundPermissionOutput) ToPort() pulumi.IntOutput {
	return o.ApplyT(func (v FleetEc2InboundPermission) int { return v.ToPort }).(pulumi.IntOutput)
}

type FleetEc2InboundPermissionArrayOutput struct { *pulumi.OutputState}

func (FleetEc2InboundPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetEc2InboundPermission)(nil)).Elem()
}

func (o FleetEc2InboundPermissionArrayOutput) ToFleetEc2InboundPermissionArrayOutput() FleetEc2InboundPermissionArrayOutput {
	return o
}

func (o FleetEc2InboundPermissionArrayOutput) ToFleetEc2InboundPermissionArrayOutputWithContext(ctx context.Context) FleetEc2InboundPermissionArrayOutput {
	return o
}

func (o FleetEc2InboundPermissionArrayOutput) Index(i pulumi.IntInput) FleetEc2InboundPermissionOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) FleetEc2InboundPermission {
		return vs[0].([]FleetEc2InboundPermission)[vs[1].(int)]
	}).(FleetEc2InboundPermissionOutput)
}

func init() {
	pulumi.RegisterOutputType(FleetEc2InboundPermissionOutput{})
	pulumi.RegisterOutputType(FleetEc2InboundPermissionArrayOutput{})
}
