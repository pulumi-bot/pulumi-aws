// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Model struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput            `pulumi:"arn"`
	Containers             ModelContainerArrayOutput      `pulumi:"containers"`
	EnableNetworkIsolation pulumi.BoolPtrOutput           `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn       pulumi.StringOutput            `pulumi:"executionRoleArn"`
	Name                   pulumi.StringOutput            `pulumi:"name"`
	PrimaryContainer       ModelPrimaryContainerPtrOutput `pulumi:"primaryContainer"`
	Tags                   pulumi.StringMapOutput         `pulumi:"tags"`
	VpcConfig              ModelVpcConfigPtrOutput        `pulumi:"vpcConfig"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil || args.ExecutionRoleArn == nil {
		return nil, errors.New("missing required argument 'ExecutionRoleArn'")
	}
	if args == nil {
		args = &ModelArgs{}
	}
	var resource Model
	err := ctx.RegisterResource("aws:sagemaker/model:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("aws:sagemaker/model:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
	Arn                    *string                `pulumi:"arn"`
	Containers             []ModelContainer       `pulumi:"containers"`
	EnableNetworkIsolation *bool                  `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn       *string                `pulumi:"executionRoleArn"`
	Name                   *string                `pulumi:"name"`
	PrimaryContainer       *ModelPrimaryContainer `pulumi:"primaryContainer"`
	Tags                   map[string]string      `pulumi:"tags"`
	VpcConfig              *ModelVpcConfig        `pulumi:"vpcConfig"`
}

type ModelState struct {
	Arn                    pulumi.StringPtrInput
	Containers             ModelContainerArrayInput
	EnableNetworkIsolation pulumi.BoolPtrInput
	ExecutionRoleArn       pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	PrimaryContainer       ModelPrimaryContainerPtrInput
	Tags                   pulumi.StringMapInput
	VpcConfig              ModelVpcConfigPtrInput
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	Containers             []ModelContainer       `pulumi:"containers"`
	EnableNetworkIsolation *bool                  `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn       string                 `pulumi:"executionRoleArn"`
	Name                   *string                `pulumi:"name"`
	PrimaryContainer       *ModelPrimaryContainer `pulumi:"primaryContainer"`
	Tags                   map[string]string      `pulumi:"tags"`
	VpcConfig              *ModelVpcConfig        `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	Containers             ModelContainerArrayInput
	EnableNetworkIsolation pulumi.BoolPtrInput
	ExecutionRoleArn       pulumi.StringInput
	Name                   pulumi.StringPtrInput
	PrimaryContainer       ModelPrimaryContainerPtrInput
	Tags                   pulumi.StringMapInput
	VpcConfig              ModelVpcConfigPtrInput
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}
