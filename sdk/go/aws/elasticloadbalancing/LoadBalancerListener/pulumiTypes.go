// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package LoadBalancerListener

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancerListener struct {
	// The port on the instance to route to
	InstancePort int `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort int `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol string `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId *string `pulumi:"sslCertificateId"`
}

type LoadBalancerListenerInput interface {
	pulumi.Input

	ToLoadBalancerListenerOutput() LoadBalancerListenerOutput
	ToLoadBalancerListenerOutputWithContext(context.Context) LoadBalancerListenerOutput
}

type LoadBalancerListenerArgs struct {
	// The port on the instance to route to
	InstancePort pulumi.IntInput `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol pulumi.StringInput `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol pulumi.StringInput `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId pulumi.StringPtrInput `pulumi:"sslCertificateId"`
}

func (LoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return i.ToLoadBalancerListenerOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerOutput)
}

type LoadBalancerListenerArrayInput interface {
	pulumi.Input

	ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput
	ToLoadBalancerListenerArrayOutputWithContext(context.Context) LoadBalancerListenerArrayOutput
}

type LoadBalancerListenerArray []LoadBalancerListenerInput

func (LoadBalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListener)(nil)).Elem()
}

func (i LoadBalancerListenerArray) ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput {
	return i.ToLoadBalancerListenerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArray) ToLoadBalancerListenerArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerArrayOutput)
}

type LoadBalancerListenerOutput struct { *pulumi.OutputState }

func (LoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return o
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return o
}

// The port on the instance to route to
func (o LoadBalancerListenerOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerListener) int { return v.InstancePort }).(pulumi.IntOutput)
}

// The protocol to use to the instance. Valid
// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) InstanceProtocol() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerListener) string { return v.InstanceProtocol }).(pulumi.StringOutput)
}

// The port to listen on for the load balancer
func (o LoadBalancerListenerOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func (v LoadBalancerListener) int { return v.LbPort }).(pulumi.IntOutput)
}

// The protocol to listen on. Valid values are `HTTP`,
// `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) LbProtocol() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerListener) string { return v.LbProtocol }).(pulumi.StringOutput)
}

// The ARN of an SSL certificate you have
// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
func (o LoadBalancerListenerOutput) SslCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerListener) *string { return v.SslCertificateId }).(pulumi.StringPtrOutput)
}

type LoadBalancerListenerArrayOutput struct { *pulumi.OutputState}

func (LoadBalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerListener)(nil)).Elem()
}

func (o LoadBalancerListenerArrayOutput) ToLoadBalancerListenerArrayOutput() LoadBalancerListenerArrayOutput {
	return o
}

func (o LoadBalancerListenerArrayOutput) ToLoadBalancerListenerArrayOutputWithContext(ctx context.Context) LoadBalancerListenerArrayOutput {
	return o
}

func (o LoadBalancerListenerArrayOutput) Index(i pulumi.IntInput) LoadBalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) LoadBalancerListener {
		return vs[0].([]LoadBalancerListener)[vs[1].(int)]
	}).(LoadBalancerListenerOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerListenerOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerArrayOutput{})
}
