// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancing

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deprecated: aws.elasticloadbalancing.SslNegotiationPolicy has been deprecated in favor of aws.elb.SslNegotiationPolicy
type SslNegotiationPolicy struct {
	pulumi.CustomResourceState

	Attributes   SslNegotiationPolicyAttributeArrayOutput `pulumi:"attributes"`
	LbPort       pulumi.IntOutput                         `pulumi:"lbPort"`
	LoadBalancer pulumi.StringOutput                      `pulumi:"loadBalancer"`
	Name         pulumi.StringOutput                      `pulumi:"name"`
}

// NewSslNegotiationPolicy registers a new resource with the given unique name, arguments, and options.
func NewSslNegotiationPolicy(ctx *pulumi.Context,
	name string, args *SslNegotiationPolicyArgs, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	if args == nil || args.LbPort == nil {
		return nil, errors.New("missing required argument 'LbPort'")
	}
	if args == nil || args.LoadBalancer == nil {
		return nil, errors.New("missing required argument 'LoadBalancer'")
	}
	if args == nil {
		args = &SslNegotiationPolicyArgs{}
	}
	var resource SslNegotiationPolicy
	err := ctx.RegisterResource("aws:elasticloadbalancing/sslNegotiationPolicy:SslNegotiationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslNegotiationPolicy gets an existing SslNegotiationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslNegotiationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslNegotiationPolicyState, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	var resource SslNegotiationPolicy
	err := ctx.ReadResource("aws:elasticloadbalancing/sslNegotiationPolicy:SslNegotiationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslNegotiationPolicy resources.
type sslNegotiationPolicyState struct {
	Attributes   []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	LbPort       *int                            `pulumi:"lbPort"`
	LoadBalancer *string                         `pulumi:"loadBalancer"`
	Name         *string                         `pulumi:"name"`
}

type SslNegotiationPolicyState struct {
	Attributes   SslNegotiationPolicyAttributeArrayInput
	LbPort       pulumi.IntPtrInput
	LoadBalancer pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
}

func (SslNegotiationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyState)(nil)).Elem()
}

type sslNegotiationPolicyArgs struct {
	Attributes   []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	LbPort       int                             `pulumi:"lbPort"`
	LoadBalancer string                          `pulumi:"loadBalancer"`
	Name         *string                         `pulumi:"name"`
}

// The set of arguments for constructing a SslNegotiationPolicy resource.
type SslNegotiationPolicyArgs struct {
	Attributes   SslNegotiationPolicyAttributeArrayInput
	LbPort       pulumi.IntInput
	LoadBalancer pulumi.StringInput
	Name         pulumi.StringPtrInput
}

func (SslNegotiationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyArgs)(nil)).Elem()
}
