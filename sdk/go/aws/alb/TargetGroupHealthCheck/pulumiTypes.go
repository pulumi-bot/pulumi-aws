// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TargetGroupHealthCheck

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TargetGroupHealthCheck struct {
	// Indicates whether  health checks are enabled. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
	Interval *int `pulumi:"interval"`
	Matcher *string `pulumi:"matcher"`
	// The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
	Path *string `pulumi:"path"`
	// The port to use to connect with the target. Valid values are either ports 1-65535, or `traffic-port`. Defaults to `traffic-port`.
	Port *string `pulumi:"port"`
	// The protocol to use to connect with the target. Defaults to `HTTP`. Not applicable when `targetType` is `lambda`.
	Protocol *string `pulumi:"protocol"`
	// The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
	Timeout *int `pulumi:"timeout"`
	// The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
	// * `matcher` (Required for HTTP/HTTPS ALB) The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type TargetGroupHealthCheckInput interface {
	pulumi.Input

	ToTargetGroupHealthCheckOutput() TargetGroupHealthCheckOutput
	ToTargetGroupHealthCheckOutputWithContext(context.Context) TargetGroupHealthCheckOutput
}

type TargetGroupHealthCheckArgs struct {
	// Indicates whether  health checks are enabled. Defaults to true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	Matcher pulumi.StringPtrInput `pulumi:"matcher"`
	// The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port to use to connect with the target. Valid values are either ports 1-65535, or `traffic-port`. Defaults to `traffic-port`.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The protocol to use to connect with the target. Defaults to `HTTP`. Not applicable when `targetType` is `lambda`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
	// * `matcher` (Required for HTTP/HTTPS ALB) The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (TargetGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheck)(nil)).Elem()
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckOutput() TargetGroupHealthCheckOutput {
	return i.ToTargetGroupHealthCheckOutputWithContext(context.Background())
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckOutputWithContext(ctx context.Context) TargetGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckOutput)
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckPtrOutput() TargetGroupHealthCheckPtrOutput {
	return i.ToTargetGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckOutput).ToTargetGroupHealthCheckPtrOutputWithContext(ctx)
}

type TargetGroupHealthCheckPtrInput interface {
	pulumi.Input

	ToTargetGroupHealthCheckPtrOutput() TargetGroupHealthCheckPtrOutput
	ToTargetGroupHealthCheckPtrOutputWithContext(context.Context) TargetGroupHealthCheckPtrOutput
}

type targetGroupHealthCheckPtrType TargetGroupHealthCheckArgs

func TargetGroupHealthCheckPtr(v *TargetGroupHealthCheckArgs) TargetGroupHealthCheckPtrInput {	return (*targetGroupHealthCheckPtrType)(v)
}

func (*targetGroupHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupHealthCheck)(nil)).Elem()
}

func (i *targetGroupHealthCheckPtrType) ToTargetGroupHealthCheckPtrOutput() TargetGroupHealthCheckPtrOutput {
	return i.ToTargetGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i *targetGroupHealthCheckPtrType) ToTargetGroupHealthCheckPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckPtrOutput)
}

type TargetGroupHealthCheckOutput struct { *pulumi.OutputState }

func (TargetGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheck)(nil)).Elem()
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckOutput() TargetGroupHealthCheckOutput {
	return o
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckOutputWithContext(ctx context.Context) TargetGroupHealthCheckOutput {
	return o
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckPtrOutput() TargetGroupHealthCheckPtrOutput {
	return o.ToTargetGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheck) *TargetGroupHealthCheck {
		return &v
	}).(TargetGroupHealthCheckPtrOutput)
}
// Indicates whether  health checks are enabled. Defaults to true.
func (o TargetGroupHealthCheckOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
func (o TargetGroupHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
func (o TargetGroupHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckOutput) Matcher() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Matcher }).(pulumi.StringPtrOutput)
}

// The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
func (o TargetGroupHealthCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port to use to connect with the target. Valid values are either ports 1-65535, or `traffic-port`. Defaults to `traffic-port`.
func (o TargetGroupHealthCheckOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The protocol to use to connect with the target. Defaults to `HTTP`. Not applicable when `targetType` is `lambda`.
func (o TargetGroupHealthCheckOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
func (o TargetGroupHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
// * `matcher` (Required for HTTP/HTTPS ALB) The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
func (o TargetGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type TargetGroupHealthCheckPtrOutput struct { *pulumi.OutputState}

func (TargetGroupHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupHealthCheck)(nil)).Elem()
}

func (o TargetGroupHealthCheckPtrOutput) ToTargetGroupHealthCheckPtrOutput() TargetGroupHealthCheckPtrOutput {
	return o
}

func (o TargetGroupHealthCheckPtrOutput) ToTargetGroupHealthCheckPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckPtrOutput {
	return o
}

func (o TargetGroupHealthCheckPtrOutput) Elem() TargetGroupHealthCheckOutput {
	return o.ApplyT(func (v *TargetGroupHealthCheck) TargetGroupHealthCheck { return *v }).(TargetGroupHealthCheckOutput)
}

// Indicates whether  health checks are enabled. Defaults to true.
func (o TargetGroupHealthCheckPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
func (o TargetGroupHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
func (o TargetGroupHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckPtrOutput) Matcher() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Matcher }).(pulumi.StringPtrOutput)
}

// The destination for the health check request. Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
func (o TargetGroupHealthCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port to use to connect with the target. Valid values are either ports 1-65535, or `traffic-port`. Defaults to `traffic-port`.
func (o TargetGroupHealthCheckPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The protocol to use to connect with the target. Defaults to `HTTP`. Not applicable when `targetType` is `lambda`.
func (o TargetGroupHealthCheckPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
func (o TargetGroupHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
// * `matcher` (Required for HTTP/HTTPS ALB) The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
func (o TargetGroupHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v TargetGroupHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TargetGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(TargetGroupHealthCheckPtrOutput{})
}
