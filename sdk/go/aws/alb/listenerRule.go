// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ListenerRule struct {
	pulumi.CustomResourceState

	Actions     ListenerRuleActionArrayOutput    `pulumi:"actions"`
	Arn         pulumi.StringOutput              `pulumi:"arn"`
	Conditions  ListenerRuleConditionArrayOutput `pulumi:"conditions"`
	ListenerArn pulumi.StringOutput              `pulumi:"listenerArn"`
	Priority    pulumi.IntOutput                 `pulumi:"priority"`
}

// NewListenerRule registers a new resource with the given unique name, arguments, and options.
func NewListenerRule(ctx *pulumi.Context,
	name string, args *ListenerRuleArgs, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	if args == nil || args.Actions == nil {
		return nil, errors.New("missing required argument 'Actions'")
	}
	if args == nil || args.Conditions == nil {
		return nil, errors.New("missing required argument 'Conditions'")
	}
	if args == nil || args.ListenerArn == nil {
		return nil, errors.New("missing required argument 'ListenerArn'")
	}
	if args == nil {
		args = &ListenerRuleArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:applicationloadbalancing/listenerRule:ListenerRule"),
		},
	})
	opts = append(opts, aliases)
	var resource ListenerRule
	err := ctx.RegisterResource("aws:alb/listenerRule:ListenerRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerRule gets an existing ListenerRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerRuleState, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	var resource ListenerRule
	err := ctx.ReadResource("aws:alb/listenerRule:ListenerRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerRule resources.
type listenerRuleState struct {
	Actions     []ListenerRuleAction    `pulumi:"actions"`
	Arn         *string                 `pulumi:"arn"`
	Conditions  []ListenerRuleCondition `pulumi:"conditions"`
	ListenerArn *string                 `pulumi:"listenerArn"`
	Priority    *int                    `pulumi:"priority"`
}

type ListenerRuleState struct {
	Actions     ListenerRuleActionArrayInput
	Arn         pulumi.StringPtrInput
	Conditions  ListenerRuleConditionArrayInput
	ListenerArn pulumi.StringPtrInput
	Priority    pulumi.IntPtrInput
}

func (ListenerRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleState)(nil)).Elem()
}

type listenerRuleArgs struct {
	Actions     []ListenerRuleAction    `pulumi:"actions"`
	Conditions  []ListenerRuleCondition `pulumi:"conditions"`
	ListenerArn string                  `pulumi:"listenerArn"`
	Priority    *int                    `pulumi:"priority"`
}

// The set of arguments for constructing a ListenerRule resource.
type ListenerRuleArgs struct {
	Actions     ListenerRuleActionArrayInput
	Conditions  ListenerRuleConditionArrayInput
	ListenerArn pulumi.StringInput
	Priority    pulumi.IntPtrInput
}

func (ListenerRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleArgs)(nil)).Elem()
}
