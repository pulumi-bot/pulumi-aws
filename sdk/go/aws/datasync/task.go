// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Task struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput    `pulumi:"arn"`
	CloudwatchLogGroupArn  pulumi.StringPtrOutput `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn pulumi.StringOutput    `pulumi:"destinationLocationArn"`
	Name                   pulumi.StringOutput    `pulumi:"name"`
	Options                TaskOptionsPtrOutput   `pulumi:"options"`
	SourceLocationArn      pulumi.StringOutput    `pulumi:"sourceLocationArn"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil || args.DestinationLocationArn == nil {
		return nil, errors.New("missing required argument 'DestinationLocationArn'")
	}
	if args == nil || args.SourceLocationArn == nil {
		return nil, errors.New("missing required argument 'SourceLocationArn'")
	}
	if args == nil {
		args = &TaskArgs{}
	}
	var resource Task
	err := ctx.RegisterResource("aws:datasync/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("aws:datasync/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	Arn                    *string           `pulumi:"arn"`
	CloudwatchLogGroupArn  *string           `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn *string           `pulumi:"destinationLocationArn"`
	Name                   *string           `pulumi:"name"`
	Options                *TaskOptions      `pulumi:"options"`
	SourceLocationArn      *string           `pulumi:"sourceLocationArn"`
	Tags                   map[string]string `pulumi:"tags"`
}

type TaskState struct {
	Arn                    pulumi.StringPtrInput
	CloudwatchLogGroupArn  pulumi.StringPtrInput
	DestinationLocationArn pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Options                TaskOptionsPtrInput
	SourceLocationArn      pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	CloudwatchLogGroupArn  *string           `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn string            `pulumi:"destinationLocationArn"`
	Name                   *string           `pulumi:"name"`
	Options                *TaskOptions      `pulumi:"options"`
	SourceLocationArn      string            `pulumi:"sourceLocationArn"`
	Tags                   map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	CloudwatchLogGroupArn  pulumi.StringPtrInput
	DestinationLocationArn pulumi.StringInput
	Name                   pulumi.StringPtrInput
	Options                TaskOptionsPtrInput
	SourceLocationArn      pulumi.StringInput
	Tags                   pulumi.StringMapInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}
