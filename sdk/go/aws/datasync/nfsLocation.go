// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an NFS Location within AWS DataSync.
// 
// > **NOTE:** The DataSync Agents must be available before creating this resource.
type NfsLocation struct {
	s *pulumi.ResourceState
}

// NewNfsLocation registers a new resource with the given unique name, arguments, and options.
func NewNfsLocation(ctx *pulumi.Context,
	name string, args *NfsLocationArgs, opts ...pulumi.ResourceOpt) (*NfsLocation, error) {
	if args == nil || args.OnPremConfig == nil {
		return nil, errors.New("missing required argument 'OnPremConfig'")
	}
	if args == nil || args.ServerHostname == nil {
		return nil, errors.New("missing required argument 'ServerHostname'")
	}
	if args == nil || args.Subdirectory == nil {
		return nil, errors.New("missing required argument 'Subdirectory'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["onPremConfig"] = nil
		inputs["serverHostname"] = nil
		inputs["subdirectory"] = nil
		inputs["tags"] = nil
	} else {
		inputs["onPremConfig"] = args.OnPremConfig
		inputs["serverHostname"] = args.ServerHostname
		inputs["subdirectory"] = args.Subdirectory
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	inputs["uri"] = nil
	s, err := ctx.RegisterResource("aws:datasync/nfsLocation:NfsLocation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NfsLocation{s: s}, nil
}

// GetNfsLocation gets an existing NfsLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsLocation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NfsLocationState, opts ...pulumi.ResourceOpt) (*NfsLocation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["onPremConfig"] = state.OnPremConfig
		inputs["serverHostname"] = state.ServerHostname
		inputs["subdirectory"] = state.Subdirectory
		inputs["tags"] = state.Tags
		inputs["uri"] = state.Uri
	}
	s, err := ctx.ReadResource("aws:datasync/nfsLocation:NfsLocation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NfsLocation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NfsLocation) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NfsLocation) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (r *NfsLocation) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Configuration block containing information for connecting to the NFS File System.
func (r *NfsLocation) OnPremConfig() *pulumi.Output {
	return r.s.State["onPremConfig"]
}

// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
func (r *NfsLocation) ServerHostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverHostname"])
}

// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
func (r *NfsLocation) Subdirectory() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subdirectory"])
}

// Key-value pairs of resource tags to assign to the DataSync Location.
func (r *NfsLocation) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

func (r *NfsLocation) Uri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["uri"])
}

// Input properties used for looking up and filtering NfsLocation resources.
type NfsLocationState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn interface{}
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig interface{}
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname interface{}
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory interface{}
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags interface{}
	Uri interface{}
}

// The set of arguments for constructing a NfsLocation resource.
type NfsLocationArgs struct {
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig interface{}
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname interface{}
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory interface{}
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags interface{}
}
