// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NfsLocation struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput           `pulumi:"arn"`
	OnPremConfig   NfsLocationOnPremConfigOutput `pulumi:"onPremConfig"`
	ServerHostname pulumi.StringOutput           `pulumi:"serverHostname"`
	Subdirectory   pulumi.StringOutput           `pulumi:"subdirectory"`
	Tags           pulumi.StringMapOutput        `pulumi:"tags"`
	Uri            pulumi.StringOutput           `pulumi:"uri"`
}

// NewNfsLocation registers a new resource with the given unique name, arguments, and options.
func NewNfsLocation(ctx *pulumi.Context,
	name string, args *NfsLocationArgs, opts ...pulumi.ResourceOption) (*NfsLocation, error) {
	if args == nil || args.OnPremConfig == nil {
		return nil, errors.New("missing required argument 'OnPremConfig'")
	}
	if args == nil || args.ServerHostname == nil {
		return nil, errors.New("missing required argument 'ServerHostname'")
	}
	if args == nil || args.Subdirectory == nil {
		return nil, errors.New("missing required argument 'Subdirectory'")
	}
	if args == nil {
		args = &NfsLocationArgs{}
	}
	var resource NfsLocation
	err := ctx.RegisterResource("aws:datasync/nfsLocation:NfsLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNfsLocation gets an existing NfsLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NfsLocationState, opts ...pulumi.ResourceOption) (*NfsLocation, error) {
	var resource NfsLocation
	err := ctx.ReadResource("aws:datasync/nfsLocation:NfsLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NfsLocation resources.
type nfsLocationState struct {
	Arn            *string                  `pulumi:"arn"`
	OnPremConfig   *NfsLocationOnPremConfig `pulumi:"onPremConfig"`
	ServerHostname *string                  `pulumi:"serverHostname"`
	Subdirectory   *string                  `pulumi:"subdirectory"`
	Tags           map[string]string        `pulumi:"tags"`
	Uri            *string                  `pulumi:"uri"`
}

type NfsLocationState struct {
	Arn            pulumi.StringPtrInput
	OnPremConfig   NfsLocationOnPremConfigPtrInput
	ServerHostname pulumi.StringPtrInput
	Subdirectory   pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	Uri            pulumi.StringPtrInput
}

func (NfsLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsLocationState)(nil)).Elem()
}

type nfsLocationArgs struct {
	OnPremConfig   NfsLocationOnPremConfig `pulumi:"onPremConfig"`
	ServerHostname string                  `pulumi:"serverHostname"`
	Subdirectory   string                  `pulumi:"subdirectory"`
	Tags           map[string]string       `pulumi:"tags"`
}

// The set of arguments for constructing a NfsLocation resource.
type NfsLocationArgs struct {
	OnPremConfig   NfsLocationOnPremConfigInput
	ServerHostname pulumi.StringInput
	Subdirectory   pulumi.StringInput
	Tags           pulumi.StringMapInput
}

func (NfsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsLocationArgs)(nil)).Elem()
}
