// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type S3Location struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput      `pulumi:"arn"`
	S3BucketArn  pulumi.StringOutput      `pulumi:"s3BucketArn"`
	S3Config     S3LocationS3ConfigOutput `pulumi:"s3Config"`
	Subdirectory pulumi.StringOutput      `pulumi:"subdirectory"`
	Tags         pulumi.StringMapOutput   `pulumi:"tags"`
	Uri          pulumi.StringOutput      `pulumi:"uri"`
}

// NewS3Location registers a new resource with the given unique name, arguments, and options.
func NewS3Location(ctx *pulumi.Context,
	name string, args *S3LocationArgs, opts ...pulumi.ResourceOption) (*S3Location, error) {
	if args == nil || args.S3BucketArn == nil {
		return nil, errors.New("missing required argument 'S3BucketArn'")
	}
	if args == nil || args.S3Config == nil {
		return nil, errors.New("missing required argument 'S3Config'")
	}
	if args == nil || args.Subdirectory == nil {
		return nil, errors.New("missing required argument 'Subdirectory'")
	}
	if args == nil {
		args = &S3LocationArgs{}
	}
	var resource S3Location
	err := ctx.RegisterResource("aws:datasync/s3Location:S3Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Location gets an existing S3Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Location(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3LocationState, opts ...pulumi.ResourceOption) (*S3Location, error) {
	var resource S3Location
	err := ctx.ReadResource("aws:datasync/s3Location:S3Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Location resources.
type s3locationState struct {
	Arn          *string             `pulumi:"arn"`
	S3BucketArn  *string             `pulumi:"s3BucketArn"`
	S3Config     *S3LocationS3Config `pulumi:"s3Config"`
	Subdirectory *string             `pulumi:"subdirectory"`
	Tags         map[string]string   `pulumi:"tags"`
	Uri          *string             `pulumi:"uri"`
}

type S3LocationState struct {
	Arn          pulumi.StringPtrInput
	S3BucketArn  pulumi.StringPtrInput
	S3Config     S3LocationS3ConfigPtrInput
	Subdirectory pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	Uri          pulumi.StringPtrInput
}

func (S3LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationState)(nil)).Elem()
}

type s3locationArgs struct {
	S3BucketArn  string             `pulumi:"s3BucketArn"`
	S3Config     S3LocationS3Config `pulumi:"s3Config"`
	Subdirectory string             `pulumi:"subdirectory"`
	Tags         map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a S3Location resource.
type S3LocationArgs struct {
	S3BucketArn  pulumi.StringInput
	S3Config     S3LocationS3ConfigInput
	Subdirectory pulumi.StringInput
	Tags         pulumi.StringMapInput
}

func (S3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationArgs)(nil)).Elem()
}
