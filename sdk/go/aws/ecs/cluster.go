// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                               pulumi.StringOutput                               `pulumi:"arn"`
	CapacityProviders                 pulumi.StringArrayOutput                          `pulumi:"capacityProviders"`
	DefaultCapacityProviderStrategies ClusterDefaultCapacityProviderStrategyArrayOutput `pulumi:"defaultCapacityProviderStrategies"`
	Name                              pulumi.StringOutput                               `pulumi:"name"`
	Settings                          ClusterSettingArrayOutput                         `pulumi:"settings"`
	Tags                              pulumi.StringMapOutput                            `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:ecs/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:ecs/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                               *string                                  `pulumi:"arn"`
	CapacityProviders                 []string                                 `pulumi:"capacityProviders"`
	DefaultCapacityProviderStrategies []ClusterDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
	Name                              *string                                  `pulumi:"name"`
	Settings                          []ClusterSetting                         `pulumi:"settings"`
	Tags                              map[string]string                        `pulumi:"tags"`
}

type ClusterState struct {
	Arn                               pulumi.StringPtrInput
	CapacityProviders                 pulumi.StringArrayInput
	DefaultCapacityProviderStrategies ClusterDefaultCapacityProviderStrategyArrayInput
	Name                              pulumi.StringPtrInput
	Settings                          ClusterSettingArrayInput
	Tags                              pulumi.StringMapInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	CapacityProviders                 []string                                 `pulumi:"capacityProviders"`
	DefaultCapacityProviderStrategies []ClusterDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
	Name                              *string                                  `pulumi:"name"`
	Settings                          []ClusterSetting                         `pulumi:"settings"`
	Tags                              map[string]string                        `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	CapacityProviders                 pulumi.StringArrayInput
	DefaultCapacityProviderStrategies ClusterDefaultCapacityProviderStrategyArrayInput
	Name                              pulumi.StringPtrInput
	Settings                          ClusterSettingArrayInput
	Tags                              pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
