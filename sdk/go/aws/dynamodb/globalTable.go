// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GlobalTable struct {
	pulumi.CustomResourceState

	Arn      pulumi.StringOutput           `pulumi:"arn"`
	Name     pulumi.StringOutput           `pulumi:"name"`
	Replicas GlobalTableReplicaArrayOutput `pulumi:"replicas"`
}

// NewGlobalTable registers a new resource with the given unique name, arguments, and options.
func NewGlobalTable(ctx *pulumi.Context,
	name string, args *GlobalTableArgs, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	if args == nil || args.Replicas == nil {
		return nil, errors.New("missing required argument 'Replicas'")
	}
	if args == nil {
		args = &GlobalTableArgs{}
	}
	var resource GlobalTable
	err := ctx.RegisterResource("aws:dynamodb/globalTable:GlobalTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalTable gets an existing GlobalTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalTableState, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	var resource GlobalTable
	err := ctx.ReadResource("aws:dynamodb/globalTable:GlobalTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalTable resources.
type globalTableState struct {
	Arn      *string              `pulumi:"arn"`
	Name     *string              `pulumi:"name"`
	Replicas []GlobalTableReplica `pulumi:"replicas"`
}

type GlobalTableState struct {
	Arn      pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	Replicas GlobalTableReplicaArrayInput
}

func (GlobalTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalTableState)(nil)).Elem()
}

type globalTableArgs struct {
	Name     *string              `pulumi:"name"`
	Replicas []GlobalTableReplica `pulumi:"replicas"`
}

// The set of arguments for constructing a GlobalTable resource.
type GlobalTableArgs struct {
	Name     pulumi.StringPtrInput
	Replicas GlobalTableReplicaArrayInput
}

func (GlobalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalTableArgs)(nil)).Elem()
}
