// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TablePointInTimeRecovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TablePointInTimeRecovery struct {
	// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided then this defaults to `false`.
	Enabled bool `pulumi:"enabled"`
}

type TablePointInTimeRecoveryInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput
	ToTablePointInTimeRecoveryOutputWithContext(context.Context) TablePointInTimeRecoveryOutput
}

type TablePointInTimeRecoveryArgs struct {
	// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided then this defaults to `false`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput).ToTablePointInTimeRecoveryPtrOutputWithContext(ctx)
}

type TablePointInTimeRecoveryPtrInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput
	ToTablePointInTimeRecoveryPtrOutputWithContext(context.Context) TablePointInTimeRecoveryPtrOutput
}

type tablePointInTimeRecoveryPtrType TablePointInTimeRecoveryArgs

func TablePointInTimeRecoveryPtr(v *TablePointInTimeRecoveryArgs) TablePointInTimeRecoveryPtrInput {	return (*tablePointInTimeRecoveryPtrType)(v)
}

func (*tablePointInTimeRecoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryPtrOutput)
}

type TablePointInTimeRecoveryOutput struct { *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o.ApplyT(func(v TablePointInTimeRecovery) *TablePointInTimeRecovery {
		return &v
	}).(TablePointInTimeRecoveryPtrOutput)
}
// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided then this defaults to `false`.
func (o TablePointInTimeRecoveryOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func (v TablePointInTimeRecovery) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type TablePointInTimeRecoveryPtrOutput struct { *pulumi.OutputState}

func (TablePointInTimeRecoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) Elem() TablePointInTimeRecoveryOutput {
	return o.ApplyT(func (v *TablePointInTimeRecovery) TablePointInTimeRecovery { return *v }).(TablePointInTimeRecoveryOutput)
}

// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided then this defaults to `false`.
func (o TablePointInTimeRecoveryPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func (v TablePointInTimeRecovery) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryPtrOutput{})
}
