// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GlobalTableReplica struct {
	// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
	RegionName string `pulumi:"regionName"`
}

// GlobalTableReplicaInput is an input type that accepts GlobalTableReplicaArgs and GlobalTableReplicaOutput values.
// You can construct a concrete instance of `GlobalTableReplicaInput` via:
//
//          GlobalTableReplicaArgs{...}
type GlobalTableReplicaInput interface {
	pulumi.Input

	ToGlobalTableReplicaOutput() GlobalTableReplicaOutput
	ToGlobalTableReplicaOutputWithContext(context.Context) GlobalTableReplicaOutput
}

type GlobalTableReplicaArgs struct {
	// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GlobalTableReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return i.ToGlobalTableReplicaOutputWithContext(context.Background())
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTableReplicaOutput)
}

// GlobalTableReplicaArrayInput is an input type that accepts GlobalTableReplicaArray and GlobalTableReplicaArrayOutput values.
// You can construct a concrete instance of `GlobalTableReplicaArrayInput` via:
//
//          GlobalTableReplicaArray{ GlobalTableReplicaArgs{...} }
type GlobalTableReplicaArrayInput interface {
	pulumi.Input

	ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput
	ToGlobalTableReplicaArrayOutputWithContext(context.Context) GlobalTableReplicaArrayOutput
}

type GlobalTableReplicaArray []GlobalTableReplicaInput

func (GlobalTableReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalTableReplica)(nil)).Elem()
}

func (i GlobalTableReplicaArray) ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput {
	return i.ToGlobalTableReplicaArrayOutputWithContext(context.Background())
}

func (i GlobalTableReplicaArray) ToGlobalTableReplicaArrayOutputWithContext(ctx context.Context) GlobalTableReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTableReplicaArrayOutput)
}

type GlobalTableReplicaOutput struct{ *pulumi.OutputState }

func (GlobalTableReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return o
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return o
}

// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
func (o GlobalTableReplicaOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalTableReplica) string { return v.RegionName }).(pulumi.StringOutput)
}

type GlobalTableReplicaArrayOutput struct{ *pulumi.OutputState }

func (GlobalTableReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalTableReplica)(nil)).Elem()
}

func (o GlobalTableReplicaArrayOutput) ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput {
	return o
}

func (o GlobalTableReplicaArrayOutput) ToGlobalTableReplicaArrayOutputWithContext(ctx context.Context) GlobalTableReplicaArrayOutput {
	return o
}

func (o GlobalTableReplicaArrayOutput) Index(i pulumi.IntInput) GlobalTableReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalTableReplica {
		return vs[0].([]GlobalTableReplica)[vs[1].(int)]
	}).(GlobalTableReplicaOutput)
}

type TableAttribute struct {
	// The name of the index
	Name string `pulumi:"name"`
	// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
	Type string `pulumi:"type"`
}

// TableAttributeInput is an input type that accepts TableAttributeArgs and TableAttributeOutput values.
// You can construct a concrete instance of `TableAttributeInput` via:
//
//          TableAttributeArgs{...}
type TableAttributeInput interface {
	pulumi.Input

	ToTableAttributeOutput() TableAttributeOutput
	ToTableAttributeOutputWithContext(context.Context) TableAttributeOutput
}

type TableAttributeArgs struct {
	// The name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (i TableAttributeArgs) ToTableAttributeOutput() TableAttributeOutput {
	return i.ToTableAttributeOutputWithContext(context.Background())
}

func (i TableAttributeArgs) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAttributeOutput)
}

// TableAttributeArrayInput is an input type that accepts TableAttributeArray and TableAttributeArrayOutput values.
// You can construct a concrete instance of `TableAttributeArrayInput` via:
//
//          TableAttributeArray{ TableAttributeArgs{...} }
type TableAttributeArrayInput interface {
	pulumi.Input

	ToTableAttributeArrayOutput() TableAttributeArrayOutput
	ToTableAttributeArrayOutputWithContext(context.Context) TableAttributeArrayOutput
}

type TableAttributeArray []TableAttributeInput

func (TableAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableAttribute)(nil)).Elem()
}

func (i TableAttributeArray) ToTableAttributeArrayOutput() TableAttributeArrayOutput {
	return i.ToTableAttributeArrayOutputWithContext(context.Background())
}

func (i TableAttributeArray) ToTableAttributeArrayOutputWithContext(ctx context.Context) TableAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAttributeArrayOutput)
}

type TableAttributeOutput struct{ *pulumi.OutputState }

func (TableAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (o TableAttributeOutput) ToTableAttributeOutput() TableAttributeOutput {
	return o
}

func (o TableAttributeOutput) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return o
}

// The name of the index
func (o TableAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
func (o TableAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type TableAttributeArrayOutput struct{ *pulumi.OutputState }

func (TableAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableAttribute)(nil)).Elem()
}

func (o TableAttributeArrayOutput) ToTableAttributeArrayOutput() TableAttributeArrayOutput {
	return o
}

func (o TableAttributeArrayOutput) ToTableAttributeArrayOutputWithContext(ctx context.Context) TableAttributeArrayOutput {
	return o
}

func (o TableAttributeArrayOutput) Index(i pulumi.IntInput) TableAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableAttribute {
		return vs[0].([]TableAttribute)[vs[1].(int)]
	}).(TableAttributeOutput)
}

type TableGlobalSecondaryIndex struct {
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey string `pulumi:"hashKey"`
	// The name of the index
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a
	// projection type; a list of attributes to project into the index. These
	// do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
	// where `ALL` projects every attribute into the index, `KEYS_ONLY`
	// projects just the hash and range key into the index, and `INCLUDE`
	// projects only the keys specified in the _non_key_attributes_
	// parameter.
	ProjectionType string `pulumi:"projectionType"`
	// The name of the range key; must be defined
	RangeKey *string `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity *int `pulumi:"readCapacity"`
	// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

// TableGlobalSecondaryIndexInput is an input type that accepts TableGlobalSecondaryIndexArgs and TableGlobalSecondaryIndexOutput values.
// You can construct a concrete instance of `TableGlobalSecondaryIndexInput` via:
//
//          TableGlobalSecondaryIndexArgs{...}
type TableGlobalSecondaryIndexInput interface {
	pulumi.Input

	ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput
	ToTableGlobalSecondaryIndexOutputWithContext(context.Context) TableGlobalSecondaryIndexOutput
}

type TableGlobalSecondaryIndexArgs struct {
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringInput `pulumi:"hashKey"`
	// The name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Only required with `INCLUDE` as a
	// projection type; a list of attributes to project into the index. These
	// do not need to be defined as attributes on the table.
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
	// where `ALL` projects every attribute into the index, `KEYS_ONLY`
	// projects just the hash and range key into the index, and `INCLUDE`
	// projects only the keys specified in the _non_key_attributes_
	// parameter.
	ProjectionType pulumi.StringInput `pulumi:"projectionType"`
	// The name of the range key; must be defined
	RangeKey pulumi.StringPtrInput `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumi.IntPtrInput `pulumi:"readCapacity"`
	// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumi.IntPtrInput `pulumi:"writeCapacity"`
}

func (TableGlobalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return i.ToTableGlobalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGlobalSecondaryIndexOutput)
}

// TableGlobalSecondaryIndexArrayInput is an input type that accepts TableGlobalSecondaryIndexArray and TableGlobalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `TableGlobalSecondaryIndexArrayInput` via:
//
//          TableGlobalSecondaryIndexArray{ TableGlobalSecondaryIndexArgs{...} }
type TableGlobalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput
	ToTableGlobalSecondaryIndexArrayOutputWithContext(context.Context) TableGlobalSecondaryIndexArrayOutput
}

type TableGlobalSecondaryIndexArray []TableGlobalSecondaryIndexInput

func (TableGlobalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableGlobalSecondaryIndex)(nil)).Elem()
}

func (i TableGlobalSecondaryIndexArray) ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput {
	return i.ToTableGlobalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i TableGlobalSecondaryIndexArray) ToTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGlobalSecondaryIndexArrayOutput)
}

type TableGlobalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableGlobalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return o
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return o
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (o TableGlobalSecondaryIndexOutput) HashKey() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.HashKey }).(pulumi.StringOutput)
}

// The name of the index
func (o TableGlobalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

// Only required with `INCLUDE` as a
// projection type; a list of attributes to project into the index. These
// do not need to be defined as attributes on the table.
func (o TableGlobalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
// where `ALL` projects every attribute into the index, `KEYS_ONLY`
// projects just the hash and range key into the index, and `INCLUDE`
// projects only the keys specified in the _non_key_attributes_
// parameter.
func (o TableGlobalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

// The name of the range key; must be defined
func (o TableGlobalSecondaryIndexOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *string { return v.RangeKey }).(pulumi.StringPtrOutput)
}

// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *int { return v.ReadCapacity }).(pulumi.IntPtrOutput)
}

// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *int { return v.WriteCapacity }).(pulumi.IntPtrOutput)
}

type TableGlobalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (TableGlobalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableGlobalSecondaryIndex)(nil)).Elem()
}

func (o TableGlobalSecondaryIndexArrayOutput) ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o TableGlobalSecondaryIndexArrayOutput) ToTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o TableGlobalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) TableGlobalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableGlobalSecondaryIndex {
		return vs[0].([]TableGlobalSecondaryIndex)[vs[1].(int)]
	}).(TableGlobalSecondaryIndexOutput)
}

type TableLocalSecondaryIndex struct {
	// The name of the index
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a
	// projection type; a list of attributes to project into the index. These
	// do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
	// where `ALL` projects every attribute into the index, `KEYS_ONLY`
	// projects just the hash and range key into the index, and `INCLUDE`
	// projects only the keys specified in the _non_key_attributes_
	// parameter.
	ProjectionType string `pulumi:"projectionType"`
	// The name of the range key; must be defined
	RangeKey string `pulumi:"rangeKey"`
}

// TableLocalSecondaryIndexInput is an input type that accepts TableLocalSecondaryIndexArgs and TableLocalSecondaryIndexOutput values.
// You can construct a concrete instance of `TableLocalSecondaryIndexInput` via:
//
//          TableLocalSecondaryIndexArgs{...}
type TableLocalSecondaryIndexInput interface {
	pulumi.Input

	ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput
	ToTableLocalSecondaryIndexOutputWithContext(context.Context) TableLocalSecondaryIndexOutput
}

type TableLocalSecondaryIndexArgs struct {
	// The name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Only required with `INCLUDE` as a
	// projection type; a list of attributes to project into the index. These
	// do not need to be defined as attributes on the table.
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
	// where `ALL` projects every attribute into the index, `KEYS_ONLY`
	// projects just the hash and range key into the index, and `INCLUDE`
	// projects only the keys specified in the _non_key_attributes_
	// parameter.
	ProjectionType pulumi.StringInput `pulumi:"projectionType"`
	// The name of the range key; must be defined
	RangeKey pulumi.StringInput `pulumi:"rangeKey"`
}

func (TableLocalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return i.ToTableLocalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableLocalSecondaryIndexOutput)
}

// TableLocalSecondaryIndexArrayInput is an input type that accepts TableLocalSecondaryIndexArray and TableLocalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `TableLocalSecondaryIndexArrayInput` via:
//
//          TableLocalSecondaryIndexArray{ TableLocalSecondaryIndexArgs{...} }
type TableLocalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput
	ToTableLocalSecondaryIndexArrayOutputWithContext(context.Context) TableLocalSecondaryIndexArrayOutput
}

type TableLocalSecondaryIndexArray []TableLocalSecondaryIndexInput

func (TableLocalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableLocalSecondaryIndex)(nil)).Elem()
}

func (i TableLocalSecondaryIndexArray) ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput {
	return i.ToTableLocalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i TableLocalSecondaryIndexArray) ToTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableLocalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableLocalSecondaryIndexArrayOutput)
}

type TableLocalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableLocalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return o
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return o
}

// The name of the index
func (o TableLocalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

// Only required with `INCLUDE` as a
// projection type; a list of attributes to project into the index. These
// do not need to be defined as attributes on the table.
func (o TableLocalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
// where `ALL` projects every attribute into the index, `KEYS_ONLY`
// projects just the hash and range key into the index, and `INCLUDE`
// projects only the keys specified in the _non_key_attributes_
// parameter.
func (o TableLocalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

// The name of the range key; must be defined
func (o TableLocalSecondaryIndexOutput) RangeKey() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.RangeKey }).(pulumi.StringOutput)
}

type TableLocalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (TableLocalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableLocalSecondaryIndex)(nil)).Elem()
}

func (o TableLocalSecondaryIndexArrayOutput) ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput {
	return o
}

func (o TableLocalSecondaryIndexArrayOutput) ToTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableLocalSecondaryIndexArrayOutput {
	return o
}

func (o TableLocalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) TableLocalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableLocalSecondaryIndex {
		return vs[0].([]TableLocalSecondaryIndex)[vs[1].(int)]
	}).(TableLocalSecondaryIndexOutput)
}

type TablePointInTimeRecovery struct {
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled bool `pulumi:"enabled"`
}

// TablePointInTimeRecoveryInput is an input type that accepts TablePointInTimeRecoveryArgs and TablePointInTimeRecoveryOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryInput` via:
//
//          TablePointInTimeRecoveryArgs{...}
type TablePointInTimeRecoveryInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput
	ToTablePointInTimeRecoveryOutputWithContext(context.Context) TablePointInTimeRecoveryOutput
}

type TablePointInTimeRecoveryArgs struct {
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput).ToTablePointInTimeRecoveryPtrOutputWithContext(ctx)
}

// TablePointInTimeRecoveryPtrInput is an input type that accepts TablePointInTimeRecoveryArgs, TablePointInTimeRecoveryPtr and TablePointInTimeRecoveryPtrOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryPtrInput` via:
//
//          TablePointInTimeRecoveryArgs{...}
//
//  or:
//
//          nil
type TablePointInTimeRecoveryPtrInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput
	ToTablePointInTimeRecoveryPtrOutputWithContext(context.Context) TablePointInTimeRecoveryPtrOutput
}

type tablePointInTimeRecoveryPtrType TablePointInTimeRecoveryArgs

func TablePointInTimeRecoveryPtr(v *TablePointInTimeRecoveryArgs) TablePointInTimeRecoveryPtrInput {
	return (*tablePointInTimeRecoveryPtrType)(v)
}

func (*tablePointInTimeRecoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryPtrOutput)
}

type TablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o.ApplyT(func(v TablePointInTimeRecovery) *TablePointInTimeRecovery {
		return &v
	}).(TablePointInTimeRecoveryPtrOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TablePointInTimeRecoveryOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v TablePointInTimeRecovery) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type TablePointInTimeRecoveryPtrOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) Elem() TablePointInTimeRecoveryOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) TablePointInTimeRecovery { return *v }).(TablePointInTimeRecoveryOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TablePointInTimeRecoveryPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type TableReplica struct {
	// Region name of the replica.
	RegionName string `pulumi:"regionName"`
}

// TableReplicaInput is an input type that accepts TableReplicaArgs and TableReplicaOutput values.
// You can construct a concrete instance of `TableReplicaInput` via:
//
//          TableReplicaArgs{...}
type TableReplicaInput interface {
	pulumi.Input

	ToTableReplicaOutput() TableReplicaOutput
	ToTableReplicaOutputWithContext(context.Context) TableReplicaOutput
}

type TableReplicaArgs struct {
	// Region name of the replica.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (TableReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplica)(nil)).Elem()
}

func (i TableReplicaArgs) ToTableReplicaOutput() TableReplicaOutput {
	return i.ToTableReplicaOutputWithContext(context.Background())
}

func (i TableReplicaArgs) ToTableReplicaOutputWithContext(ctx context.Context) TableReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaOutput)
}

// TableReplicaArrayInput is an input type that accepts TableReplicaArray and TableReplicaArrayOutput values.
// You can construct a concrete instance of `TableReplicaArrayInput` via:
//
//          TableReplicaArray{ TableReplicaArgs{...} }
type TableReplicaArrayInput interface {
	pulumi.Input

	ToTableReplicaArrayOutput() TableReplicaArrayOutput
	ToTableReplicaArrayOutputWithContext(context.Context) TableReplicaArrayOutput
}

type TableReplicaArray []TableReplicaInput

func (TableReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplica)(nil)).Elem()
}

func (i TableReplicaArray) ToTableReplicaArrayOutput() TableReplicaArrayOutput {
	return i.ToTableReplicaArrayOutputWithContext(context.Background())
}

func (i TableReplicaArray) ToTableReplicaArrayOutputWithContext(ctx context.Context) TableReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaArrayOutput)
}

type TableReplicaOutput struct{ *pulumi.OutputState }

func (TableReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplica)(nil)).Elem()
}

func (o TableReplicaOutput) ToTableReplicaOutput() TableReplicaOutput {
	return o
}

func (o TableReplicaOutput) ToTableReplicaOutputWithContext(ctx context.Context) TableReplicaOutput {
	return o
}

// Region name of the replica.
func (o TableReplicaOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplica) string { return v.RegionName }).(pulumi.StringOutput)
}

type TableReplicaArrayOutput struct{ *pulumi.OutputState }

func (TableReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplica)(nil)).Elem()
}

func (o TableReplicaArrayOutput) ToTableReplicaArrayOutput() TableReplicaArrayOutput {
	return o
}

func (o TableReplicaArrayOutput) ToTableReplicaArrayOutputWithContext(ctx context.Context) TableReplicaArrayOutput {
	return o
}

func (o TableReplicaArrayOutput) Index(i pulumi.IntInput) TableReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReplica {
		return vs[0].([]TableReplica)[vs[1].(int)]
	}).(TableReplicaOutput)
}

type TableServerSideEncryption struct {
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled bool `pulumi:"enabled"`
	// The ARN of the CMK that should be used for the AWS KMS encryption.
	// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

// TableServerSideEncryptionInput is an input type that accepts TableServerSideEncryptionArgs and TableServerSideEncryptionOutput values.
// You can construct a concrete instance of `TableServerSideEncryptionInput` via:
//
//          TableServerSideEncryptionArgs{...}
type TableServerSideEncryptionInput interface {
	pulumi.Input

	ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput
	ToTableServerSideEncryptionOutputWithContext(context.Context) TableServerSideEncryptionOutput
}

type TableServerSideEncryptionArgs struct {
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ARN of the CMK that should be used for the AWS KMS encryption.
	// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (TableServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return i.ToTableServerSideEncryptionOutputWithContext(context.Background())
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionOutput)
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return i.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionOutput).ToTableServerSideEncryptionPtrOutputWithContext(ctx)
}

// TableServerSideEncryptionPtrInput is an input type that accepts TableServerSideEncryptionArgs, TableServerSideEncryptionPtr and TableServerSideEncryptionPtrOutput values.
// You can construct a concrete instance of `TableServerSideEncryptionPtrInput` via:
//
//          TableServerSideEncryptionArgs{...}
//
//  or:
//
//          nil
type TableServerSideEncryptionPtrInput interface {
	pulumi.Input

	ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput
	ToTableServerSideEncryptionPtrOutputWithContext(context.Context) TableServerSideEncryptionPtrOutput
}

type tableServerSideEncryptionPtrType TableServerSideEncryptionArgs

func TableServerSideEncryptionPtr(v *TableServerSideEncryptionArgs) TableServerSideEncryptionPtrInput {
	return (*tableServerSideEncryptionPtrType)(v)
}

func (*tableServerSideEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableServerSideEncryption)(nil)).Elem()
}

func (i *tableServerSideEncryptionPtrType) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return i.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i *tableServerSideEncryptionPtrType) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionPtrOutput)
}

type TableServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (TableServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return o.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return o.ApplyT(func(v TableServerSideEncryption) *TableServerSideEncryption {
		return &v
	}).(TableServerSideEncryptionPtrOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TableServerSideEncryptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v TableServerSideEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ARN of the CMK that should be used for the AWS KMS encryption.
// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
func (o TableServerSideEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableServerSideEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type TableServerSideEncryptionPtrOutput struct{ *pulumi.OutputState }

func (TableServerSideEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableServerSideEncryption)(nil)).Elem()
}

func (o TableServerSideEncryptionPtrOutput) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return o
}

func (o TableServerSideEncryptionPtrOutput) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return o
}

func (o TableServerSideEncryptionPtrOutput) Elem() TableServerSideEncryptionOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) TableServerSideEncryption { return *v }).(TableServerSideEncryptionOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TableServerSideEncryptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ARN of the CMK that should be used for the AWS KMS encryption.
// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
func (o TableServerSideEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type TableTtl struct {
	// The name of the table attribute to store the TTL timestamp in.
	AttributeName string `pulumi:"attributeName"`
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled *bool `pulumi:"enabled"`
}

// TableTtlInput is an input type that accepts TableTtlArgs and TableTtlOutput values.
// You can construct a concrete instance of `TableTtlInput` via:
//
//          TableTtlArgs{...}
type TableTtlInput interface {
	pulumi.Input

	ToTableTtlOutput() TableTtlOutput
	ToTableTtlOutputWithContext(context.Context) TableTtlOutput
}

type TableTtlArgs struct {
	// The name of the table attribute to store the TTL timestamp in.
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Indicates whether ttl is enabled (true) or disabled (false).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (TableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (i TableTtlArgs) ToTableTtlOutput() TableTtlOutput {
	return i.ToTableTtlOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput)
}

func (i TableTtlArgs) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput).ToTableTtlPtrOutputWithContext(ctx)
}

// TableTtlPtrInput is an input type that accepts TableTtlArgs, TableTtlPtr and TableTtlPtrOutput values.
// You can construct a concrete instance of `TableTtlPtrInput` via:
//
//          TableTtlArgs{...}
//
//  or:
//
//          nil
type TableTtlPtrInput interface {
	pulumi.Input

	ToTableTtlPtrOutput() TableTtlPtrOutput
	ToTableTtlPtrOutputWithContext(context.Context) TableTtlPtrOutput
}

type tableTtlPtrType TableTtlArgs

func TableTtlPtr(v *TableTtlArgs) TableTtlPtrInput {
	return (*tableTtlPtrType)(v)
}

func (*tableTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (i *tableTtlPtrType) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i *tableTtlPtrType) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlPtrOutput)
}

type TableTtlOutput struct{ *pulumi.OutputState }

func (TableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (o TableTtlOutput) ToTableTtlOutput() TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o.ToTableTtlPtrOutputWithContext(context.Background())
}

func (o TableTtlOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o.ApplyT(func(v TableTtl) *TableTtl {
		return &v
	}).(TableTtlPtrOutput)
}

// The name of the table attribute to store the TTL timestamp in.
func (o TableTtlOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v TableTtl) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TableTtlOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTtl) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type TableTtlPtrOutput struct{ *pulumi.OutputState }

func (TableTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) Elem() TableTtlOutput {
	return o.ApplyT(func(v *TableTtl) TableTtl { return *v }).(TableTtlOutput)
}

// The name of the table attribute to store the TTL timestamp in.
func (o TableTtlPtrOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTtl) *string {
		if v == nil {
			return nil
		}
		return &v.AttributeName
	}).(pulumi.StringPtrOutput)
}

// Indicates whether ttl is enabled (true) or disabled (false).
func (o TableTtlPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableTtl) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GetTableAttribute struct {
	// The name of the DynamoDB table.
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

type GetTableGlobalSecondaryIndex struct {
	HashKey string `pulumi:"hashKey"`
	// The name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
	ReadCapacity     int      `pulumi:"readCapacity"`
	WriteCapacity    int      `pulumi:"writeCapacity"`
}

type GetTableLocalSecondaryIndex struct {
	// The name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
}

type GetTablePointInTimeRecovery struct {
	Enabled bool `pulumi:"enabled"`
}

type GetTableReplica struct {
	RegionName string `pulumi:"regionName"`
}

type GetTableServerSideEncryption struct {
	Enabled   bool   `pulumi:"enabled"`
	KmsKeyArn string `pulumi:"kmsKeyArn"`
}

type GetTableTtl struct {
	AttributeName string `pulumi:"attributeName"`
	Enabled       bool   `pulumi:"enabled"`
}

func init() {
	pulumi.RegisterOutputType(GlobalTableReplicaOutput{})
	pulumi.RegisterOutputType(GlobalTableReplicaArrayOutput{})
	pulumi.RegisterOutputType(TableAttributeOutput{})
	pulumi.RegisterOutputType(TableAttributeArrayOutput{})
	pulumi.RegisterOutputType(TableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TableGlobalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(TableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TableLocalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryPtrOutput{})
	pulumi.RegisterOutputType(TableReplicaOutput{})
	pulumi.RegisterOutputType(TableReplicaArrayOutput{})
	pulumi.RegisterOutputType(TableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(TableServerSideEncryptionPtrOutput{})
	pulumi.RegisterOutputType(TableTtlOutput{})
	pulumi.RegisterOutputType(TableTtlPtrOutput{})
	pulumi.RegisterOutputType(GetTableAttributeOutput{})
	pulumi.RegisterOutputType(GetTableAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetTableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTableGlobalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(GetTableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTableLocalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(GetTablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(GetTableReplicaOutput{})
	pulumi.RegisterOutputType(GetTableReplicaArrayOutput{})
	pulumi.RegisterOutputType(GetTableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(GetTableTtlOutput{})
}
