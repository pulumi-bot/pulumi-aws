// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Repository struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                           `pulumi:"arn"`
	EncryptionConfigurations   RepositoryEncryptionConfigurationArrayOutput  `pulumi:"encryptionConfigurations"`
	ImageScanningConfiguration RepositoryImageScanningConfigurationPtrOutput `pulumi:"imageScanningConfiguration"`
	ImageTagMutability         pulumi.StringPtrOutput                        `pulumi:"imageTagMutability"`
	Name                       pulumi.StringOutput                           `pulumi:"name"`
	RegistryId                 pulumi.StringOutput                           `pulumi:"registryId"`
	RepositoryUrl              pulumi.StringOutput                           `pulumi:"repositoryUrl"`
	Tags                       pulumi.StringMapOutput                        `pulumi:"tags"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		args = &RepositoryArgs{}
	}
	var resource Repository
	err := ctx.RegisterResource("aws:ecr/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("aws:ecr/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	Arn                        *string                               `pulumi:"arn"`
	EncryptionConfigurations   []RepositoryEncryptionConfiguration   `pulumi:"encryptionConfigurations"`
	ImageScanningConfiguration *RepositoryImageScanningConfiguration `pulumi:"imageScanningConfiguration"`
	ImageTagMutability         *string                               `pulumi:"imageTagMutability"`
	Name                       *string                               `pulumi:"name"`
	RegistryId                 *string                               `pulumi:"registryId"`
	RepositoryUrl              *string                               `pulumi:"repositoryUrl"`
	Tags                       map[string]string                     `pulumi:"tags"`
}

type RepositoryState struct {
	Arn                        pulumi.StringPtrInput
	EncryptionConfigurations   RepositoryEncryptionConfigurationArrayInput
	ImageScanningConfiguration RepositoryImageScanningConfigurationPtrInput
	ImageTagMutability         pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	RegistryId                 pulumi.StringPtrInput
	RepositoryUrl              pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	EncryptionConfigurations   []RepositoryEncryptionConfiguration   `pulumi:"encryptionConfigurations"`
	ImageScanningConfiguration *RepositoryImageScanningConfiguration `pulumi:"imageScanningConfiguration"`
	ImageTagMutability         *string                               `pulumi:"imageTagMutability"`
	Name                       *string                               `pulumi:"name"`
	Tags                       map[string]string                     `pulumi:"tags"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	EncryptionConfigurations   RepositoryEncryptionConfigurationArrayInput
	ImageScanningConfiguration RepositoryImageScanningConfigurationPtrInput
	ImageTagMutability         pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}
