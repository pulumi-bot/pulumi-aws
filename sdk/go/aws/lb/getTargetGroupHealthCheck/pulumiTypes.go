// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package getTargetGroupHealthCheck

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GetTargetGroupHealthCheck struct {
	Enabled bool `pulumi:"enabled"`
	HealthyThreshold int `pulumi:"healthyThreshold"`
	Interval int `pulumi:"interval"`
	Matcher string `pulumi:"matcher"`
	Path string `pulumi:"path"`
	Port string `pulumi:"port"`
	Protocol string `pulumi:"protocol"`
	Timeout int `pulumi:"timeout"`
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type GetTargetGroupHealthCheckInput interface {
	pulumi.Input

	ToGetTargetGroupHealthCheckOutput() GetTargetGroupHealthCheckOutput
	ToGetTargetGroupHealthCheckOutputWithContext(context.Context) GetTargetGroupHealthCheckOutput
}

type GetTargetGroupHealthCheckArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	Interval pulumi.IntInput `pulumi:"interval"`
	Matcher pulumi.StringInput `pulumi:"matcher"`
	Path pulumi.StringInput `pulumi:"path"`
	Port pulumi.StringInput `pulumi:"port"`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	Timeout pulumi.IntInput `pulumi:"timeout"`
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (GetTargetGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupHealthCheck)(nil)).Elem()
}

func (i GetTargetGroupHealthCheckArgs) ToGetTargetGroupHealthCheckOutput() GetTargetGroupHealthCheckOutput {
	return i.ToGetTargetGroupHealthCheckOutputWithContext(context.Background())
}

func (i GetTargetGroupHealthCheckArgs) ToGetTargetGroupHealthCheckOutputWithContext(ctx context.Context) GetTargetGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTargetGroupHealthCheckOutput)
}

type GetTargetGroupHealthCheckOutput struct { *pulumi.OutputState }

func (GetTargetGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupHealthCheck)(nil)).Elem()
}

func (o GetTargetGroupHealthCheckOutput) ToGetTargetGroupHealthCheckOutput() GetTargetGroupHealthCheckOutput {
	return o
}

func (o GetTargetGroupHealthCheckOutput) ToGetTargetGroupHealthCheckOutputWithContext(ctx context.Context) GetTargetGroupHealthCheckOutput {
	return o
}

func (o GetTargetGroupHealthCheckOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetTargetGroupHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

func (o GetTargetGroupHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

func (o GetTargetGroupHealthCheckOutput) Matcher() pulumi.StringOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) string { return v.Matcher }).(pulumi.StringOutput)
}

func (o GetTargetGroupHealthCheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetTargetGroupHealthCheckOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetTargetGroupHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetTargetGroupHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

func (o GetTargetGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func (v GetTargetGroupHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTargetGroupHealthCheckOutput{})
}
