// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package LoadBalancerSubnetMapping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancerSubnetMapping struct {
	// The allocation ID of the Elastic IP address.
	AllocationId *string `pulumi:"allocationId"`
	// The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
	SubnetId string `pulumi:"subnetId"`
}

type LoadBalancerSubnetMappingInput interface {
	pulumi.Input

	ToLoadBalancerSubnetMappingOutput() LoadBalancerSubnetMappingOutput
	ToLoadBalancerSubnetMappingOutputWithContext(context.Context) LoadBalancerSubnetMappingOutput
}

type LoadBalancerSubnetMappingArgs struct {
	// The allocation ID of the Elastic IP address.
	AllocationId pulumi.StringPtrInput `pulumi:"allocationId"`
	// The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (LoadBalancerSubnetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSubnetMapping)(nil)).Elem()
}

func (i LoadBalancerSubnetMappingArgs) ToLoadBalancerSubnetMappingOutput() LoadBalancerSubnetMappingOutput {
	return i.ToLoadBalancerSubnetMappingOutputWithContext(context.Background())
}

func (i LoadBalancerSubnetMappingArgs) ToLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSubnetMappingOutput)
}

type LoadBalancerSubnetMappingArrayInput interface {
	pulumi.Input

	ToLoadBalancerSubnetMappingArrayOutput() LoadBalancerSubnetMappingArrayOutput
	ToLoadBalancerSubnetMappingArrayOutputWithContext(context.Context) LoadBalancerSubnetMappingArrayOutput
}

type LoadBalancerSubnetMappingArray []LoadBalancerSubnetMappingInput

func (LoadBalancerSubnetMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerSubnetMapping)(nil)).Elem()
}

func (i LoadBalancerSubnetMappingArray) ToLoadBalancerSubnetMappingArrayOutput() LoadBalancerSubnetMappingArrayOutput {
	return i.ToLoadBalancerSubnetMappingArrayOutputWithContext(context.Background())
}

func (i LoadBalancerSubnetMappingArray) ToLoadBalancerSubnetMappingArrayOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSubnetMappingArrayOutput)
}

type LoadBalancerSubnetMappingOutput struct { *pulumi.OutputState }

func (LoadBalancerSubnetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSubnetMapping)(nil)).Elem()
}

func (o LoadBalancerSubnetMappingOutput) ToLoadBalancerSubnetMappingOutput() LoadBalancerSubnetMappingOutput {
	return o
}

func (o LoadBalancerSubnetMappingOutput) ToLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingOutput {
	return o
}

// The allocation ID of the Elastic IP address.
func (o LoadBalancerSubnetMappingOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerSubnetMapping) *string { return v.AllocationId }).(pulumi.StringPtrOutput)
}

// The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
func (o LoadBalancerSubnetMappingOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerSubnetMapping) string { return v.SubnetId }).(pulumi.StringOutput)
}

type LoadBalancerSubnetMappingArrayOutput struct { *pulumi.OutputState}

func (LoadBalancerSubnetMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerSubnetMapping)(nil)).Elem()
}

func (o LoadBalancerSubnetMappingArrayOutput) ToLoadBalancerSubnetMappingArrayOutput() LoadBalancerSubnetMappingArrayOutput {
	return o
}

func (o LoadBalancerSubnetMappingArrayOutput) ToLoadBalancerSubnetMappingArrayOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingArrayOutput {
	return o
}

func (o LoadBalancerSubnetMappingArrayOutput) Index(i pulumi.IntInput) LoadBalancerSubnetMappingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) LoadBalancerSubnetMapping {
		return vs[0].([]LoadBalancerSubnetMapping)[vs[1].(int)]
	}).(LoadBalancerSubnetMappingOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerSubnetMappingOutput{})
	pulumi.RegisterOutputType(LoadBalancerSubnetMappingArrayOutput{})
}
