// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codestarnotifications

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NotificationRuleTarget struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address string `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status string `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type *string `pulumi:"type"`
}

type NotificationRuleTargetInput interface {
	pulumi.Input

	ToNotificationRuleTargetOutput() NotificationRuleTargetOutput
	ToNotificationRuleTargetOutputWithContext(context.Context) NotificationRuleTargetOutput
}

type NotificationRuleTargetArgs struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address pulumi.StringInput `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NotificationRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTarget)(nil)).Elem()
}

func (i NotificationRuleTargetArgs) ToNotificationRuleTargetOutput() NotificationRuleTargetOutput {
	return i.ToNotificationRuleTargetOutputWithContext(context.Background())
}

func (i NotificationRuleTargetArgs) ToNotificationRuleTargetOutputWithContext(ctx context.Context) NotificationRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetOutput)
}

type NotificationRuleTargetArrayInput interface {
	pulumi.Input

	ToNotificationRuleTargetArrayOutput() NotificationRuleTargetArrayOutput
	ToNotificationRuleTargetArrayOutputWithContext(context.Context) NotificationRuleTargetArrayOutput
}

type NotificationRuleTargetArray []NotificationRuleTargetInput

func (NotificationRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTarget)(nil)).Elem()
}

func (i NotificationRuleTargetArray) ToNotificationRuleTargetArrayOutput() NotificationRuleTargetArrayOutput {
	return i.ToNotificationRuleTargetArrayOutputWithContext(context.Background())
}

func (i NotificationRuleTargetArray) ToNotificationRuleTargetArrayOutputWithContext(ctx context.Context) NotificationRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetArrayOutput)
}

type NotificationRuleTargetOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTarget)(nil)).Elem()
}

func (o NotificationRuleTargetOutput) ToNotificationRuleTargetOutput() NotificationRuleTargetOutput {
	return o
}

func (o NotificationRuleTargetOutput) ToNotificationRuleTargetOutputWithContext(ctx context.Context) NotificationRuleTargetOutput {
	return o
}

// The ARN of notification rule target. For example, a SNS Topic ARN.
func (o NotificationRuleTargetOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTarget) string { return v.Address }).(pulumi.StringOutput)
}

// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
func (o NotificationRuleTargetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTarget) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the notification target. Default value is `SNS`.
func (o NotificationRuleTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleTarget) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NotificationRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTarget)(nil)).Elem()
}

func (o NotificationRuleTargetArrayOutput) ToNotificationRuleTargetArrayOutput() NotificationRuleTargetArrayOutput {
	return o
}

func (o NotificationRuleTargetArrayOutput) ToNotificationRuleTargetArrayOutputWithContext(ctx context.Context) NotificationRuleTargetArrayOutput {
	return o
}

func (o NotificationRuleTargetArrayOutput) Index(i pulumi.IntInput) NotificationRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleTarget {
		return vs[0].([]NotificationRuleTarget)[vs[1].(int)]
	}).(NotificationRuleTargetOutput)
}

type NotificationRuleTargetArgs struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address string `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status *string `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type *string `pulumi:"type"`
}

type NotificationRuleTargetArgsInput interface {
	pulumi.Input

	ToNotificationRuleTargetArgsOutput() NotificationRuleTargetArgsOutput
	ToNotificationRuleTargetArgsOutputWithContext(context.Context) NotificationRuleTargetArgsOutput
}

type NotificationRuleTargetArgsArgs struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address pulumi.StringInput `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NotificationRuleTargetArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTargetArgs)(nil)).Elem()
}

func (i NotificationRuleTargetArgsArgs) ToNotificationRuleTargetArgsOutput() NotificationRuleTargetArgsOutput {
	return i.ToNotificationRuleTargetArgsOutputWithContext(context.Background())
}

func (i NotificationRuleTargetArgsArgs) ToNotificationRuleTargetArgsOutputWithContext(ctx context.Context) NotificationRuleTargetArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetArgsOutput)
}

type NotificationRuleTargetArgsArrayInput interface {
	pulumi.Input

	ToNotificationRuleTargetArgsArrayOutput() NotificationRuleTargetArgsArrayOutput
	ToNotificationRuleTargetArgsArrayOutputWithContext(context.Context) NotificationRuleTargetArgsArrayOutput
}

type NotificationRuleTargetArgsArray []NotificationRuleTargetArgsInput

func (NotificationRuleTargetArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTargetArgs)(nil)).Elem()
}

func (i NotificationRuleTargetArgsArray) ToNotificationRuleTargetArgsArrayOutput() NotificationRuleTargetArgsArrayOutput {
	return i.ToNotificationRuleTargetArgsArrayOutputWithContext(context.Background())
}

func (i NotificationRuleTargetArgsArray) ToNotificationRuleTargetArgsArrayOutputWithContext(ctx context.Context) NotificationRuleTargetArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetArgsArrayOutput)
}

type NotificationRuleTargetArgsOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTargetArgs)(nil)).Elem()
}

func (o NotificationRuleTargetArgsOutput) ToNotificationRuleTargetArgsOutput() NotificationRuleTargetArgsOutput {
	return o
}

func (o NotificationRuleTargetArgsOutput) ToNotificationRuleTargetArgsOutputWithContext(ctx context.Context) NotificationRuleTargetArgsOutput {
	return o
}

// The ARN of notification rule target. For example, a SNS Topic ARN.
func (o NotificationRuleTargetArgsOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTargetArgs) string { return v.Address }).(pulumi.StringOutput)
}

// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
func (o NotificationRuleTargetArgsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleTargetArgs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of the notification target. Default value is `SNS`.
func (o NotificationRuleTargetArgsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleTargetArgs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NotificationRuleTargetArgsArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTargetArgs)(nil)).Elem()
}

func (o NotificationRuleTargetArgsArrayOutput) ToNotificationRuleTargetArgsArrayOutput() NotificationRuleTargetArgsArrayOutput {
	return o
}

func (o NotificationRuleTargetArgsArrayOutput) ToNotificationRuleTargetArgsArrayOutputWithContext(ctx context.Context) NotificationRuleTargetArgsArrayOutput {
	return o
}

func (o NotificationRuleTargetArgsArrayOutput) Index(i pulumi.IntInput) NotificationRuleTargetArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleTargetArgs {
		return vs[0].([]NotificationRuleTargetArgs)[vs[1].(int)]
	}).(NotificationRuleTargetArgsOutput)
}

type NotificationRuleTargetState struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address string `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status *string `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type *string `pulumi:"type"`
}

type NotificationRuleTargetStateInput interface {
	pulumi.Input

	ToNotificationRuleTargetStateOutput() NotificationRuleTargetStateOutput
	ToNotificationRuleTargetStateOutputWithContext(context.Context) NotificationRuleTargetStateOutput
}

type NotificationRuleTargetStateArgs struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address pulumi.StringInput `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NotificationRuleTargetStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTargetState)(nil)).Elem()
}

func (i NotificationRuleTargetStateArgs) ToNotificationRuleTargetStateOutput() NotificationRuleTargetStateOutput {
	return i.ToNotificationRuleTargetStateOutputWithContext(context.Background())
}

func (i NotificationRuleTargetStateArgs) ToNotificationRuleTargetStateOutputWithContext(ctx context.Context) NotificationRuleTargetStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetStateOutput)
}

type NotificationRuleTargetStateArrayInput interface {
	pulumi.Input

	ToNotificationRuleTargetStateArrayOutput() NotificationRuleTargetStateArrayOutput
	ToNotificationRuleTargetStateArrayOutputWithContext(context.Context) NotificationRuleTargetStateArrayOutput
}

type NotificationRuleTargetStateArray []NotificationRuleTargetStateInput

func (NotificationRuleTargetStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTargetState)(nil)).Elem()
}

func (i NotificationRuleTargetStateArray) ToNotificationRuleTargetStateArrayOutput() NotificationRuleTargetStateArrayOutput {
	return i.ToNotificationRuleTargetStateArrayOutputWithContext(context.Background())
}

func (i NotificationRuleTargetStateArray) ToNotificationRuleTargetStateArrayOutputWithContext(ctx context.Context) NotificationRuleTargetStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetStateArrayOutput)
}

type NotificationRuleTargetStateOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTargetState)(nil)).Elem()
}

func (o NotificationRuleTargetStateOutput) ToNotificationRuleTargetStateOutput() NotificationRuleTargetStateOutput {
	return o
}

func (o NotificationRuleTargetStateOutput) ToNotificationRuleTargetStateOutputWithContext(ctx context.Context) NotificationRuleTargetStateOutput {
	return o
}

// The ARN of notification rule target. For example, a SNS Topic ARN.
func (o NotificationRuleTargetStateOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTargetState) string { return v.Address }).(pulumi.StringOutput)
}

// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
func (o NotificationRuleTargetStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleTargetState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of the notification target. Default value is `SNS`.
func (o NotificationRuleTargetStateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleTargetState) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NotificationRuleTargetStateArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTargetState)(nil)).Elem()
}

func (o NotificationRuleTargetStateArrayOutput) ToNotificationRuleTargetStateArrayOutput() NotificationRuleTargetStateArrayOutput {
	return o
}

func (o NotificationRuleTargetStateArrayOutput) ToNotificationRuleTargetStateArrayOutputWithContext(ctx context.Context) NotificationRuleTargetStateArrayOutput {
	return o
}

func (o NotificationRuleTargetStateArrayOutput) Index(i pulumi.IntInput) NotificationRuleTargetStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleTargetState {
		return vs[0].([]NotificationRuleTargetState)[vs[1].(int)]
	}).(NotificationRuleTargetStateOutput)
}

func init() {
	pulumi.RegisterOutputType(NotificationRuleTargetOutput{})
	pulumi.RegisterOutputType(NotificationRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleTargetArgsOutput{})
	pulumi.RegisterOutputType(NotificationRuleTargetArgsArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleTargetStateOutput{})
	pulumi.RegisterOutputType(NotificationRuleTargetStateArrayOutput{})
}
