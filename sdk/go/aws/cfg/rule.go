// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Rule struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput    `pulumi:"arn"`
	Description               pulumi.StringPtrOutput `pulumi:"description"`
	InputParameters           pulumi.StringPtrOutput `pulumi:"inputParameters"`
	MaximumExecutionFrequency pulumi.StringPtrOutput `pulumi:"maximumExecutionFrequency"`
	Name                      pulumi.StringOutput    `pulumi:"name"`
	RuleId                    pulumi.StringOutput    `pulumi:"ruleId"`
	Scope                     RuleScopePtrOutput     `pulumi:"scope"`
	Source                    RuleSourceOutput       `pulumi:"source"`
	Tags                      pulumi.StringMapOutput `pulumi:"tags"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	if args == nil {
		args = &RuleArgs{}
	}
	var resource Rule
	err := ctx.RegisterResource("aws:cfg/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws:cfg/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	Arn                       *string           `pulumi:"arn"`
	Description               *string           `pulumi:"description"`
	InputParameters           *string           `pulumi:"inputParameters"`
	MaximumExecutionFrequency *string           `pulumi:"maximumExecutionFrequency"`
	Name                      *string           `pulumi:"name"`
	RuleId                    *string           `pulumi:"ruleId"`
	Scope                     *RuleScope        `pulumi:"scope"`
	Source                    *RuleSource       `pulumi:"source"`
	Tags                      map[string]string `pulumi:"tags"`
}

type RuleState struct {
	Arn                       pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	InputParameters           pulumi.StringPtrInput
	MaximumExecutionFrequency pulumi.StringPtrInput
	Name                      pulumi.StringPtrInput
	RuleId                    pulumi.StringPtrInput
	Scope                     RuleScopePtrInput
	Source                    RuleSourcePtrInput
	Tags                      pulumi.StringMapInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	Description               *string           `pulumi:"description"`
	InputParameters           *string           `pulumi:"inputParameters"`
	MaximumExecutionFrequency *string           `pulumi:"maximumExecutionFrequency"`
	Name                      *string           `pulumi:"name"`
	Scope                     *RuleScope        `pulumi:"scope"`
	Source                    RuleSource        `pulumi:"source"`
	Tags                      map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	Description               pulumi.StringPtrInput
	InputParameters           pulumi.StringPtrInput
	MaximumExecutionFrequency pulumi.StringPtrInput
	Name                      pulumi.StringPtrInput
	Scope                     RuleScopePtrInput
	Source                    RuleSourceInput
	Tags                      pulumi.StringMapInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}
