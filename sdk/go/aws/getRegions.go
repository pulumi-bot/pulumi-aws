// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about AWS Regions. Can be used to filter regions i.e. by Opt-In status or only regions enabled for current account. To get details like endpoint and description of each region the data source can be combined with the `getRegion` data source.
//
// ## Example Usage
//
// Enabled AWS Regions:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aws.GetRegions(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// All the regions regardless of the availability
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := true
// 		_, err := aws.GetRegions(ctx, &aws.GetRegionsArgs{
// 			AllRegions: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// To see regions that are filtered by `"not-opted-in"`, the `allRegions` argument needs to be set to `true` or no results will be returned.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := true
// 		_, err := aws.GetRegions(ctx, &aws.GetRegionsArgs{
// 			AllRegions: &opt0,
// 			Filters: []aws.GetRegionsFilter{
// 				aws.GetRegionsFilter{
// 					Name: "opt-in-status",
// 					Values: []string{
// 						"not-opted-in",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetRegions(ctx *pulumi.Context, args *GetRegionsArgs, opts ...pulumi.InvokeOption) (*GetRegionsResult, error) {
	var rv GetRegionsResult
	err := ctx.Invoke("aws:index/getRegions:getRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegions.
type GetRegionsArgs struct {
	// If true the source will query all regions regardless of availability.
	AllRegions *bool `pulumi:"allRegions"`
	// Configuration block(s) to use as filters. Detailed below.
	Filters []GetRegionsFilter `pulumi:"filters"`
}

// A collection of values returned by getRegions.
type GetRegionsResult struct {
	AllRegions *bool              `pulumi:"allRegions"`
	Filters    []GetRegionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Names of regions that meets the criteria.
	Names []string `pulumi:"names"`
}

func GetRegionsApply(ctx *pulumi.Context, args GetRegionsApplyInput, opts ...pulumi.InvokeOption) GetRegionsResultOutput {
	return args.ToGetRegionsApplyOutput().ApplyT(func(v GetRegionsArgs) (GetRegionsResult, error) {
		r, err := GetRegions(ctx, &v, opts...)
		return *r, err

	}).(GetRegionsResultOutput)
}

// GetRegionsApplyInput is an input type that accepts GetRegionsApplyArgs and GetRegionsApplyOutput values.
// You can construct a concrete instance of `GetRegionsApplyInput` via:
//
//          GetRegionsApplyArgs{...}
type GetRegionsApplyInput interface {
	pulumi.Input

	ToGetRegionsApplyOutput() GetRegionsApplyOutput
	ToGetRegionsApplyOutputWithContext(context.Context) GetRegionsApplyOutput
}

// A collection of arguments for invoking getRegions.
type GetRegionsApplyArgs struct {
	// If true the source will query all regions regardless of availability.
	AllRegions pulumi.BoolPtrInput `pulumi:"allRegions"`
	// Configuration block(s) to use as filters. Detailed below.
	Filters GetRegionsFilterArrayInput `pulumi:"filters"`
}

func (GetRegionsApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsArgs)(nil)).Elem()
}

func (i GetRegionsApplyArgs) ToGetRegionsApplyOutput() GetRegionsApplyOutput {
	return i.ToGetRegionsApplyOutputWithContext(context.Background())
}

func (i GetRegionsApplyArgs) ToGetRegionsApplyOutputWithContext(ctx context.Context) GetRegionsApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsApplyOutput)
}

// A collection of arguments for invoking getRegions.
type GetRegionsApplyOutput struct{ *pulumi.OutputState }

func (GetRegionsApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsArgs)(nil)).Elem()
}

func (o GetRegionsApplyOutput) ToGetRegionsApplyOutput() GetRegionsApplyOutput {
	return o
}

func (o GetRegionsApplyOutput) ToGetRegionsApplyOutputWithContext(ctx context.Context) GetRegionsApplyOutput {
	return o
}

// If true the source will query all regions regardless of availability.
func (o GetRegionsApplyOutput) AllRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionsArgs) *bool { return v.AllRegions }).(pulumi.BoolPtrOutput)
}

// Configuration block(s) to use as filters. Detailed below.
func (o GetRegionsApplyOutput) Filters() GetRegionsFilterArrayOutput {
	return o.ApplyT(func(v GetRegionsArgs) []GetRegionsFilter { return v.Filters }).(GetRegionsFilterArrayOutput)
}

// A collection of values returned by getRegions.
type GetRegionsResultOutput struct{ *pulumi.OutputState }

func (GetRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsResult)(nil)).Elem()
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutput() GetRegionsResultOutput {
	return o
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutputWithContext(ctx context.Context) GetRegionsResultOutput {
	return o
}

func (o GetRegionsResultOutput) AllRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionsResult) *bool { return v.AllRegions }).(pulumi.BoolPtrOutput)
}

func (o GetRegionsResultOutput) Filters() GetRegionsFilterArrayOutput {
	return o.ApplyT(func(v GetRegionsResult) []GetRegionsFilter { return v.Filters }).(GetRegionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Names of regions that meets the criteria.
func (o GetRegionsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionsApplyOutput{})
	pulumi.RegisterOutputType(GetRegionsResultOutput{})
}
