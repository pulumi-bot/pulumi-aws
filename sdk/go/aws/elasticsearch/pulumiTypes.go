// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DomainClusterConfig struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount *int `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled *bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType *string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount *int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType *string `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig *DomainClusterConfigZoneAwarenessConfig `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled *bool `pulumi:"zoneAwarenessEnabled"`
}

type DomainClusterConfigInput interface {
	pulumi.Input

	ToDomainClusterConfigOutput() DomainClusterConfigOutput
	ToDomainClusterConfigOutputWithContext(context.Context) DomainClusterConfigOutput
}

type DomainClusterConfigArgs struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount pulumi.IntPtrInput `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumi.BoolPtrInput `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType pulumi.StringPtrInput `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig DomainClusterConfigZoneAwarenessConfigPtrInput `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled pulumi.BoolPtrInput `pulumi:"zoneAwarenessEnabled"`
}

func (DomainClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfig)(nil)).Elem()
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigOutput() DomainClusterConfigOutput {
	return i.ToDomainClusterConfigOutputWithContext(context.Background())
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigOutputWithContext(ctx context.Context) DomainClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigOutput)
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigPtrOutput() DomainClusterConfigPtrOutput {
	return i.ToDomainClusterConfigPtrOutputWithContext(context.Background())
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigOutput).ToDomainClusterConfigPtrOutputWithContext(ctx)
}

type DomainClusterConfigPtrInput interface {
	pulumi.Input

	ToDomainClusterConfigPtrOutput() DomainClusterConfigPtrOutput
	ToDomainClusterConfigPtrOutputWithContext(context.Context) DomainClusterConfigPtrOutput
}

type domainClusterConfigPtrType DomainClusterConfigArgs

func DomainClusterConfigPtr(v *DomainClusterConfigArgs) DomainClusterConfigPtrInput {
	return (*domainClusterConfigPtrType)(v)
}

func (*domainClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfig)(nil)).Elem()
}

func (i *domainClusterConfigPtrType) ToDomainClusterConfigPtrOutput() DomainClusterConfigPtrOutput {
	return i.ToDomainClusterConfigPtrOutputWithContext(context.Background())
}

func (i *domainClusterConfigPtrType) ToDomainClusterConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigPtrOutput)
}

type DomainClusterConfigOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfig)(nil)).Elem()
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigOutput() DomainClusterConfigOutput {
	return o
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigOutputWithContext(ctx context.Context) DomainClusterConfigOutput {
	return o
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigPtrOutput() DomainClusterConfigPtrOutput {
	return o.ToDomainClusterConfigPtrOutputWithContext(context.Background())
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *DomainClusterConfig {
		return &v
	}).(DomainClusterConfigPtrOutput)
}

// Number of dedicated master nodes in the cluster
func (o DomainClusterConfigOutput) DedicatedMasterCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *int { return v.DedicatedMasterCount }).(pulumi.IntPtrOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o DomainClusterConfigOutput) DedicatedMasterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *bool { return v.DedicatedMasterEnabled }).(pulumi.BoolPtrOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o DomainClusterConfigOutput) DedicatedMasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *string { return v.DedicatedMasterType }).(pulumi.StringPtrOutput)
}

// Number of instances in the cluster.
func (o DomainClusterConfigOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Configuration block containing zone awareness settings. Documented below.
func (o DomainClusterConfigOutput) ZoneAwarenessConfig() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *DomainClusterConfigZoneAwarenessConfig { return v.ZoneAwarenessConfig }).(DomainClusterConfigZoneAwarenessConfigPtrOutput)
}

// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigOutput) ZoneAwarenessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolPtrOutput)
}

type DomainClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfig)(nil)).Elem()
}

func (o DomainClusterConfigPtrOutput) ToDomainClusterConfigPtrOutput() DomainClusterConfigPtrOutput {
	return o
}

func (o DomainClusterConfigPtrOutput) ToDomainClusterConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigPtrOutput {
	return o
}

func (o DomainClusterConfigPtrOutput) Elem() DomainClusterConfigOutput {
	return o.ApplyT(func(v *DomainClusterConfig) DomainClusterConfig { return *v }).(DomainClusterConfigOutput)
}

// Number of dedicated master nodes in the cluster
func (o DomainClusterConfigPtrOutput) DedicatedMasterCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *int { return v.DedicatedMasterCount }).(pulumi.IntPtrOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o DomainClusterConfigPtrOutput) DedicatedMasterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *bool { return v.DedicatedMasterEnabled }).(pulumi.BoolPtrOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o DomainClusterConfigPtrOutput) DedicatedMasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *string { return v.DedicatedMasterType }).(pulumi.StringPtrOutput)
}

// Number of instances in the cluster.
func (o DomainClusterConfigPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Configuration block containing zone awareness settings. Documented below.
func (o DomainClusterConfigPtrOutput) ZoneAwarenessConfig() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *DomainClusterConfigZoneAwarenessConfig { return v.ZoneAwarenessConfig }).(DomainClusterConfigZoneAwarenessConfigPtrOutput)
}

// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigPtrOutput) ZoneAwarenessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfig) *bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolPtrOutput)
}

type DomainClusterConfigArgs struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount *int `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled *bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType *string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount *int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType *string `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig *DomainClusterConfigZoneAwarenessConfigArgs `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled *bool `pulumi:"zoneAwarenessEnabled"`
}

type DomainClusterConfigArgsInput interface {
	pulumi.Input

	ToDomainClusterConfigArgsOutput() DomainClusterConfigArgsOutput
	ToDomainClusterConfigArgsOutputWithContext(context.Context) DomainClusterConfigArgsOutput
}

type DomainClusterConfigArgsArgs struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount pulumi.IntPtrInput `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumi.BoolPtrInput `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType pulumi.StringPtrInput `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig DomainClusterConfigZoneAwarenessConfigArgsPtrInput `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled pulumi.BoolPtrInput `pulumi:"zoneAwarenessEnabled"`
}

func (DomainClusterConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigArgs)(nil)).Elem()
}

func (i DomainClusterConfigArgsArgs) ToDomainClusterConfigArgsOutput() DomainClusterConfigArgsOutput {
	return i.ToDomainClusterConfigArgsOutputWithContext(context.Background())
}

func (i DomainClusterConfigArgsArgs) ToDomainClusterConfigArgsOutputWithContext(ctx context.Context) DomainClusterConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigArgsOutput)
}

func (i DomainClusterConfigArgsArgs) ToDomainClusterConfigArgsPtrOutput() DomainClusterConfigArgsPtrOutput {
	return i.ToDomainClusterConfigArgsPtrOutputWithContext(context.Background())
}

func (i DomainClusterConfigArgsArgs) ToDomainClusterConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigArgsOutput).ToDomainClusterConfigArgsPtrOutputWithContext(ctx)
}

type DomainClusterConfigArgsPtrInput interface {
	pulumi.Input

	ToDomainClusterConfigArgsPtrOutput() DomainClusterConfigArgsPtrOutput
	ToDomainClusterConfigArgsPtrOutputWithContext(context.Context) DomainClusterConfigArgsPtrOutput
}

type domainClusterConfigArgsPtrType DomainClusterConfigArgsArgs

func DomainClusterConfigArgsPtr(v *DomainClusterConfigArgsArgs) DomainClusterConfigArgsPtrInput {
	return (*domainClusterConfigArgsPtrType)(v)
}

func (*domainClusterConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigArgs)(nil)).Elem()
}

func (i *domainClusterConfigArgsPtrType) ToDomainClusterConfigArgsPtrOutput() DomainClusterConfigArgsPtrOutput {
	return i.ToDomainClusterConfigArgsPtrOutputWithContext(context.Background())
}

func (i *domainClusterConfigArgsPtrType) ToDomainClusterConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigArgsPtrOutput)
}

type DomainClusterConfigArgsOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigArgs)(nil)).Elem()
}

func (o DomainClusterConfigArgsOutput) ToDomainClusterConfigArgsOutput() DomainClusterConfigArgsOutput {
	return o
}

func (o DomainClusterConfigArgsOutput) ToDomainClusterConfigArgsOutputWithContext(ctx context.Context) DomainClusterConfigArgsOutput {
	return o
}

func (o DomainClusterConfigArgsOutput) ToDomainClusterConfigArgsPtrOutput() DomainClusterConfigArgsPtrOutput {
	return o.ToDomainClusterConfigArgsPtrOutputWithContext(context.Background())
}

func (o DomainClusterConfigArgsOutput) ToDomainClusterConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigArgsPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *DomainClusterConfigArgs {
		return &v
	}).(DomainClusterConfigArgsPtrOutput)
}

// Number of dedicated master nodes in the cluster
func (o DomainClusterConfigArgsOutput) DedicatedMasterCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *int { return v.DedicatedMasterCount }).(pulumi.IntPtrOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o DomainClusterConfigArgsOutput) DedicatedMasterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *bool { return v.DedicatedMasterEnabled }).(pulumi.BoolPtrOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o DomainClusterConfigArgsOutput) DedicatedMasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *string { return v.DedicatedMasterType }).(pulumi.StringPtrOutput)
}

// Number of instances in the cluster.
func (o DomainClusterConfigArgsOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigArgsOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Configuration block containing zone awareness settings. Documented below.
func (o DomainClusterConfigArgsOutput) ZoneAwarenessConfig() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *DomainClusterConfigZoneAwarenessConfigArgs {
		return v.ZoneAwarenessConfig
	}).(DomainClusterConfigZoneAwarenessConfigArgsPtrOutput)
}

// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigArgsOutput) ZoneAwarenessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolPtrOutput)
}

type DomainClusterConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigArgs)(nil)).Elem()
}

func (o DomainClusterConfigArgsPtrOutput) ToDomainClusterConfigArgsPtrOutput() DomainClusterConfigArgsPtrOutput {
	return o
}

func (o DomainClusterConfigArgsPtrOutput) ToDomainClusterConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigArgsPtrOutput {
	return o
}

func (o DomainClusterConfigArgsPtrOutput) Elem() DomainClusterConfigArgsOutput {
	return o.ApplyT(func(v *DomainClusterConfigArgs) DomainClusterConfigArgs { return *v }).(DomainClusterConfigArgsOutput)
}

// Number of dedicated master nodes in the cluster
func (o DomainClusterConfigArgsPtrOutput) DedicatedMasterCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *int { return v.DedicatedMasterCount }).(pulumi.IntPtrOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o DomainClusterConfigArgsPtrOutput) DedicatedMasterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *bool { return v.DedicatedMasterEnabled }).(pulumi.BoolPtrOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o DomainClusterConfigArgsPtrOutput) DedicatedMasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *string { return v.DedicatedMasterType }).(pulumi.StringPtrOutput)
}

// Number of instances in the cluster.
func (o DomainClusterConfigArgsPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigArgsPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Configuration block containing zone awareness settings. Documented below.
func (o DomainClusterConfigArgsPtrOutput) ZoneAwarenessConfig() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *DomainClusterConfigZoneAwarenessConfigArgs {
		return v.ZoneAwarenessConfig
	}).(DomainClusterConfigZoneAwarenessConfigArgsPtrOutput)
}

// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigArgsPtrOutput) ZoneAwarenessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigArgs) *bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolPtrOutput)
}

type DomainClusterConfigState struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount *int `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled *bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType *string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount *int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType *string `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig *DomainClusterConfigStateZoneAwarenessConfig `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled *bool `pulumi:"zoneAwarenessEnabled"`
}

type DomainClusterConfigStateInput interface {
	pulumi.Input

	ToDomainClusterConfigStateOutput() DomainClusterConfigStateOutput
	ToDomainClusterConfigStateOutputWithContext(context.Context) DomainClusterConfigStateOutput
}

type DomainClusterConfigStateArgs struct {
	// Number of dedicated master nodes in the cluster
	DedicatedMasterCount pulumi.IntPtrInput `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumi.BoolPtrInput `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType pulumi.StringPtrInput `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings. Documented below.
	ZoneAwarenessConfig DomainClusterConfigStateZoneAwarenessConfigPtrInput `pulumi:"zoneAwarenessConfig"`
	// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled pulumi.BoolPtrInput `pulumi:"zoneAwarenessEnabled"`
}

func (DomainClusterConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigState)(nil)).Elem()
}

func (i DomainClusterConfigStateArgs) ToDomainClusterConfigStateOutput() DomainClusterConfigStateOutput {
	return i.ToDomainClusterConfigStateOutputWithContext(context.Background())
}

func (i DomainClusterConfigStateArgs) ToDomainClusterConfigStateOutputWithContext(ctx context.Context) DomainClusterConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigStateOutput)
}

type DomainClusterConfigStateOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigState)(nil)).Elem()
}

func (o DomainClusterConfigStateOutput) ToDomainClusterConfigStateOutput() DomainClusterConfigStateOutput {
	return o
}

func (o DomainClusterConfigStateOutput) ToDomainClusterConfigStateOutputWithContext(ctx context.Context) DomainClusterConfigStateOutput {
	return o
}

// Number of dedicated master nodes in the cluster
func (o DomainClusterConfigStateOutput) DedicatedMasterCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *int { return v.DedicatedMasterCount }).(pulumi.IntPtrOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o DomainClusterConfigStateOutput) DedicatedMasterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *bool { return v.DedicatedMasterEnabled }).(pulumi.BoolPtrOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o DomainClusterConfigStateOutput) DedicatedMasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *string { return v.DedicatedMasterType }).(pulumi.StringPtrOutput)
}

// Number of instances in the cluster.
func (o DomainClusterConfigStateOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigStateOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Configuration block containing zone awareness settings. Documented below.
func (o DomainClusterConfigStateOutput) ZoneAwarenessConfig() DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *DomainClusterConfigStateZoneAwarenessConfig {
		return v.ZoneAwarenessConfig
	}).(DomainClusterConfigStateZoneAwarenessConfigPtrOutput)
}

// Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigStateOutput) ZoneAwarenessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigState) *bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolPtrOutput)
}

type DomainClusterConfigStateZoneAwarenessConfig struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount *int `pulumi:"availabilityZoneCount"`
}

type DomainClusterConfigStateZoneAwarenessConfigInput interface {
	pulumi.Input

	ToDomainClusterConfigStateZoneAwarenessConfigOutput() DomainClusterConfigStateZoneAwarenessConfigOutput
	ToDomainClusterConfigStateZoneAwarenessConfigOutputWithContext(context.Context) DomainClusterConfigStateZoneAwarenessConfigOutput
}

type DomainClusterConfigStateZoneAwarenessConfigArgs struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount pulumi.IntPtrInput `pulumi:"availabilityZoneCount"`
}

func (DomainClusterConfigStateZoneAwarenessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigStateZoneAwarenessConfig)(nil)).Elem()
}

func (i DomainClusterConfigStateZoneAwarenessConfigArgs) ToDomainClusterConfigStateZoneAwarenessConfigOutput() DomainClusterConfigStateZoneAwarenessConfigOutput {
	return i.ToDomainClusterConfigStateZoneAwarenessConfigOutputWithContext(context.Background())
}

func (i DomainClusterConfigStateZoneAwarenessConfigArgs) ToDomainClusterConfigStateZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigStateZoneAwarenessConfigOutput)
}

func (i DomainClusterConfigStateZoneAwarenessConfigArgs) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutput() DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return i.ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (i DomainClusterConfigStateZoneAwarenessConfigArgs) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigStateZoneAwarenessConfigOutput).ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(ctx)
}

type DomainClusterConfigStateZoneAwarenessConfigPtrInput interface {
	pulumi.Input

	ToDomainClusterConfigStateZoneAwarenessConfigPtrOutput() DomainClusterConfigStateZoneAwarenessConfigPtrOutput
	ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(context.Context) DomainClusterConfigStateZoneAwarenessConfigPtrOutput
}

type domainClusterConfigStateZoneAwarenessConfigPtrType DomainClusterConfigStateZoneAwarenessConfigArgs

func DomainClusterConfigStateZoneAwarenessConfigPtr(v *DomainClusterConfigStateZoneAwarenessConfigArgs) DomainClusterConfigStateZoneAwarenessConfigPtrInput {
	return (*domainClusterConfigStateZoneAwarenessConfigPtrType)(v)
}

func (*domainClusterConfigStateZoneAwarenessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigStateZoneAwarenessConfig)(nil)).Elem()
}

func (i *domainClusterConfigStateZoneAwarenessConfigPtrType) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutput() DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return i.ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (i *domainClusterConfigStateZoneAwarenessConfigPtrType) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigStateZoneAwarenessConfigPtrOutput)
}

type DomainClusterConfigStateZoneAwarenessConfigOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigStateZoneAwarenessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigStateZoneAwarenessConfig)(nil)).Elem()
}

func (o DomainClusterConfigStateZoneAwarenessConfigOutput) ToDomainClusterConfigStateZoneAwarenessConfigOutput() DomainClusterConfigStateZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigStateZoneAwarenessConfigOutput) ToDomainClusterConfigStateZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigStateZoneAwarenessConfigOutput) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutput() DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return o.ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (o DomainClusterConfigStateZoneAwarenessConfigOutput) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigStateZoneAwarenessConfig) *DomainClusterConfigStateZoneAwarenessConfig {
		return &v
	}).(DomainClusterConfigStateZoneAwarenessConfigPtrOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigStateZoneAwarenessConfigOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigStateZoneAwarenessConfig) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainClusterConfigStateZoneAwarenessConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigStateZoneAwarenessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigStateZoneAwarenessConfig)(nil)).Elem()
}

func (o DomainClusterConfigStateZoneAwarenessConfigPtrOutput) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutput() DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return o
}

func (o DomainClusterConfigStateZoneAwarenessConfigPtrOutput) ToDomainClusterConfigStateZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigStateZoneAwarenessConfigPtrOutput {
	return o
}

func (o DomainClusterConfigStateZoneAwarenessConfigPtrOutput) Elem() DomainClusterConfigStateZoneAwarenessConfigOutput {
	return o.ApplyT(func(v *DomainClusterConfigStateZoneAwarenessConfig) DomainClusterConfigStateZoneAwarenessConfig {
		return *v
	}).(DomainClusterConfigStateZoneAwarenessConfigOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigStateZoneAwarenessConfigPtrOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigStateZoneAwarenessConfig) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfig struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount *int `pulumi:"availabilityZoneCount"`
}

type DomainClusterConfigZoneAwarenessConfigInput interface {
	pulumi.Input

	ToDomainClusterConfigZoneAwarenessConfigOutput() DomainClusterConfigZoneAwarenessConfigOutput
	ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Context) DomainClusterConfigZoneAwarenessConfigOutput
}

type DomainClusterConfigZoneAwarenessConfigArgs struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount pulumi.IntPtrInput `pulumi:"availabilityZoneCount"`
}

func (DomainClusterConfigZoneAwarenessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigOutput() DomainClusterConfigZoneAwarenessConfigOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Background())
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigOutput)
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigPtrOutput() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigOutput).ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(ctx)
}

type DomainClusterConfigZoneAwarenessConfigPtrInput interface {
	pulumi.Input

	ToDomainClusterConfigZoneAwarenessConfigPtrOutput() DomainClusterConfigZoneAwarenessConfigPtrOutput
	ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(context.Context) DomainClusterConfigZoneAwarenessConfigPtrOutput
}

type domainClusterConfigZoneAwarenessConfigPtrType DomainClusterConfigZoneAwarenessConfigArgs

func DomainClusterConfigZoneAwarenessConfigPtr(v *DomainClusterConfigZoneAwarenessConfigArgs) DomainClusterConfigZoneAwarenessConfigPtrInput {
	return (*domainClusterConfigZoneAwarenessConfigPtrType)(v)
}

func (*domainClusterConfigZoneAwarenessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i *domainClusterConfigZoneAwarenessConfigPtrType) ToDomainClusterConfigZoneAwarenessConfigPtrOutput() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (i *domainClusterConfigZoneAwarenessConfigPtrType) ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfigOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigZoneAwarenessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigOutput() DomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigPtrOutput() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o.ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(context.Background())
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfig) *DomainClusterConfigZoneAwarenessConfig {
		return &v
	}).(DomainClusterConfigZoneAwarenessConfigPtrOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigZoneAwarenessConfigOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfig) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigZoneAwarenessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o DomainClusterConfigZoneAwarenessConfigPtrOutput) ToDomainClusterConfigZoneAwarenessConfigPtrOutput() DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigPtrOutput) ToDomainClusterConfigZoneAwarenessConfigPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigPtrOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigPtrOutput) Elem() DomainClusterConfigZoneAwarenessConfigOutput {
	return o.ApplyT(func(v *DomainClusterConfigZoneAwarenessConfig) DomainClusterConfigZoneAwarenessConfig { return *v }).(DomainClusterConfigZoneAwarenessConfigOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigZoneAwarenessConfigPtrOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfig) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfigArgs struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount *int `pulumi:"availabilityZoneCount"`
}

type DomainClusterConfigZoneAwarenessConfigArgsInput interface {
	pulumi.Input

	ToDomainClusterConfigZoneAwarenessConfigArgsOutput() DomainClusterConfigZoneAwarenessConfigArgsOutput
	ToDomainClusterConfigZoneAwarenessConfigArgsOutputWithContext(context.Context) DomainClusterConfigZoneAwarenessConfigArgsOutput
}

type DomainClusterConfigZoneAwarenessConfigArgsArgs struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount pulumi.IntPtrInput `pulumi:"availabilityZoneCount"`
}

func (DomainClusterConfigZoneAwarenessConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfigArgs)(nil)).Elem()
}

func (i DomainClusterConfigZoneAwarenessConfigArgsArgs) ToDomainClusterConfigZoneAwarenessConfigArgsOutput() DomainClusterConfigZoneAwarenessConfigArgsOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigArgsOutputWithContext(context.Background())
}

func (i DomainClusterConfigZoneAwarenessConfigArgsArgs) ToDomainClusterConfigZoneAwarenessConfigArgsOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigArgsOutput)
}

func (i DomainClusterConfigZoneAwarenessConfigArgsArgs) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutput() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(context.Background())
}

func (i DomainClusterConfigZoneAwarenessConfigArgsArgs) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigArgsOutput).ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(ctx)
}

type DomainClusterConfigZoneAwarenessConfigArgsPtrInput interface {
	pulumi.Input

	ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutput() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput
	ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(context.Context) DomainClusterConfigZoneAwarenessConfigArgsPtrOutput
}

type domainClusterConfigZoneAwarenessConfigArgsPtrType DomainClusterConfigZoneAwarenessConfigArgsArgs

func DomainClusterConfigZoneAwarenessConfigArgsPtr(v *DomainClusterConfigZoneAwarenessConfigArgsArgs) DomainClusterConfigZoneAwarenessConfigArgsPtrInput {
	return (*domainClusterConfigZoneAwarenessConfigArgsPtrType)(v)
}

func (*domainClusterConfigZoneAwarenessConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigZoneAwarenessConfigArgs)(nil)).Elem()
}

func (i *domainClusterConfigZoneAwarenessConfigArgsPtrType) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutput() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(context.Background())
}

func (i *domainClusterConfigZoneAwarenessConfigArgsPtrType) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigArgsPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfigArgsOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigZoneAwarenessConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfigArgs)(nil)).Elem()
}

func (o DomainClusterConfigZoneAwarenessConfigArgsOutput) ToDomainClusterConfigZoneAwarenessConfigArgsOutput() DomainClusterConfigZoneAwarenessConfigArgsOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigArgsOutput) ToDomainClusterConfigZoneAwarenessConfigArgsOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigArgsOutput) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutput() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o.ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(context.Background())
}

func (o DomainClusterConfigZoneAwarenessConfigArgsOutput) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfigArgs) *DomainClusterConfigZoneAwarenessConfigArgs {
		return &v
	}).(DomainClusterConfigZoneAwarenessConfigArgsPtrOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigZoneAwarenessConfigArgsOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfigArgs) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainClusterConfigZoneAwarenessConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigZoneAwarenessConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainClusterConfigZoneAwarenessConfigArgs)(nil)).Elem()
}

func (o DomainClusterConfigZoneAwarenessConfigArgsPtrOutput) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutput() DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigArgsPtrOutput) ToDomainClusterConfigZoneAwarenessConfigArgsPtrOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigArgsPtrOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigArgsPtrOutput) Elem() DomainClusterConfigZoneAwarenessConfigArgsOutput {
	return o.ApplyT(func(v *DomainClusterConfigZoneAwarenessConfigArgs) DomainClusterConfigZoneAwarenessConfigArgs {
		return *v
	}).(DomainClusterConfigZoneAwarenessConfigArgsOutput)
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigZoneAwarenessConfigArgsPtrOutput) AvailabilityZoneCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainClusterConfigZoneAwarenessConfigArgs) *int { return v.AvailabilityZoneCount }).(pulumi.IntPtrOutput)
}

type DomainCognitoOptions struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId string `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn string `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId string `pulumi:"userPoolId"`
}

type DomainCognitoOptionsInput interface {
	pulumi.Input

	ToDomainCognitoOptionsOutput() DomainCognitoOptionsOutput
	ToDomainCognitoOptionsOutputWithContext(context.Context) DomainCognitoOptionsOutput
}

type DomainCognitoOptionsArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId pulumi.StringInput `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (DomainCognitoOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptions)(nil)).Elem()
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsOutput() DomainCognitoOptionsOutput {
	return i.ToDomainCognitoOptionsOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsOutputWithContext(ctx context.Context) DomainCognitoOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsOutput)
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsPtrOutput() DomainCognitoOptionsPtrOutput {
	return i.ToDomainCognitoOptionsPtrOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsOutput).ToDomainCognitoOptionsPtrOutputWithContext(ctx)
}

type DomainCognitoOptionsPtrInput interface {
	pulumi.Input

	ToDomainCognitoOptionsPtrOutput() DomainCognitoOptionsPtrOutput
	ToDomainCognitoOptionsPtrOutputWithContext(context.Context) DomainCognitoOptionsPtrOutput
}

type domainCognitoOptionsPtrType DomainCognitoOptionsArgs

func DomainCognitoOptionsPtr(v *DomainCognitoOptionsArgs) DomainCognitoOptionsPtrInput {
	return (*domainCognitoOptionsPtrType)(v)
}

func (*domainCognitoOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCognitoOptions)(nil)).Elem()
}

func (i *domainCognitoOptionsPtrType) ToDomainCognitoOptionsPtrOutput() DomainCognitoOptionsPtrOutput {
	return i.ToDomainCognitoOptionsPtrOutputWithContext(context.Background())
}

func (i *domainCognitoOptionsPtrType) ToDomainCognitoOptionsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsPtrOutput)
}

type DomainCognitoOptionsOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptions)(nil)).Elem()
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsOutput() DomainCognitoOptionsOutput {
	return o
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsOutputWithContext(ctx context.Context) DomainCognitoOptionsOutput {
	return o
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsPtrOutput() DomainCognitoOptionsPtrOutput {
	return o.ToDomainCognitoOptionsPtrOutputWithContext(context.Background())
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptions) *DomainCognitoOptions {
		return &v
	}).(DomainCognitoOptionsPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainCognitoOptionsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptions) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of the Cognito Identity Pool to use
func (o DomainCognitoOptionsOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
func (o DomainCognitoOptionsOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the Cognito User Pool to use
func (o DomainCognitoOptionsOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type DomainCognitoOptionsPtrOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCognitoOptions)(nil)).Elem()
}

func (o DomainCognitoOptionsPtrOutput) ToDomainCognitoOptionsPtrOutput() DomainCognitoOptionsPtrOutput {
	return o
}

func (o DomainCognitoOptionsPtrOutput) ToDomainCognitoOptionsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsPtrOutput {
	return o
}

func (o DomainCognitoOptionsPtrOutput) Elem() DomainCognitoOptionsOutput {
	return o.ApplyT(func(v *DomainCognitoOptions) DomainCognitoOptions { return *v }).(DomainCognitoOptionsOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainCognitoOptionsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptions) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of the Cognito Identity Pool to use
func (o DomainCognitoOptionsPtrOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
func (o DomainCognitoOptionsPtrOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the Cognito User Pool to use
func (o DomainCognitoOptionsPtrOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptions) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type DomainCognitoOptionsArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId string `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn string `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId string `pulumi:"userPoolId"`
}

type DomainCognitoOptionsArgsInput interface {
	pulumi.Input

	ToDomainCognitoOptionsArgsOutput() DomainCognitoOptionsArgsOutput
	ToDomainCognitoOptionsArgsOutputWithContext(context.Context) DomainCognitoOptionsArgsOutput
}

type DomainCognitoOptionsArgsArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId pulumi.StringInput `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (DomainCognitoOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptionsArgs)(nil)).Elem()
}

func (i DomainCognitoOptionsArgsArgs) ToDomainCognitoOptionsArgsOutput() DomainCognitoOptionsArgsOutput {
	return i.ToDomainCognitoOptionsArgsOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsArgsArgs) ToDomainCognitoOptionsArgsOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsArgsOutput)
}

func (i DomainCognitoOptionsArgsArgs) ToDomainCognitoOptionsArgsPtrOutput() DomainCognitoOptionsArgsPtrOutput {
	return i.ToDomainCognitoOptionsArgsPtrOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsArgsArgs) ToDomainCognitoOptionsArgsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsArgsOutput).ToDomainCognitoOptionsArgsPtrOutputWithContext(ctx)
}

type DomainCognitoOptionsArgsPtrInput interface {
	pulumi.Input

	ToDomainCognitoOptionsArgsPtrOutput() DomainCognitoOptionsArgsPtrOutput
	ToDomainCognitoOptionsArgsPtrOutputWithContext(context.Context) DomainCognitoOptionsArgsPtrOutput
}

type domainCognitoOptionsArgsPtrType DomainCognitoOptionsArgsArgs

func DomainCognitoOptionsArgsPtr(v *DomainCognitoOptionsArgsArgs) DomainCognitoOptionsArgsPtrInput {
	return (*domainCognitoOptionsArgsPtrType)(v)
}

func (*domainCognitoOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCognitoOptionsArgs)(nil)).Elem()
}

func (i *domainCognitoOptionsArgsPtrType) ToDomainCognitoOptionsArgsPtrOutput() DomainCognitoOptionsArgsPtrOutput {
	return i.ToDomainCognitoOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *domainCognitoOptionsArgsPtrType) ToDomainCognitoOptionsArgsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsArgsPtrOutput)
}

type DomainCognitoOptionsArgsOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptionsArgs)(nil)).Elem()
}

func (o DomainCognitoOptionsArgsOutput) ToDomainCognitoOptionsArgsOutput() DomainCognitoOptionsArgsOutput {
	return o
}

func (o DomainCognitoOptionsArgsOutput) ToDomainCognitoOptionsArgsOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsOutput {
	return o
}

func (o DomainCognitoOptionsArgsOutput) ToDomainCognitoOptionsArgsPtrOutput() DomainCognitoOptionsArgsPtrOutput {
	return o.ToDomainCognitoOptionsArgsPtrOutputWithContext(context.Background())
}

func (o DomainCognitoOptionsArgsOutput) ToDomainCognitoOptionsArgsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) *DomainCognitoOptionsArgs {
		return &v
	}).(DomainCognitoOptionsArgsPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainCognitoOptionsArgsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of the Cognito Identity Pool to use
func (o DomainCognitoOptionsArgsOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
func (o DomainCognitoOptionsArgsOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the Cognito User Pool to use
func (o DomainCognitoOptionsArgsOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type DomainCognitoOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCognitoOptionsArgs)(nil)).Elem()
}

func (o DomainCognitoOptionsArgsPtrOutput) ToDomainCognitoOptionsArgsPtrOutput() DomainCognitoOptionsArgsPtrOutput {
	return o
}

func (o DomainCognitoOptionsArgsPtrOutput) ToDomainCognitoOptionsArgsPtrOutputWithContext(ctx context.Context) DomainCognitoOptionsArgsPtrOutput {
	return o
}

func (o DomainCognitoOptionsArgsPtrOutput) Elem() DomainCognitoOptionsArgsOutput {
	return o.ApplyT(func(v *DomainCognitoOptionsArgs) DomainCognitoOptionsArgs { return *v }).(DomainCognitoOptionsArgsOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainCognitoOptionsArgsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of the Cognito Identity Pool to use
func (o DomainCognitoOptionsArgsPtrOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
func (o DomainCognitoOptionsArgsPtrOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the Cognito User Pool to use
func (o DomainCognitoOptionsArgsPtrOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsArgs) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type DomainCognitoOptionsState struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId string `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn string `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId string `pulumi:"userPoolId"`
}

type DomainCognitoOptionsStateInput interface {
	pulumi.Input

	ToDomainCognitoOptionsStateOutput() DomainCognitoOptionsStateOutput
	ToDomainCognitoOptionsStateOutputWithContext(context.Context) DomainCognitoOptionsStateOutput
}

type DomainCognitoOptionsStateArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use
	IdentityPoolId pulumi.StringInput `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (DomainCognitoOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptionsState)(nil)).Elem()
}

func (i DomainCognitoOptionsStateArgs) ToDomainCognitoOptionsStateOutput() DomainCognitoOptionsStateOutput {
	return i.ToDomainCognitoOptionsStateOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsStateArgs) ToDomainCognitoOptionsStateOutputWithContext(ctx context.Context) DomainCognitoOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsStateOutput)
}

type DomainCognitoOptionsStateOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptionsState)(nil)).Elem()
}

func (o DomainCognitoOptionsStateOutput) ToDomainCognitoOptionsStateOutput() DomainCognitoOptionsStateOutput {
	return o
}

func (o DomainCognitoOptionsStateOutput) ToDomainCognitoOptionsStateOutputWithContext(ctx context.Context) DomainCognitoOptionsStateOutput {
	return o
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainCognitoOptionsStateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainCognitoOptionsState) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of the Cognito Identity Pool to use
func (o DomainCognitoOptionsStateOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsState) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached
func (o DomainCognitoOptionsStateOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsState) string { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the Cognito User Pool to use
func (o DomainCognitoOptionsStateOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCognitoOptionsState) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type DomainDomainEndpointOptions struct {
	// Whether or not to require HTTPS
	EnforceHttps bool `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy string `pulumi:"tlsSecurityPolicy"`
}

type DomainDomainEndpointOptionsInput interface {
	pulumi.Input

	ToDomainDomainEndpointOptionsOutput() DomainDomainEndpointOptionsOutput
	ToDomainDomainEndpointOptionsOutputWithContext(context.Context) DomainDomainEndpointOptionsOutput
}

type DomainDomainEndpointOptionsArgs struct {
	// Whether or not to require HTTPS
	EnforceHttps pulumi.BoolInput `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy pulumi.StringInput `pulumi:"tlsSecurityPolicy"`
}

func (DomainDomainEndpointOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptions)(nil)).Elem()
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsOutput() DomainDomainEndpointOptionsOutput {
	return i.ToDomainDomainEndpointOptionsOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsOutput)
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsPtrOutput() DomainDomainEndpointOptionsPtrOutput {
	return i.ToDomainDomainEndpointOptionsPtrOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsOutput).ToDomainDomainEndpointOptionsPtrOutputWithContext(ctx)
}

type DomainDomainEndpointOptionsPtrInput interface {
	pulumi.Input

	ToDomainDomainEndpointOptionsPtrOutput() DomainDomainEndpointOptionsPtrOutput
	ToDomainDomainEndpointOptionsPtrOutputWithContext(context.Context) DomainDomainEndpointOptionsPtrOutput
}

type domainDomainEndpointOptionsPtrType DomainDomainEndpointOptionsArgs

func DomainDomainEndpointOptionsPtr(v *DomainDomainEndpointOptionsArgs) DomainDomainEndpointOptionsPtrInput {
	return (*domainDomainEndpointOptionsPtrType)(v)
}

func (*domainDomainEndpointOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDomainEndpointOptions)(nil)).Elem()
}

func (i *domainDomainEndpointOptionsPtrType) ToDomainDomainEndpointOptionsPtrOutput() DomainDomainEndpointOptionsPtrOutput {
	return i.ToDomainDomainEndpointOptionsPtrOutputWithContext(context.Background())
}

func (i *domainDomainEndpointOptionsPtrType) ToDomainDomainEndpointOptionsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsPtrOutput)
}

type DomainDomainEndpointOptionsOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptions)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsOutput() DomainDomainEndpointOptionsOutput {
	return o
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsOutput {
	return o
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsPtrOutput() DomainDomainEndpointOptionsPtrOutput {
	return o.ToDomainDomainEndpointOptionsPtrOutputWithContext(context.Background())
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsPtrOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptions) *DomainDomainEndpointOptions {
		return &v
	}).(DomainDomainEndpointOptionsPtrOutput)
}

// Whether or not to require HTTPS
func (o DomainDomainEndpointOptionsOutput) EnforceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptions) bool { return v.EnforceHttps }).(pulumi.BoolOutput)
}

// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsOutput) TlsSecurityPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptions) string { return v.TlsSecurityPolicy }).(pulumi.StringOutput)
}

type DomainDomainEndpointOptionsPtrOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDomainEndpointOptions)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsPtrOutput) ToDomainDomainEndpointOptionsPtrOutput() DomainDomainEndpointOptionsPtrOutput {
	return o
}

func (o DomainDomainEndpointOptionsPtrOutput) ToDomainDomainEndpointOptionsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsPtrOutput {
	return o
}

func (o DomainDomainEndpointOptionsPtrOutput) Elem() DomainDomainEndpointOptionsOutput {
	return o.ApplyT(func(v *DomainDomainEndpointOptions) DomainDomainEndpointOptions { return *v }).(DomainDomainEndpointOptionsOutput)
}

// Whether or not to require HTTPS
func (o DomainDomainEndpointOptionsPtrOutput) EnforceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptions) bool { return v.EnforceHttps }).(pulumi.BoolOutput)
}

// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsPtrOutput) TlsSecurityPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptions) string { return v.TlsSecurityPolicy }).(pulumi.StringOutput)
}

type DomainDomainEndpointOptionsArgs struct {
	// Whether or not to require HTTPS
	EnforceHttps bool `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy *string `pulumi:"tlsSecurityPolicy"`
}

type DomainDomainEndpointOptionsArgsInput interface {
	pulumi.Input

	ToDomainDomainEndpointOptionsArgsOutput() DomainDomainEndpointOptionsArgsOutput
	ToDomainDomainEndpointOptionsArgsOutputWithContext(context.Context) DomainDomainEndpointOptionsArgsOutput
}

type DomainDomainEndpointOptionsArgsArgs struct {
	// Whether or not to require HTTPS
	EnforceHttps pulumi.BoolInput `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy pulumi.StringPtrInput `pulumi:"tlsSecurityPolicy"`
}

func (DomainDomainEndpointOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptionsArgs)(nil)).Elem()
}

func (i DomainDomainEndpointOptionsArgsArgs) ToDomainDomainEndpointOptionsArgsOutput() DomainDomainEndpointOptionsArgsOutput {
	return i.ToDomainDomainEndpointOptionsArgsOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsArgsArgs) ToDomainDomainEndpointOptionsArgsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsArgsOutput)
}

func (i DomainDomainEndpointOptionsArgsArgs) ToDomainDomainEndpointOptionsArgsPtrOutput() DomainDomainEndpointOptionsArgsPtrOutput {
	return i.ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsArgsArgs) ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsArgsOutput).ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(ctx)
}

type DomainDomainEndpointOptionsArgsPtrInput interface {
	pulumi.Input

	ToDomainDomainEndpointOptionsArgsPtrOutput() DomainDomainEndpointOptionsArgsPtrOutput
	ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(context.Context) DomainDomainEndpointOptionsArgsPtrOutput
}

type domainDomainEndpointOptionsArgsPtrType DomainDomainEndpointOptionsArgsArgs

func DomainDomainEndpointOptionsArgsPtr(v *DomainDomainEndpointOptionsArgsArgs) DomainDomainEndpointOptionsArgsPtrInput {
	return (*domainDomainEndpointOptionsArgsPtrType)(v)
}

func (*domainDomainEndpointOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDomainEndpointOptionsArgs)(nil)).Elem()
}

func (i *domainDomainEndpointOptionsArgsPtrType) ToDomainDomainEndpointOptionsArgsPtrOutput() DomainDomainEndpointOptionsArgsPtrOutput {
	return i.ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *domainDomainEndpointOptionsArgsPtrType) ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsArgsPtrOutput)
}

type DomainDomainEndpointOptionsArgsOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptionsArgs)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsArgsOutput) ToDomainDomainEndpointOptionsArgsOutput() DomainDomainEndpointOptionsArgsOutput {
	return o
}

func (o DomainDomainEndpointOptionsArgsOutput) ToDomainDomainEndpointOptionsArgsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsOutput {
	return o
}

func (o DomainDomainEndpointOptionsArgsOutput) ToDomainDomainEndpointOptionsArgsPtrOutput() DomainDomainEndpointOptionsArgsPtrOutput {
	return o.ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(context.Background())
}

func (o DomainDomainEndpointOptionsArgsOutput) ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsPtrOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsArgs) *DomainDomainEndpointOptionsArgs {
		return &v
	}).(DomainDomainEndpointOptionsArgsPtrOutput)
}

// Whether or not to require HTTPS
func (o DomainDomainEndpointOptionsArgsOutput) EnforceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsArgs) bool { return v.EnforceHttps }).(pulumi.BoolOutput)
}

// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsArgsOutput) TlsSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsArgs) *string { return v.TlsSecurityPolicy }).(pulumi.StringPtrOutput)
}

type DomainDomainEndpointOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDomainEndpointOptionsArgs)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsArgsPtrOutput) ToDomainDomainEndpointOptionsArgsPtrOutput() DomainDomainEndpointOptionsArgsPtrOutput {
	return o
}

func (o DomainDomainEndpointOptionsArgsPtrOutput) ToDomainDomainEndpointOptionsArgsPtrOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsArgsPtrOutput {
	return o
}

func (o DomainDomainEndpointOptionsArgsPtrOutput) Elem() DomainDomainEndpointOptionsArgsOutput {
	return o.ApplyT(func(v *DomainDomainEndpointOptionsArgs) DomainDomainEndpointOptionsArgs { return *v }).(DomainDomainEndpointOptionsArgsOutput)
}

// Whether or not to require HTTPS
func (o DomainDomainEndpointOptionsArgsPtrOutput) EnforceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsArgs) bool { return v.EnforceHttps }).(pulumi.BoolOutput)
}

// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsArgsPtrOutput) TlsSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsArgs) *string { return v.TlsSecurityPolicy }).(pulumi.StringPtrOutput)
}

type DomainDomainEndpointOptionsState struct {
	// Whether or not to require HTTPS
	EnforceHttps bool `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy *string `pulumi:"tlsSecurityPolicy"`
}

type DomainDomainEndpointOptionsStateInput interface {
	pulumi.Input

	ToDomainDomainEndpointOptionsStateOutput() DomainDomainEndpointOptionsStateOutput
	ToDomainDomainEndpointOptionsStateOutputWithContext(context.Context) DomainDomainEndpointOptionsStateOutput
}

type DomainDomainEndpointOptionsStateArgs struct {
	// Whether or not to require HTTPS
	EnforceHttps pulumi.BoolInput `pulumi:"enforceHttps"`
	// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy pulumi.StringPtrInput `pulumi:"tlsSecurityPolicy"`
}

func (DomainDomainEndpointOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptionsState)(nil)).Elem()
}

func (i DomainDomainEndpointOptionsStateArgs) ToDomainDomainEndpointOptionsStateOutput() DomainDomainEndpointOptionsStateOutput {
	return i.ToDomainDomainEndpointOptionsStateOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsStateArgs) ToDomainDomainEndpointOptionsStateOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsStateOutput)
}

type DomainDomainEndpointOptionsStateOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptionsState)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsStateOutput) ToDomainDomainEndpointOptionsStateOutput() DomainDomainEndpointOptionsStateOutput {
	return o
}

func (o DomainDomainEndpointOptionsStateOutput) ToDomainDomainEndpointOptionsStateOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsStateOutput {
	return o
}

// Whether or not to require HTTPS
func (o DomainDomainEndpointOptionsStateOutput) EnforceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsState) bool { return v.EnforceHttps }).(pulumi.BoolOutput)
}

// The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsStateOutput) TlsSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainDomainEndpointOptionsState) *string { return v.TlsSecurityPolicy }).(pulumi.StringPtrOutput)
}

type DomainEbsOptions struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops *int `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize *int `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType string `pulumi:"volumeType"`
}

type DomainEbsOptionsInput interface {
	pulumi.Input

	ToDomainEbsOptionsOutput() DomainEbsOptionsOutput
	ToDomainEbsOptionsOutputWithContext(context.Context) DomainEbsOptionsOutput
}

type DomainEbsOptionsArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumi.BoolInput `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (DomainEbsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptions)(nil)).Elem()
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsOutput() DomainEbsOptionsOutput {
	return i.ToDomainEbsOptionsOutputWithContext(context.Background())
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsOutputWithContext(ctx context.Context) DomainEbsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsOutput)
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsPtrOutput() DomainEbsOptionsPtrOutput {
	return i.ToDomainEbsOptionsPtrOutputWithContext(context.Background())
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsOutput).ToDomainEbsOptionsPtrOutputWithContext(ctx)
}

type DomainEbsOptionsPtrInput interface {
	pulumi.Input

	ToDomainEbsOptionsPtrOutput() DomainEbsOptionsPtrOutput
	ToDomainEbsOptionsPtrOutputWithContext(context.Context) DomainEbsOptionsPtrOutput
}

type domainEbsOptionsPtrType DomainEbsOptionsArgs

func DomainEbsOptionsPtr(v *DomainEbsOptionsArgs) DomainEbsOptionsPtrInput {
	return (*domainEbsOptionsPtrType)(v)
}

func (*domainEbsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEbsOptions)(nil)).Elem()
}

func (i *domainEbsOptionsPtrType) ToDomainEbsOptionsPtrOutput() DomainEbsOptionsPtrOutput {
	return i.ToDomainEbsOptionsPtrOutputWithContext(context.Background())
}

func (i *domainEbsOptionsPtrType) ToDomainEbsOptionsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsPtrOutput)
}

type DomainEbsOptionsOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptions)(nil)).Elem()
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsOutput() DomainEbsOptionsOutput {
	return o
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsOutputWithContext(ctx context.Context) DomainEbsOptionsOutput {
	return o
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsPtrOutput() DomainEbsOptionsPtrOutput {
	return o.ToDomainEbsOptionsPtrOutputWithContext(context.Background())
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsPtrOutput {
	return o.ApplyT(func(v DomainEbsOptions) *DomainEbsOptions {
		return &v
	}).(DomainEbsOptionsPtrOutput)
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEbsOptions) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
func (o DomainEbsOptionsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptions) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
// **Required** if `ebsEnabled` is set to `true`.
func (o DomainEbsOptionsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptions) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// The type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainEbsOptions) string { return v.VolumeType }).(pulumi.StringOutput)
}

type DomainEbsOptionsPtrOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEbsOptions)(nil)).Elem()
}

func (o DomainEbsOptionsPtrOutput) ToDomainEbsOptionsPtrOutput() DomainEbsOptionsPtrOutput {
	return o
}

func (o DomainEbsOptionsPtrOutput) ToDomainEbsOptionsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsPtrOutput {
	return o
}

func (o DomainEbsOptionsPtrOutput) Elem() DomainEbsOptionsOutput {
	return o.ApplyT(func(v *DomainEbsOptions) DomainEbsOptions { return *v }).(DomainEbsOptionsOutput)
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsPtrOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEbsOptions) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
func (o DomainEbsOptionsPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptions) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
// **Required** if `ebsEnabled` is set to `true`.
func (o DomainEbsOptionsPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptions) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// The type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsPtrOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainEbsOptions) string { return v.VolumeType }).(pulumi.StringOutput)
}

type DomainEbsOptionsArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops *int `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize *int `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType *string `pulumi:"volumeType"`
}

type DomainEbsOptionsArgsInput interface {
	pulumi.Input

	ToDomainEbsOptionsArgsOutput() DomainEbsOptionsArgsOutput
	ToDomainEbsOptionsArgsOutputWithContext(context.Context) DomainEbsOptionsArgsOutput
}

type DomainEbsOptionsArgsArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumi.BoolInput `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (DomainEbsOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptionsArgs)(nil)).Elem()
}

func (i DomainEbsOptionsArgsArgs) ToDomainEbsOptionsArgsOutput() DomainEbsOptionsArgsOutput {
	return i.ToDomainEbsOptionsArgsOutputWithContext(context.Background())
}

func (i DomainEbsOptionsArgsArgs) ToDomainEbsOptionsArgsOutputWithContext(ctx context.Context) DomainEbsOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsArgsOutput)
}

func (i DomainEbsOptionsArgsArgs) ToDomainEbsOptionsArgsPtrOutput() DomainEbsOptionsArgsPtrOutput {
	return i.ToDomainEbsOptionsArgsPtrOutputWithContext(context.Background())
}

func (i DomainEbsOptionsArgsArgs) ToDomainEbsOptionsArgsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsArgsOutput).ToDomainEbsOptionsArgsPtrOutputWithContext(ctx)
}

type DomainEbsOptionsArgsPtrInput interface {
	pulumi.Input

	ToDomainEbsOptionsArgsPtrOutput() DomainEbsOptionsArgsPtrOutput
	ToDomainEbsOptionsArgsPtrOutputWithContext(context.Context) DomainEbsOptionsArgsPtrOutput
}

type domainEbsOptionsArgsPtrType DomainEbsOptionsArgsArgs

func DomainEbsOptionsArgsPtr(v *DomainEbsOptionsArgsArgs) DomainEbsOptionsArgsPtrInput {
	return (*domainEbsOptionsArgsPtrType)(v)
}

func (*domainEbsOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEbsOptionsArgs)(nil)).Elem()
}

func (i *domainEbsOptionsArgsPtrType) ToDomainEbsOptionsArgsPtrOutput() DomainEbsOptionsArgsPtrOutput {
	return i.ToDomainEbsOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *domainEbsOptionsArgsPtrType) ToDomainEbsOptionsArgsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsArgsPtrOutput)
}

type DomainEbsOptionsArgsOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptionsArgs)(nil)).Elem()
}

func (o DomainEbsOptionsArgsOutput) ToDomainEbsOptionsArgsOutput() DomainEbsOptionsArgsOutput {
	return o
}

func (o DomainEbsOptionsArgsOutput) ToDomainEbsOptionsArgsOutputWithContext(ctx context.Context) DomainEbsOptionsArgsOutput {
	return o
}

func (o DomainEbsOptionsArgsOutput) ToDomainEbsOptionsArgsPtrOutput() DomainEbsOptionsArgsPtrOutput {
	return o.ToDomainEbsOptionsArgsPtrOutputWithContext(context.Background())
}

func (o DomainEbsOptionsArgsOutput) ToDomainEbsOptionsArgsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsArgsPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *DomainEbsOptionsArgs {
		return &v
	}).(DomainEbsOptionsArgsPtrOutput)
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsArgsOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
func (o DomainEbsOptionsArgsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
// **Required** if `ebsEnabled` is set to `true`.
func (o DomainEbsOptionsArgsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// The type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsArgsOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type DomainEbsOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEbsOptionsArgs)(nil)).Elem()
}

func (o DomainEbsOptionsArgsPtrOutput) ToDomainEbsOptionsArgsPtrOutput() DomainEbsOptionsArgsPtrOutput {
	return o
}

func (o DomainEbsOptionsArgsPtrOutput) ToDomainEbsOptionsArgsPtrOutputWithContext(ctx context.Context) DomainEbsOptionsArgsPtrOutput {
	return o
}

func (o DomainEbsOptionsArgsPtrOutput) Elem() DomainEbsOptionsArgsOutput {
	return o.ApplyT(func(v *DomainEbsOptionsArgs) DomainEbsOptionsArgs { return *v }).(DomainEbsOptionsArgsOutput)
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsArgsPtrOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
func (o DomainEbsOptionsArgsPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
// **Required** if `ebsEnabled` is set to `true`.
func (o DomainEbsOptionsArgsPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// The type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsArgsPtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsArgs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type DomainEbsOptionsState struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops *int `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize *int `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType *string `pulumi:"volumeType"`
}

type DomainEbsOptionsStateInput interface {
	pulumi.Input

	ToDomainEbsOptionsStateOutput() DomainEbsOptionsStateOutput
	ToDomainEbsOptionsStateOutputWithContext(context.Context) DomainEbsOptionsStateOutput
}

type DomainEbsOptionsStateArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumi.BoolInput `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	// **Required** if `ebsEnabled` is set to `true`.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (DomainEbsOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptionsState)(nil)).Elem()
}

func (i DomainEbsOptionsStateArgs) ToDomainEbsOptionsStateOutput() DomainEbsOptionsStateOutput {
	return i.ToDomainEbsOptionsStateOutputWithContext(context.Background())
}

func (i DomainEbsOptionsStateArgs) ToDomainEbsOptionsStateOutputWithContext(ctx context.Context) DomainEbsOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsStateOutput)
}

type DomainEbsOptionsStateOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptionsState)(nil)).Elem()
}

func (o DomainEbsOptionsStateOutput) ToDomainEbsOptionsStateOutput() DomainEbsOptionsStateOutput {
	return o
}

func (o DomainEbsOptionsStateOutput) ToDomainEbsOptionsStateOutputWithContext(ctx context.Context) DomainEbsOptionsStateOutput {
	return o
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsStateOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEbsOptionsState) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
func (o DomainEbsOptionsStateOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsState) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
// **Required** if `ebsEnabled` is set to `true`.
func (o DomainEbsOptionsStateOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsState) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// The type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsStateOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEbsOptionsState) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type DomainEncryptAtRest struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId string `pulumi:"kmsKeyId"`
}

type DomainEncryptAtRestInput interface {
	pulumi.Input

	ToDomainEncryptAtRestOutput() DomainEncryptAtRestOutput
	ToDomainEncryptAtRestOutputWithContext(context.Context) DomainEncryptAtRestOutput
}

type DomainEncryptAtRestArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
}

func (DomainEncryptAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRest)(nil)).Elem()
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestOutput() DomainEncryptAtRestOutput {
	return i.ToDomainEncryptAtRestOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestOutputWithContext(ctx context.Context) DomainEncryptAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestOutput)
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestPtrOutput() DomainEncryptAtRestPtrOutput {
	return i.ToDomainEncryptAtRestPtrOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestOutput).ToDomainEncryptAtRestPtrOutputWithContext(ctx)
}

type DomainEncryptAtRestPtrInput interface {
	pulumi.Input

	ToDomainEncryptAtRestPtrOutput() DomainEncryptAtRestPtrOutput
	ToDomainEncryptAtRestPtrOutputWithContext(context.Context) DomainEncryptAtRestPtrOutput
}

type domainEncryptAtRestPtrType DomainEncryptAtRestArgs

func DomainEncryptAtRestPtr(v *DomainEncryptAtRestArgs) DomainEncryptAtRestPtrInput {
	return (*domainEncryptAtRestPtrType)(v)
}

func (*domainEncryptAtRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEncryptAtRest)(nil)).Elem()
}

func (i *domainEncryptAtRestPtrType) ToDomainEncryptAtRestPtrOutput() DomainEncryptAtRestPtrOutput {
	return i.ToDomainEncryptAtRestPtrOutputWithContext(context.Background())
}

func (i *domainEncryptAtRestPtrType) ToDomainEncryptAtRestPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestPtrOutput)
}

type DomainEncryptAtRestOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRest)(nil)).Elem()
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestOutput() DomainEncryptAtRestOutput {
	return o
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestOutputWithContext(ctx context.Context) DomainEncryptAtRestOutput {
	return o
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestPtrOutput() DomainEncryptAtRestPtrOutput {
	return o.ToDomainEncryptAtRestPtrOutputWithContext(context.Background())
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestPtrOutput {
	return o.ApplyT(func(v DomainEncryptAtRest) *DomainEncryptAtRest {
		return &v
	}).(DomainEncryptAtRestPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainEncryptAtRestOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEncryptAtRest) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
func (o DomainEncryptAtRestOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainEncryptAtRest) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

type DomainEncryptAtRestPtrOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEncryptAtRest)(nil)).Elem()
}

func (o DomainEncryptAtRestPtrOutput) ToDomainEncryptAtRestPtrOutput() DomainEncryptAtRestPtrOutput {
	return o
}

func (o DomainEncryptAtRestPtrOutput) ToDomainEncryptAtRestPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestPtrOutput {
	return o
}

func (o DomainEncryptAtRestPtrOutput) Elem() DomainEncryptAtRestOutput {
	return o.ApplyT(func(v *DomainEncryptAtRest) DomainEncryptAtRest { return *v }).(DomainEncryptAtRestOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainEncryptAtRestPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEncryptAtRest) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
func (o DomainEncryptAtRestPtrOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainEncryptAtRest) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

type DomainEncryptAtRestArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

type DomainEncryptAtRestArgsInput interface {
	pulumi.Input

	ToDomainEncryptAtRestArgsOutput() DomainEncryptAtRestArgsOutput
	ToDomainEncryptAtRestArgsOutputWithContext(context.Context) DomainEncryptAtRestArgsOutput
}

type DomainEncryptAtRestArgsArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (DomainEncryptAtRestArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRestArgs)(nil)).Elem()
}

func (i DomainEncryptAtRestArgsArgs) ToDomainEncryptAtRestArgsOutput() DomainEncryptAtRestArgsOutput {
	return i.ToDomainEncryptAtRestArgsOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestArgsArgs) ToDomainEncryptAtRestArgsOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestArgsOutput)
}

func (i DomainEncryptAtRestArgsArgs) ToDomainEncryptAtRestArgsPtrOutput() DomainEncryptAtRestArgsPtrOutput {
	return i.ToDomainEncryptAtRestArgsPtrOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestArgsArgs) ToDomainEncryptAtRestArgsPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestArgsOutput).ToDomainEncryptAtRestArgsPtrOutputWithContext(ctx)
}

type DomainEncryptAtRestArgsPtrInput interface {
	pulumi.Input

	ToDomainEncryptAtRestArgsPtrOutput() DomainEncryptAtRestArgsPtrOutput
	ToDomainEncryptAtRestArgsPtrOutputWithContext(context.Context) DomainEncryptAtRestArgsPtrOutput
}

type domainEncryptAtRestArgsPtrType DomainEncryptAtRestArgsArgs

func DomainEncryptAtRestArgsPtr(v *DomainEncryptAtRestArgsArgs) DomainEncryptAtRestArgsPtrInput {
	return (*domainEncryptAtRestArgsPtrType)(v)
}

func (*domainEncryptAtRestArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEncryptAtRestArgs)(nil)).Elem()
}

func (i *domainEncryptAtRestArgsPtrType) ToDomainEncryptAtRestArgsPtrOutput() DomainEncryptAtRestArgsPtrOutput {
	return i.ToDomainEncryptAtRestArgsPtrOutputWithContext(context.Background())
}

func (i *domainEncryptAtRestArgsPtrType) ToDomainEncryptAtRestArgsPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestArgsPtrOutput)
}

type DomainEncryptAtRestArgsOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRestArgs)(nil)).Elem()
}

func (o DomainEncryptAtRestArgsOutput) ToDomainEncryptAtRestArgsOutput() DomainEncryptAtRestArgsOutput {
	return o
}

func (o DomainEncryptAtRestArgsOutput) ToDomainEncryptAtRestArgsOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsOutput {
	return o
}

func (o DomainEncryptAtRestArgsOutput) ToDomainEncryptAtRestArgsPtrOutput() DomainEncryptAtRestArgsPtrOutput {
	return o.ToDomainEncryptAtRestArgsPtrOutputWithContext(context.Background())
}

func (o DomainEncryptAtRestArgsOutput) ToDomainEncryptAtRestArgsPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsPtrOutput {
	return o.ApplyT(func(v DomainEncryptAtRestArgs) *DomainEncryptAtRestArgs {
		return &v
	}).(DomainEncryptAtRestArgsPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainEncryptAtRestArgsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEncryptAtRestArgs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
func (o DomainEncryptAtRestArgsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEncryptAtRestArgs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type DomainEncryptAtRestArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainEncryptAtRestArgs)(nil)).Elem()
}

func (o DomainEncryptAtRestArgsPtrOutput) ToDomainEncryptAtRestArgsPtrOutput() DomainEncryptAtRestArgsPtrOutput {
	return o
}

func (o DomainEncryptAtRestArgsPtrOutput) ToDomainEncryptAtRestArgsPtrOutputWithContext(ctx context.Context) DomainEncryptAtRestArgsPtrOutput {
	return o
}

func (o DomainEncryptAtRestArgsPtrOutput) Elem() DomainEncryptAtRestArgsOutput {
	return o.ApplyT(func(v *DomainEncryptAtRestArgs) DomainEncryptAtRestArgs { return *v }).(DomainEncryptAtRestArgsOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainEncryptAtRestArgsPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEncryptAtRestArgs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
func (o DomainEncryptAtRestArgsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEncryptAtRestArgs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type DomainEncryptAtRestState struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

type DomainEncryptAtRestStateInput interface {
	pulumi.Input

	ToDomainEncryptAtRestStateOutput() DomainEncryptAtRestStateOutput
	ToDomainEncryptAtRestStateOutputWithContext(context.Context) DomainEncryptAtRestStateOutput
}

type DomainEncryptAtRestStateArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (DomainEncryptAtRestStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRestState)(nil)).Elem()
}

func (i DomainEncryptAtRestStateArgs) ToDomainEncryptAtRestStateOutput() DomainEncryptAtRestStateOutput {
	return i.ToDomainEncryptAtRestStateOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestStateArgs) ToDomainEncryptAtRestStateOutputWithContext(ctx context.Context) DomainEncryptAtRestStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestStateOutput)
}

type DomainEncryptAtRestStateOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRestState)(nil)).Elem()
}

func (o DomainEncryptAtRestStateOutput) ToDomainEncryptAtRestStateOutput() DomainEncryptAtRestStateOutput {
	return o
}

func (o DomainEncryptAtRestStateOutput) ToDomainEncryptAtRestStateOutputWithContext(ctx context.Context) DomainEncryptAtRestStateOutput {
	return o
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainEncryptAtRestStateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainEncryptAtRestState) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
func (o DomainEncryptAtRestStateOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainEncryptAtRestState) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type DomainLogPublishingOption struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType string `pulumi:"logType"`
}

type DomainLogPublishingOptionInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionOutput() DomainLogPublishingOptionOutput
	ToDomainLogPublishingOptionOutputWithContext(context.Context) DomainLogPublishingOptionOutput
}

type DomainLogPublishingOptionArgs struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn pulumi.StringInput `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (DomainLogPublishingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOption)(nil)).Elem()
}

func (i DomainLogPublishingOptionArgs) ToDomainLogPublishingOptionOutput() DomainLogPublishingOptionOutput {
	return i.ToDomainLogPublishingOptionOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionArgs) ToDomainLogPublishingOptionOutputWithContext(ctx context.Context) DomainLogPublishingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionOutput)
}

type DomainLogPublishingOptionArrayInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionArrayOutput() DomainLogPublishingOptionArrayOutput
	ToDomainLogPublishingOptionArrayOutputWithContext(context.Context) DomainLogPublishingOptionArrayOutput
}

type DomainLogPublishingOptionArray []DomainLogPublishingOptionInput

func (DomainLogPublishingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOption)(nil)).Elem()
}

func (i DomainLogPublishingOptionArray) ToDomainLogPublishingOptionArrayOutput() DomainLogPublishingOptionArrayOutput {
	return i.ToDomainLogPublishingOptionArrayOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionArray) ToDomainLogPublishingOptionArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionArrayOutput)
}

type DomainLogPublishingOptionOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOption)(nil)).Elem()
}

func (o DomainLogPublishingOptionOutput) ToDomainLogPublishingOptionOutput() DomainLogPublishingOptionOutput {
	return o
}

func (o DomainLogPublishingOptionOutput) ToDomainLogPublishingOptionOutputWithContext(ctx context.Context) DomainLogPublishingOptionOutput {
	return o
}

// ARN of the Cloudwatch log group to which log needs to be published.
func (o DomainLogPublishingOptionOutput) CloudwatchLogGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOption) string { return v.CloudwatchLogGroupArn }).(pulumi.StringOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainLogPublishingOptionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainLogPublishingOption) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
func (o DomainLogPublishingOptionOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOption) string { return v.LogType }).(pulumi.StringOutput)
}

type DomainLogPublishingOptionArrayOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOption)(nil)).Elem()
}

func (o DomainLogPublishingOptionArrayOutput) ToDomainLogPublishingOptionArrayOutput() DomainLogPublishingOptionArrayOutput {
	return o
}

func (o DomainLogPublishingOptionArrayOutput) ToDomainLogPublishingOptionArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionArrayOutput {
	return o
}

func (o DomainLogPublishingOptionArrayOutput) Index(i pulumi.IntInput) DomainLogPublishingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainLogPublishingOption {
		return vs[0].([]DomainLogPublishingOption)[vs[1].(int)]
	}).(DomainLogPublishingOptionOutput)
}

type DomainLogPublishingOptionArgs struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType string `pulumi:"logType"`
}

type DomainLogPublishingOptionArgsInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionArgsOutput() DomainLogPublishingOptionArgsOutput
	ToDomainLogPublishingOptionArgsOutputWithContext(context.Context) DomainLogPublishingOptionArgsOutput
}

type DomainLogPublishingOptionArgsArgs struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn pulumi.StringInput `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (DomainLogPublishingOptionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOptionArgs)(nil)).Elem()
}

func (i DomainLogPublishingOptionArgsArgs) ToDomainLogPublishingOptionArgsOutput() DomainLogPublishingOptionArgsOutput {
	return i.ToDomainLogPublishingOptionArgsOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionArgsArgs) ToDomainLogPublishingOptionArgsOutputWithContext(ctx context.Context) DomainLogPublishingOptionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionArgsOutput)
}

type DomainLogPublishingOptionArgsArrayInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionArgsArrayOutput() DomainLogPublishingOptionArgsArrayOutput
	ToDomainLogPublishingOptionArgsArrayOutputWithContext(context.Context) DomainLogPublishingOptionArgsArrayOutput
}

type DomainLogPublishingOptionArgsArray []DomainLogPublishingOptionArgsInput

func (DomainLogPublishingOptionArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOptionArgs)(nil)).Elem()
}

func (i DomainLogPublishingOptionArgsArray) ToDomainLogPublishingOptionArgsArrayOutput() DomainLogPublishingOptionArgsArrayOutput {
	return i.ToDomainLogPublishingOptionArgsArrayOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionArgsArray) ToDomainLogPublishingOptionArgsArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionArgsArrayOutput)
}

type DomainLogPublishingOptionArgsOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOptionArgs)(nil)).Elem()
}

func (o DomainLogPublishingOptionArgsOutput) ToDomainLogPublishingOptionArgsOutput() DomainLogPublishingOptionArgsOutput {
	return o
}

func (o DomainLogPublishingOptionArgsOutput) ToDomainLogPublishingOptionArgsOutputWithContext(ctx context.Context) DomainLogPublishingOptionArgsOutput {
	return o
}

// ARN of the Cloudwatch log group to which log needs to be published.
func (o DomainLogPublishingOptionArgsOutput) CloudwatchLogGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionArgs) string { return v.CloudwatchLogGroupArn }).(pulumi.StringOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainLogPublishingOptionArgsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionArgs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
func (o DomainLogPublishingOptionArgsOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionArgs) string { return v.LogType }).(pulumi.StringOutput)
}

type DomainLogPublishingOptionArgsArrayOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOptionArgs)(nil)).Elem()
}

func (o DomainLogPublishingOptionArgsArrayOutput) ToDomainLogPublishingOptionArgsArrayOutput() DomainLogPublishingOptionArgsArrayOutput {
	return o
}

func (o DomainLogPublishingOptionArgsArrayOutput) ToDomainLogPublishingOptionArgsArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionArgsArrayOutput {
	return o
}

func (o DomainLogPublishingOptionArgsArrayOutput) Index(i pulumi.IntInput) DomainLogPublishingOptionArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainLogPublishingOptionArgs {
		return vs[0].([]DomainLogPublishingOptionArgs)[vs[1].(int)]
	}).(DomainLogPublishingOptionArgsOutput)
}

type DomainLogPublishingOptionState struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType string `pulumi:"logType"`
}

type DomainLogPublishingOptionStateInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionStateOutput() DomainLogPublishingOptionStateOutput
	ToDomainLogPublishingOptionStateOutputWithContext(context.Context) DomainLogPublishingOptionStateOutput
}

type DomainLogPublishingOptionStateArgs struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn pulumi.StringInput `pulumi:"cloudwatchLogGroupArn"`
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (DomainLogPublishingOptionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOptionState)(nil)).Elem()
}

func (i DomainLogPublishingOptionStateArgs) ToDomainLogPublishingOptionStateOutput() DomainLogPublishingOptionStateOutput {
	return i.ToDomainLogPublishingOptionStateOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionStateArgs) ToDomainLogPublishingOptionStateOutputWithContext(ctx context.Context) DomainLogPublishingOptionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionStateOutput)
}

type DomainLogPublishingOptionStateArrayInput interface {
	pulumi.Input

	ToDomainLogPublishingOptionStateArrayOutput() DomainLogPublishingOptionStateArrayOutput
	ToDomainLogPublishingOptionStateArrayOutputWithContext(context.Context) DomainLogPublishingOptionStateArrayOutput
}

type DomainLogPublishingOptionStateArray []DomainLogPublishingOptionStateInput

func (DomainLogPublishingOptionStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOptionState)(nil)).Elem()
}

func (i DomainLogPublishingOptionStateArray) ToDomainLogPublishingOptionStateArrayOutput() DomainLogPublishingOptionStateArrayOutput {
	return i.ToDomainLogPublishingOptionStateArrayOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionStateArray) ToDomainLogPublishingOptionStateArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionStateArrayOutput)
}

type DomainLogPublishingOptionStateOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOptionState)(nil)).Elem()
}

func (o DomainLogPublishingOptionStateOutput) ToDomainLogPublishingOptionStateOutput() DomainLogPublishingOptionStateOutput {
	return o
}

func (o DomainLogPublishingOptionStateOutput) ToDomainLogPublishingOptionStateOutputWithContext(ctx context.Context) DomainLogPublishingOptionStateOutput {
	return o
}

// ARN of the Cloudwatch log group to which log needs to be published.
func (o DomainLogPublishingOptionStateOutput) CloudwatchLogGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionState) string { return v.CloudwatchLogGroupArn }).(pulumi.StringOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainLogPublishingOptionStateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionState) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS
func (o DomainLogPublishingOptionStateOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainLogPublishingOptionState) string { return v.LogType }).(pulumi.StringOutput)
}

type DomainLogPublishingOptionStateArrayOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainLogPublishingOptionState)(nil)).Elem()
}

func (o DomainLogPublishingOptionStateArrayOutput) ToDomainLogPublishingOptionStateArrayOutput() DomainLogPublishingOptionStateArrayOutput {
	return o
}

func (o DomainLogPublishingOptionStateArrayOutput) ToDomainLogPublishingOptionStateArrayOutputWithContext(ctx context.Context) DomainLogPublishingOptionStateArrayOutput {
	return o
}

func (o DomainLogPublishingOptionStateArrayOutput) Index(i pulumi.IntInput) DomainLogPublishingOptionStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainLogPublishingOptionState {
		return vs[0].([]DomainLogPublishingOptionState)[vs[1].(int)]
	}).(DomainLogPublishingOptionStateOutput)
}

type DomainNodeToNodeEncryption struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
}

type DomainNodeToNodeEncryptionInput interface {
	pulumi.Input

	ToDomainNodeToNodeEncryptionOutput() DomainNodeToNodeEncryptionOutput
	ToDomainNodeToNodeEncryptionOutputWithContext(context.Context) DomainNodeToNodeEncryptionOutput
}

type DomainNodeToNodeEncryptionArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DomainNodeToNodeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryption)(nil)).Elem()
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionOutput() DomainNodeToNodeEncryptionOutput {
	return i.ToDomainNodeToNodeEncryptionOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionOutput)
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionPtrOutput() DomainNodeToNodeEncryptionPtrOutput {
	return i.ToDomainNodeToNodeEncryptionPtrOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionOutput).ToDomainNodeToNodeEncryptionPtrOutputWithContext(ctx)
}

type DomainNodeToNodeEncryptionPtrInput interface {
	pulumi.Input

	ToDomainNodeToNodeEncryptionPtrOutput() DomainNodeToNodeEncryptionPtrOutput
	ToDomainNodeToNodeEncryptionPtrOutputWithContext(context.Context) DomainNodeToNodeEncryptionPtrOutput
}

type domainNodeToNodeEncryptionPtrType DomainNodeToNodeEncryptionArgs

func DomainNodeToNodeEncryptionPtr(v *DomainNodeToNodeEncryptionArgs) DomainNodeToNodeEncryptionPtrInput {
	return (*domainNodeToNodeEncryptionPtrType)(v)
}

func (*domainNodeToNodeEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNodeToNodeEncryption)(nil)).Elem()
}

func (i *domainNodeToNodeEncryptionPtrType) ToDomainNodeToNodeEncryptionPtrOutput() DomainNodeToNodeEncryptionPtrOutput {
	return i.ToDomainNodeToNodeEncryptionPtrOutputWithContext(context.Background())
}

func (i *domainNodeToNodeEncryptionPtrType) ToDomainNodeToNodeEncryptionPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionPtrOutput)
}

type DomainNodeToNodeEncryptionOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryption)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionOutput() DomainNodeToNodeEncryptionOutput {
	return o
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionOutput {
	return o
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionPtrOutput() DomainNodeToNodeEncryptionPtrOutput {
	return o.ToDomainNodeToNodeEncryptionPtrOutputWithContext(context.Background())
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionPtrOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryption) *DomainNodeToNodeEncryption {
		return &v
	}).(DomainNodeToNodeEncryptionPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainNodeToNodeEncryptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DomainNodeToNodeEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNodeToNodeEncryption)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionPtrOutput) ToDomainNodeToNodeEncryptionPtrOutput() DomainNodeToNodeEncryptionPtrOutput {
	return o
}

func (o DomainNodeToNodeEncryptionPtrOutput) ToDomainNodeToNodeEncryptionPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionPtrOutput {
	return o
}

func (o DomainNodeToNodeEncryptionPtrOutput) Elem() DomainNodeToNodeEncryptionOutput {
	return o.ApplyT(func(v *DomainNodeToNodeEncryption) DomainNodeToNodeEncryption { return *v }).(DomainNodeToNodeEncryptionOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainNodeToNodeEncryptionPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DomainNodeToNodeEncryptionArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
}

type DomainNodeToNodeEncryptionArgsInput interface {
	pulumi.Input

	ToDomainNodeToNodeEncryptionArgsOutput() DomainNodeToNodeEncryptionArgsOutput
	ToDomainNodeToNodeEncryptionArgsOutputWithContext(context.Context) DomainNodeToNodeEncryptionArgsOutput
}

type DomainNodeToNodeEncryptionArgsArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DomainNodeToNodeEncryptionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryptionArgs)(nil)).Elem()
}

func (i DomainNodeToNodeEncryptionArgsArgs) ToDomainNodeToNodeEncryptionArgsOutput() DomainNodeToNodeEncryptionArgsOutput {
	return i.ToDomainNodeToNodeEncryptionArgsOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionArgsArgs) ToDomainNodeToNodeEncryptionArgsOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionArgsOutput)
}

func (i DomainNodeToNodeEncryptionArgsArgs) ToDomainNodeToNodeEncryptionArgsPtrOutput() DomainNodeToNodeEncryptionArgsPtrOutput {
	return i.ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionArgsArgs) ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionArgsOutput).ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(ctx)
}

type DomainNodeToNodeEncryptionArgsPtrInput interface {
	pulumi.Input

	ToDomainNodeToNodeEncryptionArgsPtrOutput() DomainNodeToNodeEncryptionArgsPtrOutput
	ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(context.Context) DomainNodeToNodeEncryptionArgsPtrOutput
}

type domainNodeToNodeEncryptionArgsPtrType DomainNodeToNodeEncryptionArgsArgs

func DomainNodeToNodeEncryptionArgsPtr(v *DomainNodeToNodeEncryptionArgsArgs) DomainNodeToNodeEncryptionArgsPtrInput {
	return (*domainNodeToNodeEncryptionArgsPtrType)(v)
}

func (*domainNodeToNodeEncryptionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNodeToNodeEncryptionArgs)(nil)).Elem()
}

func (i *domainNodeToNodeEncryptionArgsPtrType) ToDomainNodeToNodeEncryptionArgsPtrOutput() DomainNodeToNodeEncryptionArgsPtrOutput {
	return i.ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(context.Background())
}

func (i *domainNodeToNodeEncryptionArgsPtrType) ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionArgsPtrOutput)
}

type DomainNodeToNodeEncryptionArgsOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryptionArgs)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionArgsOutput) ToDomainNodeToNodeEncryptionArgsOutput() DomainNodeToNodeEncryptionArgsOutput {
	return o
}

func (o DomainNodeToNodeEncryptionArgsOutput) ToDomainNodeToNodeEncryptionArgsOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsOutput {
	return o
}

func (o DomainNodeToNodeEncryptionArgsOutput) ToDomainNodeToNodeEncryptionArgsPtrOutput() DomainNodeToNodeEncryptionArgsPtrOutput {
	return o.ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(context.Background())
}

func (o DomainNodeToNodeEncryptionArgsOutput) ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsPtrOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryptionArgs) *DomainNodeToNodeEncryptionArgs {
		return &v
	}).(DomainNodeToNodeEncryptionArgsPtrOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainNodeToNodeEncryptionArgsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryptionArgs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DomainNodeToNodeEncryptionArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNodeToNodeEncryptionArgs)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionArgsPtrOutput) ToDomainNodeToNodeEncryptionArgsPtrOutput() DomainNodeToNodeEncryptionArgsPtrOutput {
	return o
}

func (o DomainNodeToNodeEncryptionArgsPtrOutput) ToDomainNodeToNodeEncryptionArgsPtrOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionArgsPtrOutput {
	return o
}

func (o DomainNodeToNodeEncryptionArgsPtrOutput) Elem() DomainNodeToNodeEncryptionArgsOutput {
	return o.ApplyT(func(v *DomainNodeToNodeEncryptionArgs) DomainNodeToNodeEncryptionArgs { return *v }).(DomainNodeToNodeEncryptionArgsOutput)
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainNodeToNodeEncryptionArgsPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryptionArgs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DomainNodeToNodeEncryptionState struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled bool `pulumi:"enabled"`
}

type DomainNodeToNodeEncryptionStateInput interface {
	pulumi.Input

	ToDomainNodeToNodeEncryptionStateOutput() DomainNodeToNodeEncryptionStateOutput
	ToDomainNodeToNodeEncryptionStateOutputWithContext(context.Context) DomainNodeToNodeEncryptionStateOutput
}

type DomainNodeToNodeEncryptionStateArgs struct {
	// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DomainNodeToNodeEncryptionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryptionState)(nil)).Elem()
}

func (i DomainNodeToNodeEncryptionStateArgs) ToDomainNodeToNodeEncryptionStateOutput() DomainNodeToNodeEncryptionStateOutput {
	return i.ToDomainNodeToNodeEncryptionStateOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionStateArgs) ToDomainNodeToNodeEncryptionStateOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionStateOutput)
}

type DomainNodeToNodeEncryptionStateOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryptionState)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionStateOutput) ToDomainNodeToNodeEncryptionStateOutput() DomainNodeToNodeEncryptionStateOutput {
	return o
}

func (o DomainNodeToNodeEncryptionStateOutput) ToDomainNodeToNodeEncryptionStateOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionStateOutput {
	return o
}

// Specifies whether Amazon Cognito authentication with Kibana is enabled or not
func (o DomainNodeToNodeEncryptionStateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainNodeToNodeEncryptionState) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DomainSnapshotOptions struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type DomainSnapshotOptionsInput interface {
	pulumi.Input

	ToDomainSnapshotOptionsOutput() DomainSnapshotOptionsOutput
	ToDomainSnapshotOptionsOutputWithContext(context.Context) DomainSnapshotOptionsOutput
}

type DomainSnapshotOptionsArgs struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumi.IntInput `pulumi:"automatedSnapshotStartHour"`
}

func (DomainSnapshotOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptions)(nil)).Elem()
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsOutput() DomainSnapshotOptionsOutput {
	return i.ToDomainSnapshotOptionsOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsOutputWithContext(ctx context.Context) DomainSnapshotOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsOutput)
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsPtrOutput() DomainSnapshotOptionsPtrOutput {
	return i.ToDomainSnapshotOptionsPtrOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsOutput).ToDomainSnapshotOptionsPtrOutputWithContext(ctx)
}

type DomainSnapshotOptionsPtrInput interface {
	pulumi.Input

	ToDomainSnapshotOptionsPtrOutput() DomainSnapshotOptionsPtrOutput
	ToDomainSnapshotOptionsPtrOutputWithContext(context.Context) DomainSnapshotOptionsPtrOutput
}

type domainSnapshotOptionsPtrType DomainSnapshotOptionsArgs

func DomainSnapshotOptionsPtr(v *DomainSnapshotOptionsArgs) DomainSnapshotOptionsPtrInput {
	return (*domainSnapshotOptionsPtrType)(v)
}

func (*domainSnapshotOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSnapshotOptions)(nil)).Elem()
}

func (i *domainSnapshotOptionsPtrType) ToDomainSnapshotOptionsPtrOutput() DomainSnapshotOptionsPtrOutput {
	return i.ToDomainSnapshotOptionsPtrOutputWithContext(context.Background())
}

func (i *domainSnapshotOptionsPtrType) ToDomainSnapshotOptionsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsPtrOutput)
}

type DomainSnapshotOptionsOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptions)(nil)).Elem()
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsOutput() DomainSnapshotOptionsOutput {
	return o
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsOutputWithContext(ctx context.Context) DomainSnapshotOptionsOutput {
	return o
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsPtrOutput() DomainSnapshotOptionsPtrOutput {
	return o.ToDomainSnapshotOptionsPtrOutputWithContext(context.Background())
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsPtrOutput {
	return o.ApplyT(func(v DomainSnapshotOptions) *DomainSnapshotOptions {
		return &v
	}).(DomainSnapshotOptionsPtrOutput)
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o DomainSnapshotOptionsOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v DomainSnapshotOptions) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type DomainSnapshotOptionsPtrOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSnapshotOptions)(nil)).Elem()
}

func (o DomainSnapshotOptionsPtrOutput) ToDomainSnapshotOptionsPtrOutput() DomainSnapshotOptionsPtrOutput {
	return o
}

func (o DomainSnapshotOptionsPtrOutput) ToDomainSnapshotOptionsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsPtrOutput {
	return o
}

func (o DomainSnapshotOptionsPtrOutput) Elem() DomainSnapshotOptionsOutput {
	return o.ApplyT(func(v *DomainSnapshotOptions) DomainSnapshotOptions { return *v }).(DomainSnapshotOptionsOutput)
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o DomainSnapshotOptionsPtrOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v DomainSnapshotOptions) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type DomainSnapshotOptionsArgs struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type DomainSnapshotOptionsArgsInput interface {
	pulumi.Input

	ToDomainSnapshotOptionsArgsOutput() DomainSnapshotOptionsArgsOutput
	ToDomainSnapshotOptionsArgsOutputWithContext(context.Context) DomainSnapshotOptionsArgsOutput
}

type DomainSnapshotOptionsArgsArgs struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumi.IntInput `pulumi:"automatedSnapshotStartHour"`
}

func (DomainSnapshotOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptionsArgs)(nil)).Elem()
}

func (i DomainSnapshotOptionsArgsArgs) ToDomainSnapshotOptionsArgsOutput() DomainSnapshotOptionsArgsOutput {
	return i.ToDomainSnapshotOptionsArgsOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsArgsArgs) ToDomainSnapshotOptionsArgsOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsArgsOutput)
}

func (i DomainSnapshotOptionsArgsArgs) ToDomainSnapshotOptionsArgsPtrOutput() DomainSnapshotOptionsArgsPtrOutput {
	return i.ToDomainSnapshotOptionsArgsPtrOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsArgsArgs) ToDomainSnapshotOptionsArgsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsArgsOutput).ToDomainSnapshotOptionsArgsPtrOutputWithContext(ctx)
}

type DomainSnapshotOptionsArgsPtrInput interface {
	pulumi.Input

	ToDomainSnapshotOptionsArgsPtrOutput() DomainSnapshotOptionsArgsPtrOutput
	ToDomainSnapshotOptionsArgsPtrOutputWithContext(context.Context) DomainSnapshotOptionsArgsPtrOutput
}

type domainSnapshotOptionsArgsPtrType DomainSnapshotOptionsArgsArgs

func DomainSnapshotOptionsArgsPtr(v *DomainSnapshotOptionsArgsArgs) DomainSnapshotOptionsArgsPtrInput {
	return (*domainSnapshotOptionsArgsPtrType)(v)
}

func (*domainSnapshotOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSnapshotOptionsArgs)(nil)).Elem()
}

func (i *domainSnapshotOptionsArgsPtrType) ToDomainSnapshotOptionsArgsPtrOutput() DomainSnapshotOptionsArgsPtrOutput {
	return i.ToDomainSnapshotOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *domainSnapshotOptionsArgsPtrType) ToDomainSnapshotOptionsArgsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsArgsPtrOutput)
}

type DomainSnapshotOptionsArgsOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptionsArgs)(nil)).Elem()
}

func (o DomainSnapshotOptionsArgsOutput) ToDomainSnapshotOptionsArgsOutput() DomainSnapshotOptionsArgsOutput {
	return o
}

func (o DomainSnapshotOptionsArgsOutput) ToDomainSnapshotOptionsArgsOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsOutput {
	return o
}

func (o DomainSnapshotOptionsArgsOutput) ToDomainSnapshotOptionsArgsPtrOutput() DomainSnapshotOptionsArgsPtrOutput {
	return o.ToDomainSnapshotOptionsArgsPtrOutputWithContext(context.Background())
}

func (o DomainSnapshotOptionsArgsOutput) ToDomainSnapshotOptionsArgsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsPtrOutput {
	return o.ApplyT(func(v DomainSnapshotOptionsArgs) *DomainSnapshotOptionsArgs {
		return &v
	}).(DomainSnapshotOptionsArgsPtrOutput)
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o DomainSnapshotOptionsArgsOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v DomainSnapshotOptionsArgs) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type DomainSnapshotOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSnapshotOptionsArgs)(nil)).Elem()
}

func (o DomainSnapshotOptionsArgsPtrOutput) ToDomainSnapshotOptionsArgsPtrOutput() DomainSnapshotOptionsArgsPtrOutput {
	return o
}

func (o DomainSnapshotOptionsArgsPtrOutput) ToDomainSnapshotOptionsArgsPtrOutputWithContext(ctx context.Context) DomainSnapshotOptionsArgsPtrOutput {
	return o
}

func (o DomainSnapshotOptionsArgsPtrOutput) Elem() DomainSnapshotOptionsArgsOutput {
	return o.ApplyT(func(v *DomainSnapshotOptionsArgs) DomainSnapshotOptionsArgs { return *v }).(DomainSnapshotOptionsArgsOutput)
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o DomainSnapshotOptionsArgsPtrOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v DomainSnapshotOptionsArgs) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type DomainSnapshotOptionsState struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type DomainSnapshotOptionsStateInput interface {
	pulumi.Input

	ToDomainSnapshotOptionsStateOutput() DomainSnapshotOptionsStateOutput
	ToDomainSnapshotOptionsStateOutputWithContext(context.Context) DomainSnapshotOptionsStateOutput
}

type DomainSnapshotOptionsStateArgs struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumi.IntInput `pulumi:"automatedSnapshotStartHour"`
}

func (DomainSnapshotOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptionsState)(nil)).Elem()
}

func (i DomainSnapshotOptionsStateArgs) ToDomainSnapshotOptionsStateOutput() DomainSnapshotOptionsStateOutput {
	return i.ToDomainSnapshotOptionsStateOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsStateArgs) ToDomainSnapshotOptionsStateOutputWithContext(ctx context.Context) DomainSnapshotOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsStateOutput)
}

type DomainSnapshotOptionsStateOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptionsState)(nil)).Elem()
}

func (o DomainSnapshotOptionsStateOutput) ToDomainSnapshotOptionsStateOutput() DomainSnapshotOptionsStateOutput {
	return o
}

func (o DomainSnapshotOptionsStateOutput) ToDomainSnapshotOptionsStateOutputWithContext(ctx context.Context) DomainSnapshotOptionsStateOutput {
	return o
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o DomainSnapshotOptionsStateOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v DomainSnapshotOptionsState) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type DomainVpcOptions struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     string   `pulumi:"vpcId"`
}

type DomainVpcOptionsInput interface {
	pulumi.Input

	ToDomainVpcOptionsOutput() DomainVpcOptionsOutput
	ToDomainVpcOptionsOutputWithContext(context.Context) DomainVpcOptionsOutput
}

type DomainVpcOptionsArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	VpcId     pulumi.StringInput      `pulumi:"vpcId"`
}

func (DomainVpcOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptions)(nil)).Elem()
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsOutput() DomainVpcOptionsOutput {
	return i.ToDomainVpcOptionsOutputWithContext(context.Background())
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsOutputWithContext(ctx context.Context) DomainVpcOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsOutput)
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsPtrOutput() DomainVpcOptionsPtrOutput {
	return i.ToDomainVpcOptionsPtrOutputWithContext(context.Background())
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsOutput).ToDomainVpcOptionsPtrOutputWithContext(ctx)
}

type DomainVpcOptionsPtrInput interface {
	pulumi.Input

	ToDomainVpcOptionsPtrOutput() DomainVpcOptionsPtrOutput
	ToDomainVpcOptionsPtrOutputWithContext(context.Context) DomainVpcOptionsPtrOutput
}

type domainVpcOptionsPtrType DomainVpcOptionsArgs

func DomainVpcOptionsPtr(v *DomainVpcOptionsArgs) DomainVpcOptionsPtrInput {
	return (*domainVpcOptionsPtrType)(v)
}

func (*domainVpcOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVpcOptions)(nil)).Elem()
}

func (i *domainVpcOptionsPtrType) ToDomainVpcOptionsPtrOutput() DomainVpcOptionsPtrOutput {
	return i.ToDomainVpcOptionsPtrOutputWithContext(context.Background())
}

func (i *domainVpcOptionsPtrType) ToDomainVpcOptionsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsPtrOutput)
}

type DomainVpcOptionsOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptions)(nil)).Elem()
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsOutput() DomainVpcOptionsOutput {
	return o
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsOutputWithContext(ctx context.Context) DomainVpcOptionsOutput {
	return o
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsPtrOutput() DomainVpcOptionsPtrOutput {
	return o.ToDomainVpcOptionsPtrOutputWithContext(context.Background())
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsPtrOutput {
	return o.ApplyT(func(v DomainVpcOptions) *DomainVpcOptions {
		return &v
	}).(DomainVpcOptionsPtrOutput)
}
func (o DomainVpcOptionsOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DomainVpcOptionsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainVpcOptions) string { return v.VpcId }).(pulumi.StringOutput)
}

type DomainVpcOptionsPtrOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVpcOptions)(nil)).Elem()
}

func (o DomainVpcOptionsPtrOutput) ToDomainVpcOptionsPtrOutput() DomainVpcOptionsPtrOutput {
	return o
}

func (o DomainVpcOptionsPtrOutput) ToDomainVpcOptionsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsPtrOutput {
	return o
}

func (o DomainVpcOptionsPtrOutput) Elem() DomainVpcOptionsOutput {
	return o.ApplyT(func(v *DomainVpcOptions) DomainVpcOptions { return *v }).(DomainVpcOptionsOutput)
}

func (o DomainVpcOptionsPtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptions) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DomainVpcOptionsPtrOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainVpcOptions) string { return v.VpcId }).(pulumi.StringOutput)
}

type DomainVpcOptionsArgs struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type DomainVpcOptionsArgsInput interface {
	pulumi.Input

	ToDomainVpcOptionsArgsOutput() DomainVpcOptionsArgsOutput
	ToDomainVpcOptionsArgsOutputWithContext(context.Context) DomainVpcOptionsArgsOutput
}

type DomainVpcOptionsArgsArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	VpcId     pulumi.StringPtrInput   `pulumi:"vpcId"`
}

func (DomainVpcOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptionsArgs)(nil)).Elem()
}

func (i DomainVpcOptionsArgsArgs) ToDomainVpcOptionsArgsOutput() DomainVpcOptionsArgsOutput {
	return i.ToDomainVpcOptionsArgsOutputWithContext(context.Background())
}

func (i DomainVpcOptionsArgsArgs) ToDomainVpcOptionsArgsOutputWithContext(ctx context.Context) DomainVpcOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsArgsOutput)
}

func (i DomainVpcOptionsArgsArgs) ToDomainVpcOptionsArgsPtrOutput() DomainVpcOptionsArgsPtrOutput {
	return i.ToDomainVpcOptionsArgsPtrOutputWithContext(context.Background())
}

func (i DomainVpcOptionsArgsArgs) ToDomainVpcOptionsArgsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsArgsOutput).ToDomainVpcOptionsArgsPtrOutputWithContext(ctx)
}

type DomainVpcOptionsArgsPtrInput interface {
	pulumi.Input

	ToDomainVpcOptionsArgsPtrOutput() DomainVpcOptionsArgsPtrOutput
	ToDomainVpcOptionsArgsPtrOutputWithContext(context.Context) DomainVpcOptionsArgsPtrOutput
}

type domainVpcOptionsArgsPtrType DomainVpcOptionsArgsArgs

func DomainVpcOptionsArgsPtr(v *DomainVpcOptionsArgsArgs) DomainVpcOptionsArgsPtrInput {
	return (*domainVpcOptionsArgsPtrType)(v)
}

func (*domainVpcOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVpcOptionsArgs)(nil)).Elem()
}

func (i *domainVpcOptionsArgsPtrType) ToDomainVpcOptionsArgsPtrOutput() DomainVpcOptionsArgsPtrOutput {
	return i.ToDomainVpcOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *domainVpcOptionsArgsPtrType) ToDomainVpcOptionsArgsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsArgsPtrOutput)
}

type DomainVpcOptionsArgsOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptionsArgs)(nil)).Elem()
}

func (o DomainVpcOptionsArgsOutput) ToDomainVpcOptionsArgsOutput() DomainVpcOptionsArgsOutput {
	return o
}

func (o DomainVpcOptionsArgsOutput) ToDomainVpcOptionsArgsOutputWithContext(ctx context.Context) DomainVpcOptionsArgsOutput {
	return o
}

func (o DomainVpcOptionsArgsOutput) ToDomainVpcOptionsArgsPtrOutput() DomainVpcOptionsArgsPtrOutput {
	return o.ToDomainVpcOptionsArgsPtrOutputWithContext(context.Background())
}

func (o DomainVpcOptionsArgsOutput) ToDomainVpcOptionsArgsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsArgsPtrOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) *DomainVpcOptionsArgs {
		return &v
	}).(DomainVpcOptionsArgsPtrOutput)
}
func (o DomainVpcOptionsArgsOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsArgsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsArgsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DomainVpcOptionsArgsOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type DomainVpcOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVpcOptionsArgs)(nil)).Elem()
}

func (o DomainVpcOptionsArgsPtrOutput) ToDomainVpcOptionsArgsPtrOutput() DomainVpcOptionsArgsPtrOutput {
	return o
}

func (o DomainVpcOptionsArgsPtrOutput) ToDomainVpcOptionsArgsPtrOutputWithContext(ctx context.Context) DomainVpcOptionsArgsPtrOutput {
	return o
}

func (o DomainVpcOptionsArgsPtrOutput) Elem() DomainVpcOptionsArgsOutput {
	return o.ApplyT(func(v *DomainVpcOptionsArgs) DomainVpcOptionsArgs { return *v }).(DomainVpcOptionsArgsOutput)
}

func (o DomainVpcOptionsArgsPtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsArgsPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsArgsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DomainVpcOptionsArgsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainVpcOptionsArgs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type DomainVpcOptionsState struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type DomainVpcOptionsStateInput interface {
	pulumi.Input

	ToDomainVpcOptionsStateOutput() DomainVpcOptionsStateOutput
	ToDomainVpcOptionsStateOutputWithContext(context.Context) DomainVpcOptionsStateOutput
}

type DomainVpcOptionsStateArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	VpcId     pulumi.StringPtrInput   `pulumi:"vpcId"`
}

func (DomainVpcOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptionsState)(nil)).Elem()
}

func (i DomainVpcOptionsStateArgs) ToDomainVpcOptionsStateOutput() DomainVpcOptionsStateOutput {
	return i.ToDomainVpcOptionsStateOutputWithContext(context.Background())
}

func (i DomainVpcOptionsStateArgs) ToDomainVpcOptionsStateOutputWithContext(ctx context.Context) DomainVpcOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsStateOutput)
}

type DomainVpcOptionsStateOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptionsState)(nil)).Elem()
}

func (o DomainVpcOptionsStateOutput) ToDomainVpcOptionsStateOutput() DomainVpcOptionsStateOutput {
	return o
}

func (o DomainVpcOptionsStateOutput) ToDomainVpcOptionsStateOutputWithContext(ctx context.Context) DomainVpcOptionsStateOutput {
	return o
}

func (o DomainVpcOptionsStateOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsState) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsStateOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsState) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsStateOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainVpcOptionsState) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DomainVpcOptionsStateOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainVpcOptionsState) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type GetDomainClusterConfig struct {
	// Number of dedicated master nodes in the cluster.
	DedicatedMasterCount int `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType string `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings.
	ZoneAwarenessConfigs []GetDomainClusterConfigZoneAwarenessConfig `pulumi:"zoneAwarenessConfigs"`
	// Indicates whether zone awareness is enabled.
	ZoneAwarenessEnabled bool `pulumi:"zoneAwarenessEnabled"`
}

type GetDomainClusterConfigInput interface {
	pulumi.Input

	ToGetDomainClusterConfigOutput() GetDomainClusterConfigOutput
	ToGetDomainClusterConfigOutputWithContext(context.Context) GetDomainClusterConfigOutput
}

type GetDomainClusterConfigArgs struct {
	// Number of dedicated master nodes in the cluster.
	DedicatedMasterCount pulumi.IntInput `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumi.BoolInput `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType pulumi.StringInput `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Configuration block containing zone awareness settings.
	ZoneAwarenessConfigs GetDomainClusterConfigZoneAwarenessConfigArrayInput `pulumi:"zoneAwarenessConfigs"`
	// Indicates whether zone awareness is enabled.
	ZoneAwarenessEnabled pulumi.BoolInput `pulumi:"zoneAwarenessEnabled"`
}

func (GetDomainClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigArgs) ToGetDomainClusterConfigOutput() GetDomainClusterConfigOutput {
	return i.ToGetDomainClusterConfigOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigArgs) ToGetDomainClusterConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigOutput)
}

type GetDomainClusterConfigArrayInput interface {
	pulumi.Input

	ToGetDomainClusterConfigArrayOutput() GetDomainClusterConfigArrayOutput
	ToGetDomainClusterConfigArrayOutputWithContext(context.Context) GetDomainClusterConfigArrayOutput
}

type GetDomainClusterConfigArray []GetDomainClusterConfigInput

func (GetDomainClusterConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainClusterConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigArray) ToGetDomainClusterConfigArrayOutput() GetDomainClusterConfigArrayOutput {
	return i.ToGetDomainClusterConfigArrayOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigArray) ToGetDomainClusterConfigArrayOutputWithContext(ctx context.Context) GetDomainClusterConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigArrayOutput)
}

type GetDomainClusterConfigOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigOutput) ToGetDomainClusterConfigOutput() GetDomainClusterConfigOutput {
	return o
}

func (o GetDomainClusterConfigOutput) ToGetDomainClusterConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigOutput {
	return o
}

// Number of dedicated master nodes in the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) int { return v.DedicatedMasterCount }).(pulumi.IntOutput)
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) bool { return v.DedicatedMasterEnabled }).(pulumi.BoolOutput)
}

// Instance type of the dedicated master nodes in the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) string { return v.DedicatedMasterType }).(pulumi.StringOutput)
}

// Number of instances in the cluster.
func (o GetDomainClusterConfigOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) int { return v.InstanceCount }).(pulumi.IntOutput)
}

// Instance type of data nodes in the cluster.
func (o GetDomainClusterConfigOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Configuration block containing zone awareness settings.
func (o GetDomainClusterConfigOutput) ZoneAwarenessConfigs() GetDomainClusterConfigZoneAwarenessConfigArrayOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) []GetDomainClusterConfigZoneAwarenessConfig {
		return v.ZoneAwarenessConfigs
	}).(GetDomainClusterConfigZoneAwarenessConfigArrayOutput)
}

// Indicates whether zone awareness is enabled.
func (o GetDomainClusterConfigOutput) ZoneAwarenessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainClusterConfig) bool { return v.ZoneAwarenessEnabled }).(pulumi.BoolOutput)
}

type GetDomainClusterConfigArrayOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainClusterConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigArrayOutput) ToGetDomainClusterConfigArrayOutput() GetDomainClusterConfigArrayOutput {
	return o
}

func (o GetDomainClusterConfigArrayOutput) ToGetDomainClusterConfigArrayOutputWithContext(ctx context.Context) GetDomainClusterConfigArrayOutput {
	return o
}

func (o GetDomainClusterConfigArrayOutput) Index(i pulumi.IntInput) GetDomainClusterConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainClusterConfig {
		return vs[0].([]GetDomainClusterConfig)[vs[1].(int)]
	}).(GetDomainClusterConfigOutput)
}

type GetDomainClusterConfigZoneAwarenessConfig struct {
	// Number of availability zones used.
	AvailabilityZoneCount int `pulumi:"availabilityZoneCount"`
}

type GetDomainClusterConfigZoneAwarenessConfigInput interface {
	pulumi.Input

	ToGetDomainClusterConfigZoneAwarenessConfigOutput() GetDomainClusterConfigZoneAwarenessConfigOutput
	ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Context) GetDomainClusterConfigZoneAwarenessConfigOutput
}

type GetDomainClusterConfigZoneAwarenessConfigArgs struct {
	// Number of availability zones used.
	AvailabilityZoneCount pulumi.IntInput `pulumi:"availabilityZoneCount"`
}

func (GetDomainClusterConfigZoneAwarenessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigZoneAwarenessConfigArgs) ToGetDomainClusterConfigZoneAwarenessConfigOutput() GetDomainClusterConfigZoneAwarenessConfigOutput {
	return i.ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigZoneAwarenessConfigArgs) ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigZoneAwarenessConfigOutput)
}

type GetDomainClusterConfigZoneAwarenessConfigArrayInput interface {
	pulumi.Input

	ToGetDomainClusterConfigZoneAwarenessConfigArrayOutput() GetDomainClusterConfigZoneAwarenessConfigArrayOutput
	ToGetDomainClusterConfigZoneAwarenessConfigArrayOutputWithContext(context.Context) GetDomainClusterConfigZoneAwarenessConfigArrayOutput
}

type GetDomainClusterConfigZoneAwarenessConfigArray []GetDomainClusterConfigZoneAwarenessConfigInput

func (GetDomainClusterConfigZoneAwarenessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigZoneAwarenessConfigArray) ToGetDomainClusterConfigZoneAwarenessConfigArrayOutput() GetDomainClusterConfigZoneAwarenessConfigArrayOutput {
	return i.ToGetDomainClusterConfigZoneAwarenessConfigArrayOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigZoneAwarenessConfigArray) ToGetDomainClusterConfigZoneAwarenessConfigArrayOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigZoneAwarenessConfigArrayOutput)
}

type GetDomainClusterConfigZoneAwarenessConfigOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigZoneAwarenessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigZoneAwarenessConfigOutput) ToGetDomainClusterConfigZoneAwarenessConfigOutput() GetDomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o GetDomainClusterConfigZoneAwarenessConfigOutput) ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

// Number of availability zones used.
func (o GetDomainClusterConfigZoneAwarenessConfigOutput) AvailabilityZoneCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainClusterConfigZoneAwarenessConfig) int { return v.AvailabilityZoneCount }).(pulumi.IntOutput)
}

type GetDomainClusterConfigZoneAwarenessConfigArrayOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigZoneAwarenessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigZoneAwarenessConfigArrayOutput) ToGetDomainClusterConfigZoneAwarenessConfigArrayOutput() GetDomainClusterConfigZoneAwarenessConfigArrayOutput {
	return o
}

func (o GetDomainClusterConfigZoneAwarenessConfigArrayOutput) ToGetDomainClusterConfigZoneAwarenessConfigArrayOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigArrayOutput {
	return o
}

func (o GetDomainClusterConfigZoneAwarenessConfigArrayOutput) Index(i pulumi.IntInput) GetDomainClusterConfigZoneAwarenessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainClusterConfigZoneAwarenessConfig {
		return vs[0].([]GetDomainClusterConfigZoneAwarenessConfig)[vs[1].(int)]
	}).(GetDomainClusterConfigZoneAwarenessConfigOutput)
}

type GetDomainCognitoOption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The Cognito Identity pool used by the domain.
	IdentityPoolId string `pulumi:"identityPoolId"`
	// The IAM Role with the AmazonESCognitoAccess policy attached.
	RoleArn string `pulumi:"roleArn"`
	// The Cognito User pool used by the domain.
	UserPoolId string `pulumi:"userPoolId"`
}

type GetDomainCognitoOptionInput interface {
	pulumi.Input

	ToGetDomainCognitoOptionOutput() GetDomainCognitoOptionOutput
	ToGetDomainCognitoOptionOutputWithContext(context.Context) GetDomainCognitoOptionOutput
}

type GetDomainCognitoOptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The Cognito Identity pool used by the domain.
	IdentityPoolId pulumi.StringInput `pulumi:"identityPoolId"`
	// The IAM Role with the AmazonESCognitoAccess policy attached.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The Cognito User pool used by the domain.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (GetDomainCognitoOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainCognitoOption)(nil)).Elem()
}

func (i GetDomainCognitoOptionArgs) ToGetDomainCognitoOptionOutput() GetDomainCognitoOptionOutput {
	return i.ToGetDomainCognitoOptionOutputWithContext(context.Background())
}

func (i GetDomainCognitoOptionArgs) ToGetDomainCognitoOptionOutputWithContext(ctx context.Context) GetDomainCognitoOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainCognitoOptionOutput)
}

type GetDomainCognitoOptionArrayInput interface {
	pulumi.Input

	ToGetDomainCognitoOptionArrayOutput() GetDomainCognitoOptionArrayOutput
	ToGetDomainCognitoOptionArrayOutputWithContext(context.Context) GetDomainCognitoOptionArrayOutput
}

type GetDomainCognitoOptionArray []GetDomainCognitoOptionInput

func (GetDomainCognitoOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainCognitoOption)(nil)).Elem()
}

func (i GetDomainCognitoOptionArray) ToGetDomainCognitoOptionArrayOutput() GetDomainCognitoOptionArrayOutput {
	return i.ToGetDomainCognitoOptionArrayOutputWithContext(context.Background())
}

func (i GetDomainCognitoOptionArray) ToGetDomainCognitoOptionArrayOutputWithContext(ctx context.Context) GetDomainCognitoOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainCognitoOptionArrayOutput)
}

type GetDomainCognitoOptionOutput struct{ *pulumi.OutputState }

func (GetDomainCognitoOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainCognitoOption)(nil)).Elem()
}

func (o GetDomainCognitoOptionOutput) ToGetDomainCognitoOptionOutput() GetDomainCognitoOptionOutput {
	return o
}

func (o GetDomainCognitoOptionOutput) ToGetDomainCognitoOptionOutputWithContext(ctx context.Context) GetDomainCognitoOptionOutput {
	return o
}

// Whether node to node encryption is enabled.
func (o GetDomainCognitoOptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainCognitoOption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The Cognito Identity pool used by the domain.
func (o GetDomainCognitoOptionOutput) IdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainCognitoOption) string { return v.IdentityPoolId }).(pulumi.StringOutput)
}

// The IAM Role with the AmazonESCognitoAccess policy attached.
func (o GetDomainCognitoOptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainCognitoOption) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The Cognito User pool used by the domain.
func (o GetDomainCognitoOptionOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainCognitoOption) string { return v.UserPoolId }).(pulumi.StringOutput)
}

type GetDomainCognitoOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainCognitoOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainCognitoOption)(nil)).Elem()
}

func (o GetDomainCognitoOptionArrayOutput) ToGetDomainCognitoOptionArrayOutput() GetDomainCognitoOptionArrayOutput {
	return o
}

func (o GetDomainCognitoOptionArrayOutput) ToGetDomainCognitoOptionArrayOutputWithContext(ctx context.Context) GetDomainCognitoOptionArrayOutput {
	return o
}

func (o GetDomainCognitoOptionArrayOutput) Index(i pulumi.IntInput) GetDomainCognitoOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainCognitoOption {
		return vs[0].([]GetDomainCognitoOption)[vs[1].(int)]
	}).(GetDomainCognitoOptionOutput)
}

type GetDomainEbsOption struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes.
	Iops int `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	VolumeSize int `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType string `pulumi:"volumeType"`
}

type GetDomainEbsOptionInput interface {
	pulumi.Input

	ToGetDomainEbsOptionOutput() GetDomainEbsOptionOutput
	ToGetDomainEbsOptionOutputWithContext(context.Context) GetDomainEbsOptionOutput
}

type GetDomainEbsOptionArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumi.BoolInput `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes
	// attached to data nodes.
	Iops pulumi.IntInput `pulumi:"iops"`
	// The size of EBS volumes attached to data nodes (in GB).
	VolumeSize pulumi.IntInput `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetDomainEbsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEbsOption)(nil)).Elem()
}

func (i GetDomainEbsOptionArgs) ToGetDomainEbsOptionOutput() GetDomainEbsOptionOutput {
	return i.ToGetDomainEbsOptionOutputWithContext(context.Background())
}

func (i GetDomainEbsOptionArgs) ToGetDomainEbsOptionOutputWithContext(ctx context.Context) GetDomainEbsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEbsOptionOutput)
}

type GetDomainEbsOptionArrayInput interface {
	pulumi.Input

	ToGetDomainEbsOptionArrayOutput() GetDomainEbsOptionArrayOutput
	ToGetDomainEbsOptionArrayOutputWithContext(context.Context) GetDomainEbsOptionArrayOutput
}

type GetDomainEbsOptionArray []GetDomainEbsOptionInput

func (GetDomainEbsOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainEbsOption)(nil)).Elem()
}

func (i GetDomainEbsOptionArray) ToGetDomainEbsOptionArrayOutput() GetDomainEbsOptionArrayOutput {
	return i.ToGetDomainEbsOptionArrayOutputWithContext(context.Background())
}

func (i GetDomainEbsOptionArray) ToGetDomainEbsOptionArrayOutputWithContext(ctx context.Context) GetDomainEbsOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEbsOptionArrayOutput)
}

type GetDomainEbsOptionOutput struct{ *pulumi.OutputState }

func (GetDomainEbsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEbsOption)(nil)).Elem()
}

func (o GetDomainEbsOptionOutput) ToGetDomainEbsOptionOutput() GetDomainEbsOptionOutput {
	return o
}

func (o GetDomainEbsOptionOutput) ToGetDomainEbsOptionOutputWithContext(ctx context.Context) GetDomainEbsOptionOutput {
	return o
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o GetDomainEbsOptionOutput) EbsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainEbsOption) bool { return v.EbsEnabled }).(pulumi.BoolOutput)
}

// The baseline input/output (I/O) performance of EBS volumes
// attached to data nodes.
func (o GetDomainEbsOptionOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainEbsOption) int { return v.Iops }).(pulumi.IntOutput)
}

// The size of EBS volumes attached to data nodes (in GB).
func (o GetDomainEbsOptionOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainEbsOption) int { return v.VolumeSize }).(pulumi.IntOutput)
}

// The type of EBS volumes attached to data nodes.
func (o GetDomainEbsOptionOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainEbsOption) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetDomainEbsOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainEbsOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainEbsOption)(nil)).Elem()
}

func (o GetDomainEbsOptionArrayOutput) ToGetDomainEbsOptionArrayOutput() GetDomainEbsOptionArrayOutput {
	return o
}

func (o GetDomainEbsOptionArrayOutput) ToGetDomainEbsOptionArrayOutputWithContext(ctx context.Context) GetDomainEbsOptionArrayOutput {
	return o
}

func (o GetDomainEbsOptionArrayOutput) Index(i pulumi.IntInput) GetDomainEbsOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainEbsOption {
		return vs[0].([]GetDomainEbsOption)[vs[1].(int)]
	}).(GetDomainEbsOptionOutput)
}

type GetDomainEncryptionAtRest struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The KMS key id used to encrypt data at rest.
	KmsKeyId string `pulumi:"kmsKeyId"`
}

type GetDomainEncryptionAtRestInput interface {
	pulumi.Input

	ToGetDomainEncryptionAtRestOutput() GetDomainEncryptionAtRestOutput
	ToGetDomainEncryptionAtRestOutputWithContext(context.Context) GetDomainEncryptionAtRestOutput
}

type GetDomainEncryptionAtRestArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The KMS key id used to encrypt data at rest.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
}

func (GetDomainEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEncryptionAtRest)(nil)).Elem()
}

func (i GetDomainEncryptionAtRestArgs) ToGetDomainEncryptionAtRestOutput() GetDomainEncryptionAtRestOutput {
	return i.ToGetDomainEncryptionAtRestOutputWithContext(context.Background())
}

func (i GetDomainEncryptionAtRestArgs) ToGetDomainEncryptionAtRestOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEncryptionAtRestOutput)
}

type GetDomainEncryptionAtRestArrayInput interface {
	pulumi.Input

	ToGetDomainEncryptionAtRestArrayOutput() GetDomainEncryptionAtRestArrayOutput
	ToGetDomainEncryptionAtRestArrayOutputWithContext(context.Context) GetDomainEncryptionAtRestArrayOutput
}

type GetDomainEncryptionAtRestArray []GetDomainEncryptionAtRestInput

func (GetDomainEncryptionAtRestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainEncryptionAtRest)(nil)).Elem()
}

func (i GetDomainEncryptionAtRestArray) ToGetDomainEncryptionAtRestArrayOutput() GetDomainEncryptionAtRestArrayOutput {
	return i.ToGetDomainEncryptionAtRestArrayOutputWithContext(context.Background())
}

func (i GetDomainEncryptionAtRestArray) ToGetDomainEncryptionAtRestArrayOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEncryptionAtRestArrayOutput)
}

type GetDomainEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (GetDomainEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEncryptionAtRest)(nil)).Elem()
}

func (o GetDomainEncryptionAtRestOutput) ToGetDomainEncryptionAtRestOutput() GetDomainEncryptionAtRestOutput {
	return o
}

func (o GetDomainEncryptionAtRestOutput) ToGetDomainEncryptionAtRestOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestOutput {
	return o
}

// Whether node to node encryption is enabled.
func (o GetDomainEncryptionAtRestOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainEncryptionAtRest) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The KMS key id used to encrypt data at rest.
func (o GetDomainEncryptionAtRestOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainEncryptionAtRest) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

type GetDomainEncryptionAtRestArrayOutput struct{ *pulumi.OutputState }

func (GetDomainEncryptionAtRestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainEncryptionAtRest)(nil)).Elem()
}

func (o GetDomainEncryptionAtRestArrayOutput) ToGetDomainEncryptionAtRestArrayOutput() GetDomainEncryptionAtRestArrayOutput {
	return o
}

func (o GetDomainEncryptionAtRestArrayOutput) ToGetDomainEncryptionAtRestArrayOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestArrayOutput {
	return o
}

func (o GetDomainEncryptionAtRestArrayOutput) Index(i pulumi.IntInput) GetDomainEncryptionAtRestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainEncryptionAtRest {
		return vs[0].([]GetDomainEncryptionAtRest)[vs[1].(int)]
	}).(GetDomainEncryptionAtRestOutput)
}

type GetDomainLogPublishingOption struct {
	// The CloudWatch Log Group where the logs are published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The type of Elasticsearch log being published.
	LogType string `pulumi:"logType"`
}

type GetDomainLogPublishingOptionInput interface {
	pulumi.Input

	ToGetDomainLogPublishingOptionOutput() GetDomainLogPublishingOptionOutput
	ToGetDomainLogPublishingOptionOutputWithContext(context.Context) GetDomainLogPublishingOptionOutput
}

type GetDomainLogPublishingOptionArgs struct {
	// The CloudWatch Log Group where the logs are published.
	CloudwatchLogGroupArn pulumi.StringInput `pulumi:"cloudwatchLogGroupArn"`
	// Whether node to node encryption is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The type of Elasticsearch log being published.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (GetDomainLogPublishingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLogPublishingOption)(nil)).Elem()
}

func (i GetDomainLogPublishingOptionArgs) ToGetDomainLogPublishingOptionOutput() GetDomainLogPublishingOptionOutput {
	return i.ToGetDomainLogPublishingOptionOutputWithContext(context.Background())
}

func (i GetDomainLogPublishingOptionArgs) ToGetDomainLogPublishingOptionOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainLogPublishingOptionOutput)
}

type GetDomainLogPublishingOptionArrayInput interface {
	pulumi.Input

	ToGetDomainLogPublishingOptionArrayOutput() GetDomainLogPublishingOptionArrayOutput
	ToGetDomainLogPublishingOptionArrayOutputWithContext(context.Context) GetDomainLogPublishingOptionArrayOutput
}

type GetDomainLogPublishingOptionArray []GetDomainLogPublishingOptionInput

func (GetDomainLogPublishingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainLogPublishingOption)(nil)).Elem()
}

func (i GetDomainLogPublishingOptionArray) ToGetDomainLogPublishingOptionArrayOutput() GetDomainLogPublishingOptionArrayOutput {
	return i.ToGetDomainLogPublishingOptionArrayOutputWithContext(context.Background())
}

func (i GetDomainLogPublishingOptionArray) ToGetDomainLogPublishingOptionArrayOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainLogPublishingOptionArrayOutput)
}

type GetDomainLogPublishingOptionOutput struct{ *pulumi.OutputState }

func (GetDomainLogPublishingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLogPublishingOption)(nil)).Elem()
}

func (o GetDomainLogPublishingOptionOutput) ToGetDomainLogPublishingOptionOutput() GetDomainLogPublishingOptionOutput {
	return o
}

func (o GetDomainLogPublishingOptionOutput) ToGetDomainLogPublishingOptionOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionOutput {
	return o
}

// The CloudWatch Log Group where the logs are published.
func (o GetDomainLogPublishingOptionOutput) CloudwatchLogGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainLogPublishingOption) string { return v.CloudwatchLogGroupArn }).(pulumi.StringOutput)
}

// Whether node to node encryption is enabled.
func (o GetDomainLogPublishingOptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainLogPublishingOption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The type of Elasticsearch log being published.
func (o GetDomainLogPublishingOptionOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainLogPublishingOption) string { return v.LogType }).(pulumi.StringOutput)
}

type GetDomainLogPublishingOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainLogPublishingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainLogPublishingOption)(nil)).Elem()
}

func (o GetDomainLogPublishingOptionArrayOutput) ToGetDomainLogPublishingOptionArrayOutput() GetDomainLogPublishingOptionArrayOutput {
	return o
}

func (o GetDomainLogPublishingOptionArrayOutput) ToGetDomainLogPublishingOptionArrayOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionArrayOutput {
	return o
}

func (o GetDomainLogPublishingOptionArrayOutput) Index(i pulumi.IntInput) GetDomainLogPublishingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainLogPublishingOption {
		return vs[0].([]GetDomainLogPublishingOption)[vs[1].(int)]
	}).(GetDomainLogPublishingOptionOutput)
}

type GetDomainNodeToNodeEncryption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
}

type GetDomainNodeToNodeEncryptionInput interface {
	pulumi.Input

	ToGetDomainNodeToNodeEncryptionOutput() GetDomainNodeToNodeEncryptionOutput
	ToGetDomainNodeToNodeEncryptionOutputWithContext(context.Context) GetDomainNodeToNodeEncryptionOutput
}

type GetDomainNodeToNodeEncryptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetDomainNodeToNodeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (i GetDomainNodeToNodeEncryptionArgs) ToGetDomainNodeToNodeEncryptionOutput() GetDomainNodeToNodeEncryptionOutput {
	return i.ToGetDomainNodeToNodeEncryptionOutputWithContext(context.Background())
}

func (i GetDomainNodeToNodeEncryptionArgs) ToGetDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainNodeToNodeEncryptionOutput)
}

type GetDomainNodeToNodeEncryptionArrayInput interface {
	pulumi.Input

	ToGetDomainNodeToNodeEncryptionArrayOutput() GetDomainNodeToNodeEncryptionArrayOutput
	ToGetDomainNodeToNodeEncryptionArrayOutputWithContext(context.Context) GetDomainNodeToNodeEncryptionArrayOutput
}

type GetDomainNodeToNodeEncryptionArray []GetDomainNodeToNodeEncryptionInput

func (GetDomainNodeToNodeEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (i GetDomainNodeToNodeEncryptionArray) ToGetDomainNodeToNodeEncryptionArrayOutput() GetDomainNodeToNodeEncryptionArrayOutput {
	return i.ToGetDomainNodeToNodeEncryptionArrayOutputWithContext(context.Background())
}

func (i GetDomainNodeToNodeEncryptionArray) ToGetDomainNodeToNodeEncryptionArrayOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainNodeToNodeEncryptionArrayOutput)
}

type GetDomainNodeToNodeEncryptionOutput struct{ *pulumi.OutputState }

func (GetDomainNodeToNodeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (o GetDomainNodeToNodeEncryptionOutput) ToGetDomainNodeToNodeEncryptionOutput() GetDomainNodeToNodeEncryptionOutput {
	return o
}

func (o GetDomainNodeToNodeEncryptionOutput) ToGetDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionOutput {
	return o
}

// Whether node to node encryption is enabled.
func (o GetDomainNodeToNodeEncryptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainNodeToNodeEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetDomainNodeToNodeEncryptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainNodeToNodeEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (o GetDomainNodeToNodeEncryptionArrayOutput) ToGetDomainNodeToNodeEncryptionArrayOutput() GetDomainNodeToNodeEncryptionArrayOutput {
	return o
}

func (o GetDomainNodeToNodeEncryptionArrayOutput) ToGetDomainNodeToNodeEncryptionArrayOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionArrayOutput {
	return o
}

func (o GetDomainNodeToNodeEncryptionArrayOutput) Index(i pulumi.IntInput) GetDomainNodeToNodeEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainNodeToNodeEncryption {
		return vs[0].([]GetDomainNodeToNodeEncryption)[vs[1].(int)]
	}).(GetDomainNodeToNodeEncryptionOutput)
}

type GetDomainSnapshotOption struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type GetDomainSnapshotOptionInput interface {
	pulumi.Input

	ToGetDomainSnapshotOptionOutput() GetDomainSnapshotOptionOutput
	ToGetDomainSnapshotOptionOutputWithContext(context.Context) GetDomainSnapshotOptionOutput
}

type GetDomainSnapshotOptionArgs struct {
	// Hour during which the service takes an automated daily
	// snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumi.IntInput `pulumi:"automatedSnapshotStartHour"`
}

func (GetDomainSnapshotOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSnapshotOption)(nil)).Elem()
}

func (i GetDomainSnapshotOptionArgs) ToGetDomainSnapshotOptionOutput() GetDomainSnapshotOptionOutput {
	return i.ToGetDomainSnapshotOptionOutputWithContext(context.Background())
}

func (i GetDomainSnapshotOptionArgs) ToGetDomainSnapshotOptionOutputWithContext(ctx context.Context) GetDomainSnapshotOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSnapshotOptionOutput)
}

type GetDomainSnapshotOptionArrayInput interface {
	pulumi.Input

	ToGetDomainSnapshotOptionArrayOutput() GetDomainSnapshotOptionArrayOutput
	ToGetDomainSnapshotOptionArrayOutputWithContext(context.Context) GetDomainSnapshotOptionArrayOutput
}

type GetDomainSnapshotOptionArray []GetDomainSnapshotOptionInput

func (GetDomainSnapshotOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSnapshotOption)(nil)).Elem()
}

func (i GetDomainSnapshotOptionArray) ToGetDomainSnapshotOptionArrayOutput() GetDomainSnapshotOptionArrayOutput {
	return i.ToGetDomainSnapshotOptionArrayOutputWithContext(context.Background())
}

func (i GetDomainSnapshotOptionArray) ToGetDomainSnapshotOptionArrayOutputWithContext(ctx context.Context) GetDomainSnapshotOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSnapshotOptionArrayOutput)
}

type GetDomainSnapshotOptionOutput struct{ *pulumi.OutputState }

func (GetDomainSnapshotOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSnapshotOption)(nil)).Elem()
}

func (o GetDomainSnapshotOptionOutput) ToGetDomainSnapshotOptionOutput() GetDomainSnapshotOptionOutput {
	return o
}

func (o GetDomainSnapshotOptionOutput) ToGetDomainSnapshotOptionOutputWithContext(ctx context.Context) GetDomainSnapshotOptionOutput {
	return o
}

// Hour during which the service takes an automated daily
// snapshot of the indices in the domain.
func (o GetDomainSnapshotOptionOutput) AutomatedSnapshotStartHour() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainSnapshotOption) int { return v.AutomatedSnapshotStartHour }).(pulumi.IntOutput)
}

type GetDomainSnapshotOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainSnapshotOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainSnapshotOption)(nil)).Elem()
}

func (o GetDomainSnapshotOptionArrayOutput) ToGetDomainSnapshotOptionArrayOutput() GetDomainSnapshotOptionArrayOutput {
	return o
}

func (o GetDomainSnapshotOptionArrayOutput) ToGetDomainSnapshotOptionArrayOutputWithContext(ctx context.Context) GetDomainSnapshotOptionArrayOutput {
	return o
}

func (o GetDomainSnapshotOptionArrayOutput) Index(i pulumi.IntInput) GetDomainSnapshotOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainSnapshotOption {
		return vs[0].([]GetDomainSnapshotOption)[vs[1].(int)]
	}).(GetDomainSnapshotOptionOutput)
}

type GetDomainVpcOption struct {
	// The availability zones used by the domain.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The security groups used by the domain.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets used by the domain.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC used by the domain.
	VpcId string `pulumi:"vpcId"`
}

type GetDomainVpcOptionInput interface {
	pulumi.Input

	ToGetDomainVpcOptionOutput() GetDomainVpcOptionOutput
	ToGetDomainVpcOptionOutputWithContext(context.Context) GetDomainVpcOptionOutput
}

type GetDomainVpcOptionArgs struct {
	// The availability zones used by the domain.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The security groups used by the domain.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnets used by the domain.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC used by the domain.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetDomainVpcOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVpcOption)(nil)).Elem()
}

func (i GetDomainVpcOptionArgs) ToGetDomainVpcOptionOutput() GetDomainVpcOptionOutput {
	return i.ToGetDomainVpcOptionOutputWithContext(context.Background())
}

func (i GetDomainVpcOptionArgs) ToGetDomainVpcOptionOutputWithContext(ctx context.Context) GetDomainVpcOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainVpcOptionOutput)
}

type GetDomainVpcOptionArrayInput interface {
	pulumi.Input

	ToGetDomainVpcOptionArrayOutput() GetDomainVpcOptionArrayOutput
	ToGetDomainVpcOptionArrayOutputWithContext(context.Context) GetDomainVpcOptionArrayOutput
}

type GetDomainVpcOptionArray []GetDomainVpcOptionInput

func (GetDomainVpcOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainVpcOption)(nil)).Elem()
}

func (i GetDomainVpcOptionArray) ToGetDomainVpcOptionArrayOutput() GetDomainVpcOptionArrayOutput {
	return i.ToGetDomainVpcOptionArrayOutputWithContext(context.Background())
}

func (i GetDomainVpcOptionArray) ToGetDomainVpcOptionArrayOutputWithContext(ctx context.Context) GetDomainVpcOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainVpcOptionArrayOutput)
}

type GetDomainVpcOptionOutput struct{ *pulumi.OutputState }

func (GetDomainVpcOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVpcOption)(nil)).Elem()
}

func (o GetDomainVpcOptionOutput) ToGetDomainVpcOptionOutput() GetDomainVpcOptionOutput {
	return o
}

func (o GetDomainVpcOptionOutput) ToGetDomainVpcOptionOutputWithContext(ctx context.Context) GetDomainVpcOptionOutput {
	return o
}

// The availability zones used by the domain.
func (o GetDomainVpcOptionOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainVpcOption) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The security groups used by the domain.
func (o GetDomainVpcOptionOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainVpcOption) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnets used by the domain.
func (o GetDomainVpcOptionOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainVpcOption) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC used by the domain.
func (o GetDomainVpcOptionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVpcOption) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetDomainVpcOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDomainVpcOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainVpcOption)(nil)).Elem()
}

func (o GetDomainVpcOptionArrayOutput) ToGetDomainVpcOptionArrayOutput() GetDomainVpcOptionArrayOutput {
	return o
}

func (o GetDomainVpcOptionArrayOutput) ToGetDomainVpcOptionArrayOutputWithContext(ctx context.Context) GetDomainVpcOptionArrayOutput {
	return o
}

func (o GetDomainVpcOptionArrayOutput) Index(i pulumi.IntInput) GetDomainVpcOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainVpcOption {
		return vs[0].([]GetDomainVpcOption)[vs[1].(int)]
	}).(GetDomainVpcOptionOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainClusterConfigOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigArgsOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigStateOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigStateZoneAwarenessConfigOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigStateZoneAwarenessConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigZoneAwarenessConfigOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigZoneAwarenessConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigZoneAwarenessConfigArgsOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigZoneAwarenessConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsPtrOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsArgsOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsStateOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsPtrOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsArgsOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsStateOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsPtrOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsArgsOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsStateOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestPtrOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestArgsOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestStateOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionArrayOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionArgsOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionArgsArrayOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionStateOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionStateArrayOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionArgsOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionStateOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsPtrOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsArgsOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsStateOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsPtrOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsArgsOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsStateOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigArrayOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigZoneAwarenessConfigOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigZoneAwarenessConfigArrayOutput{})
	pulumi.RegisterOutputType(GetDomainCognitoOptionOutput{})
	pulumi.RegisterOutputType(GetDomainCognitoOptionArrayOutput{})
	pulumi.RegisterOutputType(GetDomainEbsOptionOutput{})
	pulumi.RegisterOutputType(GetDomainEbsOptionArrayOutput{})
	pulumi.RegisterOutputType(GetDomainEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(GetDomainEncryptionAtRestArrayOutput{})
	pulumi.RegisterOutputType(GetDomainLogPublishingOptionOutput{})
	pulumi.RegisterOutputType(GetDomainLogPublishingOptionArrayOutput{})
	pulumi.RegisterOutputType(GetDomainNodeToNodeEncryptionOutput{})
	pulumi.RegisterOutputType(GetDomainNodeToNodeEncryptionArrayOutput{})
	pulumi.RegisterOutputType(GetDomainSnapshotOptionOutput{})
	pulumi.RegisterOutputType(GetDomainSnapshotOptionArrayOutput{})
	pulumi.RegisterOutputType(GetDomainVpcOptionOutput{})
	pulumi.RegisterOutputType(GetDomainVpcOptionArrayOutput{})
}
