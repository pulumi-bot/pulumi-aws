// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Workspace struct {
	pulumi.CustomResourceState

	BundleId                    pulumi.StringOutput                `pulumi:"bundleId"`
	ComputerName                pulumi.StringOutput                `pulumi:"computerName"`
	DirectoryId                 pulumi.StringOutput                `pulumi:"directoryId"`
	IpAddress                   pulumi.StringOutput                `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled pulumi.BoolPtrOutput               `pulumi:"rootVolumeEncryptionEnabled"`
	State                       pulumi.StringOutput                `pulumi:"state"`
	Tags                        pulumi.StringMapOutput             `pulumi:"tags"`
	UserName                    pulumi.StringOutput                `pulumi:"userName"`
	UserVolumeEncryptionEnabled pulumi.BoolPtrOutput               `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         pulumi.StringPtrOutput             `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         WorkspaceWorkspacePropertiesOutput `pulumi:"workspaceProperties"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil || args.BundleId == nil {
		return nil, errors.New("missing required argument 'BundleId'")
	}
	if args == nil || args.DirectoryId == nil {
		return nil, errors.New("missing required argument 'DirectoryId'")
	}
	if args == nil || args.UserName == nil {
		return nil, errors.New("missing required argument 'UserName'")
	}
	if args == nil {
		args = &WorkspaceArgs{}
	}
	var resource Workspace
	err := ctx.RegisterResource("aws:workspaces/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws:workspaces/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	BundleId                    *string                       `pulumi:"bundleId"`
	ComputerName                *string                       `pulumi:"computerName"`
	DirectoryId                 *string                       `pulumi:"directoryId"`
	IpAddress                   *string                       `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled *bool                         `pulumi:"rootVolumeEncryptionEnabled"`
	State                       *string                       `pulumi:"state"`
	Tags                        map[string]string             `pulumi:"tags"`
	UserName                    *string                       `pulumi:"userName"`
	UserVolumeEncryptionEnabled *bool                         `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         *string                       `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

type WorkspaceState struct {
	BundleId                    pulumi.StringPtrInput
	ComputerName                pulumi.StringPtrInput
	DirectoryId                 pulumi.StringPtrInput
	IpAddress                   pulumi.StringPtrInput
	RootVolumeEncryptionEnabled pulumi.BoolPtrInput
	State                       pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	UserName                    pulumi.StringPtrInput
	UserVolumeEncryptionEnabled pulumi.BoolPtrInput
	VolumeEncryptionKey         pulumi.StringPtrInput
	WorkspaceProperties         WorkspaceWorkspacePropertiesPtrInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	BundleId                    string                        `pulumi:"bundleId"`
	DirectoryId                 string                        `pulumi:"directoryId"`
	RootVolumeEncryptionEnabled *bool                         `pulumi:"rootVolumeEncryptionEnabled"`
	Tags                        map[string]string             `pulumi:"tags"`
	UserName                    string                        `pulumi:"userName"`
	UserVolumeEncryptionEnabled *bool                         `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         *string                       `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	BundleId                    pulumi.StringInput
	DirectoryId                 pulumi.StringInput
	RootVolumeEncryptionEnabled pulumi.BoolPtrInput
	Tags                        pulumi.StringMapInput
	UserName                    pulumi.StringInput
	UserVolumeEncryptionEnabled pulumi.BoolPtrInput
	VolumeEncryptionKey         pulumi.StringPtrInput
	WorkspaceProperties         WorkspaceWorkspacePropertiesPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}
