// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Document struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                  `pulumi:"arn"`
	AttachmentsSources DocumentAttachmentsSourceArrayOutput `pulumi:"attachmentsSources"`
	Content            pulumi.StringOutput                  `pulumi:"content"`
	CreatedDate        pulumi.StringOutput                  `pulumi:"createdDate"`
	DefaultVersion     pulumi.StringOutput                  `pulumi:"defaultVersion"`
	Description        pulumi.StringOutput                  `pulumi:"description"`
	DocumentFormat     pulumi.StringPtrOutput               `pulumi:"documentFormat"`
	DocumentType       pulumi.StringOutput                  `pulumi:"documentType"`
	DocumentVersion    pulumi.StringOutput                  `pulumi:"documentVersion"`
	Hash               pulumi.StringOutput                  `pulumi:"hash"`
	HashType           pulumi.StringOutput                  `pulumi:"hashType"`
	LatestVersion      pulumi.StringOutput                  `pulumi:"latestVersion"`
	Name               pulumi.StringOutput                  `pulumi:"name"`
	Owner              pulumi.StringOutput                  `pulumi:"owner"`
	Parameters         DocumentParameterArrayOutput         `pulumi:"parameters"`
	Permissions        pulumi.StringMapOutput               `pulumi:"permissions"`
	PlatformTypes      pulumi.StringArrayOutput             `pulumi:"platformTypes"`
	SchemaVersion      pulumi.StringOutput                  `pulumi:"schemaVersion"`
	Status             pulumi.StringOutput                  `pulumi:"status"`
	Tags               pulumi.StringMapOutput               `pulumi:"tags"`
	TargetType         pulumi.StringPtrOutput               `pulumi:"targetType"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil || args.DocumentType == nil {
		return nil, errors.New("missing required argument 'DocumentType'")
	}
	if args == nil {
		args = &DocumentArgs{}
	}
	var resource Document
	err := ctx.RegisterResource("aws:ssm/document:Document", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	var resource Document
	err := ctx.ReadResource("aws:ssm/document:Document", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type documentState struct {
	Arn                *string                     `pulumi:"arn"`
	AttachmentsSources []DocumentAttachmentsSource `pulumi:"attachmentsSources"`
	Content            *string                     `pulumi:"content"`
	CreatedDate        *string                     `pulumi:"createdDate"`
	DefaultVersion     *string                     `pulumi:"defaultVersion"`
	Description        *string                     `pulumi:"description"`
	DocumentFormat     *string                     `pulumi:"documentFormat"`
	DocumentType       *string                     `pulumi:"documentType"`
	DocumentVersion    *string                     `pulumi:"documentVersion"`
	Hash               *string                     `pulumi:"hash"`
	HashType           *string                     `pulumi:"hashType"`
	LatestVersion      *string                     `pulumi:"latestVersion"`
	Name               *string                     `pulumi:"name"`
	Owner              *string                     `pulumi:"owner"`
	Parameters         []DocumentParameter         `pulumi:"parameters"`
	Permissions        map[string]string           `pulumi:"permissions"`
	PlatformTypes      []string                    `pulumi:"platformTypes"`
	SchemaVersion      *string                     `pulumi:"schemaVersion"`
	Status             *string                     `pulumi:"status"`
	Tags               map[string]string           `pulumi:"tags"`
	TargetType         *string                     `pulumi:"targetType"`
}

type DocumentState struct {
	Arn                pulumi.StringPtrInput
	AttachmentsSources DocumentAttachmentsSourceArrayInput
	Content            pulumi.StringPtrInput
	CreatedDate        pulumi.StringPtrInput
	DefaultVersion     pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	DocumentFormat     pulumi.StringPtrInput
	DocumentType       pulumi.StringPtrInput
	DocumentVersion    pulumi.StringPtrInput
	Hash               pulumi.StringPtrInput
	HashType           pulumi.StringPtrInput
	LatestVersion      pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Owner              pulumi.StringPtrInput
	Parameters         DocumentParameterArrayInput
	Permissions        pulumi.StringMapInput
	PlatformTypes      pulumi.StringArrayInput
	SchemaVersion      pulumi.StringPtrInput
	Status             pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TargetType         pulumi.StringPtrInput
}

func (DocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentState)(nil)).Elem()
}

type documentArgs struct {
	AttachmentsSources []DocumentAttachmentsSource `pulumi:"attachmentsSources"`
	Content            string                      `pulumi:"content"`
	DocumentFormat     *string                     `pulumi:"documentFormat"`
	DocumentType       string                      `pulumi:"documentType"`
	Name               *string                     `pulumi:"name"`
	Permissions        map[string]string           `pulumi:"permissions"`
	Tags               map[string]string           `pulumi:"tags"`
	TargetType         *string                     `pulumi:"targetType"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	AttachmentsSources DocumentAttachmentsSourceArrayInput
	Content            pulumi.StringInput
	DocumentFormat     pulumi.StringPtrInput
	DocumentType       pulumi.StringInput
	Name               pulumi.StringPtrInput
	Permissions        pulumi.StringMapInput
	Tags               pulumi.StringMapInput
	TargetType         pulumi.StringPtrInput
}

func (DocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentArgs)(nil)).Elem()
}
