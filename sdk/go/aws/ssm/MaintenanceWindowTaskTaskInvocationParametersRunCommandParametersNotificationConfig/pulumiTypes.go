// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig struct {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	NotificationArn *string `pulumi:"notificationArn"`
	// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
	NotificationEvents []string `pulumi:"notificationEvents"`
	// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
	NotificationType *string `pulumi:"notificationType"`
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigInput interface {
	pulumi.Input

	ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput
	ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs struct {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	NotificationArn pulumi.StringPtrInput `pulumi:"notificationArn"`
	// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
	NotificationEvents pulumi.StringArrayInput `pulumi:"notificationEvents"`
	// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput)
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput).ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(ctx)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput
	ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput
}

type maintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrType MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs

func MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtr(v *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrInput {	return (*maintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrType)(v)
}

func (*maintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (i *maintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrType) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrType) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput struct { *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return o.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig {
		return &v
	}).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput)
}
// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string { return v.NotificationArn }).(pulumi.StringPtrOutput)
}

// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) []string { return v.NotificationEvents }).(pulumi.StringArrayOutput)
}

// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput struct { *pulumi.OutputState}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) Elem() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return o.ApplyT(func (v *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig { return *v }).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput)
}

// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) NotificationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string { return v.NotificationArn }).(pulumi.StringPtrOutput)
}

// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) NotificationEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) []string { return v.NotificationEvents }).(pulumi.StringArrayOutput)
}

// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigPtrOutput{})
}
