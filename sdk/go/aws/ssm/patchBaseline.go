// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PatchBaseline struct {
	pulumi.CustomResourceState

	ApprovalRules                  PatchBaselineApprovalRuleArrayOutput `pulumi:"approvalRules"`
	ApprovedPatches                pulumi.StringArrayOutput             `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel pulumi.StringPtrOutput               `pulumi:"approvedPatchesComplianceLevel"`
	Description                    pulumi.StringPtrOutput               `pulumi:"description"`
	GlobalFilters                  PatchBaselineGlobalFilterArrayOutput `pulumi:"globalFilters"`
	Name                           pulumi.StringOutput                  `pulumi:"name"`
	OperatingSystem                pulumi.StringPtrOutput               `pulumi:"operatingSystem"`
	RejectedPatches                pulumi.StringArrayOutput             `pulumi:"rejectedPatches"`
	Tags                           pulumi.StringMapOutput               `pulumi:"tags"`
}

// NewPatchBaseline registers a new resource with the given unique name, arguments, and options.
func NewPatchBaseline(ctx *pulumi.Context,
	name string, args *PatchBaselineArgs, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	if args == nil {
		args = &PatchBaselineArgs{}
	}
	var resource PatchBaseline
	err := ctx.RegisterResource("aws:ssm/patchBaseline:PatchBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPatchBaseline gets an existing PatchBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPatchBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PatchBaselineState, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	var resource PatchBaseline
	err := ctx.ReadResource("aws:ssm/patchBaseline:PatchBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PatchBaseline resources.
type patchBaselineState struct {
	ApprovalRules                  []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	ApprovedPatches                []string                    `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel *string                     `pulumi:"approvedPatchesComplianceLevel"`
	Description                    *string                     `pulumi:"description"`
	GlobalFilters                  []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	Name                           *string                     `pulumi:"name"`
	OperatingSystem                *string                     `pulumi:"operatingSystem"`
	RejectedPatches                []string                    `pulumi:"rejectedPatches"`
	Tags                           map[string]string           `pulumi:"tags"`
}

type PatchBaselineState struct {
	ApprovalRules                  PatchBaselineApprovalRuleArrayInput
	ApprovedPatches                pulumi.StringArrayInput
	ApprovedPatchesComplianceLevel pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	GlobalFilters                  PatchBaselineGlobalFilterArrayInput
	Name                           pulumi.StringPtrInput
	OperatingSystem                pulumi.StringPtrInput
	RejectedPatches                pulumi.StringArrayInput
	Tags                           pulumi.StringMapInput
}

func (PatchBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineState)(nil)).Elem()
}

type patchBaselineArgs struct {
	ApprovalRules                  []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	ApprovedPatches                []string                    `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel *string                     `pulumi:"approvedPatchesComplianceLevel"`
	Description                    *string                     `pulumi:"description"`
	GlobalFilters                  []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	Name                           *string                     `pulumi:"name"`
	OperatingSystem                *string                     `pulumi:"operatingSystem"`
	RejectedPatches                []string                    `pulumi:"rejectedPatches"`
	Tags                           map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a PatchBaseline resource.
type PatchBaselineArgs struct {
	ApprovalRules                  PatchBaselineApprovalRuleArrayInput
	ApprovedPatches                pulumi.StringArrayInput
	ApprovedPatchesComplianceLevel pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	GlobalFilters                  PatchBaselineGlobalFilterArrayInput
	Name                           pulumi.StringPtrInput
	OperatingSystem                pulumi.StringPtrInput
	RejectedPatches                pulumi.StringArrayInput
	Tags                           pulumi.StringMapInput
}

func (PatchBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineArgs)(nil)).Elem()
}
