// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NetworkInterface struct {
	pulumi.CustomResourceState

	Attachments     NetworkInterfaceAttachmentTypeArrayOutput `pulumi:"attachments"`
	Description     pulumi.StringPtrOutput                    `pulumi:"description"`
	MacAddress      pulumi.StringOutput                       `pulumi:"macAddress"`
	OutpostArn      pulumi.StringOutput                       `pulumi:"outpostArn"`
	PrivateDnsName  pulumi.StringOutput                       `pulumi:"privateDnsName"`
	PrivateIp       pulumi.StringOutput                       `pulumi:"privateIp"`
	PrivateIps      pulumi.StringArrayOutput                  `pulumi:"privateIps"`
	PrivateIpsCount pulumi.IntOutput                          `pulumi:"privateIpsCount"`
	SecurityGroups  pulumi.StringArrayOutput                  `pulumi:"securityGroups"`
	SourceDestCheck pulumi.BoolPtrOutput                      `pulumi:"sourceDestCheck"`
	SubnetId        pulumi.StringOutput                       `pulumi:"subnetId"`
	Tags            pulumi.StringMapOutput                    `pulumi:"tags"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	if args == nil {
		args = &NetworkInterfaceArgs{}
	}
	var resource NetworkInterface
	err := ctx.RegisterResource("aws:ec2/networkInterface:NetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceState, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	var resource NetworkInterface
	err := ctx.ReadResource("aws:ec2/networkInterface:NetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterface resources.
type networkInterfaceState struct {
	Attachments     []NetworkInterfaceAttachmentType `pulumi:"attachments"`
	Description     *string                          `pulumi:"description"`
	MacAddress      *string                          `pulumi:"macAddress"`
	OutpostArn      *string                          `pulumi:"outpostArn"`
	PrivateDnsName  *string                          `pulumi:"privateDnsName"`
	PrivateIp       *string                          `pulumi:"privateIp"`
	PrivateIps      []string                         `pulumi:"privateIps"`
	PrivateIpsCount *int                             `pulumi:"privateIpsCount"`
	SecurityGroups  []string                         `pulumi:"securityGroups"`
	SourceDestCheck *bool                            `pulumi:"sourceDestCheck"`
	SubnetId        *string                          `pulumi:"subnetId"`
	Tags            map[string]string                `pulumi:"tags"`
}

type NetworkInterfaceState struct {
	Attachments     NetworkInterfaceAttachmentTypeArrayInput
	Description     pulumi.StringPtrInput
	MacAddress      pulumi.StringPtrInput
	OutpostArn      pulumi.StringPtrInput
	PrivateDnsName  pulumi.StringPtrInput
	PrivateIp       pulumi.StringPtrInput
	PrivateIps      pulumi.StringArrayInput
	PrivateIpsCount pulumi.IntPtrInput
	SecurityGroups  pulumi.StringArrayInput
	SourceDestCheck pulumi.BoolPtrInput
	SubnetId        pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
}

func (NetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceState)(nil)).Elem()
}

type networkInterfaceArgs struct {
	Attachments     []NetworkInterfaceAttachmentType `pulumi:"attachments"`
	Description     *string                          `pulumi:"description"`
	PrivateIp       *string                          `pulumi:"privateIp"`
	PrivateIps      []string                         `pulumi:"privateIps"`
	PrivateIpsCount *int                             `pulumi:"privateIpsCount"`
	SecurityGroups  []string                         `pulumi:"securityGroups"`
	SourceDestCheck *bool                            `pulumi:"sourceDestCheck"`
	SubnetId        string                           `pulumi:"subnetId"`
	Tags            map[string]string                `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	Attachments     NetworkInterfaceAttachmentTypeArrayInput
	Description     pulumi.StringPtrInput
	PrivateIp       pulumi.StringPtrInput
	PrivateIps      pulumi.StringArrayInput
	PrivateIpsCount pulumi.IntPtrInput
	SecurityGroups  pulumi.StringArrayInput
	SourceDestCheck pulumi.BoolPtrInput
	SubnetId        pulumi.StringInput
	Tags            pulumi.StringMapInput
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceArgs)(nil)).Elem()
}
