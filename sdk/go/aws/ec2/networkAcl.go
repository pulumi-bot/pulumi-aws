// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NetworkAcl struct {
	pulumi.CustomResourceState

	Arn       pulumi.StringOutput          `pulumi:"arn"`
	Egress    NetworkAclEgressArrayOutput  `pulumi:"egress"`
	Ingress   NetworkAclIngressArrayOutput `pulumi:"ingress"`
	OwnerId   pulumi.StringOutput          `pulumi:"ownerId"`
	SubnetIds pulumi.StringArrayOutput     `pulumi:"subnetIds"`
	Tags      pulumi.StringMapOutput       `pulumi:"tags"`
	VpcId     pulumi.StringOutput          `pulumi:"vpcId"`
}

// NewNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewNetworkAcl(ctx *pulumi.Context,
	name string, args *NetworkAclArgs, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	if args == nil {
		args = &NetworkAclArgs{}
	}
	var resource NetworkAcl
	err := ctx.RegisterResource("aws:ec2/networkAcl:NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAcl gets an existing NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclState, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	var resource NetworkAcl
	err := ctx.ReadResource("aws:ec2/networkAcl:NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAcl resources.
type networkAclState struct {
	Arn       *string             `pulumi:"arn"`
	Egress    []NetworkAclEgress  `pulumi:"egress"`
	Ingress   []NetworkAclIngress `pulumi:"ingress"`
	OwnerId   *string             `pulumi:"ownerId"`
	SubnetIds []string            `pulumi:"subnetIds"`
	Tags      map[string]string   `pulumi:"tags"`
	VpcId     *string             `pulumi:"vpcId"`
}

type NetworkAclState struct {
	Arn       pulumi.StringPtrInput
	Egress    NetworkAclEgressArrayInput
	Ingress   NetworkAclIngressArrayInput
	OwnerId   pulumi.StringPtrInput
	SubnetIds pulumi.StringArrayInput
	Tags      pulumi.StringMapInput
	VpcId     pulumi.StringPtrInput
}

func (NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclState)(nil)).Elem()
}

type networkAclArgs struct {
	Egress    []NetworkAclEgress  `pulumi:"egress"`
	Ingress   []NetworkAclIngress `pulumi:"ingress"`
	SubnetIds []string            `pulumi:"subnetIds"`
	Tags      map[string]string   `pulumi:"tags"`
	VpcId     string              `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetworkAcl resource.
type NetworkAclArgs struct {
	Egress    NetworkAclEgressArrayInput
	Ingress   NetworkAclIngressArrayInput
	SubnetIds pulumi.StringArrayInput
	Tags      pulumi.StringMapInput
	VpcId     pulumi.StringInput
}

func (NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclArgs)(nil)).Elem()
}
