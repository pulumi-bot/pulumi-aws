// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Eip struct {
	pulumi.CustomResourceState

	AllocationId           pulumi.StringOutput    `pulumi:"allocationId"`
	AssociateWithPrivateIp pulumi.StringPtrOutput `pulumi:"associateWithPrivateIp"`
	AssociationId          pulumi.StringOutput    `pulumi:"associationId"`
	CustomerOwnedIp        pulumi.StringOutput    `pulumi:"customerOwnedIp"`
	CustomerOwnedIpv4Pool  pulumi.StringPtrOutput `pulumi:"customerOwnedIpv4Pool"`
	Domain                 pulumi.StringOutput    `pulumi:"domain"`
	Instance               pulumi.StringOutput    `pulumi:"instance"`
	NetworkInterface       pulumi.StringOutput    `pulumi:"networkInterface"`
	PrivateDns             pulumi.StringOutput    `pulumi:"privateDns"`
	PrivateIp              pulumi.StringOutput    `pulumi:"privateIp"`
	PublicDns              pulumi.StringOutput    `pulumi:"publicDns"`
	PublicIp               pulumi.StringOutput    `pulumi:"publicIp"`
	PublicIpv4Pool         pulumi.StringOutput    `pulumi:"publicIpv4Pool"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	Vpc                    pulumi.BoolOutput      `pulumi:"vpc"`
}

// NewEip registers a new resource with the given unique name, arguments, and options.
func NewEip(ctx *pulumi.Context,
	name string, args *EipArgs, opts ...pulumi.ResourceOption) (*Eip, error) {
	if args == nil {
		args = &EipArgs{}
	}
	var resource Eip
	err := ctx.RegisterResource("aws:ec2/eip:Eip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEip gets an existing Eip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipState, opts ...pulumi.ResourceOption) (*Eip, error) {
	var resource Eip
	err := ctx.ReadResource("aws:ec2/eip:Eip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eip resources.
type eipState struct {
	AllocationId           *string           `pulumi:"allocationId"`
	AssociateWithPrivateIp *string           `pulumi:"associateWithPrivateIp"`
	AssociationId          *string           `pulumi:"associationId"`
	CustomerOwnedIp        *string           `pulumi:"customerOwnedIp"`
	CustomerOwnedIpv4Pool  *string           `pulumi:"customerOwnedIpv4Pool"`
	Domain                 *string           `pulumi:"domain"`
	Instance               *string           `pulumi:"instance"`
	NetworkInterface       *string           `pulumi:"networkInterface"`
	PrivateDns             *string           `pulumi:"privateDns"`
	PrivateIp              *string           `pulumi:"privateIp"`
	PublicDns              *string           `pulumi:"publicDns"`
	PublicIp               *string           `pulumi:"publicIp"`
	PublicIpv4Pool         *string           `pulumi:"publicIpv4Pool"`
	Tags                   map[string]string `pulumi:"tags"`
	Vpc                    *bool             `pulumi:"vpc"`
}

type EipState struct {
	AllocationId           pulumi.StringPtrInput
	AssociateWithPrivateIp pulumi.StringPtrInput
	AssociationId          pulumi.StringPtrInput
	CustomerOwnedIp        pulumi.StringPtrInput
	CustomerOwnedIpv4Pool  pulumi.StringPtrInput
	Domain                 pulumi.StringPtrInput
	Instance               pulumi.StringPtrInput
	NetworkInterface       pulumi.StringPtrInput
	PrivateDns             pulumi.StringPtrInput
	PrivateIp              pulumi.StringPtrInput
	PublicDns              pulumi.StringPtrInput
	PublicIp               pulumi.StringPtrInput
	PublicIpv4Pool         pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	Vpc                    pulumi.BoolPtrInput
}

func (EipState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipState)(nil)).Elem()
}

type eipArgs struct {
	AssociateWithPrivateIp *string           `pulumi:"associateWithPrivateIp"`
	CustomerOwnedIpv4Pool  *string           `pulumi:"customerOwnedIpv4Pool"`
	Instance               *string           `pulumi:"instance"`
	NetworkInterface       *string           `pulumi:"networkInterface"`
	PublicIpv4Pool         *string           `pulumi:"publicIpv4Pool"`
	Tags                   map[string]string `pulumi:"tags"`
	Vpc                    *bool             `pulumi:"vpc"`
}

// The set of arguments for constructing a Eip resource.
type EipArgs struct {
	AssociateWithPrivateIp pulumi.StringPtrInput
	CustomerOwnedIpv4Pool  pulumi.StringPtrInput
	Instance               pulumi.StringPtrInput
	NetworkInterface       pulumi.StringPtrInput
	PublicIpv4Pool         pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	Vpc                    pulumi.BoolPtrInput
}

func (EipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipArgs)(nil)).Elem()
}
