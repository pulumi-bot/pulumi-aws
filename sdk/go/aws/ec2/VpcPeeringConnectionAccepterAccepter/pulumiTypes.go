// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package VpcPeeringConnectionAccepterAccepter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type VpcPeeringConnectionAccepterAccepter struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc *bool `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution *bool `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink *bool `pulumi:"allowVpcToRemoteClassicLink"`
}

type VpcPeeringConnectionAccepterAccepterInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput
	ToVpcPeeringConnectionAccepterAccepterOutputWithContext(context.Context) VpcPeeringConnectionAccepterAccepterOutput
}

type VpcPeeringConnectionAccepterAccepterArgs struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc pulumi.BoolPtrInput `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution pulumi.BoolPtrInput `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink pulumi.BoolPtrInput `pulumi:"allowVpcToRemoteClassicLink"`
}

func (VpcPeeringConnectionAccepterAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectionAccepterAccepter)(nil)).Elem()
}

func (i VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput {
	return i.ToVpcPeeringConnectionAccepterAccepterOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterAccepterOutput)
}

func (i VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterPtrOutput() VpcPeeringConnectionAccepterAccepterPtrOutput {
	return i.ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterAccepterOutput).ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(ctx)
}

type VpcPeeringConnectionAccepterAccepterPtrInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterAccepterPtrOutput() VpcPeeringConnectionAccepterAccepterPtrOutput
	ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(context.Context) VpcPeeringConnectionAccepterAccepterPtrOutput
}

type vpcPeeringConnectionAccepterAccepterPtrType VpcPeeringConnectionAccepterAccepterArgs

func VpcPeeringConnectionAccepterAccepterPtr(v *VpcPeeringConnectionAccepterAccepterArgs) VpcPeeringConnectionAccepterAccepterPtrInput {	return (*vpcPeeringConnectionAccepterAccepterPtrType)(v)
}

func (*vpcPeeringConnectionAccepterAccepterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepterAccepter)(nil)).Elem()
}

func (i *vpcPeeringConnectionAccepterAccepterPtrType) ToVpcPeeringConnectionAccepterAccepterPtrOutput() VpcPeeringConnectionAccepterAccepterPtrOutput {
	return i.ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConnectionAccepterAccepterPtrType) ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterAccepterPtrOutput)
}

type VpcPeeringConnectionAccepterAccepterOutput struct { *pulumi.OutputState }

func (VpcPeeringConnectionAccepterAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectionAccepterAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterPtrOutput() VpcPeeringConnectionAccepterAccepterPtrOutput {
	return o.ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(context.Background())
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterPtrOutput {
	return o.ApplyT(func(v VpcPeeringConnectionAccepterAccepter) *VpcPeeringConnectionAccepterAccepter {
		return &v
	}).(VpcPeeringConnectionAccepterAccepterPtrOutput)
}
// Indicates whether a local ClassicLink connection can communicate
// with the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowClassicLinkToRemoteVpc }).(pulumi.BoolPtrOutput)
}

// Indicates whether a local VPC can resolve public DNS hostnames to
// private IP addresses when queried from instances in a peer VPC.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowRemoteVpcDnsResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowRemoteVpcDnsResolution }).(pulumi.BoolPtrOutput)
}

// Indicates whether a local VPC can communicate with a ClassicLink
// connection in the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowVpcToRemoteClassicLink() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowVpcToRemoteClassicLink }).(pulumi.BoolPtrOutput)
}

type VpcPeeringConnectionAccepterAccepterPtrOutput struct { *pulumi.OutputState}

func (VpcPeeringConnectionAccepterAccepterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepterAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterAccepterPtrOutput) ToVpcPeeringConnectionAccepterAccepterPtrOutput() VpcPeeringConnectionAccepterAccepterPtrOutput {
	return o
}

func (o VpcPeeringConnectionAccepterAccepterPtrOutput) ToVpcPeeringConnectionAccepterAccepterPtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterPtrOutput {
	return o
}

func (o VpcPeeringConnectionAccepterAccepterPtrOutput) Elem() VpcPeeringConnectionAccepterAccepterOutput {
	return o.ApplyT(func (v *VpcPeeringConnectionAccepterAccepter) VpcPeeringConnectionAccepterAccepter { return *v }).(VpcPeeringConnectionAccepterAccepterOutput)
}

// Indicates whether a local ClassicLink connection can communicate
// with the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterPtrOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowClassicLinkToRemoteVpc }).(pulumi.BoolPtrOutput)
}

// Indicates whether a local VPC can resolve public DNS hostnames to
// private IP addresses when queried from instances in a peer VPC.
func (o VpcPeeringConnectionAccepterAccepterPtrOutput) AllowRemoteVpcDnsResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowRemoteVpcDnsResolution }).(pulumi.BoolPtrOutput)
}

// Indicates whether a local VPC can communicate with a ClassicLink
// connection in the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterPtrOutput) AllowVpcToRemoteClassicLink() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v VpcPeeringConnectionAccepterAccepter) *bool { return v.AllowVpcToRemoteClassicLink }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterAccepterOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterAccepterPtrOutput{})
}
