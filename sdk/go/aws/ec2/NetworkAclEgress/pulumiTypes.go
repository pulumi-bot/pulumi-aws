// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package NetworkAclEgress

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NetworkAclEgress struct {
	// The action to take.
	Action string `pulumi:"action"`
	// The CIDR block to match. This must be a
	// valid network mask.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The from port to match.
	FromPort int `pulumi:"fromPort"`
	// The ICMP type code to be used. Default 0.
	IcmpCode *int `pulumi:"icmpCode"`
	// The ICMP type to be used. Default 0.
	IcmpType *int `pulumi:"icmpType"`
	// The IPv6 CIDR block.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The protocol to match. If using the -1 'all'
	// protocol, you must specify a from and to port of 0.
	Protocol string `pulumi:"protocol"`
	// The rule number. Used for ordering.
	RuleNo int `pulumi:"ruleNo"`
	// The to port to match.
	ToPort int `pulumi:"toPort"`
}

type NetworkAclEgressInput interface {
	pulumi.Input

	ToNetworkAclEgressOutput() NetworkAclEgressOutput
	ToNetworkAclEgressOutputWithContext(context.Context) NetworkAclEgressOutput
}

type NetworkAclEgressArgs struct {
	// The action to take.
	Action pulumi.StringInput `pulumi:"action"`
	// The CIDR block to match. This must be a
	// valid network mask.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// The from port to match.
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// The ICMP type code to be used. Default 0.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// The ICMP type to be used. Default 0.
	IcmpType pulumi.IntPtrInput `pulumi:"icmpType"`
	// The IPv6 CIDR block.
	Ipv6CidrBlock pulumi.StringPtrInput `pulumi:"ipv6CidrBlock"`
	// The protocol to match. If using the -1 'all'
	// protocol, you must specify a from and to port of 0.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The rule number. Used for ordering.
	RuleNo pulumi.IntInput `pulumi:"ruleNo"`
	// The to port to match.
	ToPort pulumi.IntInput `pulumi:"toPort"`
}

func (NetworkAclEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEgress)(nil)).Elem()
}

func (i NetworkAclEgressArgs) ToNetworkAclEgressOutput() NetworkAclEgressOutput {
	return i.ToNetworkAclEgressOutputWithContext(context.Background())
}

func (i NetworkAclEgressArgs) ToNetworkAclEgressOutputWithContext(ctx context.Context) NetworkAclEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEgressOutput)
}

type NetworkAclEgressArrayInput interface {
	pulumi.Input

	ToNetworkAclEgressArrayOutput() NetworkAclEgressArrayOutput
	ToNetworkAclEgressArrayOutputWithContext(context.Context) NetworkAclEgressArrayOutput
}

type NetworkAclEgressArray []NetworkAclEgressInput

func (NetworkAclEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEgress)(nil)).Elem()
}

func (i NetworkAclEgressArray) ToNetworkAclEgressArrayOutput() NetworkAclEgressArrayOutput {
	return i.ToNetworkAclEgressArrayOutputWithContext(context.Background())
}

func (i NetworkAclEgressArray) ToNetworkAclEgressArrayOutputWithContext(ctx context.Context) NetworkAclEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEgressArrayOutput)
}

type NetworkAclEgressOutput struct { *pulumi.OutputState }

func (NetworkAclEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEgress)(nil)).Elem()
}

func (o NetworkAclEgressOutput) ToNetworkAclEgressOutput() NetworkAclEgressOutput {
	return o
}

func (o NetworkAclEgressOutput) ToNetworkAclEgressOutputWithContext(ctx context.Context) NetworkAclEgressOutput {
	return o
}

// The action to take.
func (o NetworkAclEgressOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func (v NetworkAclEgress) string { return v.Action }).(pulumi.StringOutput)
}

// The CIDR block to match. This must be a
// valid network mask.
func (o NetworkAclEgressOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func (v NetworkAclEgress) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The from port to match.
func (o NetworkAclEgressOutput) FromPort() pulumi.IntOutput {
	return o.ApplyT(func (v NetworkAclEgress) int { return v.FromPort }).(pulumi.IntOutput)
}

// The ICMP type code to be used. Default 0.
func (o NetworkAclEgressOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func (v NetworkAclEgress) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// The ICMP type to be used. Default 0.
func (o NetworkAclEgressOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func (v NetworkAclEgress) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// The IPv6 CIDR block.
func (o NetworkAclEgressOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func (v NetworkAclEgress) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// The protocol to match. If using the -1 'all'
// protocol, you must specify a from and to port of 0.
func (o NetworkAclEgressOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func (v NetworkAclEgress) string { return v.Protocol }).(pulumi.StringOutput)
}

// The rule number. Used for ordering.
func (o NetworkAclEgressOutput) RuleNo() pulumi.IntOutput {
	return o.ApplyT(func (v NetworkAclEgress) int { return v.RuleNo }).(pulumi.IntOutput)
}

// The to port to match.
func (o NetworkAclEgressOutput) ToPort() pulumi.IntOutput {
	return o.ApplyT(func (v NetworkAclEgress) int { return v.ToPort }).(pulumi.IntOutput)
}

type NetworkAclEgressArrayOutput struct { *pulumi.OutputState}

func (NetworkAclEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEgress)(nil)).Elem()
}

func (o NetworkAclEgressArrayOutput) ToNetworkAclEgressArrayOutput() NetworkAclEgressArrayOutput {
	return o
}

func (o NetworkAclEgressArrayOutput) ToNetworkAclEgressArrayOutputWithContext(ctx context.Context) NetworkAclEgressArrayOutput {
	return o
}

func (o NetworkAclEgressArrayOutput) Index(i pulumi.IntInput) NetworkAclEgressOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) NetworkAclEgress {
		return vs[0].([]NetworkAclEgress)[vs[1].(int)]
	}).(NetworkAclEgressOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkAclEgressOutput{})
	pulumi.RegisterOutputType(NetworkAclEgressArrayOutput{})
}
