// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `ec2.Subnet` provides details about a specific VPC subnet.
//
// This resource can prove useful when a module accepts a subnet ID as an input variable and needs to, for example, determine the ID of the VPC that the subnet belongs to.
//
// ## Example Usage
//
// The following example shows how one might accept a subnet ID as a variable and use this data source to obtain the data necessary to create a security group that allows connections from hosts in that subnet.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		subnetId := cfg.RequireObject("subnetId")
// 		opt0 := subnetId
// 		selected, err := ec2.LookupSubnet(ctx, &ec2.LookupSubnetArgs{
// 			Id: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewSecurityGroup(ctx, "subnet", &ec2.SecurityGroupArgs{
// 			VpcId: pulumi.String(selected.VpcId),
// 			Ingress: ec2.SecurityGroupIngressArray{
// 				&ec2.SecurityGroupIngressArgs{
// 					CidrBlocks: pulumi.StringArray{
// 						pulumi.String(selected.CidrBlock),
// 					},
// 					FromPort: pulumi.Int(80),
// 					ToPort:   pulumi.Int(80),
// 					Protocol: pulumi.String("tcp"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Filter Example
//
// If you want to match against tag `Name`, use:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2.LookupSubnet(ctx, &ec2.LookupSubnetArgs{
// 			Filters: []ec2.GetSubnetFilter{
// 				ec2.GetSubnetFilter{
// 					Name: "tag:Name",
// 					Values: []string{
// 						"yakdriver",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	var rv LookupSubnetResult
	err := ctx.Invoke("aws:ec2/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// Availability zone where the subnet must reside.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ID of the Availability Zone for the subnet.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// CIDR block of the desired subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Whether the desired subnet must be the default subnet for its associated availability zone.
	DefaultForAz *bool `pulumi:"defaultForAz"`
	// Configuration block. Detailed below.
	Filters []GetSubnetFilter `pulumi:"filters"`
	// ID of the specific subnet to retrieve.
	Id *string `pulumi:"id"`
	// IPv6 CIDR block of the desired subnet.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// State that the desired subnet must have.
	State *string `pulumi:"state"`
	// Map of tags, each pair of which must exactly match a pair on the desired subnet.
	Tags map[string]string `pulumi:"tags"`
	// ID of the VPC that the desired subnet belongs to.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// ARN of the subnet.
	Arn string `pulumi:"arn"`
	// Whether an IPv6 address is assigned on creation.
	AssignIpv6AddressOnCreation bool   `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            string `pulumi:"availabilityZone"`
	AvailabilityZoneId          string `pulumi:"availabilityZoneId"`
	// Available IP addresses of the subnet.
	AvailableIpAddressCount int    `pulumi:"availableIpAddressCount"`
	CidrBlock               string `pulumi:"cidrBlock"`
	// Identifier of customer owned IPv4 address pool.
	CustomerOwnedIpv4Pool string            `pulumi:"customerOwnedIpv4Pool"`
	DefaultForAz          bool              `pulumi:"defaultForAz"`
	Filters               []GetSubnetFilter `pulumi:"filters"`
	Id                    string            `pulumi:"id"`
	Ipv6CidrBlock         string            `pulumi:"ipv6CidrBlock"`
	// Association ID of the IPv6 CIDR block.
	Ipv6CidrBlockAssociationId string `pulumi:"ipv6CidrBlockAssociationId"`
	// Whether customer owned IP addresses are assigned on network interface creation.
	MapCustomerOwnedIpOnLaunch bool `pulumi:"mapCustomerOwnedIpOnLaunch"`
	// Whether public IP addresses are assigned on instance launch.
	MapPublicIpOnLaunch bool `pulumi:"mapPublicIpOnLaunch"`
	// ARN of the Outpost.
	OutpostArn string `pulumi:"outpostArn"`
	// ID of the AWS account that owns the subnet.
	OwnerId string            `pulumi:"ownerId"`
	State   string            `pulumi:"state"`
	Tags    map[string]string `pulumi:"tags"`
	VpcId   string            `pulumi:"vpcId"`
}

func LookupSubnetApply(ctx *pulumi.Context, args LookupSubnetApplyInput, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return args.ToLookupSubnetApplyOutput().ApplyT(func(v LookupSubnetArgs) (LookupSubnetResult, error) {
		r, err := LookupSubnet(ctx, &v, opts...)
		return *r, err

	}).(LookupSubnetResultOutput)
}

// LookupSubnetApplyInput is an input type that accepts LookupSubnetApplyArgs and LookupSubnetApplyOutput values.
// You can construct a concrete instance of `LookupSubnetApplyInput` via:
//
//          LookupSubnetApplyArgs{...}
type LookupSubnetApplyInput interface {
	pulumi.Input

	ToLookupSubnetApplyOutput() LookupSubnetApplyOutput
	ToLookupSubnetApplyOutputWithContext(context.Context) LookupSubnetApplyOutput
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetApplyArgs struct {
	// Availability zone where the subnet must reside.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// ID of the Availability Zone for the subnet.
	AvailabilityZoneId pulumi.StringPtrInput `pulumi:"availabilityZoneId"`
	// CIDR block of the desired subnet.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// Whether the desired subnet must be the default subnet for its associated availability zone.
	DefaultForAz pulumi.BoolPtrInput `pulumi:"defaultForAz"`
	// Configuration block. Detailed below.
	Filters GetSubnetFilterArrayInput `pulumi:"filters"`
	// ID of the specific subnet to retrieve.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// IPv6 CIDR block of the desired subnet.
	Ipv6CidrBlock pulumi.StringPtrInput `pulumi:"ipv6CidrBlock"`
	// State that the desired subnet must have.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Map of tags, each pair of which must exactly match a pair on the desired subnet.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// ID of the VPC that the desired subnet belongs to.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupSubnetApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

func (i LookupSubnetApplyArgs) ToLookupSubnetApplyOutput() LookupSubnetApplyOutput {
	return i.ToLookupSubnetApplyOutputWithContext(context.Background())
}

func (i LookupSubnetApplyArgs) ToLookupSubnetApplyOutputWithContext(ctx context.Context) LookupSubnetApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSubnetApplyOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetApplyOutput struct{ *pulumi.OutputState }

func (LookupSubnetApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

func (o LookupSubnetApplyOutput) ToLookupSubnetApplyOutput() LookupSubnetApplyOutput {
	return o
}

func (o LookupSubnetApplyOutput) ToLookupSubnetApplyOutputWithContext(ctx context.Context) LookupSubnetApplyOutput {
	return o
}

// Availability zone where the subnet must reside.
func (o LookupSubnetApplyOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// ID of the Availability Zone for the subnet.
func (o LookupSubnetApplyOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

// CIDR block of the desired subnet.
func (o LookupSubnetApplyOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// Whether the desired subnet must be the default subnet for its associated availability zone.
func (o LookupSubnetApplyOutput) DefaultForAz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *bool { return v.DefaultForAz }).(pulumi.BoolPtrOutput)
}

// Configuration block. Detailed below.
func (o LookupSubnetApplyOutput) Filters() GetSubnetFilterArrayOutput {
	return o.ApplyT(func(v LookupSubnetArgs) []GetSubnetFilter { return v.Filters }).(GetSubnetFilterArrayOutput)
}

// ID of the specific subnet to retrieve.
func (o LookupSubnetApplyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// IPv6 CIDR block of the desired subnet.
func (o LookupSubnetApplyOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// State that the desired subnet must have.
func (o LookupSubnetApplyOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Map of tags, each pair of which must exactly match a pair on the desired subnet.
func (o LookupSubnetApplyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// ID of the VPC that the desired subnet belongs to.
func (o LookupSubnetApplyOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetArgs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

// ARN of the subnet.
func (o LookupSubnetResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Whether an IPv6 address is assigned on creation.
func (o LookupSubnetResultOutput) AssignIpv6AddressOnCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) AvailabilityZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.AvailabilityZoneId }).(pulumi.StringOutput)
}

// Available IP addresses of the subnet.
func (o LookupSubnetResultOutput) AvailableIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.AvailableIpAddressCount }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// Identifier of customer owned IPv4 address pool.
func (o LookupSubnetResultOutput) CustomerOwnedIpv4Pool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.CustomerOwnedIpv4Pool }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DefaultForAz() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.DefaultForAz }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) Filters() GetSubnetFilterArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetFilter { return v.Filters }).(GetSubnetFilterArrayOutput)
}

func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// Association ID of the IPv6 CIDR block.
func (o LookupSubnetResultOutput) Ipv6CidrBlockAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6CidrBlockAssociationId }).(pulumi.StringOutput)
}

// Whether customer owned IP addresses are assigned on network interface creation.
func (o LookupSubnetResultOutput) MapCustomerOwnedIpOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.MapCustomerOwnedIpOnLaunch }).(pulumi.BoolOutput)
}

// Whether public IP addresses are assigned on instance launch.
func (o LookupSubnetResultOutput) MapPublicIpOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.MapPublicIpOnLaunch }).(pulumi.BoolOutput)
}

// ARN of the Outpost.
func (o LookupSubnetResultOutput) OutpostArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.OutpostArn }).(pulumi.StringOutput)
}

// ID of the AWS account that owns the subnet.
func (o LookupSubnetResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetApplyOutput{})
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
