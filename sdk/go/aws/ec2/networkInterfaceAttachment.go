// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NetworkInterfaceAttachment struct {
	pulumi.CustomResourceState

	AttachmentId       pulumi.StringOutput `pulumi:"attachmentId"`
	DeviceIndex        pulumi.IntOutput    `pulumi:"deviceIndex"`
	InstanceId         pulumi.StringOutput `pulumi:"instanceId"`
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	Status             pulumi.StringOutput `pulumi:"status"`
}

// NewNetworkInterfaceAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, args *NetworkInterfaceAttachmentArgs, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachment, error) {
	if args == nil || args.DeviceIndex == nil {
		return nil, errors.New("missing required argument 'DeviceIndex'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	if args == nil {
		args = &NetworkInterfaceAttachmentArgs{}
	}
	var resource NetworkInterfaceAttachment
	err := ctx.RegisterResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfaceAttachment gets an existing NetworkInterfaceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceAttachmentState, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachment, error) {
	var resource NetworkInterfaceAttachment
	err := ctx.ReadResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfaceAttachment resources.
type networkInterfaceAttachmentState struct {
	AttachmentId       *string `pulumi:"attachmentId"`
	DeviceIndex        *int    `pulumi:"deviceIndex"`
	InstanceId         *string `pulumi:"instanceId"`
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	Status             *string `pulumi:"status"`
}

type NetworkInterfaceAttachmentState struct {
	AttachmentId       pulumi.StringPtrInput
	DeviceIndex        pulumi.IntPtrInput
	InstanceId         pulumi.StringPtrInput
	NetworkInterfaceId pulumi.StringPtrInput
	Status             pulumi.StringPtrInput
}

func (NetworkInterfaceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentState)(nil)).Elem()
}

type networkInterfaceAttachmentArgs struct {
	DeviceIndex        int    `pulumi:"deviceIndex"`
	InstanceId         string `pulumi:"instanceId"`
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

// The set of arguments for constructing a NetworkInterfaceAttachment resource.
type NetworkInterfaceAttachmentArgs struct {
	DeviceIndex        pulumi.IntInput
	InstanceId         pulumi.StringInput
	NetworkInterfaceId pulumi.StringInput
}

func (NetworkInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentArgs)(nil)).Elem()
}
