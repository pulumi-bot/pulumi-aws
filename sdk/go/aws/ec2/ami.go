// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Ami struct {
	pulumi.CustomResourceState

	Architecture          pulumi.StringPtrOutput             `pulumi:"architecture"`
	Arn                   pulumi.StringOutput                `pulumi:"arn"`
	Description           pulumi.StringPtrOutput             `pulumi:"description"`
	EbsBlockDevices       AmiEbsBlockDeviceArrayOutput       `pulumi:"ebsBlockDevices"`
	EnaSupport            pulumi.BoolPtrOutput               `pulumi:"enaSupport"`
	EphemeralBlockDevices AmiEphemeralBlockDeviceArrayOutput `pulumi:"ephemeralBlockDevices"`
	ImageLocation         pulumi.StringOutput                `pulumi:"imageLocation"`
	KernelId              pulumi.StringPtrOutput             `pulumi:"kernelId"`
	ManageEbsSnapshots    pulumi.BoolOutput                  `pulumi:"manageEbsSnapshots"`
	Name                  pulumi.StringOutput                `pulumi:"name"`
	RamdiskId             pulumi.StringPtrOutput             `pulumi:"ramdiskId"`
	RootDeviceName        pulumi.StringPtrOutput             `pulumi:"rootDeviceName"`
	RootSnapshotId        pulumi.StringOutput                `pulumi:"rootSnapshotId"`
	SriovNetSupport       pulumi.StringPtrOutput             `pulumi:"sriovNetSupport"`
	Tags                  pulumi.StringMapOutput             `pulumi:"tags"`
	VirtualizationType    pulumi.StringPtrOutput             `pulumi:"virtualizationType"`
}

// NewAmi registers a new resource with the given unique name, arguments, and options.
func NewAmi(ctx *pulumi.Context,
	name string, args *AmiArgs, opts ...pulumi.ResourceOption) (*Ami, error) {
	if args == nil {
		args = &AmiArgs{}
	}
	var resource Ami
	err := ctx.RegisterResource("aws:ec2/ami:Ami", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmi gets an existing Ami resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AmiState, opts ...pulumi.ResourceOption) (*Ami, error) {
	var resource Ami
	err := ctx.ReadResource("aws:ec2/ami:Ami", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ami resources.
type amiState struct {
	Architecture          *string                   `pulumi:"architecture"`
	Arn                   *string                   `pulumi:"arn"`
	Description           *string                   `pulumi:"description"`
	EbsBlockDevices       []AmiEbsBlockDevice       `pulumi:"ebsBlockDevices"`
	EnaSupport            *bool                     `pulumi:"enaSupport"`
	EphemeralBlockDevices []AmiEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	ImageLocation         *string                   `pulumi:"imageLocation"`
	KernelId              *string                   `pulumi:"kernelId"`
	ManageEbsSnapshots    *bool                     `pulumi:"manageEbsSnapshots"`
	Name                  *string                   `pulumi:"name"`
	RamdiskId             *string                   `pulumi:"ramdiskId"`
	RootDeviceName        *string                   `pulumi:"rootDeviceName"`
	RootSnapshotId        *string                   `pulumi:"rootSnapshotId"`
	SriovNetSupport       *string                   `pulumi:"sriovNetSupport"`
	Tags                  map[string]string         `pulumi:"tags"`
	VirtualizationType    *string                   `pulumi:"virtualizationType"`
}

type AmiState struct {
	Architecture          pulumi.StringPtrInput
	Arn                   pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	EbsBlockDevices       AmiEbsBlockDeviceArrayInput
	EnaSupport            pulumi.BoolPtrInput
	EphemeralBlockDevices AmiEphemeralBlockDeviceArrayInput
	ImageLocation         pulumi.StringPtrInput
	KernelId              pulumi.StringPtrInput
	ManageEbsSnapshots    pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	RamdiskId             pulumi.StringPtrInput
	RootDeviceName        pulumi.StringPtrInput
	RootSnapshotId        pulumi.StringPtrInput
	SriovNetSupport       pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	VirtualizationType    pulumi.StringPtrInput
}

func (AmiState) ElementType() reflect.Type {
	return reflect.TypeOf((*amiState)(nil)).Elem()
}

type amiArgs struct {
	Architecture          *string                   `pulumi:"architecture"`
	Description           *string                   `pulumi:"description"`
	EbsBlockDevices       []AmiEbsBlockDevice       `pulumi:"ebsBlockDevices"`
	EnaSupport            *bool                     `pulumi:"enaSupport"`
	EphemeralBlockDevices []AmiEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	ImageLocation         *string                   `pulumi:"imageLocation"`
	KernelId              *string                   `pulumi:"kernelId"`
	Name                  *string                   `pulumi:"name"`
	RamdiskId             *string                   `pulumi:"ramdiskId"`
	RootDeviceName        *string                   `pulumi:"rootDeviceName"`
	SriovNetSupport       *string                   `pulumi:"sriovNetSupport"`
	Tags                  map[string]string         `pulumi:"tags"`
	VirtualizationType    *string                   `pulumi:"virtualizationType"`
}

// The set of arguments for constructing a Ami resource.
type AmiArgs struct {
	Architecture          pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	EbsBlockDevices       AmiEbsBlockDeviceArrayInput
	EnaSupport            pulumi.BoolPtrInput
	EphemeralBlockDevices AmiEphemeralBlockDeviceArrayInput
	ImageLocation         pulumi.StringPtrInput
	KernelId              pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	RamdiskId             pulumi.StringPtrInput
	RootDeviceName        pulumi.StringPtrInput
	SriovNetSupport       pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	VirtualizationType    pulumi.StringPtrInput
}

func (AmiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*amiArgs)(nil)).Elem()
}
