// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DefaultSubnet struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput    `pulumi:"arn"`
	AssignIpv6AddressOnCreation pulumi.BoolOutput      `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            pulumi.StringOutput    `pulumi:"availabilityZone"`
	AvailabilityZoneId          pulumi.StringOutput    `pulumi:"availabilityZoneId"`
	CidrBlock                   pulumi.StringOutput    `pulumi:"cidrBlock"`
	Ipv6CidrBlock               pulumi.StringOutput    `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId  pulumi.StringOutput    `pulumi:"ipv6CidrBlockAssociationId"`
	MapPublicIpOnLaunch         pulumi.BoolOutput      `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                  pulumi.StringPtrOutput `pulumi:"outpostArn"`
	OwnerId                     pulumi.StringOutput    `pulumi:"ownerId"`
	Tags                        pulumi.StringMapOutput `pulumi:"tags"`
	VpcId                       pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewDefaultSubnet registers a new resource with the given unique name, arguments, and options.
func NewDefaultSubnet(ctx *pulumi.Context,
	name string, args *DefaultSubnetArgs, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil {
		args = &DefaultSubnetArgs{}
	}
	var resource DefaultSubnet
	err := ctx.RegisterResource("aws:ec2/defaultSubnet:DefaultSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultSubnet gets an existing DefaultSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultSubnetState, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	var resource DefaultSubnet
	err := ctx.ReadResource("aws:ec2/defaultSubnet:DefaultSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultSubnet resources.
type defaultSubnetState struct {
	Arn                         *string           `pulumi:"arn"`
	AssignIpv6AddressOnCreation *bool             `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            *string           `pulumi:"availabilityZone"`
	AvailabilityZoneId          *string           `pulumi:"availabilityZoneId"`
	CidrBlock                   *string           `pulumi:"cidrBlock"`
	Ipv6CidrBlock               *string           `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId  *string           `pulumi:"ipv6CidrBlockAssociationId"`
	MapPublicIpOnLaunch         *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                  *string           `pulumi:"outpostArn"`
	OwnerId                     *string           `pulumi:"ownerId"`
	Tags                        map[string]string `pulumi:"tags"`
	VpcId                       *string           `pulumi:"vpcId"`
}

type DefaultSubnetState struct {
	Arn                         pulumi.StringPtrInput
	AssignIpv6AddressOnCreation pulumi.BoolPtrInput
	AvailabilityZone            pulumi.StringPtrInput
	AvailabilityZoneId          pulumi.StringPtrInput
	CidrBlock                   pulumi.StringPtrInput
	Ipv6CidrBlock               pulumi.StringPtrInput
	Ipv6CidrBlockAssociationId  pulumi.StringPtrInput
	MapPublicIpOnLaunch         pulumi.BoolPtrInput
	OutpostArn                  pulumi.StringPtrInput
	OwnerId                     pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	VpcId                       pulumi.StringPtrInput
}

func (DefaultSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetState)(nil)).Elem()
}

type defaultSubnetArgs struct {
	AvailabilityZone    string            `pulumi:"availabilityZone"`
	MapPublicIpOnLaunch *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn          *string           `pulumi:"outpostArn"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultSubnet resource.
type DefaultSubnetArgs struct {
	AvailabilityZone    pulumi.StringInput
	MapPublicIpOnLaunch pulumi.BoolPtrInput
	OutpostArn          pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (DefaultSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetArgs)(nil)).Elem()
}
