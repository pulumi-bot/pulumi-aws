// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package getInstanceEbsBlockDevice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GetInstanceEbsBlockDevice struct {
	// If the root block device will be deleted on termination.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// The physical name of the device.
	DeviceName string `pulumi:"deviceName"`
	// If the EBS volume is encrypted.
	Encrypted bool `pulumi:"encrypted"`
	// `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
	Iops int `pulumi:"iops"`
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The ID of the snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	VolumeId string `pulumi:"volumeId"`
	// The size of the volume, in GiB.
	VolumeSize int `pulumi:"volumeSize"`
	// The type of the volume.
	VolumeType string `pulumi:"volumeType"`
}

type GetInstanceEbsBlockDeviceInput interface {
	pulumi.Input

	ToGetInstanceEbsBlockDeviceOutput() GetInstanceEbsBlockDeviceOutput
	ToGetInstanceEbsBlockDeviceOutputWithContext(context.Context) GetInstanceEbsBlockDeviceOutput
}

type GetInstanceEbsBlockDeviceArgs struct {
	// If the root block device will be deleted on termination.
	DeleteOnTermination pulumi.BoolInput `pulumi:"deleteOnTermination"`
	// The physical name of the device.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// If the EBS volume is encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
	Iops pulumi.IntInput `pulumi:"iops"`
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// The ID of the snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The size of the volume, in GiB.
	VolumeSize pulumi.IntInput `pulumi:"volumeSize"`
	// The type of the volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetInstanceEbsBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceEbsBlockDevice)(nil)).Elem()
}

func (i GetInstanceEbsBlockDeviceArgs) ToGetInstanceEbsBlockDeviceOutput() GetInstanceEbsBlockDeviceOutput {
	return i.ToGetInstanceEbsBlockDeviceOutputWithContext(context.Background())
}

func (i GetInstanceEbsBlockDeviceArgs) ToGetInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) GetInstanceEbsBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceEbsBlockDeviceOutput)
}

type GetInstanceEbsBlockDeviceArrayInput interface {
	pulumi.Input

	ToGetInstanceEbsBlockDeviceArrayOutput() GetInstanceEbsBlockDeviceArrayOutput
	ToGetInstanceEbsBlockDeviceArrayOutputWithContext(context.Context) GetInstanceEbsBlockDeviceArrayOutput
}

type GetInstanceEbsBlockDeviceArray []GetInstanceEbsBlockDeviceInput

func (GetInstanceEbsBlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceEbsBlockDevice)(nil)).Elem()
}

func (i GetInstanceEbsBlockDeviceArray) ToGetInstanceEbsBlockDeviceArrayOutput() GetInstanceEbsBlockDeviceArrayOutput {
	return i.ToGetInstanceEbsBlockDeviceArrayOutputWithContext(context.Background())
}

func (i GetInstanceEbsBlockDeviceArray) ToGetInstanceEbsBlockDeviceArrayOutputWithContext(ctx context.Context) GetInstanceEbsBlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceEbsBlockDeviceArrayOutput)
}

type GetInstanceEbsBlockDeviceOutput struct { *pulumi.OutputState }

func (GetInstanceEbsBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceEbsBlockDevice)(nil)).Elem()
}

func (o GetInstanceEbsBlockDeviceOutput) ToGetInstanceEbsBlockDeviceOutput() GetInstanceEbsBlockDeviceOutput {
	return o
}

func (o GetInstanceEbsBlockDeviceOutput) ToGetInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) GetInstanceEbsBlockDeviceOutput {
	return o
}

// If the root block device will be deleted on termination.
func (o GetInstanceEbsBlockDeviceOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) bool { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// The physical name of the device.
func (o GetInstanceEbsBlockDeviceOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) string { return v.DeviceName }).(pulumi.StringOutput)
}

// If the EBS volume is encrypted.
func (o GetInstanceEbsBlockDeviceOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

// `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
func (o GetInstanceEbsBlockDeviceOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) int { return v.Iops }).(pulumi.IntOutput)
}

func (o GetInstanceEbsBlockDeviceOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The ID of the snapshot.
func (o GetInstanceEbsBlockDeviceOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) string { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o GetInstanceEbsBlockDeviceOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The size of the volume, in GiB.
func (o GetInstanceEbsBlockDeviceOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) int { return v.VolumeSize }).(pulumi.IntOutput)
}

// The type of the volume.
func (o GetInstanceEbsBlockDeviceOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func (v GetInstanceEbsBlockDevice) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetInstanceEbsBlockDeviceArrayOutput struct { *pulumi.OutputState}

func (GetInstanceEbsBlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceEbsBlockDevice)(nil)).Elem()
}

func (o GetInstanceEbsBlockDeviceArrayOutput) ToGetInstanceEbsBlockDeviceArrayOutput() GetInstanceEbsBlockDeviceArrayOutput {
	return o
}

func (o GetInstanceEbsBlockDeviceArrayOutput) ToGetInstanceEbsBlockDeviceArrayOutputWithContext(ctx context.Context) GetInstanceEbsBlockDeviceArrayOutput {
	return o
}

func (o GetInstanceEbsBlockDeviceArrayOutput) Index(i pulumi.IntInput) GetInstanceEbsBlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetInstanceEbsBlockDevice {
		return vs[0].([]GetInstanceEbsBlockDevice)[vs[1].(int)]
	}).(GetInstanceEbsBlockDeviceOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceEbsBlockDeviceOutput{})
	pulumi.RegisterOutputType(GetInstanceEbsBlockDeviceArrayOutput{})
}
