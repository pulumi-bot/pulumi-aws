// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecurityGroupRule struct {
	pulumi.CustomResourceState

	CidrBlocks            pulumi.StringArrayOutput `pulumi:"cidrBlocks"`
	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	FromPort              pulumi.IntOutput         `pulumi:"fromPort"`
	Ipv6CidrBlocks        pulumi.StringArrayOutput `pulumi:"ipv6CidrBlocks"`
	PrefixListIds         pulumi.StringArrayOutput `pulumi:"prefixListIds"`
	Protocol              pulumi.StringOutput      `pulumi:"protocol"`
	SecurityGroupId       pulumi.StringOutput      `pulumi:"securityGroupId"`
	Self                  pulumi.BoolPtrOutput     `pulumi:"self"`
	SourceSecurityGroupId pulumi.StringOutput      `pulumi:"sourceSecurityGroupId"`
	ToPort                pulumi.IntOutput         `pulumi:"toPort"`
	// Type of rule, ingress (inbound) or egress (outbound).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil || args.FromPort == nil {
		return nil, errors.New("missing required argument 'FromPort'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	if args == nil || args.ToPort == nil {
		return nil, errors.New("missing required argument 'ToPort'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &SecurityGroupRuleArgs{}
	}
	var resource SecurityGroupRule
	err := ctx.RegisterResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	CidrBlocks            []string `pulumi:"cidrBlocks"`
	Description           *string  `pulumi:"description"`
	FromPort              *int     `pulumi:"fromPort"`
	Ipv6CidrBlocks        []string `pulumi:"ipv6CidrBlocks"`
	PrefixListIds         []string `pulumi:"prefixListIds"`
	Protocol              *string  `pulumi:"protocol"`
	SecurityGroupId       *string  `pulumi:"securityGroupId"`
	Self                  *bool    `pulumi:"self"`
	SourceSecurityGroupId *string  `pulumi:"sourceSecurityGroupId"`
	ToPort                *int     `pulumi:"toPort"`
	// Type of rule, ingress (inbound) or egress (outbound).
	Type *string `pulumi:"type"`
}

type SecurityGroupRuleState struct {
	CidrBlocks            pulumi.StringArrayInput
	Description           pulumi.StringPtrInput
	FromPort              pulumi.IntPtrInput
	Ipv6CidrBlocks        pulumi.StringArrayInput
	PrefixListIds         pulumi.StringArrayInput
	Protocol              pulumi.StringPtrInput
	SecurityGroupId       pulumi.StringPtrInput
	Self                  pulumi.BoolPtrInput
	SourceSecurityGroupId pulumi.StringPtrInput
	ToPort                pulumi.IntPtrInput
	// Type of rule, ingress (inbound) or egress (outbound).
	Type pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	CidrBlocks            []string `pulumi:"cidrBlocks"`
	Description           *string  `pulumi:"description"`
	FromPort              int      `pulumi:"fromPort"`
	Ipv6CidrBlocks        []string `pulumi:"ipv6CidrBlocks"`
	PrefixListIds         []string `pulumi:"prefixListIds"`
	Protocol              string   `pulumi:"protocol"`
	SecurityGroupId       string   `pulumi:"securityGroupId"`
	Self                  *bool    `pulumi:"self"`
	SourceSecurityGroupId *string  `pulumi:"sourceSecurityGroupId"`
	ToPort                int      `pulumi:"toPort"`
	// Type of rule, ingress (inbound) or egress (outbound).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	CidrBlocks            pulumi.StringArrayInput
	Description           pulumi.StringPtrInput
	FromPort              pulumi.IntInput
	Ipv6CidrBlocks        pulumi.StringArrayInput
	PrefixListIds         pulumi.StringArrayInput
	Protocol              pulumi.StringInput
	SecurityGroupId       pulumi.StringInput
	Self                  pulumi.BoolPtrInput
	SourceSecurityGroupId pulumi.StringPtrInput
	ToPort                pulumi.IntInput
	// Type of rule, ingress (inbound) or egress (outbound).
	Type pulumi.StringInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}
