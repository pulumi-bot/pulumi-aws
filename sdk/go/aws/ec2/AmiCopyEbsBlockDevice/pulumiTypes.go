// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package AmiCopyEbsBlockDevice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AmiCopyEbsBlockDevice struct {
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	DeviceName *string `pulumi:"deviceName"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted *bool `pulumi:"encrypted"`
	Iops *int `pulumi:"iops"`
	SnapshotId *string `pulumi:"snapshotId"`
	VolumeSize *int `pulumi:"volumeSize"`
	VolumeType *string `pulumi:"volumeType"`
}

type AmiCopyEbsBlockDeviceInput interface {
	pulumi.Input

	ToAmiCopyEbsBlockDeviceOutput() AmiCopyEbsBlockDeviceOutput
	ToAmiCopyEbsBlockDeviceOutputWithContext(context.Context) AmiCopyEbsBlockDeviceOutput
}

type AmiCopyEbsBlockDeviceArgs struct {
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (AmiCopyEbsBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmiCopyEbsBlockDevice)(nil)).Elem()
}

func (i AmiCopyEbsBlockDeviceArgs) ToAmiCopyEbsBlockDeviceOutput() AmiCopyEbsBlockDeviceOutput {
	return i.ToAmiCopyEbsBlockDeviceOutputWithContext(context.Background())
}

func (i AmiCopyEbsBlockDeviceArgs) ToAmiCopyEbsBlockDeviceOutputWithContext(ctx context.Context) AmiCopyEbsBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiCopyEbsBlockDeviceOutput)
}

type AmiCopyEbsBlockDeviceArrayInput interface {
	pulumi.Input

	ToAmiCopyEbsBlockDeviceArrayOutput() AmiCopyEbsBlockDeviceArrayOutput
	ToAmiCopyEbsBlockDeviceArrayOutputWithContext(context.Context) AmiCopyEbsBlockDeviceArrayOutput
}

type AmiCopyEbsBlockDeviceArray []AmiCopyEbsBlockDeviceInput

func (AmiCopyEbsBlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmiCopyEbsBlockDevice)(nil)).Elem()
}

func (i AmiCopyEbsBlockDeviceArray) ToAmiCopyEbsBlockDeviceArrayOutput() AmiCopyEbsBlockDeviceArrayOutput {
	return i.ToAmiCopyEbsBlockDeviceArrayOutputWithContext(context.Background())
}

func (i AmiCopyEbsBlockDeviceArray) ToAmiCopyEbsBlockDeviceArrayOutputWithContext(ctx context.Context) AmiCopyEbsBlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiCopyEbsBlockDeviceArrayOutput)
}

type AmiCopyEbsBlockDeviceOutput struct { *pulumi.OutputState }

func (AmiCopyEbsBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmiCopyEbsBlockDevice)(nil)).Elem()
}

func (o AmiCopyEbsBlockDeviceOutput) ToAmiCopyEbsBlockDeviceOutput() AmiCopyEbsBlockDeviceOutput {
	return o
}

func (o AmiCopyEbsBlockDeviceOutput) ToAmiCopyEbsBlockDeviceOutputWithContext(ctx context.Context) AmiCopyEbsBlockDeviceOutput {
	return o
}

func (o AmiCopyEbsBlockDeviceOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

func (o AmiCopyEbsBlockDeviceOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
func (o AmiCopyEbsBlockDeviceOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o AmiCopyEbsBlockDeviceOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o AmiCopyEbsBlockDeviceOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o AmiCopyEbsBlockDeviceOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

func (o AmiCopyEbsBlockDeviceOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v AmiCopyEbsBlockDevice) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type AmiCopyEbsBlockDeviceArrayOutput struct { *pulumi.OutputState}

func (AmiCopyEbsBlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmiCopyEbsBlockDevice)(nil)).Elem()
}

func (o AmiCopyEbsBlockDeviceArrayOutput) ToAmiCopyEbsBlockDeviceArrayOutput() AmiCopyEbsBlockDeviceArrayOutput {
	return o
}

func (o AmiCopyEbsBlockDeviceArrayOutput) ToAmiCopyEbsBlockDeviceArrayOutputWithContext(ctx context.Context) AmiCopyEbsBlockDeviceArrayOutput {
	return o
}

func (o AmiCopyEbsBlockDeviceArrayOutput) Index(i pulumi.IntInput) AmiCopyEbsBlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) AmiCopyEbsBlockDevice {
		return vs[0].([]AmiCopyEbsBlockDevice)[vs[1].(int)]
	}).(AmiCopyEbsBlockDeviceOutput)
}

func init() {
	pulumi.RegisterOutputType(AmiCopyEbsBlockDeviceOutput{})
	pulumi.RegisterOutputType(AmiCopyEbsBlockDeviceArrayOutput{})
}
