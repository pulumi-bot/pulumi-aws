// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	DestinationCidrBlock     pulumi.StringPtrOutput `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock pulumi.StringPtrOutput `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  pulumi.StringOutput    `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      pulumi.StringOutput    `pulumi:"egressOnlyGatewayId"`
	GatewayId                pulumi.StringOutput    `pulumi:"gatewayId"`
	InstanceId               pulumi.StringOutput    `pulumi:"instanceId"`
	InstanceOwnerId          pulumi.StringOutput    `pulumi:"instanceOwnerId"`
	NatGatewayId             pulumi.StringOutput    `pulumi:"natGatewayId"`
	NetworkInterfaceId       pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	Origin                   pulumi.StringOutput    `pulumi:"origin"`
	RouteTableId             pulumi.StringOutput    `pulumi:"routeTableId"`
	State                    pulumi.StringOutput    `pulumi:"state"`
	TransitGatewayId         pulumi.StringPtrOutput `pulumi:"transitGatewayId"`
	VpcPeeringConnectionId   pulumi.StringPtrOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	if args == nil {
		args = &RouteArgs{}
	}
	var resource Route
	err := ctx.RegisterResource("aws:ec2/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:ec2/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	DestinationCidrBlock     *string `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  *string `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      *string `pulumi:"egressOnlyGatewayId"`
	GatewayId                *string `pulumi:"gatewayId"`
	InstanceId               *string `pulumi:"instanceId"`
	InstanceOwnerId          *string `pulumi:"instanceOwnerId"`
	NatGatewayId             *string `pulumi:"natGatewayId"`
	NetworkInterfaceId       *string `pulumi:"networkInterfaceId"`
	Origin                   *string `pulumi:"origin"`
	RouteTableId             *string `pulumi:"routeTableId"`
	State                    *string `pulumi:"state"`
	TransitGatewayId         *string `pulumi:"transitGatewayId"`
	VpcPeeringConnectionId   *string `pulumi:"vpcPeeringConnectionId"`
}

type RouteState struct {
	DestinationCidrBlock     pulumi.StringPtrInput
	DestinationIpv6CidrBlock pulumi.StringPtrInput
	DestinationPrefixListId  pulumi.StringPtrInput
	EgressOnlyGatewayId      pulumi.StringPtrInput
	GatewayId                pulumi.StringPtrInput
	InstanceId               pulumi.StringPtrInput
	InstanceOwnerId          pulumi.StringPtrInput
	NatGatewayId             pulumi.StringPtrInput
	NetworkInterfaceId       pulumi.StringPtrInput
	Origin                   pulumi.StringPtrInput
	RouteTableId             pulumi.StringPtrInput
	State                    pulumi.StringPtrInput
	TransitGatewayId         pulumi.StringPtrInput
	VpcPeeringConnectionId   pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	DestinationCidrBlock     *string `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	EgressOnlyGatewayId      *string `pulumi:"egressOnlyGatewayId"`
	GatewayId                *string `pulumi:"gatewayId"`
	InstanceId               *string `pulumi:"instanceId"`
	NatGatewayId             *string `pulumi:"natGatewayId"`
	NetworkInterfaceId       *string `pulumi:"networkInterfaceId"`
	RouteTableId             string  `pulumi:"routeTableId"`
	TransitGatewayId         *string `pulumi:"transitGatewayId"`
	VpcPeeringConnectionId   *string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	DestinationCidrBlock     pulumi.StringPtrInput
	DestinationIpv6CidrBlock pulumi.StringPtrInput
	EgressOnlyGatewayId      pulumi.StringPtrInput
	GatewayId                pulumi.StringPtrInput
	InstanceId               pulumi.StringPtrInput
	NatGatewayId             pulumi.StringPtrInput
	NetworkInterfaceId       pulumi.StringPtrInput
	RouteTableId             pulumi.StringInput
	TransitGatewayId         pulumi.StringPtrInput
	VpcPeeringConnectionId   pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}
