// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KeyPair struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput    `pulumi:"arn"`
	Fingerprint   pulumi.StringOutput    `pulumi:"fingerprint"`
	KeyName       pulumi.StringOutput    `pulumi:"keyName"`
	KeyNamePrefix pulumi.StringPtrOutput `pulumi:"keyNamePrefix"`
	KeyPairId     pulumi.StringOutput    `pulumi:"keyPairId"`
	PublicKey     pulumi.StringOutput    `pulumi:"publicKey"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil || args.PublicKey == nil {
		return nil, errors.New("missing required argument 'PublicKey'")
	}
	if args == nil {
		args = &KeyPairArgs{}
	}
	var resource KeyPair
	err := ctx.RegisterResource("aws:ec2/keyPair:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("aws:ec2/keyPair:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
	Arn           *string           `pulumi:"arn"`
	Fingerprint   *string           `pulumi:"fingerprint"`
	KeyName       *string           `pulumi:"keyName"`
	KeyNamePrefix *string           `pulumi:"keyNamePrefix"`
	KeyPairId     *string           `pulumi:"keyPairId"`
	PublicKey     *string           `pulumi:"publicKey"`
	Tags          map[string]string `pulumi:"tags"`
}

type KeyPairState struct {
	Arn           pulumi.StringPtrInput
	Fingerprint   pulumi.StringPtrInput
	KeyName       pulumi.StringPtrInput
	KeyNamePrefix pulumi.StringPtrInput
	KeyPairId     pulumi.StringPtrInput
	PublicKey     pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
	KeyName       *string           `pulumi:"keyName"`
	KeyNamePrefix *string           `pulumi:"keyNamePrefix"`
	PublicKey     string            `pulumi:"publicKey"`
	Tags          map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
	KeyName       pulumi.StringPtrInput
	KeyNamePrefix pulumi.StringPtrInput
	PublicKey     pulumi.StringInput
	Tags          pulumi.StringMapInput
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}
