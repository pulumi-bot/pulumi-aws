// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput    `pulumi:"arn"`
	Description           pulumi.StringPtrOutput `pulumi:"description"`
	NetworkInterfaceId    pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	PacketLength          pulumi.IntPtrOutput    `pulumi:"packetLength"`
	SessionNumber         pulumi.IntOutput       `pulumi:"sessionNumber"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
	TrafficMirrorFilterId pulumi.StringOutput    `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId pulumi.StringOutput    `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      pulumi.IntOutput       `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	if args == nil || args.SessionNumber == nil {
		return nil, errors.New("missing required argument 'SessionNumber'")
	}
	if args == nil || args.TrafficMirrorFilterId == nil {
		return nil, errors.New("missing required argument 'TrafficMirrorFilterId'")
	}
	if args == nil || args.TrafficMirrorTargetId == nil {
		return nil, errors.New("missing required argument 'TrafficMirrorTargetId'")
	}
	if args == nil {
		args = &TrafficMirrorSessionArgs{}
	}
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
	Arn                   *string           `pulumi:"arn"`
	Description           *string           `pulumi:"description"`
	NetworkInterfaceId    *string           `pulumi:"networkInterfaceId"`
	PacketLength          *int              `pulumi:"packetLength"`
	SessionNumber         *int              `pulumi:"sessionNumber"`
	Tags                  map[string]string `pulumi:"tags"`
	TrafficMirrorFilterId *string           `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId *string           `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      *int              `pulumi:"virtualNetworkId"`
}

type TrafficMirrorSessionState struct {
	Arn                   pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	NetworkInterfaceId    pulumi.StringPtrInput
	PacketLength          pulumi.IntPtrInput
	SessionNumber         pulumi.IntPtrInput
	Tags                  pulumi.StringMapInput
	TrafficMirrorFilterId pulumi.StringPtrInput
	TrafficMirrorTargetId pulumi.StringPtrInput
	VirtualNetworkId      pulumi.IntPtrInput
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	Description           *string           `pulumi:"description"`
	NetworkInterfaceId    string            `pulumi:"networkInterfaceId"`
	PacketLength          *int              `pulumi:"packetLength"`
	SessionNumber         int               `pulumi:"sessionNumber"`
	Tags                  map[string]string `pulumi:"tags"`
	TrafficMirrorFilterId string            `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId string            `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      *int              `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	Description           pulumi.StringPtrInput
	NetworkInterfaceId    pulumi.StringInput
	PacketLength          pulumi.IntPtrInput
	SessionNumber         pulumi.IntInput
	Tags                  pulumi.StringMapInput
	TrafficMirrorFilterId pulumi.StringInput
	TrafficMirrorTargetId pulumi.StringInput
	VirtualNetworkId      pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}
