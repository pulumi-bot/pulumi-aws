// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package getVpcsFilter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GetVpcsFilter struct {
	// The name of the field to filter by, as defined by
	// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	// A VPC will be selected if any one of the given values matches.
	Values []string `pulumi:"values"`
}

type GetVpcsFilterInput interface {
	pulumi.Input

	ToGetVpcsFilterOutput() GetVpcsFilterOutput
	ToGetVpcsFilterOutputWithContext(context.Context) GetVpcsFilterOutput
}

type GetVpcsFilterArgs struct {
	// The name of the field to filter by, as defined by
	// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
	Name pulumi.StringInput `pulumi:"name"`
	// Set of values that are accepted for the given field.
	// A VPC will be selected if any one of the given values matches.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetVpcsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsFilter)(nil)).Elem()
}

func (i GetVpcsFilterArgs) ToGetVpcsFilterOutput() GetVpcsFilterOutput {
	return i.ToGetVpcsFilterOutputWithContext(context.Background())
}

func (i GetVpcsFilterArgs) ToGetVpcsFilterOutputWithContext(ctx context.Context) GetVpcsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsFilterOutput)
}

type GetVpcsFilterArrayInput interface {
	pulumi.Input

	ToGetVpcsFilterArrayOutput() GetVpcsFilterArrayOutput
	ToGetVpcsFilterArrayOutputWithContext(context.Context) GetVpcsFilterArrayOutput
}

type GetVpcsFilterArray []GetVpcsFilterInput

func (GetVpcsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsFilter)(nil)).Elem()
}

func (i GetVpcsFilterArray) ToGetVpcsFilterArrayOutput() GetVpcsFilterArrayOutput {
	return i.ToGetVpcsFilterArrayOutputWithContext(context.Background())
}

func (i GetVpcsFilterArray) ToGetVpcsFilterArrayOutputWithContext(ctx context.Context) GetVpcsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcsFilterArrayOutput)
}

type GetVpcsFilterOutput struct { *pulumi.OutputState }

func (GetVpcsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsFilter)(nil)).Elem()
}

func (o GetVpcsFilterOutput) ToGetVpcsFilterOutput() GetVpcsFilterOutput {
	return o
}

func (o GetVpcsFilterOutput) ToGetVpcsFilterOutputWithContext(ctx context.Context) GetVpcsFilterOutput {
	return o
}

// The name of the field to filter by, as defined by
// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
func (o GetVpcsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v GetVpcsFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Set of values that are accepted for the given field.
// A VPC will be selected if any one of the given values matches.
func (o GetVpcsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func (v GetVpcsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetVpcsFilterArrayOutput struct { *pulumi.OutputState}

func (GetVpcsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcsFilter)(nil)).Elem()
}

func (o GetVpcsFilterArrayOutput) ToGetVpcsFilterArrayOutput() GetVpcsFilterArrayOutput {
	return o
}

func (o GetVpcsFilterArrayOutput) ToGetVpcsFilterArrayOutputWithContext(ctx context.Context) GetVpcsFilterArrayOutput {
	return o
}

func (o GetVpcsFilterArrayOutput) Index(i pulumi.IntInput) GetVpcsFilterOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetVpcsFilter {
		return vs[0].([]GetVpcsFilter)[vs[1].(int)]
	}).(GetVpcsFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcsFilterOutput{})
	pulumi.RegisterOutputType(GetVpcsFilterArrayOutput{})
}
