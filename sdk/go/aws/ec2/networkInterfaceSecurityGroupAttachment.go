// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NetworkInterfaceSecurityGroupAttachment struct {
	s *pulumi.ResourceState
}

// NewNetworkInterfaceSecurityGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceSecurityGroupAttachment(ctx *pulumi.Context,
	name string, args *NetworkInterfaceSecurityGroupAttachmentArgs, opts ...pulumi.ResourceOpt) (*NetworkInterfaceSecurityGroupAttachment, error) {
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["networkInterfaceId"] = nil
		inputs["securityGroupId"] = nil
	} else {
		inputs["networkInterfaceId"] = args.NetworkInterfaceId
		inputs["securityGroupId"] = args.SecurityGroupId
	}
	s, err := ctx.RegisterResource("aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterfaceSecurityGroupAttachment{s: s}, nil
}

// GetNetworkInterfaceSecurityGroupAttachment gets an existing NetworkInterfaceSecurityGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceSecurityGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkInterfaceSecurityGroupAttachmentState, opts ...pulumi.ResourceOpt) (*NetworkInterfaceSecurityGroupAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["networkInterfaceId"] = state.NetworkInterfaceId
		inputs["securityGroupId"] = state.SecurityGroupId
	}
	s, err := ctx.ReadResource("aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterfaceSecurityGroupAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkInterfaceSecurityGroupAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkInterfaceSecurityGroupAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the network interface to attach to.
func (r *NetworkInterfaceSecurityGroupAttachment) NetworkInterfaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkInterfaceId"])
}

// The ID of the security group.
func (r *NetworkInterfaceSecurityGroupAttachment) SecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityGroupId"])
}

// Input properties used for looking up and filtering NetworkInterfaceSecurityGroupAttachment resources.
type NetworkInterfaceSecurityGroupAttachmentState struct {
	// The ID of the network interface to attach to.
	NetworkInterfaceId interface{}
	// The ID of the security group.
	SecurityGroupId interface{}
}

// The set of arguments for constructing a NetworkInterfaceSecurityGroupAttachment resource.
type NetworkInterfaceSecurityGroupAttachmentArgs struct {
	// The ID of the network interface to attach to.
	NetworkInterfaceId interface{}
	// The ID of the security group.
	SecurityGroupId interface{}
}
