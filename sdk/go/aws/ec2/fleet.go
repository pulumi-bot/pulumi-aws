// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Fleet struct {
	pulumi.CustomResourceState

	ExcessCapacityTerminationPolicy  pulumi.StringPtrOutput                 `pulumi:"excessCapacityTerminationPolicy"`
	LaunchTemplateConfig             FleetLaunchTemplateConfigOutput        `pulumi:"launchTemplateConfig"`
	OnDemandOptions                  FleetOnDemandOptionsPtrOutput          `pulumi:"onDemandOptions"`
	ReplaceUnhealthyInstances        pulumi.BoolPtrOutput                   `pulumi:"replaceUnhealthyInstances"`
	SpotOptions                      FleetSpotOptionsPtrOutput              `pulumi:"spotOptions"`
	Tags                             pulumi.StringMapOutput                 `pulumi:"tags"`
	TargetCapacitySpecification      FleetTargetCapacitySpecificationOutput `pulumi:"targetCapacitySpecification"`
	TerminateInstances               pulumi.BoolPtrOutput                   `pulumi:"terminateInstances"`
	TerminateInstancesWithExpiration pulumi.BoolPtrOutput                   `pulumi:"terminateInstancesWithExpiration"`
	Type                             pulumi.StringPtrOutput                 `pulumi:"type"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil || args.LaunchTemplateConfig == nil {
		return nil, errors.New("missing required argument 'LaunchTemplateConfig'")
	}
	if args == nil || args.TargetCapacitySpecification == nil {
		return nil, errors.New("missing required argument 'TargetCapacitySpecification'")
	}
	if args == nil {
		args = &FleetArgs{}
	}
	var resource Fleet
	err := ctx.RegisterResource("aws:ec2/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:ec2/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	ExcessCapacityTerminationPolicy  *string                           `pulumi:"excessCapacityTerminationPolicy"`
	LaunchTemplateConfig             *FleetLaunchTemplateConfig        `pulumi:"launchTemplateConfig"`
	OnDemandOptions                  *FleetOnDemandOptions             `pulumi:"onDemandOptions"`
	ReplaceUnhealthyInstances        *bool                             `pulumi:"replaceUnhealthyInstances"`
	SpotOptions                      *FleetSpotOptions                 `pulumi:"spotOptions"`
	Tags                             map[string]string                 `pulumi:"tags"`
	TargetCapacitySpecification      *FleetTargetCapacitySpecification `pulumi:"targetCapacitySpecification"`
	TerminateInstances               *bool                             `pulumi:"terminateInstances"`
	TerminateInstancesWithExpiration *bool                             `pulumi:"terminateInstancesWithExpiration"`
	Type                             *string                           `pulumi:"type"`
}

type FleetState struct {
	ExcessCapacityTerminationPolicy  pulumi.StringPtrInput
	LaunchTemplateConfig             FleetLaunchTemplateConfigPtrInput
	OnDemandOptions                  FleetOnDemandOptionsPtrInput
	ReplaceUnhealthyInstances        pulumi.BoolPtrInput
	SpotOptions                      FleetSpotOptionsPtrInput
	Tags                             pulumi.StringMapInput
	TargetCapacitySpecification      FleetTargetCapacitySpecificationPtrInput
	TerminateInstances               pulumi.BoolPtrInput
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	Type                             pulumi.StringPtrInput
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	ExcessCapacityTerminationPolicy  *string                          `pulumi:"excessCapacityTerminationPolicy"`
	LaunchTemplateConfig             FleetLaunchTemplateConfig        `pulumi:"launchTemplateConfig"`
	OnDemandOptions                  *FleetOnDemandOptions            `pulumi:"onDemandOptions"`
	ReplaceUnhealthyInstances        *bool                            `pulumi:"replaceUnhealthyInstances"`
	SpotOptions                      *FleetSpotOptions                `pulumi:"spotOptions"`
	Tags                             map[string]string                `pulumi:"tags"`
	TargetCapacitySpecification      FleetTargetCapacitySpecification `pulumi:"targetCapacitySpecification"`
	TerminateInstances               *bool                            `pulumi:"terminateInstances"`
	TerminateInstancesWithExpiration *bool                            `pulumi:"terminateInstancesWithExpiration"`
	Type                             *string                          `pulumi:"type"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	ExcessCapacityTerminationPolicy  pulumi.StringPtrInput
	LaunchTemplateConfig             FleetLaunchTemplateConfigInput
	OnDemandOptions                  FleetOnDemandOptionsPtrInput
	ReplaceUnhealthyInstances        pulumi.BoolPtrInput
	SpotOptions                      FleetSpotOptionsPtrInput
	Tags                             pulumi.StringMapInput
	TargetCapacitySpecification      FleetTargetCapacitySpecificationInput
	TerminateInstances               pulumi.BoolPtrInput
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	Type                             pulumi.StringPtrInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}
