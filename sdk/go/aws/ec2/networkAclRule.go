// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NetworkAclRule struct {
	pulumi.CustomResourceState

	CidrBlock     pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	Egress        pulumi.BoolPtrOutput   `pulumi:"egress"`
	FromPort      pulumi.IntPtrOutput    `pulumi:"fromPort"`
	IcmpCode      pulumi.StringPtrOutput `pulumi:"icmpCode"`
	IcmpType      pulumi.StringPtrOutput `pulumi:"icmpType"`
	Ipv6CidrBlock pulumi.StringPtrOutput `pulumi:"ipv6CidrBlock"`
	NetworkAclId  pulumi.StringOutput    `pulumi:"networkAclId"`
	Protocol      pulumi.StringOutput    `pulumi:"protocol"`
	RuleAction    pulumi.StringOutput    `pulumi:"ruleAction"`
	RuleNumber    pulumi.IntOutput       `pulumi:"ruleNumber"`
	ToPort        pulumi.IntPtrOutput    `pulumi:"toPort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil || args.NetworkAclId == nil {
		return nil, errors.New("missing required argument 'NetworkAclId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.RuleAction == nil {
		return nil, errors.New("missing required argument 'RuleAction'")
	}
	if args == nil || args.RuleNumber == nil {
		return nil, errors.New("missing required argument 'RuleNumber'")
	}
	if args == nil {
		args = &NetworkAclRuleArgs{}
	}
	var resource NetworkAclRule
	err := ctx.RegisterResource("aws:ec2/networkAclRule:NetworkAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	var resource NetworkAclRule
	err := ctx.ReadResource("aws:ec2/networkAclRule:NetworkAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type networkAclRuleState struct {
	CidrBlock     *string `pulumi:"cidrBlock"`
	Egress        *bool   `pulumi:"egress"`
	FromPort      *int    `pulumi:"fromPort"`
	IcmpCode      *string `pulumi:"icmpCode"`
	IcmpType      *string `pulumi:"icmpType"`
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	NetworkAclId  *string `pulumi:"networkAclId"`
	Protocol      *string `pulumi:"protocol"`
	RuleAction    *string `pulumi:"ruleAction"`
	RuleNumber    *int    `pulumi:"ruleNumber"`
	ToPort        *int    `pulumi:"toPort"`
}

type NetworkAclRuleState struct {
	CidrBlock     pulumi.StringPtrInput
	Egress        pulumi.BoolPtrInput
	FromPort      pulumi.IntPtrInput
	IcmpCode      pulumi.StringPtrInput
	IcmpType      pulumi.StringPtrInput
	Ipv6CidrBlock pulumi.StringPtrInput
	NetworkAclId  pulumi.StringPtrInput
	Protocol      pulumi.StringPtrInput
	RuleAction    pulumi.StringPtrInput
	RuleNumber    pulumi.IntPtrInput
	ToPort        pulumi.IntPtrInput
}

func (NetworkAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleState)(nil)).Elem()
}

type networkAclRuleArgs struct {
	CidrBlock     *string `pulumi:"cidrBlock"`
	Egress        *bool   `pulumi:"egress"`
	FromPort      *int    `pulumi:"fromPort"`
	IcmpCode      *string `pulumi:"icmpCode"`
	IcmpType      *string `pulumi:"icmpType"`
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	NetworkAclId  string  `pulumi:"networkAclId"`
	Protocol      string  `pulumi:"protocol"`
	RuleAction    string  `pulumi:"ruleAction"`
	RuleNumber    int     `pulumi:"ruleNumber"`
	ToPort        *int    `pulumi:"toPort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	CidrBlock     pulumi.StringPtrInput
	Egress        pulumi.BoolPtrInput
	FromPort      pulumi.IntPtrInput
	IcmpCode      pulumi.StringPtrInput
	IcmpType      pulumi.StringPtrInput
	Ipv6CidrBlock pulumi.StringPtrInput
	NetworkAclId  pulumi.StringInput
	Protocol      pulumi.StringInput
	RuleAction    pulumi.StringInput
	RuleNumber    pulumi.IntInput
	ToPort        pulumi.IntPtrInput
}

func (NetworkAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleArgs)(nil)).Elem()
}
