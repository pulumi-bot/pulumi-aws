// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	AcceptStatus pulumi.StringOutput                    `pulumi:"acceptStatus"`
	Accepter     VpcPeeringConnectionAccepterTypeOutput `pulumi:"accepter"`
	AutoAccept   pulumi.BoolPtrOutput                   `pulumi:"autoAccept"`
	PeerOwnerId  pulumi.StringOutput                    `pulumi:"peerOwnerId"`
	PeerRegion   pulumi.StringOutput                    `pulumi:"peerRegion"`
	PeerVpcId    pulumi.StringOutput                    `pulumi:"peerVpcId"`
	Requester    VpcPeeringConnectionRequesterOutput    `pulumi:"requester"`
	Tags         pulumi.StringMapOutput                 `pulumi:"tags"`
	VpcId        pulumi.StringOutput                    `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil || args.PeerVpcId == nil {
		return nil, errors.New("missing required argument 'PeerVpcId'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	if args == nil {
		args = &VpcPeeringConnectionArgs{}
	}
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type vpcPeeringConnectionState struct {
	AcceptStatus *string                           `pulumi:"acceptStatus"`
	Accepter     *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	AutoAccept   *bool                             `pulumi:"autoAccept"`
	PeerOwnerId  *string                           `pulumi:"peerOwnerId"`
	PeerRegion   *string                           `pulumi:"peerRegion"`
	PeerVpcId    *string                           `pulumi:"peerVpcId"`
	Requester    *VpcPeeringConnectionRequester    `pulumi:"requester"`
	Tags         map[string]string                 `pulumi:"tags"`
	VpcId        *string                           `pulumi:"vpcId"`
}

type VpcPeeringConnectionState struct {
	AcceptStatus pulumi.StringPtrInput
	Accepter     VpcPeeringConnectionAccepterTypePtrInput
	AutoAccept   pulumi.BoolPtrInput
	PeerOwnerId  pulumi.StringPtrInput
	PeerRegion   pulumi.StringPtrInput
	PeerVpcId    pulumi.StringPtrInput
	Requester    VpcPeeringConnectionRequesterPtrInput
	Tags         pulumi.StringMapInput
	VpcId        pulumi.StringPtrInput
}

func (VpcPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionState)(nil)).Elem()
}

type vpcPeeringConnectionArgs struct {
	Accepter    *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	AutoAccept  *bool                             `pulumi:"autoAccept"`
	PeerOwnerId *string                           `pulumi:"peerOwnerId"`
	PeerRegion  *string                           `pulumi:"peerRegion"`
	PeerVpcId   string                            `pulumi:"peerVpcId"`
	Requester   *VpcPeeringConnectionRequester    `pulumi:"requester"`
	Tags        map[string]string                 `pulumi:"tags"`
	VpcId       string                            `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	Accepter    VpcPeeringConnectionAccepterTypePtrInput
	AutoAccept  pulumi.BoolPtrInput
	PeerOwnerId pulumi.StringPtrInput
	PeerRegion  pulumi.StringPtrInput
	PeerVpcId   pulumi.StringInput
	Requester   VpcPeeringConnectionRequesterPtrInput
	Tags        pulumi.StringMapInput
	VpcId       pulumi.StringInput
}

func (VpcPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionArgs)(nil)).Elem()
}
