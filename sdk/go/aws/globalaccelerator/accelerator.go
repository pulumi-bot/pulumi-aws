// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Accelerator struct {
	pulumi.CustomResourceState

	Attributes    AcceleratorAttributesPtrOutput `pulumi:"attributes"`
	DnsName       pulumi.StringOutput            `pulumi:"dnsName"`
	Enabled       pulumi.BoolPtrOutput           `pulumi:"enabled"`
	HostedZoneId  pulumi.StringOutput            `pulumi:"hostedZoneId"`
	IpAddressType pulumi.StringPtrOutput         `pulumi:"ipAddressType"`
	IpSets        AcceleratorIpSetArrayOutput    `pulumi:"ipSets"`
	Name          pulumi.StringOutput            `pulumi:"name"`
	Tags          pulumi.StringMapOutput         `pulumi:"tags"`
}

// NewAccelerator registers a new resource with the given unique name, arguments, and options.
func NewAccelerator(ctx *pulumi.Context,
	name string, args *AcceleratorArgs, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	if args == nil {
		args = &AcceleratorArgs{}
	}
	var resource Accelerator
	err := ctx.RegisterResource("aws:globalaccelerator/accelerator:Accelerator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccelerator gets an existing Accelerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccelerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcceleratorState, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	var resource Accelerator
	err := ctx.ReadResource("aws:globalaccelerator/accelerator:Accelerator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accelerator resources.
type acceleratorState struct {
	Attributes    *AcceleratorAttributes `pulumi:"attributes"`
	DnsName       *string                `pulumi:"dnsName"`
	Enabled       *bool                  `pulumi:"enabled"`
	HostedZoneId  *string                `pulumi:"hostedZoneId"`
	IpAddressType *string                `pulumi:"ipAddressType"`
	IpSets        []AcceleratorIpSet     `pulumi:"ipSets"`
	Name          *string                `pulumi:"name"`
	Tags          map[string]string      `pulumi:"tags"`
}

type AcceleratorState struct {
	Attributes    AcceleratorAttributesPtrInput
	DnsName       pulumi.StringPtrInput
	Enabled       pulumi.BoolPtrInput
	HostedZoneId  pulumi.StringPtrInput
	IpAddressType pulumi.StringPtrInput
	IpSets        AcceleratorIpSetArrayInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (AcceleratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorState)(nil)).Elem()
}

type acceleratorArgs struct {
	Attributes    *AcceleratorAttributes `pulumi:"attributes"`
	Enabled       *bool                  `pulumi:"enabled"`
	IpAddressType *string                `pulumi:"ipAddressType"`
	Name          *string                `pulumi:"name"`
	Tags          map[string]string      `pulumi:"tags"`
}

// The set of arguments for constructing a Accelerator resource.
type AcceleratorArgs struct {
	Attributes    AcceleratorAttributesPtrInput
	Enabled       pulumi.BoolPtrInput
	IpAddressType pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (AcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorArgs)(nil)).Elem()
}
