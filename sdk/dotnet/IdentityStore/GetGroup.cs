// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.IdentityStore
{
    public static class GetGroup
    {
        /// <summary>
        /// Use this data source to get an Identity Store Group.
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("aws:identitystore/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithVersion());

        public static Output<GetGroupResult> Invoke(GetGroupOutputArgs args, InvokeOptions? options = null)
        {
            return Pulumi.Output.All(
                args.Filters.ToList().Box(),
                args.GroupId.Box(),
                args.IdentityStoreId.Box()
            ).Apply(a => {
                    var args = new GetGroupArgs();
                    a[0].Set(args, nameof(args.Filters));
                    a[1].Set(args, nameof(args.GroupId));
                    a[2].Set(args, nameof(args.IdentityStoreId));
                    return InvokeAsync(args, options);
            });
        }
    }


    public sealed class GetGroupArgs : Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private List<Inputs.GetGroupFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Currently, the AWS Identity Store API supports only 1 filter. Detailed below.
        /// </summary>
        public List<Inputs.GetGroupFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetGroupFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The identifier for a group in the Identity Store.
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// The Identity Store ID associated with the Single Sign-On Instance.
        /// </summary>
        [Input("identityStoreId", required: true)]
        public string IdentityStoreId { get; set; } = null!;

        public GetGroupArgs()
        {
        }
    }

    public sealed class GetGroupOutputArgs
    {
        [Input("filters", required: true)]
        private InputList<Inputs.GetGroupFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Currently, the AWS Identity Store API supports only 1 filter. Detailed below.
        /// </summary>
        public InputList<Inputs.GetGroupFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetGroupFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The identifier for a group in the Identity Store.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The Identity Store ID associated with the Single Sign-On Instance.
        /// </summary>
        [Input("identityStoreId", required: true)]
        public Input<string> IdentityStoreId { get; set; } = null!;

        public GetGroupOutputArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        /// <summary>
        /// The group's display name value.
        /// </summary>
        public readonly string DisplayName;
        public readonly ImmutableArray<Outputs.GetGroupFilterResult> Filters;
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdentityStoreId;

        [OutputConstructor]
        private GetGroupResult(
            string displayName,

            ImmutableArray<Outputs.GetGroupFilterResult> filters,

            string groupId,

            string id,

            string identityStoreId)
        {
            DisplayName = displayName;
            Filters = filters;
            GroupId = groupId;
            Id = id;
            IdentityStoreId = identityStoreId;
        }
    }
}
