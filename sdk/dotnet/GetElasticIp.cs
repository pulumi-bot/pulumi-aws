// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws
{
    public static class GetElasticIp
    {
        public static Task<GetElasticIpResult> InvokeAsync(GetElasticIpArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetElasticIpResult>("aws:index/getElasticIp:getElasticIp", args ?? new GetElasticIpArgs(), options.WithVersion());
    }


    public sealed class GetElasticIpArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetElasticIpFilterArgs>? _filters;
        public List<Inputs.GetElasticIpFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetElasticIpFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("publicIp")]
        public string? PublicIp { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetElasticIpArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetElasticIpResult
    {
        public readonly string AssociationId;
        public readonly string CustomerOwnedIp;
        public readonly string CustomerOwnedIpv4Pool;
        public readonly string Domain;
        public readonly ImmutableArray<Outputs.GetElasticIpFilterResult> Filters;
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string NetworkInterfaceId;
        public readonly string NetworkInterfaceOwnerId;
        public readonly string PrivateDns;
        public readonly string PrivateIp;
        public readonly string PublicDns;
        public readonly string PublicIp;
        public readonly string PublicIpv4Pool;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetElasticIpResult(
            string associationId,

            string customerOwnedIp,

            string customerOwnedIpv4Pool,

            string domain,

            ImmutableArray<Outputs.GetElasticIpFilterResult> filters,

            string id,

            string instanceId,

            string networkInterfaceId,

            string networkInterfaceOwnerId,

            string privateDns,

            string privateIp,

            string publicDns,

            string publicIp,

            string publicIpv4Pool,

            ImmutableDictionary<string, string> tags)
        {
            AssociationId = associationId;
            CustomerOwnedIp = customerOwnedIp;
            CustomerOwnedIpv4Pool = customerOwnedIpv4Pool;
            Domain = domain;
            Filters = filters;
            Id = id;
            InstanceId = instanceId;
            NetworkInterfaceId = networkInterfaceId;
            NetworkInterfaceOwnerId = networkInterfaceOwnerId;
            PrivateDns = privateDns;
            PrivateIp = privateIp;
            PublicDns = publicDns;
            PublicIp = publicIp;
            PublicIpv4Pool = publicIpv4Pool;
            Tags = tags;
        }
    }
}
