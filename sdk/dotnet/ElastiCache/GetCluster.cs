// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:elasticache/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithVersion());
    }


    public sealed class GetClusterArgs : Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string Arn;
        public readonly string AvailabilityZone;
        public readonly ImmutableArray<Outputs.GetClusterCacheNodeResult> CacheNodes;
        public readonly string ClusterAddress;
        public readonly string ClusterId;
        public readonly string ConfigurationEndpoint;
        public readonly string Engine;
        public readonly string EngineVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MaintenanceWindow;
        public readonly string NodeType;
        public readonly string NotificationTopicArn;
        public readonly int NumCacheNodes;
        public readonly string ParameterGroupName;
        public readonly int Port;
        public readonly string ReplicationGroupId;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly ImmutableArray<string> SecurityGroupNames;
        public readonly int SnapshotRetentionLimit;
        public readonly string SnapshotWindow;
        public readonly string SubnetGroupName;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetClusterResult(
            string arn,

            string availabilityZone,

            ImmutableArray<Outputs.GetClusterCacheNodeResult> cacheNodes,

            string clusterAddress,

            string clusterId,

            string configurationEndpoint,

            string engine,

            string engineVersion,

            string id,

            string maintenanceWindow,

            string nodeType,

            string notificationTopicArn,

            int numCacheNodes,

            string parameterGroupName,

            int port,

            string replicationGroupId,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> securityGroupNames,

            int snapshotRetentionLimit,

            string snapshotWindow,

            string subnetGroupName,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            AvailabilityZone = availabilityZone;
            CacheNodes = cacheNodes;
            ClusterAddress = clusterAddress;
            ClusterId = clusterId;
            ConfigurationEndpoint = configurationEndpoint;
            Engine = engine;
            EngineVersion = engineVersion;
            Id = id;
            MaintenanceWindow = maintenanceWindow;
            NodeType = nodeType;
            NotificationTopicArn = notificationTopicArn;
            NumCacheNodes = numCacheNodes;
            ParameterGroupName = parameterGroupName;
            Port = port;
            ReplicationGroupId = replicationGroupId;
            SecurityGroupIds = securityGroupIds;
            SecurityGroupNames = securityGroupNames;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            SnapshotWindow = snapshotWindow;
            SubnetGroupName = subnetGroupName;
            Tags = tags;
        }
    }
}
