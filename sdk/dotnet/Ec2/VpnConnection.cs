// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public partial class VpnConnection : Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("customerGatewayConfiguration")]
        public Output<string> CustomerGatewayConfiguration { get; private set; } = null!;

        [Output("customerGatewayId")]
        public Output<string> CustomerGatewayId { get; private set; } = null!;

        [Output("routes")]
        public Output<ImmutableArray<Outputs.VpnConnectionRoute>> Routes { get; private set; } = null!;

        [Output("staticRoutesOnly")]
        public Output<bool> StaticRoutesOnly { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("transitGatewayAttachmentId")]
        public Output<string> TransitGatewayAttachmentId { get; private set; } = null!;

        [Output("transitGatewayId")]
        public Output<string?> TransitGatewayId { get; private set; } = null!;

        [Output("tunnel1Address")]
        public Output<string> Tunnel1Address { get; private set; } = null!;

        [Output("tunnel1BgpAsn")]
        public Output<string> Tunnel1BgpAsn { get; private set; } = null!;

        [Output("tunnel1BgpHoldtime")]
        public Output<int> Tunnel1BgpHoldtime { get; private set; } = null!;

        [Output("tunnel1CgwInsideAddress")]
        public Output<string> Tunnel1CgwInsideAddress { get; private set; } = null!;

        [Output("tunnel1InsideCidr")]
        public Output<string> Tunnel1InsideCidr { get; private set; } = null!;

        [Output("tunnel1PresharedKey")]
        public Output<string> Tunnel1PresharedKey { get; private set; } = null!;

        [Output("tunnel1VgwInsideAddress")]
        public Output<string> Tunnel1VgwInsideAddress { get; private set; } = null!;

        [Output("tunnel2Address")]
        public Output<string> Tunnel2Address { get; private set; } = null!;

        [Output("tunnel2BgpAsn")]
        public Output<string> Tunnel2BgpAsn { get; private set; } = null!;

        [Output("tunnel2BgpHoldtime")]
        public Output<int> Tunnel2BgpHoldtime { get; private set; } = null!;

        [Output("tunnel2CgwInsideAddress")]
        public Output<string> Tunnel2CgwInsideAddress { get; private set; } = null!;

        [Output("tunnel2InsideCidr")]
        public Output<string> Tunnel2InsideCidr { get; private set; } = null!;

        [Output("tunnel2PresharedKey")]
        public Output<string> Tunnel2PresharedKey { get; private set; } = null!;

        [Output("tunnel2VgwInsideAddress")]
        public Output<string> Tunnel2VgwInsideAddress { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("vgwTelemetries")]
        public Output<ImmutableArray<Outputs.VpnConnectionVgwTelemetry>> VgwTelemetries { get; private set; } = null!;

        [Output("vpnGatewayId")]
        public Output<string?> VpnGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnConnection(string name, VpnConnectionArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnection:VpnConnection", name, args ?? new VpnConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnConnection(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnection:VpnConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnConnection Get(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnConnection(name, id, state, options);
        }
    }

    public sealed class VpnConnectionArgs : Pulumi.ResourceArgs
    {
        [Input("customerGatewayId", required: true)]
        public Input<string> CustomerGatewayId { get; set; } = null!;

        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        [Input("tunnel1InsideCidr")]
        public Input<string>? Tunnel1InsideCidr { get; set; }

        [Input("tunnel1PresharedKey")]
        public Input<string>? Tunnel1PresharedKey { get; set; }

        [Input("tunnel2InsideCidr")]
        public Input<string>? Tunnel2InsideCidr { get; set; }

        [Input("tunnel2PresharedKey")]
        public Input<string>? Tunnel2PresharedKey { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public VpnConnectionArgs()
        {
        }
    }

    public sealed class VpnConnectionState : Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("customerGatewayConfiguration")]
        public Input<string>? CustomerGatewayConfiguration { get; set; }

        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        [Input("routes")]
        private InputList<Inputs.VpnConnectionRouteGetArgs>? _routes;
        public InputList<Inputs.VpnConnectionRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VpnConnectionRouteGetArgs>());
            set => _routes = value;
        }

        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transitGatewayAttachmentId")]
        public Input<string>? TransitGatewayAttachmentId { get; set; }

        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        [Input("tunnel1Address")]
        public Input<string>? Tunnel1Address { get; set; }

        [Input("tunnel1BgpAsn")]
        public Input<string>? Tunnel1BgpAsn { get; set; }

        [Input("tunnel1BgpHoldtime")]
        public Input<int>? Tunnel1BgpHoldtime { get; set; }

        [Input("tunnel1CgwInsideAddress")]
        public Input<string>? Tunnel1CgwInsideAddress { get; set; }

        [Input("tunnel1InsideCidr")]
        public Input<string>? Tunnel1InsideCidr { get; set; }

        [Input("tunnel1PresharedKey")]
        public Input<string>? Tunnel1PresharedKey { get; set; }

        [Input("tunnel1VgwInsideAddress")]
        public Input<string>? Tunnel1VgwInsideAddress { get; set; }

        [Input("tunnel2Address")]
        public Input<string>? Tunnel2Address { get; set; }

        [Input("tunnel2BgpAsn")]
        public Input<string>? Tunnel2BgpAsn { get; set; }

        [Input("tunnel2BgpHoldtime")]
        public Input<int>? Tunnel2BgpHoldtime { get; set; }

        [Input("tunnel2CgwInsideAddress")]
        public Input<string>? Tunnel2CgwInsideAddress { get; set; }

        [Input("tunnel2InsideCidr")]
        public Input<string>? Tunnel2InsideCidr { get; set; }

        [Input("tunnel2PresharedKey")]
        public Input<string>? Tunnel2PresharedKey { get; set; }

        [Input("tunnel2VgwInsideAddress")]
        public Input<string>? Tunnel2VgwInsideAddress { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vgwTelemetries")]
        private InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>? _vgwTelemetries;
        public InputList<Inputs.VpnConnectionVgwTelemetryGetArgs> VgwTelemetries
        {
            get => _vgwTelemetries ?? (_vgwTelemetries = new InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>());
            set => _vgwTelemetries = value;
        }

        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public VpnConnectionState()
        {
        }
    }
}
