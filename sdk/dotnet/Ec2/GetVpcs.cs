// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcs
    {
        /// <summary>
        /// This resource can be useful for getting back a list of VPC Ids for a region.
        /// 
        /// The following example retrieves a list of VPC Ids with a custom tag of `service` set to a value of "production".
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputing all VPC Ids.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooVpcs = Output.Create(Aws.Ec2.GetVpcs.InvokeAsync(new Aws.Ec2.GetVpcsArgs
        ///         {
        ///             Tags = 
        ///             {
        ///                 { "service", "production" },
        ///             },
        ///         }));
        ///         this.Foo = fooVpcs.Apply(fooVpcs =&gt; fooVpcs.Ids);
        ///     }
        /// 
        ///     [Output("foo")]
        ///     public Output&lt;string&gt; Foo { get; set; }
        /// }
        /// ```
        /// 
        /// An example use case would be interpolate the `aws.ec2.getVpcs` output into `count` of an aws.ec2.FlowLog resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var dict = Output.Create(Initialize());
        ///         this.Foo = dict.Apply(dict =&gt; dict["foo"]);
        ///     }
        /// 
        ///     private async Task&lt;IDictionary&lt;string, Output&lt;string&gt;&gt;&gt; Initialize()
        ///     {
        ///         var fooVpcs = await Aws.Ec2.GetVpcs.InvokeAsync();
        ///         var testFlowLog = new List&lt;Aws.Ec2.FlowLog&gt;();
        ///         for (var rangeIndex = 0; rangeIndex &lt; fooVpcs.Ids.Length; rangeIndex++)
        ///         {
        ///             var range = new { Value = rangeIndex };
        ///             testFlowLog.Add(new Aws.Ec2.FlowLog($"testFlowLog-{range.Value}", new Aws.Ec2.FlowLogArgs
        ///             {
        ///                 VpcId = fooVpcs.Ids[range.Value],
        ///             }));
        ///         }
        ///         var foo = fooVpcs.Ids;
        /// 
        ///         return new Dictionary&lt;string, Output&lt;string&gt;&gt;
        ///         {
        ///             { "foo", foo },
        ///         };
        ///     }
        /// 
        ///     [Output("foo")]
        ///     public Output&lt;string&gt; Foo { get; set; }
        /// }
        /// ```
        /// 
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcsResult> InvokeAsync(GetVpcsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcsResult>("aws:ec2/getVpcs:getVpcs", args ?? new GetVpcsArgs(), options.WithVersion());
    }


    public sealed class GetVpcsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpcsFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetVpcsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcsFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A map of tags, each pair of which must exactly match
        /// a pair on the desired vpcs.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        public GetVpcsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpcsResult
    {
        public readonly ImmutableArray<Outputs.GetVpcsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of all the VPC Ids found. This data source will fail if none are found.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, object> Tags;

        [OutputConstructor]
        private GetVpcsResult(
            ImmutableArray<Outputs.GetVpcsFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, object> tags)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
        }
    }
}
