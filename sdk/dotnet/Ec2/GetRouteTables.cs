// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRouteTables
    {
        /// <summary>
        /// This resource can be useful for getting back a list of route table ids to be referenced elsewhere.
        /// </summary>
        public static Task<GetRouteTablesResult> InvokeAsync(GetRouteTablesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouteTablesResult>("aws:ec2/getRouteTables:getRouteTables", args ?? new GetRouteTablesArgs(), options.WithVersion());

        public static Output<GetRouteTablesResult> Apply(GetRouteTablesApplyArgs? args = null, InvokeOptions? options = null)
        {
            args = args ?? new GetRouteTablesApplyArgs();
            return Pulumi.Output.All(
                args.Filters.Box(),
                args.Tags.Box(),
                args.VpcId.Box()
            ).Apply(a => {
                    var args = new GetRouteTablesArgs();
                    a[0].Set(args, nameof(args.Filters));
                    a[1].Set(args, nameof(args.Tags));
                    a[2].Set(args, nameof(args.VpcId));
                    return InvokeAsync(args, options);
            });
        }
    }


    public sealed class GetRouteTablesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRouteTablesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetRouteTablesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTablesFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags, each pair of which must exactly match
        /// a pair on the desired route tables.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID that you want to filter from.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetRouteTablesArgs()
        {
        }
    }

    public sealed class GetRouteTablesApplyArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRouteTablesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetRouteTablesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTablesFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags, each pair of which must exactly match
        /// a pair on the desired route tables.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID that you want to filter from.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetRouteTablesApplyArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouteTablesResult
    {
        public readonly ImmutableArray<Outputs.GetRouteTablesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of all the route table ids found. This data source will fail if none are found.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string? VpcId;

        [OutputConstructor]
        private GetRouteTablesResult(
            ImmutableArray<Outputs.GetRouteTablesFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, string> tags,

            string? vpcId)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
