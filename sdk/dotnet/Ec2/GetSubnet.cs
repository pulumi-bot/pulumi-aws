// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSubnet
    {
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws:ec2/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithVersion());
    }


    public sealed class GetSubnetArgs : Pulumi.InvokeArgs
    {
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        [Input("availabilityZoneId")]
        public string? AvailabilityZoneId { get; set; }

        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        [Input("defaultForAz")]
        public bool? DefaultForAz { get; set; }

        [Input("filters")]
        private List<Inputs.GetSubnetFilterArgs>? _filters;
        public List<Inputs.GetSubnetFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("ipv6CidrBlock")]
        public string? Ipv6CidrBlock { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetSubnetArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        public readonly string Arn;
        public readonly bool AssignIpv6AddressOnCreation;
        public readonly string AvailabilityZone;
        public readonly string AvailabilityZoneId;
        public readonly string CidrBlock;
        public readonly bool DefaultForAz;
        public readonly ImmutableArray<Outputs.GetSubnetFilterResult> Filters;
        public readonly string Id;
        public readonly string Ipv6CidrBlock;
        public readonly string Ipv6CidrBlockAssociationId;
        public readonly bool MapPublicIpOnLaunch;
        public readonly string OutpostArn;
        public readonly string OwnerId;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSubnetResult(
            string arn,

            bool assignIpv6AddressOnCreation,

            string availabilityZone,

            string availabilityZoneId,

            string cidrBlock,

            bool defaultForAz,

            ImmutableArray<Outputs.GetSubnetFilterResult> filters,

            string id,

            string ipv6CidrBlock,

            string ipv6CidrBlockAssociationId,

            bool mapPublicIpOnLaunch,

            string outpostArn,

            string ownerId,

            string state,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            AvailabilityZone = availabilityZone;
            AvailabilityZoneId = availabilityZoneId;
            CidrBlock = cidrBlock;
            DefaultForAz = defaultForAz;
            Filters = filters;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            OutpostArn = outpostArn;
            OwnerId = ownerId;
            State = state;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
