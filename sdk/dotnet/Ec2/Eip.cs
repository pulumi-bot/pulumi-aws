// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public partial class Eip : Pulumi.CustomResource
    {
        [Output("allocationId")]
        public Output<string> AllocationId { get; private set; } = null!;

        [Output("associateWithPrivateIp")]
        public Output<string?> AssociateWithPrivateIp { get; private set; } = null!;

        [Output("associationId")]
        public Output<string> AssociationId { get; private set; } = null!;

        [Output("customerOwnedIp")]
        public Output<string> CustomerOwnedIp { get; private set; } = null!;

        [Output("customerOwnedIpv4Pool")]
        public Output<string?> CustomerOwnedIpv4Pool { get; private set; } = null!;

        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        [Output("networkInterface")]
        public Output<string> NetworkInterface { get; private set; } = null!;

        [Output("privateDns")]
        public Output<string> PrivateDns { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        [Output("publicDns")]
        public Output<string> PublicDns { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        [Output("publicIpv4Pool")]
        public Output<string> PublicIpv4Pool { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("vpc")]
        public Output<bool> Vpc { get; private set; } = null!;


        /// <summary>
        /// Create a Eip resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Eip(string name, EipArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ec2/eip:Eip", name, args ?? new EipArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Eip(string name, Input<string> id, EipState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/eip:Eip", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Eip resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Eip Get(string name, Input<string> id, EipState? state = null, CustomResourceOptions? options = null)
        {
            return new Eip(name, id, state, options);
        }
    }

    public sealed class EipArgs : Pulumi.ResourceArgs
    {
        [Input("associateWithPrivateIp")]
        public Input<string>? AssociateWithPrivateIp { get; set; }

        [Input("customerOwnedIpv4Pool")]
        public Input<string>? CustomerOwnedIpv4Pool { get; set; }

        [Input("instance")]
        public Input<string>? Instance { get; set; }

        [Input("networkInterface")]
        public Input<string>? NetworkInterface { get; set; }

        [Input("publicIpv4Pool")]
        public Input<string>? PublicIpv4Pool { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpc")]
        public Input<bool>? Vpc { get; set; }

        public EipArgs()
        {
        }
    }

    public sealed class EipState : Pulumi.ResourceArgs
    {
        [Input("allocationId")]
        public Input<string>? AllocationId { get; set; }

        [Input("associateWithPrivateIp")]
        public Input<string>? AssociateWithPrivateIp { get; set; }

        [Input("associationId")]
        public Input<string>? AssociationId { get; set; }

        [Input("customerOwnedIp")]
        public Input<string>? CustomerOwnedIp { get; set; }

        [Input("customerOwnedIpv4Pool")]
        public Input<string>? CustomerOwnedIpv4Pool { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("instance")]
        public Input<string>? Instance { get; set; }

        [Input("networkInterface")]
        public Input<string>? NetworkInterface { get; set; }

        [Input("privateDns")]
        public Input<string>? PrivateDns { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("publicDns")]
        public Input<string>? PublicDns { get; set; }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("publicIpv4Pool")]
        public Input<string>? PublicIpv4Pool { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpc")]
        public Input<bool>? Vpc { get; set; }

        public EipState()
        {
        }
    }
}
