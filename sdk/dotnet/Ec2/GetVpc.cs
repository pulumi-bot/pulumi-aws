// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpc
    {
        public static Task<GetVpcResult> InvokeAsync(GetVpcArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcResult>("aws:ec2/getVpc:getVpc", args ?? new GetVpcArgs(), options.WithVersion());
    }


    public sealed class GetVpcArgs : Pulumi.InvokeArgs
    {
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        [Input("default")]
        public bool? Default { get; set; }

        [Input("dhcpOptionsId")]
        public string? DhcpOptionsId { get; set; }

        [Input("filters")]
        private List<Inputs.GetVpcFilterArgs>? _filters;
        public List<Inputs.GetVpcFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVpcArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpcResult
    {
        public readonly string Arn;
        public readonly string CidrBlock;
        public readonly ImmutableArray<Outputs.GetVpcCidrBlockAssociationResult> CidrBlockAssociations;
        public readonly bool Default;
        public readonly string DhcpOptionsId;
        public readonly bool EnableDnsHostnames;
        public readonly bool EnableDnsSupport;
        public readonly ImmutableArray<Outputs.GetVpcFilterResult> Filters;
        public readonly string Id;
        public readonly string InstanceTenancy;
        public readonly string Ipv6AssociationId;
        public readonly string Ipv6CidrBlock;
        public readonly string MainRouteTableId;
        public readonly string OwnerId;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetVpcResult(
            string arn,

            string cidrBlock,

            ImmutableArray<Outputs.GetVpcCidrBlockAssociationResult> cidrBlockAssociations,

            bool @default,

            string dhcpOptionsId,

            bool enableDnsHostnames,

            bool enableDnsSupport,

            ImmutableArray<Outputs.GetVpcFilterResult> filters,

            string id,

            string instanceTenancy,

            string ipv6AssociationId,

            string ipv6CidrBlock,

            string mainRouteTableId,

            string ownerId,

            string state,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            CidrBlock = cidrBlock;
            CidrBlockAssociations = cidrBlockAssociations;
            Default = @default;
            DhcpOptionsId = dhcpOptionsId;
            EnableDnsHostnames = enableDnsHostnames;
            EnableDnsSupport = enableDnsSupport;
            Filters = filters;
            Id = id;
            InstanceTenancy = instanceTenancy;
            Ipv6AssociationId = ipv6AssociationId;
            Ipv6CidrBlock = ipv6CidrBlock;
            MainRouteTableId = mainRouteTableId;
            OwnerId = ownerId;
            State = state;
            Tags = tags;
        }
    }
}
