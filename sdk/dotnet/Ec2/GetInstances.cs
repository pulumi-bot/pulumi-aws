// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetInstances
    {
        /// <summary>
        /// Use this data source to get IDs or IPs of Amazon EC2 instances to be referenced elsewhere,
        /// e.g. to allow easier migration from another management solution
        /// or to make it easier for an operator to connect through bastion host(s).
        /// 
        /// &gt; **Note:** It's strongly discouraged to use this data source for querying ephemeral
        /// instances (e.g. managed via autoscaling group), as the output may change at any time
        /// and you'd need to re-run `apply` every time an instance comes up or dies.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var dict = Output.Create(Initialize());
        ///     }
        /// 
        ///     private async Task&lt;IDictionary&lt;string, Output&lt;string&gt;&gt;&gt; Initialize()
        ///     {
        ///         var testInstances = await Aws.Ec2.GetInstances.InvokeAsync(new Aws.Ec2.GetInstancesArgs
        ///         {
        ///             InstanceTags = 
        ///             {
        ///                 { "Role", "HardWorker" },
        ///             },
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetInstancesFilterArgs
        ///                 {
        ///                     Name = "instance.group-id",
        ///                     Values = 
        ///                     {
        ///                         "sg-12345678",
        ///                     },
        ///                 },
        ///             },
        ///             InstanceStateNames = 
        ///             {
        ///                 "running",
        ///                 "stopped",
        ///             },
        ///         });
        ///         var testEip = new List&lt;Aws.Ec2.Eip&gt;();
        ///         for (var rangeIndex = 0; rangeIndex &lt; testInstances.Ids.Length; rangeIndex++)
        ///         {
        ///             var range = new { Value = rangeIndex };
        ///             testEip.Add(new Aws.Ec2.Eip($"testEip-{range.Value}", new Aws.Ec2.EipArgs
        ///             {
        ///                 Instance = testInstances.Ids[range.Value],
        ///             }));
        ///         }
        /// 
        ///         return new Dictionary&lt;string, Output&lt;string&gt;&gt;
        ///         {
        ///         };
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstancesResult> InvokeAsync(GetInstancesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstancesResult>("aws:ec2/getInstances:getInstances", args ?? new GetInstancesArgs(), options.WithVersion());

        public static Output<GetInstancesResult> Apply(GetInstancesApplyArgs? args = null, InvokeOptions? options = null)
        {
            args = args ?? new GetInstancesApplyArgs();
            return Pulumi.Output.All(
                args.Filters.ToList().Box(),
                args.InstanceStateNames.ToList().Box(),
                args.InstanceTags.ToDict().Box()
            ).Apply(a => {
                    var args = new GetInstancesArgs();
                    a[0].Set(args, nameof(args.Filters));
                    a[1].Set(args, nameof(args.InstanceStateNames));
                    a[2].Set(args, nameof(args.InstanceTags));
                    return InvokeAsync(args, options);
            });
        }
    }


    public sealed class GetInstancesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetInstancesFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to use as filters. There are
        /// several valid keys, for a full reference, check out
        /// [describe-instances in the AWS CLI reference][1].
        /// </summary>
        public List<Inputs.GetInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInstancesFilterArgs>());
            set => _filters = value;
        }

        [Input("instanceStateNames")]
        private List<string>? _instanceStateNames;

        /// <summary>
        /// A list of instance states that should be applicable to the desired instances. The permitted values are: `pending, running, shutting-down, stopped, stopping, terminated`. The default value is `running`.
        /// </summary>
        public List<string> InstanceStateNames
        {
            get => _instanceStateNames ?? (_instanceStateNames = new List<string>());
            set => _instanceStateNames = value;
        }

        [Input("instanceTags")]
        private Dictionary<string, string>? _instanceTags;

        /// <summary>
        /// A map of tags, each pair of which must
        /// exactly match a pair on desired instances.
        /// </summary>
        public Dictionary<string, string> InstanceTags
        {
            get => _instanceTags ?? (_instanceTags = new Dictionary<string, string>());
            set => _instanceTags = value;
        }

        public GetInstancesArgs()
        {
        }
    }

    public sealed class GetInstancesApplyArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetInstancesFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to use as filters. There are
        /// several valid keys, for a full reference, check out
        /// [describe-instances in the AWS CLI reference][1].
        /// </summary>
        public InputList<Inputs.GetInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInstancesFilterArgs>());
            set => _filters = value;
        }

        [Input("instanceStateNames")]
        private InputList<string>? _instanceStateNames;

        /// <summary>
        /// A list of instance states that should be applicable to the desired instances. The permitted values are: `pending, running, shutting-down, stopped, stopping, terminated`. The default value is `running`.
        /// </summary>
        public InputList<string> InstanceStateNames
        {
            get => _instanceStateNames ?? (_instanceStateNames = new InputList<string>());
            set => _instanceStateNames = value;
        }

        [Input("instanceTags")]
        private InputMap<string>? _instanceTags;

        /// <summary>
        /// A map of tags, each pair of which must
        /// exactly match a pair on desired instances.
        /// </summary>
        public InputMap<string> InstanceTags
        {
            get => _instanceTags ?? (_instanceTags = new InputMap<string>());
            set => _instanceTags = value;
        }

        public GetInstancesApplyArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstancesResult
    {
        public readonly ImmutableArray<Outputs.GetInstancesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IDs of instances found through the filter
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> InstanceStateNames;
        public readonly ImmutableDictionary<string, string> InstanceTags;
        /// <summary>
        /// Private IP addresses of instances found through the filter
        /// </summary>
        public readonly ImmutableArray<string> PrivateIps;
        /// <summary>
        /// Public IP addresses of instances found through the filter
        /// </summary>
        public readonly ImmutableArray<string> PublicIps;

        [OutputConstructor]
        private GetInstancesResult(
            ImmutableArray<Outputs.GetInstancesFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> instanceStateNames,

            ImmutableDictionary<string, string> instanceTags,

            ImmutableArray<string> privateIps,

            ImmutableArray<string> publicIps)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            InstanceStateNames = instanceStateNames;
            InstanceTags = instanceTags;
            PrivateIps = privateIps;
            PublicIps = publicIps;
        }
    }
}
