// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSubnetIds
    {
        /// <summary>
        /// `aws.ec2getSubnetIds` provides a set of ids for a vpc_id
        /// 
        /// This resource can be useful for getting back a set of subnet ids for a vpc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputing all cidr blocks for every subnet id in a vpc.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleSubnetIds = Output.Create(Aws.Ec2.GetSubnetIds.InvokeAsync(new Aws.Ec2.GetSubnetIdsArgs
        ///         {
        ///             VpcId = @var.Vpc_id,
        ///         }));
        ///         var exampleSubnet = exampleSubnetIds.Apply(exampleSubnetIds =&gt; "TODO: ForExpression");
        ///         this.SubnetCidrBlocks = "TODO: ForExpression";
        ///     }
        /// 
        ///     [Output("subnetCidrBlocks")]
        ///     public Output&lt;string&gt; SubnetCidrBlocks { get; set; }
        /// }
        /// ```
        /// 
        /// The following example retrieves a set of all subnets in a VPC with a custom
        /// tag of `Tier` set to a value of "Private" so that the `aws.ec2.Instance` resource
        /// can loop through the subnets, putting instances across availability zones.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @private = Output.Create(Aws.Ec2.GetSubnetIds.InvokeAsync(new Aws.Ec2.GetSubnetIdsArgs
        ///         {
        ///             VpcId = @var.Vpc_id,
        ///             Tags = 
        ///             {
        ///                 { "Tier", "Private" },
        ///             },
        ///         }));
        ///         var app = new List&lt;Aws.Ec2.Instance&gt;();
        ///         for (var rangeIndex = 0; rangeIndex &lt; data.Aws_subnet_ids.Example.Ids; rangeIndex++)
        ///         {
        ///             var range = new { Value = rangeIndex };
        ///             app.Add(new Aws.Ec2.Instance($"app-{range.Value}", new Aws.Ec2.InstanceArgs
        ///             {
        ///                 Ami = @var.Ami,
        ///                 InstanceType = "t2.micro",
        ///                 SubnetId = range.Value,
        ///             }));
        ///         }
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubnetIdsResult> InvokeAsync(GetSubnetIdsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubnetIdsResult>("aws:ec2/getSubnetIds:getSubnetIds", args ?? new GetSubnetIdsArgs(), options.WithVersion());
    }


    public sealed class GetSubnetIdsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubnetIdsFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetSubnetIdsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetIdsFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A map of tags, each pair of which must exactly match
        /// a pair on the desired subnets.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID that you want to filter from.
        /// </summary>
        [Input("vpcId", required: true)]
        public string VpcId { get; set; } = null!;

        public GetSubnetIdsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSubnetIdsResult
    {
        public readonly ImmutableArray<Outputs.GetSubnetIdsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of all the subnet ids found. This data source will fail if none are found.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, object> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSubnetIdsResult(
            ImmutableArray<Outputs.GetSubnetIdsFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, object> tags,

            string vpcId)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
