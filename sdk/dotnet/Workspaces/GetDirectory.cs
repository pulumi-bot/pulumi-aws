// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Workspaces
{
    public static class GetDirectory
    {
        public static Task<GetDirectoryResult> InvokeAsync(GetDirectoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("aws:workspaces/getDirectory:getDirectory", args ?? new GetDirectoryArgs(), options.WithVersion());
    }


    public sealed class GetDirectoryArgs : Pulumi.InvokeArgs
    {
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDirectoryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDirectoryResult
    {
        public readonly string Alias;
        public readonly string CustomerUserName;
        public readonly string DirectoryId;
        public readonly string DirectoryName;
        public readonly string DirectoryType;
        public readonly ImmutableArray<string> DnsIpAddresses;
        public readonly string IamRoleId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> IpGroupIds;
        public readonly string RegistrationCode;
        public readonly ImmutableArray<Outputs.GetDirectorySelfServicePermissionResult> SelfServicePermissions;
        public readonly ImmutableArray<string> SubnetIds;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string WorkspaceSecurityGroupId;

        [OutputConstructor]
        private GetDirectoryResult(
            string alias,

            string customerUserName,

            string directoryId,

            string directoryName,

            string directoryType,

            ImmutableArray<string> dnsIpAddresses,

            string iamRoleId,

            string id,

            ImmutableArray<string> ipGroupIds,

            string registrationCode,

            ImmutableArray<Outputs.GetDirectorySelfServicePermissionResult> selfServicePermissions,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string>? tags,

            string workspaceSecurityGroupId)
        {
            Alias = alias;
            CustomerUserName = customerUserName;
            DirectoryId = directoryId;
            DirectoryName = directoryName;
            DirectoryType = directoryType;
            DnsIpAddresses = dnsIpAddresses;
            IamRoleId = iamRoleId;
            Id = id;
            IpGroupIds = ipGroupIds;
            RegistrationCode = registrationCode;
            SelfServicePermissions = selfServicePermissions;
            SubnetIds = subnetIds;
            Tags = tags;
            WorkspaceSecurityGroupId = workspaceSecurityGroupId;
        }
    }
}
