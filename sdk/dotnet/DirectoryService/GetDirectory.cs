// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    public static class GetDirectory
    {
        public static Task<GetDirectoryResult> InvokeAsync(GetDirectoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("aws:directoryservice/getDirectory:getDirectory", args ?? new GetDirectoryArgs(), options.WithVersion());
    }


    public sealed class GetDirectoryArgs : Pulumi.InvokeArgs
    {
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDirectoryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDirectoryResult
    {
        public readonly string AccessUrl;
        public readonly string Alias;
        public readonly ImmutableArray<Outputs.GetDirectoryConnectSettingResult> ConnectSettings;
        public readonly string Description;
        public readonly string DirectoryId;
        public readonly ImmutableArray<string> DnsIpAddresses;
        public readonly string Edition;
        public readonly bool EnableSso;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string SecurityGroupId;
        public readonly string ShortName;
        public readonly string Size;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string Type;
        public readonly ImmutableArray<Outputs.GetDirectoryVpcSettingResult> VpcSettings;

        [OutputConstructor]
        private GetDirectoryResult(
            string accessUrl,

            string alias,

            ImmutableArray<Outputs.GetDirectoryConnectSettingResult> connectSettings,

            string description,

            string directoryId,

            ImmutableArray<string> dnsIpAddresses,

            string edition,

            bool enableSso,

            string id,

            string name,

            string securityGroupId,

            string shortName,

            string size,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.GetDirectoryVpcSettingResult> vpcSettings)
        {
            AccessUrl = accessUrl;
            Alias = alias;
            ConnectSettings = connectSettings;
            Description = description;
            DirectoryId = directoryId;
            DnsIpAddresses = dnsIpAddresses;
            Edition = edition;
            EnableSso = enableSso;
            Id = id;
            Name = name;
            SecurityGroupId = securityGroupId;
            ShortName = shortName;
            Size = size;
            Tags = tags;
            Type = type;
            VpcSettings = vpcSettings;
        }
    }
}
