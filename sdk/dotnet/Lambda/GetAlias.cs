// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    public static class GetAlias
    {
        /// <summary>
        /// Provides information about a Lambda Alias.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var production = Output.Create(Aws.Lambda.GetAlias.InvokeAsync(new Aws.Lambda.GetAliasArgs
        ///         {
        ///             FunctionName = "my-lambda-func",
        ///             Name = "production",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAliasResult> InvokeAsync(GetAliasArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAliasResult>("aws:lambda/getAlias:getAlias", args ?? new GetAliasArgs(), options.WithVersion());

        public static Output<GetAliasResult> Apply(GetAliasApplyArgs args, InvokeOptions? options = null)
        {
            return Pulumi.Output.All(
                args.FunctionName.Box(),
                args.Name.Box()
            ).Apply(a => {
                    var args = new GetAliasArgs();
                    a[0].Set(args, nameof(args.FunctionName));
                    a[1].Set(args, nameof(args.Name));
                    return InvokeAsync(args, options);
            });
        }
    }


    public sealed class GetAliasArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the aliased Lambda function.
        /// </summary>
        [Input("functionName", required: true)]
        public string FunctionName { get; set; } = null!;

        /// <summary>
        /// Name of the Lambda alias.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAliasArgs()
        {
        }
    }

    public sealed class GetAliasApplyArgs
    {
        /// <summary>
        /// Name of the aliased Lambda function.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// Name of the Lambda alias.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAliasApplyArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAliasResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) identifying the Lambda function alias.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Description of alias.
        /// </summary>
        public readonly string Description;
        public readonly string FunctionName;
        /// <summary>
        /// Lambda function version which the alias uses.
        /// </summary>
        public readonly string FunctionVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's `uri`.
        /// </summary>
        public readonly string InvokeArn;
        public readonly string Name;

        [OutputConstructor]
        private GetAliasResult(
            string arn,

            string description,

            string functionName,

            string functionVersion,

            string id,

            string invokeArn,

            string name)
        {
            Arn = arn;
            Description = description;
            FunctionName = functionName;
            FunctionVersion = functionVersion;
            Id = id;
            InvokeArn = invokeArn;
            Name = name;
        }
    }
}
