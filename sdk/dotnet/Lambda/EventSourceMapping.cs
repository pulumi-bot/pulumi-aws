// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    public partial class EventSourceMapping : Pulumi.CustomResource
    {
        [Output("batchSize")]
        public Output<int?> BatchSize { get; private set; } = null!;

        [Output("bisectBatchOnFunctionError")]
        public Output<bool?> BisectBatchOnFunctionError { get; private set; } = null!;

        [Output("destinationConfig")]
        public Output<Outputs.EventSourceMappingDestinationConfig?> DestinationConfig { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("eventSourceArn")]
        public Output<string> EventSourceArn { get; private set; } = null!;

        [Output("functionArn")]
        public Output<string> FunctionArn { get; private set; } = null!;

        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        [Output("lastProcessingResult")]
        public Output<string> LastProcessingResult { get; private set; } = null!;

        [Output("maximumBatchingWindowInSeconds")]
        public Output<int?> MaximumBatchingWindowInSeconds { get; private set; } = null!;

        [Output("maximumRecordAgeInSeconds")]
        public Output<int> MaximumRecordAgeInSeconds { get; private set; } = null!;

        [Output("maximumRetryAttempts")]
        public Output<int> MaximumRetryAttempts { get; private set; } = null!;

        [Output("parallelizationFactor")]
        public Output<int> ParallelizationFactor { get; private set; } = null!;

        [Output("startingPosition")]
        public Output<string?> StartingPosition { get; private set; } = null!;

        [Output("startingPositionTimestamp")]
        public Output<string?> StartingPositionTimestamp { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("stateTransitionReason")]
        public Output<string> StateTransitionReason { get; private set; } = null!;

        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a EventSourceMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventSourceMapping(string name, EventSourceMappingArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/eventSourceMapping:EventSourceMapping", name, args ?? new EventSourceMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventSourceMapping(string name, Input<string> id, EventSourceMappingState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/eventSourceMapping:EventSourceMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventSourceMapping Get(string name, Input<string> id, EventSourceMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new EventSourceMapping(name, id, state, options);
        }
    }

    public sealed class EventSourceMappingArgs : Pulumi.ResourceArgs
    {
        [Input("batchSize")]
        public Input<int>? BatchSize { get; set; }

        [Input("bisectBatchOnFunctionError")]
        public Input<bool>? BisectBatchOnFunctionError { get; set; }

        [Input("destinationConfig")]
        public Input<Inputs.EventSourceMappingDestinationConfigArgs>? DestinationConfig { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventSourceArn", required: true)]
        public Input<string> EventSourceArn { get; set; } = null!;

        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        [Input("maximumBatchingWindowInSeconds")]
        public Input<int>? MaximumBatchingWindowInSeconds { get; set; }

        [Input("maximumRecordAgeInSeconds")]
        public Input<int>? MaximumRecordAgeInSeconds { get; set; }

        [Input("maximumRetryAttempts")]
        public Input<int>? MaximumRetryAttempts { get; set; }

        [Input("parallelizationFactor")]
        public Input<int>? ParallelizationFactor { get; set; }

        [Input("startingPosition")]
        public Input<string>? StartingPosition { get; set; }

        [Input("startingPositionTimestamp")]
        public Input<string>? StartingPositionTimestamp { get; set; }

        public EventSourceMappingArgs()
        {
        }
    }

    public sealed class EventSourceMappingState : Pulumi.ResourceArgs
    {
        [Input("batchSize")]
        public Input<int>? BatchSize { get; set; }

        [Input("bisectBatchOnFunctionError")]
        public Input<bool>? BisectBatchOnFunctionError { get; set; }

        [Input("destinationConfig")]
        public Input<Inputs.EventSourceMappingDestinationConfigGetArgs>? DestinationConfig { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventSourceArn")]
        public Input<string>? EventSourceArn { get; set; }

        [Input("functionArn")]
        public Input<string>? FunctionArn { get; set; }

        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        [Input("lastProcessingResult")]
        public Input<string>? LastProcessingResult { get; set; }

        [Input("maximumBatchingWindowInSeconds")]
        public Input<int>? MaximumBatchingWindowInSeconds { get; set; }

        [Input("maximumRecordAgeInSeconds")]
        public Input<int>? MaximumRecordAgeInSeconds { get; set; }

        [Input("maximumRetryAttempts")]
        public Input<int>? MaximumRetryAttempts { get; set; }

        [Input("parallelizationFactor")]
        public Input<int>? ParallelizationFactor { get; set; }

        [Input("startingPosition")]
        public Input<string>? StartingPosition { get; set; }

        [Input("startingPositionTimestamp")]
        public Input<string>? StartingPositionTimestamp { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("stateTransitionReason")]
        public Input<string>? StateTransitionReason { get; set; }

        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public EventSourceMappingState()
        {
        }
    }
}
